{"data":{"allMarkdownRemark":{"nodes":[{"headings":[{"value":"Changelog"},{"value":"0.1.2 (2021-04-23)"},{"value":"Features"},{"value":"0.1.1 (2021-04-15)"},{"value":"Features"},{"value":"Bug Fixes"}],"fields":{"slug":"/changelog/"},"rawMarkdownBody":"# Changelog\n\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n\n### [0.1.2](https://github.com/shdkej/shdkej.github.io/compare/v0.1.1...v0.1.2) (2021-04-23)\n\n\n### Features\n\n* 🎸 update 21-04-23 ([95225c3](https://github.com/shdkej/shdkej.github.io/commit/95225c3fffd7eb30ae2fd5b16d86b85a4129a37c))\n* update 21-04-20 ([3dbb8f1](https://github.com/shdkej/shdkej.github.io/commit/3dbb8f10631082d11bfdf74d55b081971c198645))\n\n### 0.1.1 (2021-04-15)\n\n\n### Features\n\n* 🎸 update 21-04-15 ([51225c5](https://github.com/shdkej/shdkej.github.io/commit/51225c53dfd027d46befb78b39e09588120d0ce2))\n* add `gatsby-image` to starter ([#107](https://github.com/shdkej/shdkej.github.io/issues/107)) ([eb4b328](https://github.com/shdkej/shdkej.github.io/commit/eb4b328fe2f509bba5db0440b67da75773d0638a)), closes [gatsbyjs/gatsby#9158](https://github.com/gatsbyjs/gatsby/issues/9158)\n* ADD adsense script ([e28a2f6](https://github.com/shdkej/shdkej.github.io/commit/e28a2f6c7713903eda5061d3f8ce4248cc4fbc8b))\n* ADD adsense script ([ca15113](https://github.com/shdkej/shdkej.github.io/commit/ca151130c81892f50e7fb6ae5b90dddc9f706119))\n* add an seo component that can be used between pages/templates ([db2fea4](https://github.com/shdkej/shdkej.github.io/commit/db2fea4e762668fa8926730635c1704716d1f1aa))\n* add google adsense, update 11/11 ([c968a0c](https://github.com/shdkej/shdkej.github.io/commit/c968a0cb3f49689867a75f6d366b794013d61e06))\n* ADD kakao adfit ([b69fefb](https://github.com/shdkej/shdkej.github.io/commit/b69fefbf4b41c6dd4896fda3a3cb85b1f0f5ff3d))\n* ADD kakao adfit ([35b3f47](https://github.com/shdkej/shdkej.github.io/commit/35b3f476963a83c2696854769f10b63da4a97857))\n* ADD kakao adfit ([a8bdff2](https://github.com/shdkej/shdkej.github.io/commit/a8bdff2fde8eba9da7d6396ee54bf15bb5bd47a9))\n* add sitemap, google custom search ([90e6fe4](https://github.com/shdkej/shdkej.github.io/commit/90e6fe4107290a7e3d3e4073973ca0a1c6304fc7))\n* add sitemap, google custom search ([5dc7ff5](https://github.com/shdkej/shdkej.github.io/commit/5dc7ff5c54c4d971c1089e93366b108a1ac6e431))\n* add sitemap, google custom search ([8d61758](https://github.com/shdkej/shdkej.github.io/commit/8d61758b964b33afaa5dc794562fc96e8c3ab77c))\n* add sitemap, google custom search ([dac54ef](https://github.com/shdkej/shdkej.github.io/commit/dac54ef7fc3010ffae74fde28cc63f0ee0c66775))\n* add v2 version of the default starter ([#60](https://github.com/shdkej/shdkej.github.io/issues/60)) ([47edd0a](https://github.com/shdkej/shdkej.github.io/commit/47edd0ab0b2d34f6840ce1fd5deeee4e85946459))\n* clear package ([2840499](https://github.com/shdkej/shdkej.github.io/commit/2840499775d4d3b330ce36aa7c8361780b35dc34))\n* test png file ([e9fe279](https://github.com/shdkej/shdkej.github.io/commit/e9fe2799817205ddcc9e18ee33c1eaf4d37431b2))\n* update 20-10-23 ([adb5986](https://github.com/shdkej/shdkej.github.io/commit/adb59865f85a161585b05a49f9db813367adc059))\n* update 20-10-25 ([deace01](https://github.com/shdkej/shdkej.github.io/commit/deace014bb3acd0eadf696b9e4c7a551fac83645))\n* update 20-10-25 ([9390d17](https://github.com/shdkej/shdkej.github.io/commit/9390d17b753c6fbb807c7095fd8842283723c182))\n* update 20-10-25 ([e17769b](https://github.com/shdkej/shdkej.github.io/commit/e17769b7dc0b62908f28f358c4a79d988974f009))\n* update 20-10-26 ([366c652](https://github.com/shdkej/shdkej.github.io/commit/366c6527df67976f79fac9f2f392d5c9b85f4e7f))\n* update 20-10-26 ([3b33032](https://github.com/shdkej/shdkej.github.io/commit/3b330328170af0d9892ff5e7bd0e2dee928ddf3d))\n* update 20-10-26 ([049a1fd](https://github.com/shdkej/shdkej.github.io/commit/049a1fd656c36894fade128ab4e2e33f77390aaf))\n* update 20-10-26 ([7963090](https://github.com/shdkej/shdkej.github.io/commit/7963090261076f71b8b180a28886525243664871))\n* update 20-10-26 ([12adda0](https://github.com/shdkej/shdkej.github.io/commit/12adda019b25760a77f96452f5240ecfbf0f65ca))\n* update 20-11-07 ([7435037](https://github.com/shdkej/shdkej.github.io/commit/7435037b75121274b1e9e5c97807343211ba07a7))\n* update 20-11-07 ([5faa9e7](https://github.com/shdkej/shdkej.github.io/commit/5faa9e7480cc44493854098b5bef0e46f22f3c39))\n* update 20-11-07 ([5092db5](https://github.com/shdkej/shdkej.github.io/commit/5092db595bbfdc6ca8e3e17a11678374c227df48))\n* UPDATE 20-11-22 ([c403012](https://github.com/shdkej/shdkej.github.io/commit/c403012f49cfe218293315acceb2ae2eb9d85d04))\n* UPDATE 20-11-27 ([4246293](https://github.com/shdkej/shdkej.github.io/commit/4246293be1ad4647a2221ff668d81070a17662bc))\n* UPDATE 20-11-27 ([6e1c12a](https://github.com/shdkej/shdkej.github.io/commit/6e1c12a42ff595228322b007c4483a65091c48fa))\n* UPDATE 20-11-28 ([b9c2c15](https://github.com/shdkej/shdkej.github.io/commit/b9c2c15f897a832c1d4aab4a7a79f207e7e7c2bf))\n* UPDATE 20-11-28 ([28e0005](https://github.com/shdkej/shdkej.github.io/commit/28e0005987b5d916967889cf917688c7255d99aa))\n* UPDATE 20-11-28 ([876922f](https://github.com/shdkej/shdkej.github.io/commit/876922fa9cb0ea24716ec822f367f9830902aa57))\n* UPDATE 20-11-29 ([aad5d36](https://github.com/shdkej/shdkej.github.io/commit/aad5d36ee47654078cd9ce2ebe71445b6e8cb85b))\n* UPDATE 20-11-29 ([5f230ee](https://github.com/shdkej/shdkej.github.io/commit/5f230eee4e53fbb220ef745516848715707f2d8f))\n* UPDATE 20-12-02 ([3712e88](https://github.com/shdkej/shdkej.github.io/commit/3712e8831e90d873f500ee322337f27da2244056))\n* UPDATE 20-12-02 ([c279684](https://github.com/shdkej/shdkej.github.io/commit/c279684ede2a1ed82a9b3b5d845f9d2f1b5f7061))\n* UPDATE 20-12-03 ([dc5f9be](https://github.com/shdkej/shdkej.github.io/commit/dc5f9befb37657045003e94fcecb7ab75bd6f32e))\n* UPDATE 20-12-20 ([dc9653f](https://github.com/shdkej/shdkej.github.io/commit/dc9653f4ed94ec251da541f7bad4222d694280f3))\n* UPDATE 20-12-20 ([4758efa](https://github.com/shdkej/shdkej.github.io/commit/4758efa920c0a85cb3e48e6f8032f78b1f1e7531))\n* UPDATE 20-12-20 ([1be777e](https://github.com/shdkej/shdkej.github.io/commit/1be777ed1e745faa80e60759eebea2fe3904e355))\n* UPDATE 20-12-20 ([b1f4250](https://github.com/shdkej/shdkej.github.io/commit/b1f425042ea99f98a2896583e03099e9a3e6302a))\n* UPDATE 21-02-07 ([bbcdd0c](https://github.com/shdkej/shdkej.github.io/commit/bbcdd0c1426dfe9e680d32aa7b69250b9ef37aaf))\n* UPDATE 21-02-07 ([c6b1c9c](https://github.com/shdkej/shdkej.github.io/commit/c6b1c9c0c6e48589bed739fed1a4386c3702eeed))\n* UPDATE 21-02-07 ([de362cd](https://github.com/shdkej/shdkej.github.io/commit/de362cdbdbe8b97cab515a51d5b6369492dc679e))\n* UPDATE 21-02-08 ([091db71](https://github.com/shdkej/shdkej.github.io/commit/091db7198d019ae4c4972bec69e945b970629f55))\n* UPDATE 21-02-09 ([d64c66d](https://github.com/shdkej/shdkej.github.io/commit/d64c66d92bb4244452c32a5adaba390ff846c4f9))\n* UPDATE 21-02-10 ([74f68fe](https://github.com/shdkej/shdkej.github.io/commit/74f68fe9d39ad288901250278ad556faa431c799))\n* UPDATE 21-02-17 ([717d842](https://github.com/shdkej/shdkej.github.io/commit/717d84253cd8df3951897ffd56a4f507c9628a1f))\n* UPDATE 21-02-22 ([6e9fd36](https://github.com/shdkej/shdkej.github.io/commit/6e9fd363c39a3468ca7928587383a49eaf0f38ee))\n* UPDATE 21-02-24 ([401fe7e](https://github.com/shdkej/shdkej.github.io/commit/401fe7e653d8ce7561d1974e2e28a633eef1d306))\n* UPDATE 21-02-24 ([3d10ac1](https://github.com/shdkej/shdkej.github.io/commit/3d10ac1374230d39444f773a416685786b826cfd))\n* UPDATE 21-02-25 ([1ba0e32](https://github.com/shdkej/shdkej.github.io/commit/1ba0e32127caac163083306a828e619dcf16ccbe))\n* UPDATE 21-03-03 ([8eb71ee](https://github.com/shdkej/shdkej.github.io/commit/8eb71ee269775a994a8b8267160034aa638efda5))\n* **gatsby-theme-notes:** Implement initial version of notes theme ([#14066](https://github.com/shdkej/shdkej.github.io/issues/14066)) ([b889bed](https://github.com/shdkej/shdkej.github.io/commit/b889bed4900d87a1c528a276a688050eb71c6c66))\n* update 21-03-30 ([45cbd32](https://github.com/shdkej/shdkej.github.io/commit/45cbd329efa7e922859def98d111b57ada2dd74f))\n* update 21-04-02 ([0bd9beb](https://github.com/shdkej/shdkej.github.io/commit/0bd9beb95506940c9c19f5670a1c9174bcc60928))\n* update 21-04-07 ([e0bd4af](https://github.com/shdkej/shdkej.github.io/commit/e0bd4af6908b349ace288ecd16ef5df0d2aecaa2))\n* **gatsby:** show warning if createPage was called after createPages API finished ([#11883](https://github.com/shdkej/shdkej.github.io/issues/11883)) ([168ead9](https://github.com/shdkej/shdkej.github.io/commit/168ead9b1dbb301c4186b448e6c5964ed2cf9c8a))\n* update 21-04-14 ([95df8e4](https://github.com/shdkej/shdkej.github.io/commit/95df8e438e63d3f098c43648b0acbd68bfa19f80))\n* Update 21/03/24 ([ff55f46](https://github.com/shdkej/shdkej.github.io/commit/ff55f469535e574b5ce55c3fdd01529f9732d8bd))\n* update 210321 ([18a2287](https://github.com/shdkej/shdkej.github.io/commit/18a2287c70b38fb4771770a8541b53abead8c571))\n* update 210323 ([d1cb7cc](https://github.com/shdkej/shdkej.github.io/commit/d1cb7cc28868dfcdde56ec1f2ed6ae114eadd2c6))\n* **showcase:** add Incremental.com.au ([#11729](https://github.com/shdkej/shdkej.github.io/issues/11729)) ([3ac4707](https://github.com/shdkej/shdkej.github.io/commit/3ac47077f3827ecf065dfb5bd807fa947c46f63b))\n* update index with grid ([bc898b5](https://github.com/shdkej/shdkej.github.io/commit/bc898b599ccd4daa8d1155a437ded48ca9bbcfe7))\n* **gatsby:** support symlinked directories ([#15295](https://github.com/shdkej/shdkej.github.io/issues/15295)) ([f0ac513](https://github.com/shdkej/shdkej.github.io/commit/f0ac5138a12b4dbba5b1626d83652362645b9dbc))\n* **gatsby-plugin-netlify:** Allow status codes in redirects ([#11255](https://github.com/shdkej/shdkej.github.io/issues/11255)) ([#11484](https://github.com/shdkej/shdkej.github.io/issues/11484)) ([374fd49](https://github.com/shdkej/shdkej.github.io/commit/374fd496a224db2ec91d2626879cc0ea75432d9b))\n* **gatsby-recipes:** Add Gatsby react helmet recipe ([#23495](https://github.com/shdkej/shdkej.github.io/issues/23495)) ([95a4d12](https://github.com/shdkej/shdkej.github.io/commit/95a4d12f3341460c638dde2fbf13c5f2c9b04cdc))\n* **gatsby-remark-prismjs:** add support for language extensions ([#11932](https://github.com/shdkej/shdkej.github.io/issues/11932)) ([37b1327](https://github.com/shdkej/shdkej.github.io/commit/37b1327bbdf4062dde14a5b5fe806804f9b1cc01))\n* **starter:** expand .gitignore in default starter to ignore… ([#19015](https://github.com/shdkej/shdkej.github.io/issues/19015)) ([df07df7](https://github.com/shdkej/shdkej.github.io/commit/df07df77023ea78e5d3ffdb5076d4c3bd15eb8ca))\n* **starters:** Add .prettierrc to starters ([#11786](https://github.com/shdkej/shdkej.github.io/issues/11786)) ([ed12c53](https://github.com/shdkej/shdkej.github.io/commit/ed12c53e630dd79f0b5e105ff8acfc8072150e2c))\n* **starters:** Add font smoothing ([#11751](https://github.com/shdkej/shdkej.github.io/issues/11751)) ([d78df63](https://github.com/shdkej/shdkej.github.io/commit/d78df634d5c5b2f178ce9545b62dfa87e7662e22))\n* **starters:** add gatsby-starter-santa-fe ([#11554](https://github.com/shdkej/shdkej.github.io/issues/11554)) ([63a0015](https://github.com/shdkej/shdkej.github.io/commit/63a001527b8873b69a7489ee760ec8ed0aac61fc)), closes [#1234](https://github.com/shdkej/shdkej.github.io/issues/1234) [#1234](https://github.com/shdkej/shdkej.github.io/issues/1234) [#1234](https://github.com/shdkej/shdkej.github.io/issues/1234)\n* **starters:** add starter magicsoup.io ([#11670](https://github.com/shdkej/shdkej.github.io/issues/11670)) ([1ef677b](https://github.com/shdkej/shdkej.github.io/commit/1ef677bac83886f28af28da86ad5bd6735a30dc2))\n* **starters:** Added gatsby-starter-developer-blog to starters list ([#11544](https://github.com/shdkej/shdkej.github.io/issues/11544)) ([92d4cd1](https://github.com/shdkej/shdkej.github.io/commit/92d4cd1c32dfdb69d2c46b88de0d652640a476f7))\n* **starters:** enhance proptypes for SEO component ([#12773](https://github.com/shdkej/shdkej.github.io/issues/12773)) ([29efc60](https://github.com/shdkej/shdkej.github.io/commit/29efc609eb4d79124ebd68fc5291675736dcef6c))\n* **starters:** make copyright year dynamic ([#10759](https://github.com/shdkej/shdkej.github.io/issues/10759)) ([fc7e5df](https://github.com/shdkej/shdkej.github.io/commit/fc7e5dfa3283291968518222f0c3fb1669286ab5))\n* **starters:** Update .gitignore in all starters to ignore .env, .env.development, .env.production, etc. ([#18968](https://github.com/shdkej/shdkej.github.io/issues/18968)) ([75768e1](https://github.com/shdkej/shdkej.github.io/commit/75768e1abff9f4ab111602b89012450403df4f61))\n\n\n### Bug Fixes\n\n* Add box.js ([2617127](https://github.com/shdkej/shdkej.github.io/commit/2617127d1cc6ea1b3bdd305d24fc712a73fecc39))\n* check for dirty pages when nodes are deleted (so queries are ru-run and data is removed from pages) ([#11831](https://github.com/shdkej/shdkej.github.io/issues/11831)) ([0826111](https://github.com/shdkej/shdkej.github.io/commit/0826111165ea382c953194362a12b4f8d5d53a55))\n* delete annoying document ([cdc5784](https://github.com/shdkej/shdkej.github.io/commit/cdc5784072b575010a839d73fd617e0040d7da8b))\n* make service worker/pwa opt-in and comment gatsby-plugin-offline ([#113](https://github.com/shdkej/shdkej.github.io/issues/113)) ([3c530b2](https://github.com/shdkej/shdkej.github.io/commit/3c530b288c71c3b44c43a272b22f9e166bb617c1))\n* package-lock.json ([458c7d5](https://github.com/shdkej/shdkej.github.io/commit/458c7d5b472eb0cc75fcc091cceb6b59e289262d))\n* remove comma in package.json ([bd61a8f](https://github.com/shdkej/shdkej.github.io/commit/bd61a8f426d63f3a7cad9324176adcc9913ab56b))\n* remove resume ([08456bc](https://github.com/shdkej/shdkej.github.io/commit/08456bccde5b5032fa655d3df0e24cbbdcc2590d))\n* remove unnecessary fragment ([bbb633b](https://github.com/shdkej/shdkej.github.io/commit/bbb633b7cf29934c897b726be253e9c4d1d36460))\n* remove unnecessary fragment ([0616532](https://github.com/shdkej/shdkej.github.io/commit/0616532494d813453ed59f9e4f32c6d72ba11879))\n* **starters:** update gatsby monorepo ([#14389](https://github.com/shdkej/shdkej.github.io/issues/14389)) ([56aa2d0](https://github.com/shdkej/shdkej.github.io/commit/56aa2d0976632777cbdb25891e78b3dee53e49c7))\n* replaceAll to replace ([4d8b838](https://github.com/shdkej/shdkej.github.io/commit/4d8b838fd09df364888187103eed3ce4605c46b0))\n* **starters:** update dependency gatsby to ^2.5.5 ([#14141](https://github.com/shdkej/shdkej.github.io/issues/14141)) ([d3ac419](https://github.com/shdkej/shdkej.github.io/commit/d3ac419174dc985345e4dde00569442496f86d06))\n* update 404 page ([8448190](https://github.com/shdkej/shdkej.github.io/commit/84481905fa4ecaa2439421a182523933382c925c))\n* update dependencies for security fix ([e28c185](https://github.com/shdkej/shdkej.github.io/commit/e28c1859ab6ed6ecd0e494b0621e2a97bf86572d))\n* update dependency @hapi/joi to ^15.1.1 ([#16796](https://github.com/shdkej/shdkej.github.io/issues/16796)) ([25aad14](https://github.com/shdkej/shdkej.github.io/commit/25aad143b7227c80752b93e6bd593315e60e40c5))\n* update dependency cache-manager to ^2.10.0 ([#16828](https://github.com/shdkej/shdkej.github.io/issues/16828)) ([be7bb7d](https://github.com/shdkej/shdkej.github.io/commit/be7bb7da1b568c0d4cb0c5efee8ca2401516f55d))\n* update dependency gatsby to ^2.13.63 ([#16628](https://github.com/shdkej/shdkej.github.io/issues/16628)) ([fdce826](https://github.com/shdkej/shdkej.github.io/commit/fdce82606792d3f0e2b8e526384a0d202d758a44))\n* update dependency gatsby to ^2.13.66 ([#16685](https://github.com/shdkej/shdkej.github.io/issues/16685)) ([a752c25](https://github.com/shdkej/shdkej.github.io/commit/a752c25a6aae91fbe52224a3b57497f11832756f))\n* update dependency gatsby to ^2.13.68 ([#16749](https://github.com/shdkej/shdkej.github.io/issues/16749)) ([3d7c373](https://github.com/shdkej/shdkej.github.io/commit/3d7c373598f65e00e3f500a8749caf505cbe5f0f))\n* update dependency gatsby to ^2.15.21 ([#17822](https://github.com/shdkej/shdkej.github.io/issues/17822)) ([38cb19b](https://github.com/shdkej/shdkej.github.io/commit/38cb19b6e46605be8c96549b98b0f1c33655a8ae))\n* update dependency gatsby to ^2.15.24 ([#17870](https://github.com/shdkej/shdkej.github.io/issues/17870)) ([14ab8d2](https://github.com/shdkej/shdkej.github.io/commit/14ab8d226738430dd8f836d0a46dbc8dcf1c83ed))\n* update dependency gatsby to ^2.15.25 ([#17889](https://github.com/shdkej/shdkej.github.io/issues/17889)) ([6579845](https://github.com/shdkej/shdkej.github.io/commit/6579845efd0092b8f54284917435b7f57653a688))\n* update dependency gatsby to ^2.15.26 ([#17895](https://github.com/shdkej/shdkej.github.io/issues/17895)) ([4c21031](https://github.com/shdkej/shdkej.github.io/commit/4c21031c5d829615739540a1576ba88429656d72))\n* update dependency gatsby to ^2.16.0 ([#18594](https://github.com/shdkej/shdkej.github.io/issues/18594)) ([17670e6](https://github.com/shdkej/shdkej.github.io/commit/17670e6dc7e3f273cc47733f4636d4937e986132))\n* update dependency gatsby to ^2.16.1 ([#18617](https://github.com/shdkej/shdkej.github.io/issues/18617)) ([5e382aa](https://github.com/shdkej/shdkej.github.io/commit/5e382aa29da826a0462f8e81819c036b1913b935))\n* update dependency gatsby-plugin-manifest to ^2.2.14 ([#17407](https://github.com/shdkej/shdkej.github.io/issues/17407)) ([759d50b](https://github.com/shdkej/shdkej.github.io/commit/759d50bb3e6ecac427cd82550307011607a37e55))\n* update dependency gatsby-plugin-sharp to ^2.2.11 ([#16503](https://github.com/shdkej/shdkej.github.io/issues/16503)) ([faab9be](https://github.com/shdkej/shdkej.github.io/commit/faab9be6bac84f1b3ddccee323a7f96a232aa9d0))\n* update dependency gatsby-source-filesystem to ^2.1.21 ([#17380](https://github.com/shdkej/shdkej.github.io/issues/17380)) ([1251698](https://github.com/shdkej/shdkej.github.io/commit/1251698ea201c6919600b383b0decc75a4ff1e06))\n* update dependency graphql-compose to ^6.3.5 ([#16882](https://github.com/shdkej/shdkej.github.io/issues/16882)) ([b79a075](https://github.com/shdkej/shdkej.github.io/commit/b79a07529ccef32e062b8f31dd09cbeb80bc4c8d))\n* update dependency graphql-request to ^1.8.2 ([#16886](https://github.com/shdkej/shdkej.github.io/issues/16886)) ([ad9994a](https://github.com/shdkej/shdkej.github.io/commit/ad9994a0a7e4771e4d6085c627727899a7171b00))\n* update dependency theme-ui to ^0.2.26 ([#16340](https://github.com/shdkej/shdkej.github.io/issues/16340)) ([f7660d6](https://github.com/shdkej/shdkej.github.io/commit/f7660d6d7d03ae243c7261dcad2b302d62a0125f))\n* update dependency theme-ui to ^0.2.43 ([#18353](https://github.com/shdkej/shdkej.github.io/issues/18353)) ([9644d38](https://github.com/shdkej/shdkej.github.io/commit/9644d387945c76bef29b0f8fa3a6d62b1da24fb9))\n* update dependency webpack-dev-server to ^3.8.1 ([#17669](https://github.com/shdkej/shdkej.github.io/issues/17669)) ([24a12c5](https://github.com/shdkej/shdkej.github.io/commit/24a12c54e739ef869f4c79c71d857f731b4e46f7))\n* update dependency zipkin-transport-http to ^0.19.2 ([#22340](https://github.com/shdkej/shdkej.github.io/issues/22340)) ([945b5fb](https://github.com/shdkej/shdkej.github.io/commit/945b5fb06491331f87376cc23c993f1912f42ac2))\n* update gatsby monorepo ([#15847](https://github.com/shdkej/shdkej.github.io/issues/15847)) ([742c552](https://github.com/shdkej/shdkej.github.io/commit/742c552861a0bf40da41e02e418bb59e74e19275))\n* update gatsby monorepo ([#15941](https://github.com/shdkej/shdkej.github.io/issues/15941)) ([c8b47b9](https://github.com/shdkej/shdkej.github.io/commit/c8b47b9a361a11b9c73f335720e4aefe379e34ce))\n* update gatsby monorepo ([#16029](https://github.com/shdkej/shdkej.github.io/issues/16029)) ([918b191](https://github.com/shdkej/shdkej.github.io/commit/918b1918b76dd97db0c0a7b706d36fcfe4799021))\n* update gatsby monorepo ([#16088](https://github.com/shdkej/shdkej.github.io/issues/16088)) ([d95ff81](https://github.com/shdkej/shdkej.github.io/commit/d95ff81192faf8e9aaa472dcb939e4db9edfb637))\n* update gatsby monorepo ([#16204](https://github.com/shdkej/shdkej.github.io/issues/16204)) ([a1feef9](https://github.com/shdkej/shdkej.github.io/commit/a1feef94b518fe464a444781e6eabdb9a1fbb774))\n* update gatsby monorepo ([#16234](https://github.com/shdkej/shdkej.github.io/issues/16234)) ([2d38c0b](https://github.com/shdkej/shdkej.github.io/commit/2d38c0b544b623b2a17870685cf15d6db3b20aab))\n* update gatsby monorepo ([#16532](https://github.com/shdkej/shdkej.github.io/issues/16532)) ([4fa5c68](https://github.com/shdkej/shdkej.github.io/commit/4fa5c68f2c065cf4bf7020390e784367e473a0fc))\n* update gatsby monorepo ([#16606](https://github.com/shdkej/shdkej.github.io/issues/16606)) ([270ba2c](https://github.com/shdkej/shdkej.github.io/commit/270ba2ce6f57dc09c263b90def0ad4d6af0a8ce9))\n* update gatsby monorepo ([#16639](https://github.com/shdkej/shdkej.github.io/issues/16639)) ([050d489](https://github.com/shdkej/shdkej.github.io/commit/050d4898d45861cd234c7e9a4b41085bae7f3c41))\n* update gatsby monorepo ([#16672](https://github.com/shdkej/shdkej.github.io/issues/16672)) ([541f0eb](https://github.com/shdkej/shdkej.github.io/commit/541f0eb59b7f466b0e00cb5f48d22c28c63a423c))\n* update gatsby monorepo ([#16690](https://github.com/shdkej/shdkej.github.io/issues/16690)) ([a126113](https://github.com/shdkej/shdkej.github.io/commit/a12611391553cec1641f1722540deb8e8f40d579))\n* update gatsby monorepo ([#16757](https://github.com/shdkej/shdkej.github.io/issues/16757)) ([79cc728](https://github.com/shdkej/shdkej.github.io/commit/79cc72857758523b7e91900833a544e6169f3c18))\n* update gatsby monorepo ([#16841](https://github.com/shdkej/shdkej.github.io/issues/16841)) ([c423679](https://github.com/shdkej/shdkej.github.io/commit/c42367978b114e46c8793df14abf1bfc7f00980e))\n* update gatsby monorepo ([#17368](https://github.com/shdkej/shdkej.github.io/issues/17368)) ([651754e](https://github.com/shdkej/shdkej.github.io/commit/651754e3eb97dcaca3caf430f46e6689bd517515))\n* update gatsby monorepo ([#17369](https://github.com/shdkej/shdkej.github.io/issues/17369)) ([236b088](https://github.com/shdkej/shdkej.github.io/commit/236b088902ddff6d56532fc6b4d85f28e42478ff))\n* update gatsby monorepo ([#17416](https://github.com/shdkej/shdkej.github.io/issues/17416)) ([6995b26](https://github.com/shdkej/shdkej.github.io/commit/6995b26d369f9e75b712113a96ac980f0632068d))\n* update gatsby monorepo ([#17431](https://github.com/shdkej/shdkej.github.io/issues/17431)) ([73bc40d](https://github.com/shdkej/shdkej.github.io/commit/73bc40da0166301e896527acb831b2e5040691fd))\n* update gatsby monorepo ([#17496](https://github.com/shdkej/shdkej.github.io/issues/17496)) ([1ee7424](https://github.com/shdkej/shdkej.github.io/commit/1ee7424aff3fcec4540ad601c6b472e99c1c3a35))\n* update gatsby monorepo ([#18305](https://github.com/shdkej/shdkej.github.io/issues/18305)) ([1998ebd](https://github.com/shdkej/shdkej.github.io/commit/1998ebd955503aa46f772efbe501e5e2e569e9af))\n* **starters:** update dependency gatsby to ^2.5.4 ([#14135](https://github.com/shdkej/shdkej.github.io/issues/14135)) ([4a32718](https://github.com/shdkej/shdkej.github.io/commit/4a327186f09a08bd072829ba6e12cb88860dedd5))\n* update gatsby monorepo ([#17510](https://github.com/shdkej/shdkej.github.io/issues/17510)) ([1e91f1e](https://github.com/shdkej/shdkej.github.io/commit/1e91f1ea31489d89dd082fed53b0083a38914a6a))\n* update gatsby monorepo ([#17526](https://github.com/shdkej/shdkej.github.io/issues/17526)) ([a5fdd19](https://github.com/shdkej/shdkej.github.io/commit/a5fdd190a5b51fa2b4406359898c3ace017f9e56))\n* update gatsby monorepo ([#17615](https://github.com/shdkej/shdkej.github.io/issues/17615)) ([bcb1bd9](https://github.com/shdkej/shdkej.github.io/commit/bcb1bd9a6ec9eded68fade400d96bac67d43ec57))\n* update gatsby monorepo ([#17710](https://github.com/shdkej/shdkej.github.io/issues/17710)) ([8af4ba5](https://github.com/shdkej/shdkej.github.io/commit/8af4ba56a924a3e3f6d5a4566a4020cadd411dc4))\n* update gatsby monorepo ([#17724](https://github.com/shdkej/shdkej.github.io/issues/17724)) ([abbb9ff](https://github.com/shdkej/shdkej.github.io/commit/abbb9ffa7acd1ebebae65680ec318bbd4fdac575))\n* update gatsby monorepo ([#17777](https://github.com/shdkej/shdkej.github.io/issues/17777)) ([3135aed](https://github.com/shdkej/shdkej.github.io/commit/3135aed9863de75b68cf92e4e432b68ec7224b40))\n* update gatsby monorepo ([#17839](https://github.com/shdkej/shdkej.github.io/issues/17839)) ([9b4f99c](https://github.com/shdkej/shdkej.github.io/commit/9b4f99c619dd54fbf07c410337bf9855ce001558))\n* update gatsby monorepo ([#17868](https://github.com/shdkej/shdkej.github.io/issues/17868)) ([20d7d9a](https://github.com/shdkej/shdkej.github.io/commit/20d7d9a4859a1b33948d231d0ce41b134a678324))\n* update gatsby monorepo ([#18110](https://github.com/shdkej/shdkej.github.io/issues/18110)) ([615c1bb](https://github.com/shdkej/shdkej.github.io/commit/615c1bb29694a15a51ef800bd5a85ca9fb4ed96c))\n* update gatsby monorepo ([#18316](https://github.com/shdkej/shdkej.github.io/issues/18316)) ([0577858](https://github.com/shdkej/shdkej.github.io/commit/0577858d88a4f08aff12c2f52f7e6d096a18bb24))\n* update gatsby monorepo ([#18454](https://github.com/shdkej/shdkej.github.io/issues/18454)) ([a88175a](https://github.com/shdkej/shdkej.github.io/commit/a88175ab176dca4ba63916ee1ea1dde5cc36a0f0))\n* update gatsby monorepo ([#18522](https://github.com/shdkej/shdkej.github.io/issues/18522)) ([8813c38](https://github.com/shdkej/shdkej.github.io/commit/8813c3896967e17ee70cf1f9c1532676c1634df6))\n* update mdx monorepo to ^1.4.3 ([#17388](https://github.com/shdkej/shdkej.github.io/issues/17388)) ([b22b897](https://github.com/shdkej/shdkej.github.io/commit/b22b89745de46a5f3d9c6e1f14f587145af36d23))\n* update minor updates in packages ([#18875](https://github.com/shdkej/shdkej.github.io/issues/18875)) ([484f977](https://github.com/shdkej/shdkej.github.io/commit/484f9770bc7a6599b9a262b14b4f91233c8ba4ef))\n* update minor updates in packages ([#19086](https://github.com/shdkej/shdkej.github.io/issues/19086)) ([01d082f](https://github.com/shdkej/shdkej.github.io/commit/01d082f3b8c09354a77f94252625da1e49b509bf))\n* update minor updates in packages ([#19087](https://github.com/shdkej/shdkej.github.io/issues/19087)) ([cd09dcc](https://github.com/shdkej/shdkej.github.io/commit/cd09dcc69354a876c741e5c34c3877eca4e71ff5))\n* update minor updates in packages ([#22329](https://github.com/shdkej/shdkej.github.io/issues/22329)) ([f58bf28](https://github.com/shdkej/shdkej.github.io/commit/f58bf28994226d9c68a51ad3e7b2f2544080a76c))\n* Update popup color and position ([7161b46](https://github.com/shdkej/shdkej.github.io/commit/7161b4641c3e2561a9227afd88dbfc36ce2ac81a))\n* update react monorepo to ^16.9.0 ([#16478](https://github.com/shdkej/shdkej.github.io/issues/16478)) ([b9e5ea8](https://github.com/shdkej/shdkej.github.io/commit/b9e5ea89fd43a4bd3eb8d4fba9658d5cc9656376))\n* update starters and examples ([#23450](https://github.com/shdkej/shdkej.github.io/issues/23450)) ([dbcddd0](https://github.com/shdkej/shdkej.github.io/commit/dbcddd0b8b1c859df860fed778f60481ab10dcad))\n* update starters and examples ([#23522](https://github.com/shdkej/shdkej.github.io/issues/23522)) ([cf9d0a3](https://github.com/shdkej/shdkej.github.io/commit/cf9d0a30821f758659c9a06affa79a42f5149ac5))\n* update starters and examples ([#23541](https://github.com/shdkej/shdkej.github.io/issues/23541)) ([322344f](https://github.com/shdkej/shdkej.github.io/commit/322344f4442b6051d32691c3852a0c768a25c2da))\n* update starters and examples ([#23915](https://github.com/shdkej/shdkej.github.io/issues/23915)) ([a05bc75](https://github.com/shdkej/shdkej.github.io/commit/a05bc751bf5fa43016b25dd261f13c9e9d6e0438))\n* update starters and examples ([#24199](https://github.com/shdkej/shdkej.github.io/issues/24199)) ([ddd7a49](https://github.com/shdkej/shdkej.github.io/commit/ddd7a49c62feb4159531acb5938fe92dc831b2fa))\n* **starters:** update gatsby monorepo ([#12712](https://github.com/shdkej/shdkej.github.io/issues/12712)) ([d9dc00c](https://github.com/shdkej/shdkej.github.io/commit/d9dc00c3201711a11d3a142399cae9f4c06cb307))\n* update www ([#23523](https://github.com/shdkej/shdkej.github.io/issues/23523)) ([b133122](https://github.com/shdkej/shdkej.github.io/commit/b133122b227da64d2ac1d8faab94a2f5f3015778))\n* **babel-preset-gatsby:** Show a helpful error when used in the wrong environment ([#11555](https://github.com/shdkej/shdkej.github.io/issues/11555)) ([5ffeb33](https://github.com/shdkej/shdkej.github.io/commit/5ffeb338ae3289fecf709f394422abde567fd42a))\n* **blog:** 2019-01-01 json code blocks ([#11750](https://github.com/shdkej/shdkej.github.io/issues/11750)) ([6118134](https://github.com/shdkej/shdkej.github.io/commit/6118134822d36b787ff67ecc82d99ad17a0f6132))\n* **blog:** Fix quotes on blog post ([#11673](https://github.com/shdkej/shdkej.github.io/issues/11673)) ([d578bf3](https://github.com/shdkej/shdkej.github.io/commit/d578bf370233c0b8f7c1bf880723cb772dbf2838))\n* **blog:** fix typo and url, adjust heading level ([#14695](https://github.com/shdkej/shdkej.github.io/issues/14695)) ([2ef7425](https://github.com/shdkej/shdkej.github.io/commit/2ef7425d3280f1663514ac4af6b5715fb4a9c726))\n* **blog:** update aws amplify blog post with latest info/screenshots ([#11605](https://github.com/shdkej/shdkej.github.io/issues/11605)) ([2128957](https://github.com/shdkej/shdkej.github.io/commit/2128957a4267b3233e70b0cfdf8daf372177cc8a))\n* **ci:** do not run (unnecessary) install step for starters validation ([#10838](https://github.com/shdkej/shdkej.github.io/issues/10838)) ([cd9a590](https://github.com/shdkej/shdkej.github.io/commit/cd9a590c0a428b7fb4b6fc58a1410da1dea8a2e6))\n* **core:** added event source polyfill in develop to fix IE/edge hmr ([#11582](https://github.com/shdkej/shdkej.github.io/issues/11582)) ([3782b28](https://github.com/shdkej/shdkej.github.io/commit/3782b28a720ec398cf931aedb556d3d6410ce2af)), closes [#11495](https://github.com/shdkej/shdkej.github.io/issues/11495)\n* **docs:** Remove gatsbyjswpexample.wordpress.com occurrences ([#11905](https://github.com/shdkej/shdkej.github.io/issues/11905)) ([8779a8c](https://github.com/shdkej/shdkej.github.io/commit/8779a8cbc86344df7e339ad357ad3ef7efbc770c)), closes [#11806](https://github.com/shdkej/shdkej.github.io/issues/11806)\n* **docs:** update portion of gatsby-link docs with valid style ([#11828](https://github.com/shdkej/shdkej.github.io/issues/11828)) ([b3bb362](https://github.com/shdkej/shdkej.github.io/commit/b3bb362b98b58dd99404b76c8dd4cdc4c0d16629))\n* **gatsby:** add history fallback for client-only routes ([#11610](https://github.com/shdkej/shdkej.github.io/issues/11610)) ([180db83](https://github.com/shdkej/shdkej.github.io/commit/180db833144d4b173fa55b1cc581469520e8a8e7)), closes [#11581](https://github.com/shdkej/shdkej.github.io/issues/11581) [#11581](https://github.com/shdkej/shdkej.github.io/issues/11581)\n* **gatsby:** Address npm audit that blocked CI ([#20157](https://github.com/shdkej/shdkej.github.io/issues/20157)) ([3397943](https://github.com/shdkej/shdkej.github.io/commit/33979439123af473b99c396ebb1a76e50885bb83))\n* **gatsby:** do not cause stack overflow over circular refs ([#19802](https://github.com/shdkej/shdkej.github.io/issues/19802)) ([eadaf6e](https://github.com/shdkej/shdkej.github.io/commit/eadaf6e06b9f6683af1a17f7c2a3e7d9c34be67c)), closes [#11364](https://github.com/shdkej/shdkej.github.io/issues/11364)\n* **gatsby:** various Typescript definitions ([#15268](https://github.com/shdkej/shdkej.github.io/issues/15268)) ([a210dd5](https://github.com/shdkej/shdkej.github.io/commit/a210dd52b82aabb973b6ae5ca754546e1da7c088))\n* **gatsby-dev-cli:** move package.json file check after pathToRepo handling ([#11565](https://github.com/shdkej/shdkej.github.io/issues/11565)) ([f12de85](https://github.com/shdkej/shdkej.github.io/commit/f12de85e2ba8112661b876d1b8cbfcaa4ef0e9e2))\n* **gatsby-plugin-cxs:** Publish plugin files properly ([#11902](https://github.com/shdkej/shdkej.github.io/issues/11902)) ([34f1c3c](https://github.com/shdkej/shdkej.github.io/commit/34f1c3c4cc09d8f6fcfd24e435edcfdd609efcf2)), closes [#1234](https://github.com/shdkej/shdkej.github.io/issues/1234) [#1234](https://github.com/shdkej/shdkej.github.io/issues/1234) [#1234](https://github.com/shdkej/shdkej.github.io/issues/1234)\n* **gatsby-plugin-netlify-cms:** fix minimizer settings ([#14795](https://github.com/shdkej/shdkej.github.io/issues/14795)) ([f8ceb82](https://github.com/shdkej/shdkej.github.io/commit/f8ceb82a41d7cfc4e44e5ffeb69705dfff94d766))\n* **gatsby-plugin-page-creator:** Fix regular expression for validate path ([#11862](https://github.com/shdkej/shdkej.github.io/issues/11862)) ([3680a7b](https://github.com/shdkej/shdkej.github.io/commit/3680a7b579ebcfb5be82e5122b48b741bb3cc36c))\n* **gatsby-starter-default:** Removes extraneous paddingTop ([#20682](https://github.com/shdkej/shdkej.github.io/issues/20682)) ([7627f85](https://github.com/shdkej/shdkej.github.io/commit/7627f85a3d9fd7e4b8f60b26947090825a2be987))\n* **gatsby-transformer-remark:** restore behavior of serializing date-like fields to string ([#11716](https://github.com/shdkej/shdkej.github.io/issues/11716)) ([63cdc02](https://github.com/shdkej/shdkej.github.io/commit/63cdc0262d7f73fb993695f6b1e97d40570ef43e))\n* **google-analytics:** fix pageview timing issue by delaying it ([#10917](https://github.com/shdkej/shdkej.github.io/issues/10917)) ([87dda50](https://github.com/shdkej/shdkej.github.io/commit/87dda5022e9a0fa0183ba218e75dd9add9cbdbe1)), closes [#9139](https://github.com/shdkej/shdkej.github.io/issues/9139) [#2478](https://github.com/shdkej/shdkej.github.io/issues/2478) [#3362](https://github.com/shdkej/shdkej.github.io/issues/3362)\n* **starters:** Add landmarks to default & blog starters ([#11455](https://github.com/shdkej/shdkej.github.io/issues/11455)) ([d111c14](https://github.com/shdkej/shdkej.github.io/commit/d111c1427c5781fa9185ef68564f1b9b3d5dd0cb))\n* **starters:** clean up redundant/incorrect tags ([d8de151](https://github.com/shdkej/shdkej.github.io/commit/d8de151680db7601136c0f22f5cc603333d745c2))\n* **starters:** Format all the supported files ([#16238](https://github.com/shdkej/shdkej.github.io/issues/16238)) ([a17353c](https://github.com/shdkej/shdkej.github.io/commit/a17353ca5363f91ba5e75fa04493c0c0f968a42a))\n* **starters:** update dependency gatsby to ^2.0.115 ([#11553](https://github.com/shdkej/shdkej.github.io/issues/11553)) ([947ec04](https://github.com/shdkej/shdkej.github.io/commit/947ec0443d194c42b71b8838d029eece6445739d))\n* **starters:** update dependency gatsby to ^2.0.116 ([#11596](https://github.com/shdkej/shdkej.github.io/issues/11596)) ([4876511](https://github.com/shdkej/shdkej.github.io/commit/48765116b052cbdd54a3b42499f783d63f4350ec))\n* **starters:** update dependency gatsby to ^2.0.118 ([#11653](https://github.com/shdkej/shdkej.github.io/issues/11653)) ([6ff8186](https://github.com/shdkej/shdkej.github.io/commit/6ff8186aff377ab68222c81b43dc676fb4a3e46a))\n* **starters:** update dependency gatsby to ^2.0.119 ([#11711](https://github.com/shdkej/shdkej.github.io/issues/11711)) ([2c5abcb](https://github.com/shdkej/shdkej.github.io/commit/2c5abcb5fa08fc1fe5ebb8783f70d3db88ba81c6))\n* **starters:** update dependency gatsby to ^2.1.10 ([#11926](https://github.com/shdkej/shdkej.github.io/issues/11926)) ([a6d8362](https://github.com/shdkej/shdkej.github.io/commit/a6d8362825d6713a2574164ba248211a0988dc7b))\n* **starters:** update dependency gatsby to ^2.1.2 ([#11768](https://github.com/shdkej/shdkej.github.io/issues/11768)) ([3cfb445](https://github.com/shdkej/shdkej.github.io/commit/3cfb4451caac356d00fedd51b818dc0f38af6027))\n* **starters:** update dependency gatsby to ^2.1.24 ([#12374](https://github.com/shdkej/shdkej.github.io/issues/12374)) ([b3ec956](https://github.com/shdkej/shdkej.github.io/commit/b3ec956fea72251e7f11be448612a6df11b841a1))\n* **starters:** update dependency gatsby to ^2.1.27 ([#12407](https://github.com/shdkej/shdkej.github.io/issues/12407)) ([135b9b6](https://github.com/shdkej/shdkej.github.io/commit/135b9b6160e0e4c567730a3f6a5d4fcb1a9e42bf))\n* **starters:** update dependency gatsby to ^2.1.29 ([#12479](https://github.com/shdkej/shdkej.github.io/issues/12479)) ([b81a958](https://github.com/shdkej/shdkej.github.io/commit/b81a958f4b8831a6d9a854be08555d694f2683ea))\n* **starters:** update dependency gatsby to ^2.11.7 ([#15267](https://github.com/shdkej/shdkej.github.io/issues/15267)) ([6637238](https://github.com/shdkej/shdkej.github.io/commit/6637238120b5375596828f498fc860a5badfe53a))\n* **starters:** update dependency gatsby to ^2.12.0 ([#15303](https://github.com/shdkej/shdkej.github.io/issues/15303)) ([08ae433](https://github.com/shdkej/shdkej.github.io/commit/08ae433a36c0936d04214f3370eff3600d77aabe))\n* **starters:** update dependency gatsby to ^2.13.3 ([#15377](https://github.com/shdkej/shdkej.github.io/issues/15377)) ([ee45428](https://github.com/shdkej/shdkej.github.io/commit/ee45428b07fc747ed9db714a6e379223a52a4280))\n* **starters:** update dependency gatsby to ^2.2.13 ([#12854](https://github.com/shdkej/shdkej.github.io/issues/12854)) ([825a69d](https://github.com/shdkej/shdkej.github.io/commit/825a69d64e7bc36a0fe26843e3a22790f31ae207))\n* **starters:** update dependency gatsby to ^2.2.2 ([#12687](https://github.com/shdkej/shdkej.github.io/issues/12687)) ([45e7f9b](https://github.com/shdkej/shdkej.github.io/commit/45e7f9b56992a1a6bc87c6fa5999f778ac18f8bb))\n* **starters:** update dependency gatsby to ^2.3.31 ([#13639](https://github.com/shdkej/shdkej.github.io/issues/13639)) ([d4912aa](https://github.com/shdkej/shdkej.github.io/commit/d4912aa3c40f1a0678a6b542d4b8cb86ddbad0ab))\n* **starters:** update dependency gatsby to ^2.3.32 ([#13679](https://github.com/shdkej/shdkej.github.io/issues/13679)) ([826faa8](https://github.com/shdkej/shdkej.github.io/commit/826faa8e07a5b991cfb67a0f68f40b686ab7aca0))\n* **starters:** update dependency gatsby to ^2.3.33 ([#13706](https://github.com/shdkej/shdkej.github.io/issues/13706)) ([3539983](https://github.com/shdkej/shdkej.github.io/commit/353998332fadaace6eb24143d2971af348be1a2b))\n* **starters:** update dependency gatsby to ^2.4.1 ([#13834](https://github.com/shdkej/shdkej.github.io/issues/13834)) ([eb525d3](https://github.com/shdkej/shdkej.github.io/commit/eb525d3422db285ae86f7a0336044c40ceb49ce9))\n* **starters:** update dependency gatsby to ^2.4.2 ([#13843](https://github.com/shdkej/shdkej.github.io/issues/13843)) ([0fc9e31](https://github.com/shdkej/shdkej.github.io/commit/0fc9e31282e9cf9b92ff4350ed236cc4bd33cd19))\n* **starters:** update dependency gatsby to ^2.5.0 ([#14072](https://github.com/shdkej/shdkej.github.io/issues/14072)) ([5c6a83f](https://github.com/shdkej/shdkej.github.io/commit/5c6a83f2b01031bfb44df7da32e6f3d57cf0e176))\n* **starters:** update dependency gatsby to ^2.5.1 ([#14110](https://github.com/shdkej/shdkej.github.io/issues/14110)) ([8337efe](https://github.com/shdkej/shdkej.github.io/commit/8337efe49923e87150e950e758873a1195991d83))\n* **starters:** update dependency gatsby to ^2.5.2 ([#14112](https://github.com/shdkej/shdkej.github.io/issues/14112)) ([e41f24c](https://github.com/shdkej/shdkej.github.io/commit/e41f24cab1f657882ed516f47d410bb38743f4e7))\n* **starters:** update dependency gatsby to ^2.7.3 ([#14349](https://github.com/shdkej/shdkej.github.io/issues/14349)) ([f0641ec](https://github.com/shdkej/shdkej.github.io/commit/f0641ec1c24db2ca3880fd39f2e2be1c13d19df1))\n* **starters:** update dependency gatsby to ^2.8.3 ([#14541](https://github.com/shdkej/shdkej.github.io/issues/14541)) ([40e77d0](https://github.com/shdkej/shdkej.github.io/commit/40e77d04324095e9c5b43eb2f03fa7ff2853bd9e))\n* **starters:** update dependency gatsby to ^2.8.4 ([#14555](https://github.com/shdkej/shdkej.github.io/issues/14555)) ([20b4d6e](https://github.com/shdkej/shdkej.github.io/commit/20b4d6e8e36198360c2a089a7c725a05b272318c))\n* **starters:** update dependency gatsby to ^2.9.11 ([#14912](https://github.com/shdkej/shdkej.github.io/issues/14912)) ([507e108](https://github.com/shdkej/shdkej.github.io/commit/507e108f874b27e5208809541f2725a466c6916a))\n* **starters:** update dependency gatsby-plugin-offline to ^2.1.3 ([#14756](https://github.com/shdkej/shdkej.github.io/issues/14756)) ([2e8182f](https://github.com/shdkej/shdkej.github.io/commit/2e8182f852ad6efc72293f83ee210cb14d92512c))\n* **starters:** update dependency gatsby-plugin-sharp to ^2.0.26 ([#12486](https://github.com/shdkej/shdkej.github.io/issues/12486)) ([66c1abc](https://github.com/shdkej/shdkej.github.io/commit/66c1abc4832ab4fd1e29b12f2d6e8c67e7a11f48))\n* **starters:** update dependency gatsby-source-filesystem to ^2.0.23 ([#12059](https://github.com/shdkej/shdkej.github.io/issues/12059)) ([40b75b3](https://github.com/shdkej/shdkej.github.io/commit/40b75b319b3c3969432f503d74fd311b9ffd8c77))\n* **starters:** update dependency gatsby-transformer-sharp to ^2.1.15 ([#12182](https://github.com/shdkej/shdkej.github.io/issues/12182)) ([c018982](https://github.com/shdkej/shdkej.github.io/commit/c018982328ee184edde9c1b947af098fede47d33))\n* **starters:** update dependency prop-types to ^15.7.1 ([#11686](https://github.com/shdkej/shdkej.github.io/issues/11686)) ([b8457f9](https://github.com/shdkej/shdkej.github.io/commit/b8457f9ac025a7070f411e0ed60ab3fcce52323c))\n* **starters:** update dependency prop-types to ^15.7.2 ([#11748](https://github.com/shdkej/shdkej.github.io/issues/11748)) ([e9be682](https://github.com/shdkej/shdkej.github.io/commit/e9be682e9b83632829d4ffb11784884a95894c88))\n* **starters:** update dependency react-helmet to ^5.2.1 ([#13757](https://github.com/shdkej/shdkej.github.io/issues/13757)) ([6ad4322](https://github.com/shdkej/shdkej.github.io/commit/6ad43225a2ada4fdf11fb0889ba4435ca4a26ff7))\n* **starters:** update gatsby dependency to get fixes ([#11543](https://github.com/shdkej/shdkej.github.io/issues/11543)) ([9c02997](https://github.com/shdkej/shdkej.github.io/commit/9c02997bcee6441d42347e8a6fda87460c684355))\n* **starters:** update gatsby monorepo ([#11450](https://github.com/shdkej/shdkej.github.io/issues/11450)) ([a98ceb4](https://github.com/shdkej/shdkej.github.io/commit/a98ceb427a4453bbb5ca6d89470b374516144291))\n* **starters:** update gatsby monorepo ([#11469](https://github.com/shdkej/shdkej.github.io/issues/11469)) ([0995042](https://github.com/shdkej/shdkej.github.io/commit/09950426bdcc243ff4ebd4a7a77862f87624c01c))\n* **starters:** update gatsby monorepo ([#11475](https://github.com/shdkej/shdkej.github.io/issues/11475)) ([8881b50](https://github.com/shdkej/shdkej.github.io/commit/8881b509d769426d596ce1592f36383e7c16006f))\n* **starters:** update gatsby monorepo ([#11621](https://github.com/shdkej/shdkej.github.io/issues/11621)) ([f9ce5ba](https://github.com/shdkej/shdkej.github.io/commit/f9ce5bab8ee2e40357fa29a2ded8f34fe7943d9f))\n* **starters:** update gatsby monorepo ([#11801](https://github.com/shdkej/shdkej.github.io/issues/11801)) ([64081bc](https://github.com/shdkej/shdkej.github.io/commit/64081bc804300fa76c609cd5a3138f8073a4dac7))\n* **starters:** update gatsby monorepo ([#11896](https://github.com/shdkej/shdkej.github.io/issues/11896)) ([293cec0](https://github.com/shdkej/shdkej.github.io/commit/293cec0d63dc4e7e7427ee1bc47f9cead03c3437))\n* **starters:** update gatsby monorepo ([#11904](https://github.com/shdkej/shdkej.github.io/issues/11904)) ([0c1d28d](https://github.com/shdkej/shdkej.github.io/commit/0c1d28d9fb553f712279cf8ef3caad79f54c873d))\n* **starters:** update gatsby monorepo ([#11938](https://github.com/shdkej/shdkej.github.io/issues/11938)) ([035ca57](https://github.com/shdkej/shdkej.github.io/commit/035ca570828da69d91fc4017c9231870b5ef1eb9))\n* **starters:** update gatsby monorepo ([#11943](https://github.com/shdkej/shdkej.github.io/issues/11943)) ([d662429](https://github.com/shdkej/shdkej.github.io/commit/d662429ed48b18a1cb0b0527c0cbcfc596dd23f5))\n* **starters:** update gatsby monorepo ([#11999](https://github.com/shdkej/shdkej.github.io/issues/11999)) ([763685c](https://github.com/shdkej/shdkej.github.io/commit/763685cf07a2fb7f4078f24a5a47379218c186e7))\n* **starters:** update gatsby monorepo ([#12058](https://github.com/shdkej/shdkej.github.io/issues/12058)) ([94daedc](https://github.com/shdkej/shdkej.github.io/commit/94daedcde682d63df36d386b90b3979a2bb7259a))\n* **starters:** update gatsby monorepo ([#12179](https://github.com/shdkej/shdkej.github.io/issues/12179)) ([475c228](https://github.com/shdkej/shdkej.github.io/commit/475c2289dcfa4e8d40d2fb8634bb0a33fcaa9a2b))\n* **starters:** update gatsby monorepo ([#12276](https://github.com/shdkej/shdkej.github.io/issues/12276)) ([3d32480](https://github.com/shdkej/shdkej.github.io/commit/3d324807597941cfc72c8eb2ad53649bf611726d))\n* **starters:** update gatsby monorepo ([#12299](https://github.com/shdkej/shdkej.github.io/issues/12299)) ([d681e2e](https://github.com/shdkej/shdkej.github.io/commit/d681e2e20529edcc4d6ccae8dfb54573dd7344f3))\n* **starters:** update gatsby monorepo ([#12331](https://github.com/shdkej/shdkej.github.io/issues/12331)) ([383fdf9](https://github.com/shdkej/shdkej.github.io/commit/383fdf90af46ffbd5408ec6c954e5fa458b9d457))\n* **starters:** update gatsby monorepo ([#12498](https://github.com/shdkej/shdkej.github.io/issues/12498)) ([bc2a386](https://github.com/shdkej/shdkej.github.io/commit/bc2a3869fe0ed4124c487e355a235c0b963ba4cd))\n* **starters:** update gatsby monorepo ([#12524](https://github.com/shdkej/shdkej.github.io/issues/12524)) ([238f3f5](https://github.com/shdkej/shdkej.github.io/commit/238f3f53a458442b9d06edb8739db7e35d3e3f6a))\n* **starters:** update gatsby monorepo ([#12556](https://github.com/shdkej/shdkej.github.io/issues/12556)) ([7fd452c](https://github.com/shdkej/shdkej.github.io/commit/7fd452cacc8dd7220d7584cd1bd52ba6fcf78bdd))\n* **starters:** update gatsby monorepo ([#12650](https://github.com/shdkej/shdkej.github.io/issues/12650)) ([b2723d3](https://github.com/shdkej/shdkej.github.io/commit/b2723d3869ba1baee81edca4714ee2f382193511))\n* **starters:** update gatsby monorepo ([#12697](https://github.com/shdkej/shdkej.github.io/issues/12697)) ([382ae03](https://github.com/shdkej/shdkej.github.io/commit/382ae03a394a1a10fabcfad3e06b034fdfb5b6e0))\n* **starters:** update gatsby monorepo ([#12742](https://github.com/shdkej/shdkej.github.io/issues/12742)) ([b35e044](https://github.com/shdkej/shdkej.github.io/commit/b35e0449802b0e23c9c31c7d0aa1991dfd3677f1))\n* **starters:** update gatsby monorepo ([#12838](https://github.com/shdkej/shdkej.github.io/issues/12838)) ([7b1b4c8](https://github.com/shdkej/shdkej.github.io/commit/7b1b4c8cda34616a29f4c34dd6d406fd35f3133c))\n* **starters:** update gatsby monorepo ([#12865](https://github.com/shdkej/shdkej.github.io/issues/12865)) ([335c6b3](https://github.com/shdkej/shdkej.github.io/commit/335c6b321e7735649740feac8c5ba6eb22c7eea9))\n* **starters:** update gatsby monorepo ([#12896](https://github.com/shdkej/shdkej.github.io/issues/12896)) ([2c36112](https://github.com/shdkej/shdkej.github.io/commit/2c361125dd86b8b80edb194170a130ee5c81dfe2))\n* **starters:** update gatsby monorepo ([#12925](https://github.com/shdkej/shdkej.github.io/issues/12925)) ([21d1d1e](https://github.com/shdkej/shdkej.github.io/commit/21d1d1e65d80229afa91f56271e5579910ba6380))\n* **starters:** update gatsby monorepo ([#13048](https://github.com/shdkej/shdkej.github.io/issues/13048)) ([33665a4](https://github.com/shdkej/shdkej.github.io/commit/33665a4d8174c90df36eae7149b0608d278bfcc3))\n* **starters:** update gatsby monorepo ([#13250](https://github.com/shdkej/shdkej.github.io/issues/13250)) ([3db13d1](https://github.com/shdkej/shdkej.github.io/commit/3db13d1247d30e186b42bcaa01ddb068f767791c))\n* **starters:** update gatsby monorepo ([#13257](https://github.com/shdkej/shdkej.github.io/issues/13257)) ([bc1c972](https://github.com/shdkej/shdkej.github.io/commit/bc1c9724c09bae369e0b2289d1e647ed88392b01))\n* **starters:** update gatsby monorepo ([#13569](https://github.com/shdkej/shdkej.github.io/issues/13569)) ([6b01c38](https://github.com/shdkej/shdkej.github.io/commit/6b01c384a1535944c7a73eba210f3cd36bb6530c))\n* **starters:** update gatsby monorepo ([#13580](https://github.com/shdkej/shdkej.github.io/issues/13580)) ([dd93583](https://github.com/shdkej/shdkej.github.io/commit/dd93583438aecd4712c5054810cb77312992c5a0))\n* **starters:** update gatsby monorepo ([#13604](https://github.com/shdkej/shdkej.github.io/issues/13604)) ([183547c](https://github.com/shdkej/shdkej.github.io/commit/183547c2c02cca290c99d03db9e5783170950ae7))\n* **starters:** update gatsby monorepo ([#13630](https://github.com/shdkej/shdkej.github.io/issues/13630)) ([3f2d95f](https://github.com/shdkej/shdkej.github.io/commit/3f2d95f9a5f07de4e0d4af84b825304a07bfbe68))\n* **starters:** update gatsby monorepo ([#13736](https://github.com/shdkej/shdkej.github.io/issues/13736)) ([84c28bd](https://github.com/shdkej/shdkej.github.io/commit/84c28bd001c49fc3098635de347d0a82b44063f2))\n* **starters:** update gatsby monorepo ([#13786](https://github.com/shdkej/shdkej.github.io/issues/13786)) ([b2cb018](https://github.com/shdkej/shdkej.github.io/commit/b2cb018fa9aa0e1b39a837d6d593490526b6a9a7))\n* **starters:** update gatsby monorepo ([#13837](https://github.com/shdkej/shdkej.github.io/issues/13837)) ([2575f83](https://github.com/shdkej/shdkej.github.io/commit/2575f832d169aa23e9f78a16a6a73a623c8f00ab))\n* **starters:** update gatsby monorepo ([#13954](https://github.com/shdkej/shdkej.github.io/issues/13954)) ([1dbc688](https://github.com/shdkej/shdkej.github.io/commit/1dbc688eed8b5f9c419ff50ab5f412eca5163c00))\n* **starters:** update gatsby monorepo ([#14091](https://github.com/shdkej/shdkej.github.io/issues/14091)) ([7eb6903](https://github.com/shdkej/shdkej.github.io/commit/7eb69033f773dbe62900a096f3346bcabd3c5aaf))\n* **starters:** update gatsby monorepo ([#14127](https://github.com/shdkej/shdkej.github.io/issues/14127)) ([3ddeb7b](https://github.com/shdkej/shdkej.github.io/commit/3ddeb7b77e575f4b5d8e1e7fcdfa59846082c421))\n* **starters:** update gatsby monorepo ([#14183](https://github.com/shdkej/shdkej.github.io/issues/14183)) ([08e7007](https://github.com/shdkej/shdkej.github.io/commit/08e70077b39faf9268679248f4d88919d0c56cce))\n* **starters:** update gatsby monorepo ([#14202](https://github.com/shdkej/shdkej.github.io/issues/14202)) ([6ad2edc](https://github.com/shdkej/shdkej.github.io/commit/6ad2edcbb9a0205633be376fb2872b3ac4b5ee44))\n* **starters:** update gatsby monorepo ([#14241](https://github.com/shdkej/shdkej.github.io/issues/14241)) ([8cdf07e](https://github.com/shdkej/shdkej.github.io/commit/8cdf07e2830e7f74834de69ab81ed58c18cc4643))\n* **starters:** update gatsby monorepo ([#14451](https://github.com/shdkej/shdkej.github.io/issues/14451)) ([12f6fa2](https://github.com/shdkej/shdkej.github.io/commit/12f6fa24bae0e901f5b68caecce34118edbe22ab))\n* **starters:** update gatsby monorepo ([#14463](https://github.com/shdkej/shdkej.github.io/issues/14463)) ([4b64b31](https://github.com/shdkej/shdkej.github.io/commit/4b64b31e5725e9cc0fcc5003580f7b480aac7428))\n* **starters:** update gatsby monorepo ([#14570](https://github.com/shdkej/shdkej.github.io/issues/14570)) ([cc614b1](https://github.com/shdkej/shdkej.github.io/commit/cc614b1547815ed1c0beeccfe0b324f6e3d7739b))\n* **starters:** update gatsby monorepo ([#14631](https://github.com/shdkej/shdkej.github.io/issues/14631)) ([438f388](https://github.com/shdkej/shdkej.github.io/commit/438f3882d12b8ffd95c82eb00b6f227aa18e9927))\n* **starters:** update gatsby monorepo ([#14685](https://github.com/shdkej/shdkej.github.io/issues/14685)) ([4bd8cd7](https://github.com/shdkej/shdkej.github.io/commit/4bd8cd78885f7b90919ff2e65959e5099428604a))\n* **starters:** update gatsby monorepo ([#14735](https://github.com/shdkej/shdkej.github.io/issues/14735)) ([8fd64b7](https://github.com/shdkej/shdkej.github.io/commit/8fd64b7f1515ed1a4458f4f05f7b8690188fd655))\n* **starters:** update gatsby monorepo ([#14754](https://github.com/shdkej/shdkej.github.io/issues/14754)) ([5aa271c](https://github.com/shdkej/shdkej.github.io/commit/5aa271c4f927763a2a0b20589d636c9aab37c5f7))\n* **starters:** update gatsby monorepo ([#14782](https://github.com/shdkej/shdkej.github.io/issues/14782)) ([f4d244a](https://github.com/shdkej/shdkej.github.io/commit/f4d244a603a1e2519fca32605126f57e1a115e18))\n* **starters:** update gatsby monorepo ([#14866](https://github.com/shdkej/shdkej.github.io/issues/14866)) ([6555420](https://github.com/shdkej/shdkej.github.io/commit/6555420141f1444adc2a0cfbafb5bfe2e84e07a7))\n* **starters:** update gatsby monorepo ([#14886](https://github.com/shdkej/shdkej.github.io/issues/14886)) ([4da848a](https://github.com/shdkej/shdkej.github.io/commit/4da848aa3ac65332ab65d305101a53699dc493e8))\n* **starters:** update gatsby monorepo ([#14965](https://github.com/shdkej/shdkej.github.io/issues/14965)) ([3a34350](https://github.com/shdkej/shdkej.github.io/commit/3a34350272851ecad885caa9aeb1816ab5f32bed))\n* **starters:** update gatsby monorepo ([#15070](https://github.com/shdkej/shdkej.github.io/issues/15070)) ([f7b15c4](https://github.com/shdkej/shdkej.github.io/commit/f7b15c49fef8d60c75e6ede1a97f4140d1449d82))\n* **starters:** update gatsby monorepo ([#15104](https://github.com/shdkej/shdkej.github.io/issues/15104)) ([cb11ffc](https://github.com/shdkej/shdkej.github.io/commit/cb11ffc7b4255aff262a1007d5e89885cba205dc))\n* **starters:** update gatsby monorepo ([#15329](https://github.com/shdkej/shdkej.github.io/issues/15329)) ([506705c](https://github.com/shdkej/shdkej.github.io/commit/506705ca8614a8d5dc014867467fb96e44cff319))\n* **starters:** update gatsby monorepo ([#15357](https://github.com/shdkej/shdkej.github.io/issues/15357)) ([7ad2360](https://github.com/shdkej/shdkej.github.io/commit/7ad2360f2a425bf4e9e08c0eede9e1348afac112))\n* **starters:** update gatsby monorepo ([#15403](https://github.com/shdkej/shdkej.github.io/issues/15403)) ([0d2f4fe](https://github.com/shdkej/shdkej.github.io/commit/0d2f4feac232ee5eb92108b061b1e0cc8c7ca386))\n* **starters:** update gatsby monorepo ([#15432](https://github.com/shdkej/shdkej.github.io/issues/15432)) ([d29a0e5](https://github.com/shdkej/shdkej.github.io/commit/d29a0e5c8cf994fed8c2a835db0bdbeb4f6b3491))\n* **starters:** update gatsby monorepo ([#15445](https://github.com/shdkej/shdkej.github.io/issues/15445)) ([8deae58](https://github.com/shdkej/shdkej.github.io/commit/8deae584cc07984d3eba90cb23a34bc883a880b6))\n* **starters:** update gatsby monorepo ([#15556](https://github.com/shdkej/shdkej.github.io/issues/15556)) ([f3c307b](https://github.com/shdkej/shdkej.github.io/commit/f3c307bd61adb481ff2007e54ce0146f60030a20))\n* **starters:** update gatsby monorepo ([#15609](https://github.com/shdkej/shdkej.github.io/issues/15609)) ([3bbd589](https://github.com/shdkej/shdkej.github.io/commit/3bbd5899d343ac21795efcd09f5296affbd48cb2))\n* **starters:** update gatsby monorepo to ^2.1.1 ([#14312](https://github.com/shdkej/shdkej.github.io/issues/14312)) ([40c3e74](https://github.com/shdkej/shdkej.github.io/commit/40c3e749e3f66c5030ea095ff64d277575de8363))\n* **starters:** update gatsby monorepo to ^2.2.1 ([#15017](https://github.com/shdkej/shdkej.github.io/issues/15017)) ([cfa863e](https://github.com/shdkej/shdkej.github.io/commit/cfa863e6fe74a80605a2fce4f0986b7961e8e6b6))\n* **starters:** update react monorepo to ^16.7.0 ([#11451](https://github.com/shdkej/shdkej.github.io/issues/11451)) ([8e4da9e](https://github.com/shdkej/shdkej.github.io/commit/8e4da9e0375f48424d0e13628cff59786a2aac79))\n* **starters:** update react monorepo to ^16.8.0 ([#11583](https://github.com/shdkej/shdkej.github.io/issues/11583)) ([f01a15d](https://github.com/shdkej/shdkej.github.io/commit/f01a15da3383e4517e5edb012610f47edfe06669))\n* **starters:** update react monorepo to ^16.8.1 ([#11603](https://github.com/shdkej/shdkej.github.io/issues/11603)) ([0a90f33](https://github.com/shdkej/shdkej.github.io/commit/0a90f33078a1e4fb43975bbdf9e1fb8ab5fab751))\n* **starters:** update react monorepo to ^16.8.2 ([#11781](https://github.com/shdkej/shdkej.github.io/issues/11781)) ([200f711](https://github.com/shdkej/shdkej.github.io/commit/200f7115e2d6ee019b7ede460acdf21cba068073))\n* **starters:** update react monorepo to ^16.8.3 ([#11978](https://github.com/shdkej/shdkej.github.io/issues/11978)) ([eb9073a](https://github.com/shdkej/shdkej.github.io/commit/eb9073afa55bd7b67a0f22e19d39a68eef8a5bb8))\n* **starters:** update react monorepo to ^16.8.4 ([#12338](https://github.com/shdkej/shdkej.github.io/issues/12338)) ([326d7fc](https://github.com/shdkej/shdkej.github.io/commit/326d7fc42989207855a2867c130104eac4e113e8))\n* **starters:** update react monorepo to ^16.8.5 ([#12778](https://github.com/shdkej/shdkej.github.io/issues/12778)) ([ace8045](https://github.com/shdkej/shdkej.github.io/commit/ace8045d8a78f3d00d2c69ab7241a6fc65b83e7f))\n* upgrade dependencies for security fix ([dcfeaae](https://github.com/shdkej/shdkej.github.io/commit/dcfeaaeaa9f372e4357f7f0799114cc775bf8af1))\n* **starters:** upgrade gatsby version for all starters ([#11382](https://github.com/shdkej/shdkej.github.io/issues/11382)) ([f01150b](https://github.com/shdkej/shdkej.github.io/commit/f01150b1b1edf8aa74df24fe83807a2b49402766))\n* **starters:** Upgrade react-helmet in default starter ([#23059](https://github.com/shdkej/shdkej.github.io/issues/23059)) ([ea4a483](https://github.com/shdkej/shdkej.github.io/commit/ea4a483376cf9ba562abf593bfcea25216cfa4aa))\n* **using-redux:** create a fresh store for each SSR page ([#11134](https://github.com/shdkej/shdkej.github.io/issues/11134)) ([8066353](https://github.com/shdkej/shdkej.github.io/commit/806635356fa8edd5689973a7d3f86e3ce681af4d))\n* **www:** a11y tweaks ([#11612](https://github.com/shdkej/shdkej.github.io/issues/11612)) ([6ea57a7](https://github.com/shdkej/shdkej.github.io/commit/6ea57a7aa69623a38498103b72be767563d45897))\n* **www:** ensure released is set/filtered appropriately on blog posts ([#11776](https://github.com/shdkej/shdkej.github.io/issues/11776)) ([ff07ddc](https://github.com/shdkej/shdkej.github.io/commit/ff07ddcaa3ebfd26f919814c523e94317146f1ed))\n* **www:** Fix showcase visit site link overlap ([#10249](https://github.com/shdkej/shdkej.github.io/issues/10249)) ([8a52478](https://github.com/shdkej/shdkej.github.io/commit/8a52478344e2461ef872a44b7f4c25c7e29b3582))\n* **www:** update zeit to vercel links ([#24044](https://github.com/shdkej/shdkej.github.io/issues/24044)) ([54987ef](https://github.com/shdkej/shdkej.github.io/commit/54987efcc9f64ee98b3a7937b203c6fb2281d364))\n"},{"headings":[{"value":"DevOps & 인프라 엔지니어링"},{"value":"주요 프로젝트 및 성과"},{"value":"메시지(SMS/Email/Kakaotalk) 발송 서비스 성능 최적화"},{"value":"전사 EKS 버전 업그레이드 (1.20 → 1.27)"},{"value":"Slack 기반 배포 자동화 시스템 구축"},{"value":"야간 파드 스케줄러 개발을 통한 비용 최적화"},{"value":"버티컬 사이트 배포 관리 시스템 구축"},{"value":"로그 추적 시스템 개선"},{"value":"코오롱몰 및 버티컬 사이트 인프라 관리"},{"value":"국가 또는 디바이스 유형 헤더별 콘텐츠 개인화"},{"value":"백엔드 개발"},{"value":"쇼핑 컨텐츠 알림 시스템 개발"},{"value":"추가 개발 프로젝트"}],"fields":{"slug":"/portfolio/"},"rawMarkdownBody":"\n# DevOps & 인프라 엔지니어링\n\n데브옵스 엔지니어로서 \"더 뺄 게 없을 때까지 고민하고 줄여나가는\" 미니멀리즘 철학을 인프라 설계에 적용합니다. 개발자들이 개발에만 집중할 수 있는 안정적이고 자동화된 환경을 구축하는 것을 추구하며, 다음과 같은 핵심 역량을 보유하고 있습니다:\n\n- **IaC(Infrastructure as Code)**: Terraform, Kubernetes Helm 기반 인프라 구축/배포\n- **CI/CD 자동화**: ArgoCD 기반 GitOps 운영, 자동화된 배포 파이프라인 구축\n- **클라우드 인프라**: AWS 클라우드 서비스 설계 및 최적화 (EKS, Lambda, Kinesis, CloudFront 등)\n- **시스템 자동화**: Linux BASH, Python, Node.js 활용 운영 자동화\n- **성능 최적화**: 대용량 처리 시스템 설계 및 최적화 (분당 5만건 메시지 처리 등)\n- **모니터링 및 관찰성**: Grafana, Loki 등을 활용한 모니터링 시스템 구축\n\n## 주요 프로젝트 및 성과\n\n퍼플아이오 (2021.08 ~)\n\n### 메시지(SMS/Email/Kakaotalk) 발송 서비스 성능 최적화\n\n- **업무 요약**: 대용량 메시지 발송 서비스 인프라 설계 및 성능 최적화\n- **기술 환경**: AWS Beanstalk, Lambda, Kinesis, Spring Boot\n- **서비스 규모**: 일 최대 1,300만건 메시지, 온/오프라인 고객 600만명 대상\n- **주요 기술적 도전과 해결책**:\n  - **Lambda 병렬 처리 아키텍처 설계**:\n    - **문제**: 외부 API 초당 300회 이상 요청 필요, 단일 Lambda에서 비동기 요청 시 socket 부족으로 실패/지연 발생\n    - **해결**: Lambda가 Lambda를 재호출하는 파이프라인 아키텍처 설계, 각 Lambda의 처리량 제한 및 병렬 처리로 요청량 충족\n    - **결과**: 분당 1만건 → 5만건 처리 성능 향상, 안정적인 API 호출 구현\n  - **Kinesis 용량 최적화**:\n    - **문제**: 분당 1만건 이상의 메시징 데이터 처리 필요, SQS FIFO의 처리 속도 한계\n    - **기술적 검증**: SQS와 Kinesis 비교 테스트 후 Kinesis 선택 (처리량과 순서 보장 균형)\n    - **최적화**: 데이터 압축 라이브러리 도입으로 1000개 데이터를 1개로 압축, 데이터 전송 비용 1/1000로 절감\n    - **튜닝**: Lambda 트리거 설정 최적화로 데이터 누락 최소화 및 대용량 처리 검증\n  - **AWS Beanstalk 관리 개선**:\n    - **문제**: 멀티 인스턴스 환경에서 특정 인스턴스만 기능 배포 필요\n    - **해결**: AWS 문서 기반으로 Beanstalk의 leader_only 기능 활용, 특정 인스턴스에만 스크립트 실행\n    - **한계 및 대응**: AWS 자체 플랫폼 업데이트 시 기능 동작 안하는 경우 처리 방안 수립\n  - **배치 서버 배포 프로세스 개선**:\n    - **문제**: 배치작업 중 새 인스턴스 생성/기존 인스턴스 종료 시 작업 강제 종료 이슈\n    - **해결**: 배치 중단 확인 후 배포 진행하는 안전 메커니즘 구현\n- **성과**:\n  - 분당 1만건 메시지 안정적 발송 환경 구축, 최대 분당 5만건 처리 가능\n  - 메시지 누락 없는 안정적 서비스 구현\n  - 서비스 중단 없는 배포 프로세스 확립\n\n### 전사 EKS 버전 업그레이드 (1.20 → 1.27)\n\n- **업무 요약**: 쿠버네티스 클러스터 전체 버전 업그레이드 및 안정화\n- **기술 환경**: AWS EKS, Terraform, Kubernetes, ArgoCD\n- **난이도 및 영향**: 관리 종료 기한이 다가오는 1.20 버전에서 최신 1.27 버전으로의 마이그레이션은 단계적 업그레이드가 아닌 신규 환경 생성 방식으로 진행하여 시간 효율성 확보\n- **주요 이슈 및 해결 과정**:\n  - **AWS CNI 확장 프로그램 Timeout**: 확장 프로그램 버전 업그레이드 및 재설치로 해결\n  - **LoadBalancer 이름 제한**: Ingress 생성 시 32글자 제한 문제 해결\n  - **Namespace 전환 문제**: ArgoCD에서 리소스가 제대로 삭제되지 않는 이슈 파악 및 해결\n  - **인증서 문제**: Route53 연결 후 ACM 인증서 재발급 및 DNS 전파 완료 확인\n  - **ArgoCD 실행 불가**: 최신 버전 호환성 문제 해결 및 설정 마이그레이션\n  - **네트워크 연결성**: VPC CNI 설정 및 보안 그룹 조정으로 멀티 컨테이너 파드, RDS, 캐시 통신 문제 해결\n  - **S3 접근 정책**: AWS 정책 변경에 따른 필요 설정값 추가\n- **성과**:\n  - 버전 업그레이드 완료 및 운영 안정화로 보안 취약점 해소\n  - 기술 부채 해소 및 최신 쿠버네티스 기능 활용 가능\n  - 문제 해결 과정 문서화로 향후 버전 업그레이드 시간 단축 기반 마련\n\n### Slack 기반 배포 자동화 시스템 구축\n\n- **업무 요약**: Slack을 통해 원클릭으로 여러 서비스를 배포할 수 있는 봇 개발\n- **기술 환경**: Node.js, Kubernetes, Helm, ArgoCD, Slack API\n- **배경 및 문제점**:\n  - 테스트 배포 시 GitLab의 ArgoCD 설정파일에 브랜치명을 수동으로 변경해야 했음\n  - 버티컬 사이트 운영에 필요한 3개 레포지토리 각각 배포 필요\n  - 고정된 테스트서버 1대로 인해 다수 개발자 동시 테스트 어려움\n- **구현 내용**:\n  - Slack 커맨드를 처리하는 Node.js 서버 구현 및 ArgoCD API 연동\n  - 사용자별 스테이징 환경 동적 생성 및 관리 기능\n  - Kubernetes Helm 차트로 패키징하여 배포 및 관리 용이성 확보\n  - 운영 중인 ArgoCD 환경에 통합하여 추가 권한 관리 불필요\n- **성과**:\n  - 개발자 배포 프로세스 간소화 (설정파일 수동 변경 → Slack 커맨드 한 번으로 배포)\n  - 인원별 독립적인 스테이징 환경 제공으로 개발/테스트 효율성 향상\n  - 작업 과정 및 사용 방법 문서화 및 팀 내 공유로 전사적 활용도 향상\n  - 개발팀 배포 시간 약 70% 단축 효과\n\n![배포봇다이어그램](img/배포봇다이어그램.png)\n![배포봇예제](img/베포봇예제.png)\n\n### 야간 파드 스케줄러 개발을 통한 비용 최적화\n\n- **업무 요약**: 야간 미사용 애플리케이션 자동 종료/재시작 스케줄러 개발\n- **기술 환경**: Kubernetes CronJob, ArgoCD, Kubernetes Secret\n- **구현 내용**:\n  - 야간 시간에 서비스 필요없는 앱 자동 종료 및 오전 자동 재시작 메커니즘 구현\n  - 쿠버네티스 CronJob을 활용한 스케줄링 시스템 구축\n  - 민감 정보는 Secret으로 관리하여 보안성 확보\n- **성과**:\n  - 전체 150개 애플리케이션 중 80개 야간 비가동 처리 자동화\n  - 클라우드 인프라 비용 20% 절감 효과\n  - 수동 관리 업무 제거로 운영 효율성 향상\n\n![스케줄러다이어그램](img/스케줄러다이어그램.png)\n\n### 버티컬 사이트 배포 관리 시스템 구축\n\n- **업무 요약**: 신규 버티컬 사이트 추가를 위한 자동화된 인프라 관리 시스템 구축\n- **기술 환경**: AWS Route53, CloudFront, Kubernetes, ArgoCD, Helm\n- **문제 상황**: 메인몰 외 브랜드별 자체 사이트 요구 증가, 사이트 추가 시마다 반복적인 수동 작업 발생\n- **구현 내용**:\n  - GitOps 기반 CD 시스템 구축 및 설정 파일 Git 관리\n  - 설정 파일에서 빌드된 브랜치명만 변경하여 간편한 배포 지원\n  - Helm 차트 세팅으로 ArgoCD 배포본 → Route53 Ingress 자동 설정\n  - 신규 사이트 추가 프로세스 표준화: 소스 분기, 도메인 추가, 설정 파일 생성, 배포\n- **성과**:\n  - 버티컬 사이트 추가 작업 시간 75% 단축 (1일 → 2시간)\n  - IaC 기반으로 인프라 관리 일관성 및 재현성 확보\n  - Helm 차트 활용으로 복잡한 설정을 추상화하여 실수 가능성 최소화\n\n![버티컬다이어그램](img/버티컬사이트다이어그램.png)\n\n### 로그 추적 시스템 개선\n\n- **업무 요약**: Grafana, Loki를 활용한 로그 추적 시스템 구축\n- **기술 환경**: Grafana, Loki, Spring Boot\n- **구현 내용**:\n  - 백엔드 개발자와 협업하여 로그에 TraceID 추가 구현\n  - TraceID별 로그 조회가 가능한 대시보드 구축\n  - 분산 시스템 간 요청 추적 가능한 관찰성 확보\n- **성과**:\n  - 문제 발생 시 트러블슈팅 시간 50% 이상 단축\n  - 서비스 간 연관 관계 가시화로 시스템 이해도 향상\n  - 개발 및 운영팀 간 협업 효율성 개선\n\n![로그예시](img/로그예시.png)\n\n### 코오롱몰 및 버티컬 사이트 인프라 관리\n\n- **업무 요약**: AWS EKS 환경 기반 인프라 비용 및 운영 효율성 최적화\n- **주요 업무**:\n  - **클라우드 인프라 비용 최적화**: 리소스 사용량 분석 및 적정 크기 조정, 예약 인스턴스 활용\n  - **반복 작업 자동화**:\n    - 엑셀 데이터 → HTML 변환 자동화 스크립트 개발로 작업 시간 90% 단축\n    - 배송 상태 처리 API 자동화로 수동 처리 시간 대폭 감소\n  - **국가/디바이스별 콘텐츠 개인화**:\n    - CloudFront Functions 활용 가능성 검토 및 비용 분석\n    - 트래픽(월 20TB, 시간당 60만) 기준 비용 계산 및 ROI 분석\n  - **빌드 최적화**:\n    - Next.js 빌드 시간 개선 및 CI 캐시 성능 최적화\n    - 배포 시간 30% 단축 효과\n\n### 국가 또는 디바이스 유형 헤더별 콘텐츠 개인화\n\n- **업무 요약**: cloudfront functions의 비용을 계산하고 처리\n- **배경**\n  - 사이트 접속 시 한국에서 접속하는지 체크해서 특정 사이트로 리다이렉트 시켜주는 동작이 필요했습니다. 이를 구현하는 다양한 방식이 있는데 Cloudfront Functions를 활용 가능한지 점검하고 이에 따른 비용 분석을 수행하여 제안했습니다.\n- **비용 계산**\n  - 요청당 비용이 들어서 꽤 넉넉한 용량만큼 프리티어로 사용 가능했고 (1TB 전송량/월, 1000만건 요청/월, 함수 200만건/월)\n  - 하지만 우리의 트래픽은 대략 시간당 60만 정도에 사용용량이 월 20TB 정도였고 이 자체로만 월 700만원 정도 비용이 예상되는 수치입니다\n  - 여기서 functions의 비용은 100만건 호출당 $0.1 정도이고 한달에 4만원 정도의 비용이 나오게 됩니다. 즉 function 하나 추가하는데 월 4만원 정도의 비용이 들게 됩니다.\n  - (주의 : 해당 처리량은 운영중인 특정 한 사이트의 대략적인 수치이자 예시일 뿐 실제 환경은 다를 수 있음을 안내드립니다)\n- **결과**\n  - 이는 서버 사양을 어떻게 관리하느냐에 따라 트레이드오프를 고려하여 cloudfront를 이미 사용하고 있다면 충분히 합리적으로 고려해볼만한 서비스인 것 같습니다.\n  - 결과적으로는 해당 기능이 불필요하게 되어 사용하지는 않았지만 cloudfront의 비용과 가능성에 대해 깊게 알게되어 의미있는 경험이었습니다.\n\n![cloudfront가격](img/cloudfront가격.png)\n\n## 백엔드 개발\n\n### 쇼핑 컨텐츠 알림 시스템 개발\n\n- **업무 요약**: 코오롱몰의 이벤트, 기획전 등 컨텐츠 알림 시스템 개발\n- **기술 환경**: AWS Lambda, Kinesis, Serverless Framework\n- **구현 내용**:\n  - 기존 주문 및 컨텐츠 데이터를 Lambda로 크롤링 후 Kinesis로 전달하는 파이프라인 구축\n  - 알림 유형별(기획전, 타임딜, 출고/배송, 재입고) 처리 로직 개발\n  - 5분 주기 데이터 조회 및 알림 생성 시스템 구현\n- **설계 고려사항**:\n  - **멱등성**: 중복 데이터 방지 및 재실행 가능한 구조 설계\n  - **확장성**: 푸시 알림, SMS, 카카오톡 등 다양한 채널 지원 구조\n  - **성능**: Pull/Push 방식 트레이드오프 분석 및 최적 방식 선정\n- **성과**:\n  - 사용자 관심 브랜드/상품에 대한 자동 알림으로 고객 참여도 향상\n  - 서비스 신뢰성 확보로 운영 안정화\n\n### 추가 개발 프로젝트\n\n- **쇼핑몰 시스템 마이그레이션**:\n\n  - 쇼핑몰솔루션(아임웹)에서 사내 시스템으로 데이터 마이그레이션\n  - 게시판 기능 개발 및 DB 마이그레이션 (Node.js, GraphQL, Hasura)\n  - 웹 취약점 검사 대응 및 보안 강화\n\n- **소셜 로그인 개발**:\n\n  - 기존 CRM 시스템 로직에 맞춘 카카오, 애플 로그인 개발 (Spring)\n  - 정보보안 가이드 준수 및 보안 감사 대응\n  - 접속 이력 관리 및 취약점 대응 시스템 구축\n\n- **사내 해커톤 - 좌석 예약 시스템 개발**:\n  - 게더타운 컨셉의 좌석 예약, 회의실 예약, 사내 도서 관리 시스템 개발\n  - Next.js + Supabase 활용으로 빠른 개발 및 배포\n  - 7개 팀 중 2등 및 인기상 수상\n  - 관련 기사: https://yozm.wishket.com/magazine/detail/2490/\n  - 사이트: https://purple-place.vercel.app\n"},{"headings":[{"value":"블로그 소개"},{"value":"요약"},{"value":"주제 선정"},{"value":"Post"},{"value":"시리즈"},{"value":"무엇을 쓸 것인가"},{"value":"뭔가를 설명하기 위해 추가적인 개념이 있을 경우"},{"value":"읽고 싶은 제목"},{"value":"read per minute"},{"value":"책 1권 - 200자 원고지 800-1000장"},{"value":"블로그 글 아이디어"},{"value":"유튜브 아이디어"},{"value":"favorite"},{"value":"Item List"},{"value":"블로그"},{"value":"블로깅"},{"value":"노하우"},{"value":"단순한거에 집중해야한다"},{"value":"블로그 글 쓸 때 요소"},{"value":"wiki blog 문제점"},{"value":"자료 정보 지식 지혜"},{"value":"문서"},{"value":"inspired"},{"value":"번역"},{"value":"번역시 고민 요소"},{"value":"번역체"},{"value":"수파리의 관점에서 번역"},{"value":"영상"},{"value":"확인할 것"},{"value":"영상에 들어갈 구성요소"},{"value":"Cinematic"},{"value":"이미지"},{"value":"Drawing"},{"value":"Cartoon"},{"value":"설명을 그림(표, 코드) 위에 놓을까, 밑에 놓을까"},{"value":"Photograph 기본 요소"}],"fields":{"slug":"/blogging/"},"rawMarkdownBody":"## 블로그 소개\n- AI를 통해 얻은 컨텐츠를 절대 그대로 가져오지 않는다\n- 한 문서에 10,000 단어 이상 넣지 않는다\n- 하나의 문서는 명확한 흐름이 있어야 한다 한눈에 어떤 내용일지 그려져야 한다\n- 만다라트 구조 안에서 문서를 제한한다\n- 내가 스스로 계속 퇴고 할 수 있도록 한다\n\n\n## 요약\n\n- 8 x 8, markdown 기준 1000줄 이하, 200자 1분 기준 30분 이하로 유지하면서 응축.\n- 읽으면 머리에 그려지도록 가독성이 좋은 글을 지향\n- 내가 알게 된 것들을 나의 언어로 작성하여 공유\n\n## 주제 선정\n\n- share experience\n- 1 page ~ 2 page\n- easy\n- review need Usage tip\n- with cartoon or picture\n  [[Journal#Writing technique]]\n\n#### Post\n\nhttps://shdkej.com\n\n- [[Digital_Content]]\n- [[Life_Tracking]]\n- [Decision Monitor Size](Decision_Monitor_Size.md)\n- [100k concurrent server](100k_concurrent_server.md)\n- [[Streaming_server]]\n- [[My_space]]\n- [[Note_Management]]\n- [EKS_terraform](EKS_with_terraform.md)\n- [[Spring_TestCode]]\n\n#### 시리즈\n\n- 밸런스 한 꼭지를 주제로\n- 그 주제에 맞는 에피소드나 생각나는 걸 적으면 되지 않을까\n\n#### 무엇을 쓸 것인가\n\n- 다른 사람에게 도움이 되는 나의 경험\n- 인터넷에 널린 이야기 말고 내가 겪은 이야기\n- 나만 알고 있는 이야기가 아니라 공감할 수 있는 이야기\n\n#### 뭔가를 설명하기 위해 추가적인 개념이 있을 경우\n\n그 개념을 먼저 설명한 뒤에 원래 설명을 한다 vs\n원래 설명을 하고 그 개념을 뒤에 붙인다\n\n프로젝트를 직접 해봄으로써 새로운 개념을 알게 되는게 더 쉬운 것 같아서 원래\n설명을 먼저하는 것이 더 이해하기 쉽지 않을까 싶다.\n\n#### 읽고 싶은 제목\n\n- 관심 있는 키워드\n- 호기심 유발하는 제목\n- 질문만으로 궁금증을 유발할 수 있는게 아니다. 궁금할만한 이야기를 하면 그것에 대해 궁금해하면서 궁금증이 생길 수 있다\n\n#### read per minute\n\n- 200 word per minute.\n\n#### 책 1권 - 200자 원고지 800-1000장\n\n20만 글자\n200 단어 1분\n1단어 3-4자 > 애매한 기준\n1분에 800자\n10분에 8000\n60분에 48000\n4시간 분량\n\n8 \\* 8 64개의 목록\n1개당 240/64=4분 남짓\n\n#### 블로그 글 아이디어\n\n- My choose experience\n- 기술 히스토리 search and writing bloging\n- Experience sharing\n- erp 하면서 고려했던 것들, 겼었던 것들 정리\n- 홈페이지 구성요소에 대한 글 블로그 첫글 (블로그 아키텍처)\n- tdd를 어떻게 공부해나갈지도 기록해야겠다\n- 메모리의 지역성. 위치별 속도 차이 부터 시작해서 캐시, 메모리, 리스트 속도로 비교\n- 내 개발 기준\n- 배우고 있는 것들\n- 배운 기술들을 쉽게 풀어내기 (유용한 기술을 쉽게 풀어내기)\n  - 모나드 커링\n\n#### 유튜브 아이디어\n- 디지털 라이프 : 아날로그 아이템 없이 디지털로 다 해결하려는 것을 담는다\n- 21세기 관객 : 비슷하게 IOT 까지 확장하고 21세기에 살아서 좋다 싶은 것들을 담는다\n\n#### favorite\n\ndesk setup\nwhat i use\nday tracking\nhome automation\nminimal travel setup\nwhat's in my bag\ntech gadget\ngood application\nnote taking\n\n#### Item List\n\n- program(develop)\n- program(non-develop)\n- tech gear\n- clothes\n- travel pack\n- Home item\n\n#### 블로그\n\n블로그를 리뷰를 보는 공간이 아닌\n내 디지털 자산을 보관하는 공간으로, 나의 애장품을 큐레이션 하는 느낌으로\n쓰고싶다\n지금 갖고 있는 것\n에센셜한 것들만 딱 올려놓기\n영어로도 올리기\n작성 시 가이드 보고 올리기\n\n#### 블로깅\n\n개인적인 감상, 실용적인 정보를 담은 글\n블로그 글이 찾아서 들어갈때는 서론을 굳이 안읽고싶다\n\n근데 그 주제에 처음 접할때는 서론이 필요하다\n\n## 노하우\n\n#### 단순한거에 집중해야한다\n\n- https://mysetting.io/slides/tech-blog-survival-strategies-writing-in-the-google-era\n- 중요하지 않은 것들은 쳐내야한다\n- 글쓰기에 수많은 가이드와 정보가 있겠지만 중요한 것에만 집중한 것에 더해 불필요한 것은 의도적으로 쳐내는 느낌이 있다.\n\n지양해야하는 글 = 추천할 가치가 없는 글들\n\n- 완성되지 않은 문장들로 작성된 글\n- 개인 노트를 그대로 공개한 글\n- 직접 작성한 내용이 없는 글\n- 설명보다 코드가 긴 글\n- 링크만 모아놓은 글\n\n딱 내 블로그 얘기같아서 뜨끔뜨끔\n2000자 ~ 20000자\n\n아직 좋은 글이 별로 없는 적당한 범위의 키워드를 정한다!\n\n- 파이썬 > 키워드 > 파이썬 array 타입의 reverse 함수 사용법\n- 파이썬 배열 관련 함수!\n\n#### 블로그 글 쓸 때 요소\n\n요약 설명 관련사항\n\n#### wiki blog 문제점\n\n한 문서에 담고 있는 내용이 많아서 검색해서 들어올 때 원하지 않는 자료들을\n봐야한다.\n\n계속 수정된다는 것과 원하지 않는 내용이 포함될 수 있음을 알려줘야겠다.\n\n노트 구조 소개\n노트 리마인더를 주간 리포트 보내기\n데이터베이스에 보내는 내용 저장하기\nbold는 헤더에 쓰이고 있으니 진짜 볼드로 강조한 내용은 하루키의 책처럼 위에 점을\n찍는게 좋겠다\n\n#### 자료 정보 지식 지혜\n\n![data_to_wisdom](../img/data_to_wisdom.png)\n\n#### 문서\n\n![documentation](../img/documentation.png)\n\n- https://documentation.divio.com/\n\n정보제공(정보공유)\n알림(알아주면 감사)\n요청(반드시)\n\n뉴스기사(포스트)\n에세이\n문학\n\n#### inspired\n\n- by john grib for vimwiki to blog\n- ohtani for mandarart table\n\n![mandarart](../img/ohtani.gif)\n\n## 번역\n\n#### 번역시 고민 요소\n\n원작자가 쓴 용어를 그대로 쓸 것인가, 편한 용어로 퉁 칠 것인가\n\n- 영어에서는 같은 표현을 안쓰려고 하는 반면, 한국은 그렇지 않다\n- 원작자가 다른 영단어도 있는데 굳이 그 단어를 썼다면, 그 단어를 그대로 써주는게 원작자의 의도를 더 살리는게 아닐까?\n\n용어사전. 용어를 직역할 것인가, 비슷한 용어를 끌어올 것인가\n\n의역을 통해 잘 읽히게 할 수 있지만 원작자의 전하는 바와 달라질 수 있다\n의역을 하면 그 시대에만 한정되는 언어로 쓰여질 수 있다\n그 때는 좋아보였지만 갈수록 빛을 잃는 문장이 될 수 있다\n\n원문의 형태와 같게 하는게 좋을까? 긴 문장은 긴 문장으로 번역?\n\n- 형태를 유지하되, 어투는 한국식으로 바꾸는게 좋겠다.\n\n#### 번역체\n\n인터넷에서 자동 번역된 것들이 많아서 제대로 독해가 안되는 경험을 많이 겪었기\n때문에 자동 번역된 느낌이 드는 글들은 거부감이 확 든다.\n\n#### 수파리의 관점에서 번역\n\n번역할 때 파파고로 먼저 돌리고 내가 다시 다듬는게 그리 나쁜 것은 아닌 것 같다.\n\n작성자가 작성한 글의 맛을 살리기 위해 문장의 길이는 최대한 맞추는 방향으로\n해야겠다(쉼표, 마침표). 대신 번역투 느낌은 안나도록 최대한 신경써야 한다.\n\n## 영상\n\nFor just video that my log\n\n- Use only the phone. No accessory. No Lighting.\n- No edit photo.\n- No footstep\n- Speedy\n\n- video sound volume different in same people play-list. If I make video, need check this\n\n#### 확인할 것\n\n- 눈에 본대로 표현\n- 주제를 가지고\n- 안정감 있게\n- 프레임에 주제에 집중하되 프레임 바깥을 느낄 수 있으면 좋겠다 프레임에 갇히지 않았으면 좋겠다\n- 아웃포커싱으로 주제를 나타내는 것 좋지만 다 나왔으면 좋겠다\n- 인위적이지 않았으면 좋겠다. 원래 있는 것의 다른 시각으로 나타내면 좋지 새로운 것을 만들어내는 것은 조심해야겠다\n- 필터를 안쓰고 싶다\n  - 조명과 사진 필터는 확실히 효과가 있다\n- 글은 중간 중간 사진을 배치, 영상도 중간 중간 B컷을 배치하고 화면 바뀌면 구도를 변경\n\n#### 영상에 들어갈 구성요소\n\n- navigator\n- subtitle\n- floating current subject on left-top\n- quickly\n\n#### Cinematic\n\n## 이미지\n\n#### Drawing\n\n그림을 그린다면 사실적, 정밀함 보다는\n내가 느끼는 그 물건에 대한 감정을 표현하고 싶다\n\n#### Cartoon\n\nFont\nOne sentence one balloon\nSerif San serif\nOne ballon is egg, fill word to like yellow part\nSome cut has a different feel\nVariable feel, if every cut as the same composition. It is boring\n\n#### 설명을 그림(표, 코드) 위에 놓을까, 밑에 놓을까\n\n글 쓸 때 사진은 위에 두고 **설명이 밑에** 오는게 좋겠다\n\n#### Photograph 기본 요소\n\n- 조리개 F\n  - 낮을수록 구멍 큼 빛을 많이 받아들임, 어두울 때 밝게함\n- 셔터스피드 s\n  - 빛을 모을 시간, 느리게 하면 흔들림이 많이 들어간다\n- 감도 ISO\n  - 낮을수록 빛에 둔감하다? 밤에는 빛이 적어 고감도 사용\n"},{"headings":[{"value":"문서화"},{"value":"좋은 문서화"},{"value":"tdd에 대한 얘기가 나오면 tdd가 잘 정리된 링크를 뽑아놓은 것을 딱 전달한다"},{"value":"documentation for"},{"value":"swagger"},{"value":"사내 위키 잘 쓰는 법"},{"value":"도큐먼트 중심으로 정보관리를 하고 기준을 세운다"},{"value":"컨플루언스 기능"},{"value":"문서는 컨플루언스, 노션을 이용해 집적 가능한데"},{"value":"banksalad github"},{"value":"Trouble shooting"},{"value":"에러 리포팅"},{"value":"readme"},{"value":"제품 소개 페이지"},{"value":"제품 소개"},{"value":"사용 가이드를 프로그램 안에 넣어놔야겠다"},{"value":"새로운 툴에 대해 아는 순서"},{"value":"demo page"},{"value":"제품 소개"},{"value":"Many Official document's problems"},{"value":"ETC"},{"value":"코딩관련 글은 실제적 예제가 있으면 좋겠다"},{"value":"문서화"},{"value":"라인의 문서화"},{"value":"google analytics"},{"value":"국제화하는방법"},{"value":"세계화와 각 나라의 관습"},{"value":"히스토리 문서"},{"value":"코드의 메뉴얼"}],"fields":{"slug":"/document/"},"rawMarkdownBody":"\n## 문서화\n#### 좋은 문서화\n\n최신 상태가 유지되고 찾고 싶은 것이 바로 눈에 띄여야 한다.\n접근하기 쉬워야하고 수정하기 쉬워야한다\n\n[[Evolve#많은 양을 잘 관리하는 방법]]\n\n#### tdd에 대한 얘기가 나오면 tdd가 잘 정리된 링크를 뽑아놓은 것을 딱 전달한다\n- 그 개수는 3개를 넘지 않아서 바로 공유를 할 수 있다\n- 그러면 비슷한 수준의 이야기가 진행될 수 있고 내 머리속에도 그 내용이 정리될 수 있다\n#### documentation for\n- document for developer\n- document for client\n- use standard\n\n#### swagger\ndjango rest framework에 api를 자동으로 문서화해주는 기능이 있다\n\n\n## 사내 위키 잘 쓰는 법\n\n#### 도큐먼트 중심으로 정보관리를 하고 기준을 세운다\n정보의 집적을 위해 입력창구와 출력창구를 하나로 통일한다\n입력창구가 하나여야 모두가 그 질문에 관심을 가질 수 있다\n근데 입력창구가 하나면 접근하는 사람이 많아서 올라오는 글들이 많아지면 이전의\n것들이 묻히는 문제가 있다\n\n애초에 그 전에 질문하지 않으려는 것도 문제다\n\n많아서 문제가 생기는 부분은 태그로 표시해서 필터링할 수 있도록 하면 될까?\n없어서 문제가 생기는 부분은 질문이 없을리가 없으므로 유도를 해야한다\n\n#### 컨플루언스 기능\n고객 인터뷰 기록\n새로운 기능에 대한 요구사항 작성\n팀 내부 기술문서\n릴리스 계획\n팀 내부 회의\n\n맥락도 적을 수 있도록 한다\n외부 문서들을 첨부할 수 있어서 한 곳에서 모아서 볼 수 있다\n디자인 목업을 확인할 수 있다\n지라와 연동할 수 있다\n\n문맥 사전을 만들지 않고 컨플루언스를 쓰면 될까?\n\n#### 문서는 컨플루언스, 노션을 이용해 집적 가능한데\n코드는 어떻게 집적하고 확인하고 사용할 수 있을까\njavascript에서는 npm package로 모두 관리한다\ngolang에서는 modules\npython에서는 pip\n한 프로젝트 안에서 관리한다면 github에서 찾아볼 수는 있다.\n근데 일일이 하나하나 찾아봐야 하고, 쉽게 찾고 쓸 수 있는 도구가 필요하다.\n데이터는 이미 있다. 어떻게 찾고 사용하느냐가 중요하다\n- 현재까지의 해결책은 머신러닝과 추천 알고리즘.\n- 정말로 집적이 필요한가. p2p로 분산데이터를 확인할 수도 있다. ipfs는 어떻게\n  전체를 조망할 수 있을까\n\n#### banksalad github\n- awesome style이라는 레파지토리로 사내 행동강령을 모아놓았다. awesome\n- python template을 만들어 사용하고 있다\n\n이렇게 회사 내 자료들을 메타적으로 관리하는 레포지토리를 만들어서 관리하면 좋겠다.\n사내 인적 리소스 관리도 git으로 하면 좋겠다\n\n## Trouble shooting\n문서화를 어떻게 하면 동일문제 발생 시 문서만 보고 처리 가능한가?\n에러명을 적고 설명을 적으면 비슷한 에러라도 다양한 원인, 같은 원인이지만 다른 에러가 날 수 있는데\n\n#### 에러 리포팅\n- 문서 안에서 댓글 다는 방식\n- 윈도우의 리포트 방식\n- 깃랩에서는 어떻게?\n\n에러의 출처와 어떤 내용인지는 필수적으로 필요 할 것 같다.\n에러가 들어오는 곳은 하나로 통일 되어야 할 것이다.\n\n## readme\nreadme에 아키텍처 한눈에 보게 하고\n각 폴더의 역할에 대한 설명 간단하게 적기\n\n## 제품 소개 페이지\n- 한줄 소개\n- Demo\n- 이미지와 동작과정(gui가 없으면 터미널 동작이라도)\n- 메인 기능\n- 경험 소개\n- 비교\n\n내가 만든 프로젝트들 패키지로 만들어놓고 서버에 배포하는 것까지 정리를 하고, 덧붙일 것은 나중에 덧붙이기. 도큐먼트, 패키지, API, 로그\n\n[[Product]]\n\n#### 제품 소개\n- 데모사진\n- 사양\n- 실 사용 시나리오\n- 장단점\n- 내가 살 때 고려한 것\n\n#### 사용 가이드를 프로그램 안에 넣어놔야겠다\n\n일단 제품 링크 들어가면 무슨 일을 하는 툴인지 확인하고 실제 어떻게 동작하는지 보고 퀵 스타트로 간단한 예제 본다\n\n#### 새로운 툴에 대해 아는 순서\n- 이것의 정의 (이게 뭔지)\n- 이게 왜 필요한지\n- 어떻게 쓰는지\n\n#### demo page\n스크립트 실행하는 영상을 svg로 변환해서 깔끔하게 재생할 수 있는가보다\n\n#### 제품 소개\n어떤 실제적 사례가 있는지 소개\n\n인터랙티브가 느껴져야겠다. 현재 활발하게 서비스 중인지. 곧 없어지진 않을지\n\n다른 사람들이 만든 tutorial에서 내가 원하던 것 외에 또 사용하는 라이브러리가 있으면 거부감이 들어 쓰려고 하지 않았다. 최소한의 뼈대만으로 구현하고 싶어서 그랬다.\n\n#### Many Official document's problems\n- it's doesn't have experience.\n- 공식 문서에는 없는 내용이 경험을 가미한 개인의 블로그글에서 있고, 그게 더 도움이 될 때가 있다\n단순 역사 흐름 속에서 수많은 세부 내용과 운명을 가를 선택이 있고, 그 정보는 넓게 퍼져있다\n\n\n## ETC\n#### 코딩관련 글은 실제적 예제가 있으면 좋겠다\n+ 개발 관련 문서는 소스버전관리프로그램과 연동되있어야 업데이트가 쉽겠다\n\n#### 문서화\n자동 문서화\nApi, test scenario, monitoring point\n\n수동 문서화\n- 주요 시나리오\n    - 내가 이런 부분을 신경써서 만들었다를 알려주고 신경 쓰지 못한 부분을 알 수 있다\n- 아키텍처\n- 모델\n- 데모\n\n메타 문서함\n- 용어 사전\n- 유의어 사전\n- 년도별 묶음\n- 인덱스 페이지\n\n#### 라인의 문서화\n신입 가이드\n테크스펙\n코드를 고치고 정기적으로 배포할 때의 절차\n비상상황 행동 방침을 합의해놓은 팀 문서\n\n느낌은 전수되지도 않고 일관되지도 않다\n느낌이 아닌 원칙을 만들어 나가면 전수받고 같이 성장할 수 있다\n\n[[Journal#Writing technique]]\n\n#### google analytics\nutm을 주소 뒤에 붙임으로써 어느 경로로 들어왔는지 확인할 수 있다.\n개발자스럽다에서 여러 링크를 제공해주는데 그 링크에 utm으로 자신의 주소를\n걸어놓으면 링크 주인은 개발자스럽다에서 들어왔다는 것을 확실히 알게된다.\n나도 내 블로그에 걸어둔 링크에 저걸 넣어야하나 아니면 구글에서 알아서 해주나?\n\n마케팅 측면에서 SNS에 홈페이지 주소를 올리고 UTM 정보를 적어서 어떻게 들어오는지\n확인할 수 있다.\n\n#### 국제화하는방법\n일단 표시되는 글자를 파일을 읽도록 뺀다\n파일에 한 언어 말고 여러 언어를 입력할 수 있도록 한다\n파일을 직접 열어서 수정하지 않고 바로 수정할 수 있도록 한다\n\n#### 세계화와 각 나라의 관습\n- 읽는 방향은 국가별로 일관성이 있다\n- 만화에서 좌에서 우로 본다는 관습적인 속성을 이용해서 말풍선을 배치한다\n- 일본만 해도 읽는 방향이 반대인데, 만화라는 컨텐츠는 이동 시 수정이 필요하다\n- 애초에 쓰는 언어가 다르긴 하지만...\n\n\n#### 히스토리 문서\n\"히스토리\n그러다가 일지 개념에서 발전한 히스토리 문서가 있으면 좋겠다고 생각을 하게 됐어요. 사실 사람들이 히스토리를 남기지 않는 이유는 그냥 귀찮아서가 아니에요. 남기고 싶어 하지만 어디다 어떤 사실을 남겨야 할지 모르기 때문에 망설이다가 잊어버리는 거예요.\n\n그래서 처음에는 아주 단순하게, 특정 프로젝트를 진행하기 위해 해야 하는 것들을 날짜별 체크리스트로 만들었어요. 날짜마다 관련된 문서나 슬랙 대화 목록 등을 스크린샷을 찍어서 넣어뒀고요.\n\n\n일지에서 히스토리로, 히스토리에서 문서로.\n\n이렇게 작성한 체크리스트는 프로젝트 배포 이후에도 계속 유지를 했어요. 그리고 어떤 문제가 생겼다면 문제를 어떻게 인지했는지부터 해결했는지 문서로 정리해서 서브 문서로 만들어서 링크해놨습니다. 나중에 회사에 처음 와서 프로젝트를 새로 시작하시는 분들이나, 새로 팀을 이동해온 분들께 이 문서를 드렸더니 업무에 도움이 많이 됐다고 전해주셨고요.\n\n그리고 이렇게 하면서 각각의 방법도 같이 문서를 남기면 좋겠다 싶었어요. 그래서 히스토리 문서에 각각의 방법에 대해 서브 문서를 만들어놨어요.\n\n이렇게 히스토리를 남기는 방법에 대한 선례가 생겼잖아요. 그러니까 그 다음 프로젝트에서도 이걸 보고 따라하는 식으로 비슷한 스타일의 문서가 조금씩 추가되었습니다. 이 문서들만 쭉 읽어보기만 해도 새로운 분들한테 온보딩도 되고 히스토리를 알 수 있다는 점에서 굉장히 좋았습니다.\n\n\"\n(https://www.inflearn.com/pages/weekly-inflearn-38-20211228#:~:text=%EB%AC%B8%EC%84%9C%EB%A1%9C%20%EB%A7%8C%EB%93%A4%EA%B8%B0%EB%8F%84%20%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4.%C2%A0-,%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC,%EB%B6%84%EB%93%A4%ED%95%9C%ED%85%8C%20%EC%98%A8%EB%B3%B4%EB%94%A9%EB%8F%84%20%EB%90%98%EA%B3%A0%20%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC%EB%A5%BC%20%EC%95%8C%20%EC%88%98%20%EC%9E%88%EB%8B%A4%EB%8A%94%20%EC%A0%90%EC%97%90%EC%84%9C%20%EA%B5%89%EC%9E%A5%ED%9E%88%20%EC%A2%8B%EC%95%98%EC%8A%B5%EB%8B%88%EB%8B%A4.%C2%A0%C2%A0,-%EC%A7%9D)\n\n\n#### 코드의 메뉴얼\n디자인 시스템\nhttps://news.hada.io/topic?id=5597\n"},{"headings":[{"value":"feedback circuit"},{"value":"Review"},{"value":"5F"},{"value":"선순환"},{"value":"선순환"},{"value":"시너지"},{"value":"프로페셔널과 선순환"},{"value":"선순환"},{"value":"Software Feedback"},{"value":"Feedback"},{"value":"피드백은 잘 진행되고 있는지 평가할 지표가 있으면 명확해진다"},{"value":"빠른 실패"},{"value":"feedback"},{"value":"빠른 피드백 vs 인터럽트"},{"value":"search 하는 경험을 피드백을 녹여보기"},{"value":"feedback"},{"value":"채널을 맞추고 통신하면 소통이 확실해질 수 있다"},{"value":"복잡성과 피드백"},{"value":"feedback 회로"},{"value":"google에서 grpc request와 response를 따로 하는 이유"},{"value":"매일 매일 조금씩 하는 것"},{"value":"행동과 가이드를 매칭할 방법"}],"fields":{"slug":"/feedback/"},"rawMarkdownBody":"\n## feedback circuit\n\n![feedback_circuit](../img/feedback.png)\n\n> http://cad.kyungpook.ac.kr/micro/feedback/feedback-detail.html\n\n## Review\n\nreport, monitoring, response, communication\n\n#### 5F\n\n- fact, feeling, finding, future, feedback\n\n#### 선순환\n- 좋은 인재 - 좋은 글 - 많은 독자 - 수익 증가 - 좋은 인재\n\n#### 선순환\n응원하는 사람과 응원받는 사람이 서로 힘을 받는다\n마라톤 대회에서 음료를 나눠주는 사람들과 음료를 받으며 회복하는 사람들\n서로 고마워하며 서로 행복해한다\n\n#### 시너지\n\n투명성, 공유, 인터렉션\n\n#### 프로페셔널과 선순환\n\n영화현장에서 배두나가 빼어난 프로페셔널한 모습을 보여주니 다른 관계자들도\n프로페셔널한 부분을 끌어내려고 하는 선순환이 일어났다고 한다\n\n[[Archive#review of 6 months of german life]]\n\n#### 선순환\n\n잘 되는 서비스 -> 사용자 증가 -> 데이터 증가 -> 사용성 개선 -> 잘 되는 서비스\n\n## Software Feedback\n\n알림이 너무 많이 오면 노이즈가 되어 무시하게 된다\n변경 사항에 대해 알림을 준다\n\n한 번에 너무 많은 메시지는 피곤하다\n같은 에러가 여러 번 오면 따로 표시해준다\n시각적으로 한 눈에 알 수 있으면 좋겠다\n에러가 발생한 곳이 어딘지 알려주면 좋겠다\n\n배포 후 배포 상황 확인\n\n변경 작업 후 모니터링 페이지로 가서 한 눈에 확인할 수 있으면 1차 확인은 되겠다\n\n행동별 보는 페이지가 있으면 되겠다\n\ngrafana는 다양한 메트릭을 보여줄 수 있어서 사용하되, 한눈에 보는 페이지는 따로\n관리해야겠다\n\n- grafana에서 셋팅하는게 무난해보인다... alert 설정도 좋고, export도 잘되고\n\nrunning server with auto attachment\nauto feedback\n\n- running well?\n- how speed?\n- any problem?\n- need more?\n\nprogram -> feedback -> program -> feedback\n\n- program send data to feedback\n- feedback send data to program\n\nrunning well: health check\n\nhow speed: test script\n\nany problem: log\n\nneed more: receive client voice\n\n## Feedback\n\n- 하루를 돌아보는 작업도 피드백\n- 프로젝트를 회고하는 것도 피드백\n- 슈팅 후 원하는 위치에 갔는지 확인하는 것도 피드백\n  - 슈팅을 어떻게 했는지 모르고 감으로만 차면 감만 늘고, 기술적 성장은 안된다\n\n#### 피드백은 잘 진행되고 있는지 평가할 지표가 있으면 명확해진다\n\n계획이 성공되려면 중간 중간 평가할 요소가 있어야겠다\n추적할 수 있는 지표\n\n#### 빠른 실패\n\n빠르게 진행해서 빨리 피드백을 받는 것\n실패는 항상 찾아오니까 빨리 개선점을 찾으려고 하는 것\n\n근데 무턱대고 하면 안되고, 그렇다고 너무 준비를 오래해도 안된다\n\n어렵다\n\n진행됐다고 치고, 진행이 되면 반드시 실패가 찾아온다. 피드백을 빨리 받고 고쳐서\n다음 단계로 나간다.\n처음 시작하는 것을 어떻게 할지가 어렵다\n말을 적게 하면 좋다는 생각에서\n많이 해서 고치는게 좋다는 생각으로 바꼈었는데\n무작정 많이하면 안된다는 것도 새삼 깨달았다\n\n많이 하되, 정제된 상태로 많이하는 것이 능력이겠다 +정 반 합 으로 생각을 한번 정리한 후에 말하면 되려나+ +피드백을 받을 수 있는 형태로 정제해서 진행+ 하면 무작정 뱉는 것보다 나아질 수\n있겠다\n\n#### feedback\n\n피드백을 어떻게 줘야 하나...\n\n1. 콘솔에서 아웃풋\n2. 메신저로 보내기\n3. 슬랙 같은 팀 채널에서 모아서 관리하기\n\n피드백의 핵심은 즉시 알아차리게 하는 것인데\n메신저는 약간의 지연이 있을 것 같다 (비동기 통신 방법이긴 하네)\n동기 통신으로 보내자면 또 저장을 못하고,\n그러면 개발 중에 메신저를 항상 켜놓는다는 전제로 생각해야하나\n채널을 하나로만 하면 너무 많은 데이터가 쌓여서 또 곤란하겠네\n\n개인 개발 시에는 메신저로 오게 할까\n근데 메신저로 오면 업무의 연속성이 안좋을 것 같다\n노트북으로 작업할 때는 노트북에서 바로 볼 수 있어야겠는데\n\n#### 빠른 피드백 vs 인터럽트\n\nfeedback이 인터럽션이 될 수 있다.\n\n어느 정도가 적당한 빠른 피드백일까\n\n약속된 시간에 주는 신호는 노이즈가 되어 무시가 될 수 있다.\n\n#### search 하는 경험을 피드백을 녹여보기\n\n1. 시작점을 찾는다 (내부에 들어가기 전에 내 생각을 먼저 확인한다)\n   - 피드백을 빨리 받아서 고치는 방법을 알고 싶다\n   - 피드백을 효율적으로 받는 방법을 알고 싶다\n   - 과학적으로 행동에 대한 인지를 하는 방법을 알고 싶다\n   - 다른 영역이 응답을 빨리하는 것에 대해 모은 지식을 알고 싶다\n   - 어떤 방식으로, 어떤 주기로, 어떤 내용을 주면 좋을지 알고 싶다\n2. 단어를 모은다 (측정 가능한 기준을 세워서 범위를 잡는다)\n   - 피드백\n     - 빠른 피드백 주는 법\n     - 피드백 실험\n   - 모니터링 서비스의 피드백\n   - 운동에서의 피드백\n   - 기계 시스템에서의 피드백\n   - 빠른 피드백\n   - 개발에서 빠른 실패, 애자일\n   - 온라인스토어에서 고객의 불만 접수 및 응대\n   - 연예인이나 컨텐츠 제작 후의 시청자 반응에 대한 응대\n   - 공인이 불미스런 사건을 일으켰을 때의 조치\n   - 커뮤니케이션에서의 피드백\n   - 회사 메뉴얼의 축적\n   - 회고\n   - fail fast\n   - 피드백의 종류가 다양하다. 정량적 피드백, 정성적 피드백\n     기계에게 하느냐, 사람에게 하느냐의 차이도 있다\n     - 디자인 뉴스레터 디독\n   - 제품 제작, 디자인 등 클라이언트가 있는 작업\n3. 정보를 쌓는다 (인용이 많이 된 것들은 좋은 글일 확률이 높은 것 같다)\n   - 커뮤니케이션에서의 피드백\n     - 감정의 관리가 필요하다\n     - 해결해야 할 문제나 솔루션의 불확실성이 높을 때, 리뷰의 빈도를 올린다\n     - https://ridicorp.com/story/giving-honest-feedback/\n   - 회사 메뉴얼의 축적\n     - 개인의 노하우가 회사의 노하우가 될 수 있도록 해야한다\n     - 문서가 너무 많아지면 오히려 읽지 않는다\n     - 회사에서 누군가 경험한 것이라면 다시 실수가 반복되지 않도록\n       알려주면 좋은데, 찾지 못하면 소용이 없다\n   - 피드백을 주는 것은 시스템, 사람이지만 받는 것은 사람이다\n     - 시스템끼리 피드백을 처리할 수도 있지만 최종 피드백은 사람이다\n   - 변경 된 사항을 적절한 시점에 알게 되는 것이 필요하다\n   - [ ] [피드백 유형과 과제지속의 관계에 대한 연구](https://www.ejce.org/download/download_pdf?pid=jce-20-1-143)\n   - [ ] microsoft, google에서 피드백을 받는 도구를 만든게 있다\n     - https://docs.microsoft.com/ko-kr/windows-insider/developers/tools\n   - [ ] 운동에서의 피드백\n     - http://kocw.xcache.kinxcdn.com/KOCW/document/2018/seowon/yoonwanyoung201/9.pdf\n     - [운동학습](https://blog.naver.com/choiyuwon/220810803366)\n4. 정리한다\n5. 검증한다\n\n- 검색 범위가 넓으니까 지친다. 작게 작게 찾아지도록 해야겠다\n- 피드백이라는게 넓은 의미를 가져서 다양한 영역에서 추상적으로 설명하고,\n  자기계발서 같은 곳에 뻔한 글들이 많아서 걸러내면서 찾기가 힘들다\n- 피드백이 좋다는 것이나, 방법론 적인 추상적인 이야기가 많다\n- 피드백이 중요하다는 것은 사람들이 알고 있으나, 정보 공유는 많이 하지 않는\n  영역이라 피드백이라는 단어보다 우회적인 단어를 찾아야한다.\n- 이렇게 한 영역에 대해서 찾는 것을 하다보니 학술 공부하는 것과 비슷한\n  느낌이다. Roam Research에서 봤던 노트 구조로 작성하면 효과적일까\n- 정보의 출처에서 연결된 정보가 또 나온다\n\n#### feedback\n\n- 머신러닝에서의 피드백\n- 학기마다 보는 시험도 피드백\n- 하루를 되돌아보는것도 좋은 피드백이다\n\n상용서비스라면 유저들이 활동하는 영역에서 사용 경험이 산발적으로 나올 수 있다\n이런 피드백도 잘 수집하면 좋긴 하겠다\n\nit 기기 관련 리뷰는 그런 제품들을 사용하는 사람들이 많이 모인 커뮤니티에 주로 올라온다\n물론 예상치 못한 곳에서도 올라온다\n\n원하는 자료가 한 곳에만 올라오는 일은 거의 없다\n그랬다면 자료 찾기도 훨씬 수월했겠지\n\n그러면 흩어진 자료를 찾는 방법이 피드백을 찾는법과 비슷하겠다\n\n기계의 고장률이 제로가 되지 않는다\n기술이 많이 발전했지만 예상치 못한 문제가 생긴다\n\n모니터링도 카오스 테스트도 예상 못한 지점을 찾으려고 한다\n근데 경험을 통해 개선하는 것이 최선인 것 같다\n\n로켓펀치 같은 채용사이트에 새로 등록되는 채용안내문은 많은 양이 아니라서 적당히 모아서 구직자에게 알림을 보내도 방해가 되지 않는다\n이 알림의 적당량은 어느정도일까\n\n#### 채널을 맞추고 통신하면 소통이 확실해질 수 있다\n\n사람과 사람 사이에서 피드백은\n강한 피드백 등 안좋은 영향을 조심해야한다\n\n#### 복잡성과 피드백\n\n각 서비스에서 피드백이 복잡성을 푸는 키다\n\n복잡성은 복잡하지 않은 것들이 많이 동시에 일어날 때 생기는데\n\n각 서비스에서 피드백을 어떻게 주느냐를 잘 설정하면\n로그, 데이터 결합, 복잡성 해소가 해결되는 실마리가 될 수 있다\n\n#### feedback 회로\n\n인풋 아웃풋\n아웃풋을 통해 인풋을 조절해서 원하는 아웃풋으로 유지하도록 한다.\n인풋을 뭘로하고 아웃풋을 뭘로 해야 하나.\n아웃풋이 기대값이 있다면 함수형으로 만들면 피드백 루프가 필요없을 수 있겠다.\n\n#### google에서 grpc request와 response를 따로 하는 이유\n\n구글 api는 왜 각 속성마다 request와 response를 따로 만드나?\n\n- 입력값과 출력값이 각 함수마다 다르기 때문...\n\n#### 매일 매일 조금씩 하는 것\n\n작은 것들이 모여서 큰게 되는게 맞지만, 상호작용이 중요하다.\n함께 자라기에서 상호작용은 피드백이라고 했지만, 피드백이 없더라도 어떤\n상호작용이 있다면 거기서 창발적 현상과 함께 큰 성과가 따라올 것이다.\n신경 써야 하는 것은 상호작용이 있냐 이다. 그리고 피드백은 좋은 상호작용이긴 하다.\n\n#### 행동과 가이드를 매칭할 방법\n\n트리거를 등록할 방법\n\n뭔가 자료조사를 할 때 저절로 가이드를 옆에 띄울 방법\n어느 장소에 가서 뭔가 해야할 때 다시 기억나게 할 방법\n집에 가면 뭔가를 해야할 때 그것을 떠올릴 방법\n"},{"headings":[{"value":"question"},{"value":"japan"},{"value":"English"},{"value":"기본동사"},{"value":"동사활용"},{"value":"useful sentence"},{"value":"what is difference"},{"value":"sentence"},{"value":"헷갈리는 단어"},{"value":"communication vs conversation"},{"value":"verb"},{"value":"travel sentence"},{"value":"mores: social convention"},{"value":"들어가 들었어 들렸어 들었다"},{"value":"영어 업무 핵심 동사"},{"value":"english pronounce"},{"value":"영어 발음"}],"fields":{"slug":"/foreign_language/"},"rawMarkdownBody":"![on](../img/aintoonto.jpg)\n\n**elaborate** -- revision\n\n- 구동사 익히기\n- 듣고 말하기 (쉐도잉) 자막없이가 마지막에 되야 되고 그게 처음부터는 어려우니까 자막으로 이해하고 연습한다\n- 내용어 기능어를 생각하면 말에 어디에 힘을 줘야될지 알게되고 말 할때 빨라질 수 있다\n- grammar in use\n    - 영어 문법책 강추 영어로 보는걸 추천\n- 영어회화 핵심패턴 233\n- 영어 동화책 번역, 독일어 동화책 번역\n- 만화로 짧고 빠른 글 읽기 연습\n\n## question\n- when use be verb?\n    - I am eat, I eat\n    - I have been see that, I have seen that.\n- be verb is state. don't use movement behavior.\n- one sentence has only one verb.\n    - I am eat -> I am eating chocolate. or I eat.\n    - I have been see that -> I have been seen that.\n\n## japan\n동사 꾸미기\n우,츠,루 무,누,부 쿠,구 스\n입니다 마스\n아니다 나이\n접속형 뗴, 응데, 이테, 시테\n과거형 타\n명령형 우\n~하자(권유형) 오우\n시키다 세루\n당하다 네루\n하지마 기본형+나\n할 수 있다 ㅔ루\n한다면 ㅔ바\n이쿠(가다)는 이이테 여야 하지만 실제로는 잇떼로 쓴다\n~타라\n~타리\n이 형용사에는 접속사 테를 쓸 때 쿠를 붙인다\n\n## English\n- basic verb\n- would could\n- to for by of\n- frequently used expressions\n\n## 기본동사\n- get: use when change state\n- take: use when strongly have\n- do: repeat, instead general verb\n- have: it's to own\n\n## 동사활용\n- 합니다\n- 했습니다\n- 했었습니다\n- 할겁니다\n- 합시다\n- 할까요\n- 하고\n- 하지만\n- 하세요\n- 한다면\n- 한다고 해도\n- 합니까\n- 합니다\n- 하지 않다\n- 하고\n- 했다\n- 하자\n- 해라\n- 하지마\n- 할 수 있다\n- 한다면\n- 시키다\n- 당하다\n- 하게 되다\n- 하지 않을래요?\n- ~하고 싶어요\n- ~하고 싶었어요\n- ~합니까\n- ~합니다\n- ~하고싶다\n- ~해도 됩니까 / ~하면 안됩니다\n\n\n#### useful sentence\n- I've done\n- I've been going to Rome\n- I've ever gone to Rome\n- I'm gonna do this\n- I didn't think that\n\n#### what is difference\nare you finished\nyou are finished\nyou were finished\nyou were finish\n\n## sentence\n- Did my back hurt your knife?\n- Is there blood coming out of my ears?\n- Be ... to none\n\n\n#### 헷갈리는 단어\n- serve 제공하다\n- reserve 예비하다\n- preserve 보존하다\n\n- consist 일관성\n- concrete 구체적인\n\n- aggregate 집합, 모음\n\n- authority-권위\n- authorization-허가\n- authentication-인증\n\n- involve, evolve, devolve\n- particular, participate\n- certain, concern\n\n#### communication vs conversation\n커뮤니케이션은 단방향도 포함\n컨벌세이션은 양방향\n'커뮤니케이션은 생각이나 정보 등을 전달하는 것을,\n컨벌세이션은 그렇지 않은 것'이라는 의견도 있다\n\n#### verb\nUpdate vs modify vs change\nRemove vs delete\n\n## travel sentence\n한명이에요 자리 있나요?\n이거 먹을게요\n음료는 필요없어요\n계산할게요\n\n## mores: social convention\n\n#### 들어가 들었어 들렸어 들었다\n\n#### 영어 업무 핵심 동사\n핵심 동사 7가지\n1. come up with : (돈/해결책/아이디어 등을) 마련하다 Can you come up with a plan by tomorrow? 내일까지 계획을 마련할 수 있어? I came up with a strategy. 내가 전략을 마련했어. How would you come up with the rent? 너 어떻게 월세를 마련했니? Maybe come up with a better plan? 혹시 더 나은 계획을 마련해 줄 수 있니?\n2. Put together : (이것 저것 모아) 만들다/준비하다 Put together a team 팀을 꾸리다. I'm putting together a team. 팀원을 모으다. Can you put together a presentation? 네가 프레젠테이션을 준비할 수 있어? Could you/Can you put together a presentation for tomorrow? 내일 프레젠테이션 좀 준비해 줄 수 있어? Put together a report. 보고서를 준비하다. So I've put together a marketing campaign.\n3. work : 일하다, 되다, 작동하다 (1) 일하다. I have to work late today. 오늘 야근 해야 해. Do you work tomorrow? 내일 일해? (2) 일정을 잡을 때 work (되다) Does tomorrow work for you? 내일시간돼? Does Friday work for you? 금요일 시간돼? (3) 작동하다 I don’t think the wi-fi is working. 와이파이가 안되는거 같아. I don’t think my laptop is working. 내 노트북이 안되는 거 같아. *\n4. Keep 사람 posted : (진행 상황/현황을) 계속해서 ~에게 알려주다. I will keep you posted.[포스띧] 어떻게 진행 되는지 알려줄께. Keep me posted. 어떻게 진행 되는지 알려줘.\n5. 5 Move (1) 일정을 조정할 때 Can you move up the meeting? = Can you move the meeting up? 회의 일정을 (좀 더 일찍) 당길 수 있어? (2) move on: (다음으로) 넘어가다. Let’s move on the next topic. 다음 주제로 넘어가자 Let’s move on the next presentation. 다음 프레젠테이션으로 넘어가자. Let’s move on the next question. I need to move on 전 남친/여친을 잊고 새출발 할 때\n6. 6. Pick up (중단된 상황으로 돌아가) 계속하다 사다 (1) (중단된 상황으로 돌아가) 계속하다 Let’s pick this up tomorrow. 내일 이어서 계속 하자. Let's pick this up after lunch. 점심 먹고 계속 하자. Let’s call it a day and pick this up tomorrow. 오늘은 여기까지 하고 내일 이어서 계속하다 (2) 사다 (= get) * buy 가 떠오르나 상대가 부담을 느낄 수 있다. I’ll go pick up some coffee.. I got you this coffee.\n7. 7. Let 사람 know : ~에게 말씀 부탁 드립니다. Please let me know at your earliest convenience. 편하실 때 말씀 부탁드립니다. Please let me know A.S.A.P.[애이쌥] 최대한 빨리 말씀 부탁드립니다. Please let me know by Friday at the latest. 늦어도 금요일까지 말씀 부탁드립니다.\n\nsign off on 승인하다 wrap up 마무리하다 bring up언급하다 work on공들이다 forward 전달하다\n\n\n#### english pronounce\n- R L\n- P F\n- A E\n- C K\n#### 영어 발음\nL 발음은 혀를 내미는 느낌. 윗니 뒤에 혀가 붙는다\nR 발음은 혀를 속에서 굴리는 느낌. 개가 으르렁 하는 느낌\n\nP는 입술\nF는 혀와 입술\nB는 입술\nV는 혀와 입술\n"},{"headings":[{"value":"수학적 사고"},{"value":"Logical"},{"value":"연역법"},{"value":"귀납법"},{"value":"귀류법"},{"value":"변증법"},{"value":"명제 논증 결론 전제"},{"value":"그림이론"},{"value":"논리와 감정은 분리되지 않는다"},{"value":"논리적 오류의 종류"},{"value":"Philosophy"},{"value":"근대철학자"},{"value":"모더니즘"},{"value":"베이컨이 제시한 인간이 생각을 가지게 되는 경로 4가지 (인간의 우상)"},{"value":"비트겐슈타인"},{"value":"주자"},{"value":"도덕적 개인주의는 무엇이 ‘좋은 삶’인지에 대한 끊임없는 성찰, 그리고 ‘자기가 옳다고 믿는바’를 대중의 판단으로부터 독립시켜 사고할 수 있는 자율성을 요구한다."},{"value":"꿈 속에서는 내가 겪었던(티비를 본 것도 포함하여) 일들만 일어나는 것인가?"}],"fields":{"slug":"/logical_thinking/"},"rawMarkdownBody":"\n## 수학적 사고\n> 정답부터 찾으려고 하기보다 좋은 질문을 먼저 던지려고 하는 것 어쩌면 수학적 사고를 통해서만 좋은 질문을 던질 수 있고, 우리가 찾은 답이 의미 있는지 확인할 수 있다고 말할 수 있다.\n> <수학이 필요한 순간 - 김민형>\n\n## Logical\n- 유물론 관념론\n- 기계론적 유물론\n- 변증법적 유물론\n- 수학적 귀납법\n- 일반 귀납법\n\n하나의 논리 구조를 만드는 것\n- 추론 과정 사실 결과 판단 근거\n\n#### 연역법\n일반적 사실로부터 구체적 결론을 이끌어내는 것\n전제가 잘못되면 추론은 깨진다\n\n\n#### 귀납법\n귀납법: 관찰된 구체적 사실을 가지고 일반적인 사실을 만드는 것\n관찰된 것이 전체를 대표하는지 확인 불가\n하나라도 다른 것이 있으면 추론이 깨진다\n\n반복되는 것에서\n첫번째 동작이 동작함을 확인한다\n두번째 동작이 동작함을 확인한다\n나머지도 동작한다고 할 수 있다\n\n#### 귀류법\n내가 물건을 살 때 사려고 했던 동기를 한 번 생각해보면서 그 동기가 타당한지 확인하는 것이 귀류법적 접근이었다\n\n어떤 동작을 하려고 할 때 그 동작이 아닌 다른 동작을 하는 것이 더 나은지 확인해서 더 낫지 않다고 확인되면 원래 하려던 동작을 하는 것이 최선이다는 방식이다\n\n원하는 바와 반대되는 상황을 가정하고 논리를 전개해서 결론이 잘못되었음을 찾아내는 증명 기법\n\n> 찰스 다윈은 종의 기원을 출간하기 전에 자신의 진화이론에 대한 가능한 반론을 모두\n> 찾느라 20년 가까이를 소비했다고 한다\n> <알고리즘 라이프 - 알리 알모사위>\n\n#### 변증법\n제시하고 반박하고 합친다\n세상은 변증법적으로 발전하고 있다\n\n변증법: 정, 반, 합\n전제, 반대, 융합\n\n#### 명제 논증 결론 전제\n\n#### 그림이론\n\n#### 논리와 감정은 분리되지 않는다\n사람을 설득하기 위해서는 그 사람을 생각해야한다\n\n마음에 안들면 어떤 객관적 자료도 안좋게 볼 여지가 있다\n\n알고리즘을 예로 들면, 알고리즘의 결과를 보고 사람이 개입할 여지가 있기에, 어떤 알고리즘도 사람의 주관이 없는 것이 없다\n\n## 논리적 오류의 종류\n1. 심리적 오류\n\t1. 감정에의 호소\n\t2. 사적 관계에의 호소\n\t3. 군중에의 호소\n\t4. 부적합한 권위에의 호소\n\t5. 인신공격\n\t6. 피장파장\n\t7. 원천 봉쇄의 오류\n2. 자료적 오류\n\t1. 성급한 일반화의 오류\n\t2. 잘못된 유추의 오류\n\t3. 무지에의 호소\n\t4. 논점 일탈의 오류\n\t5. 우연의 오류\n\t6. 의도 확대의 오류\n\t7. 잘못된 인과 관계의 오류\n\t8. 결합, 분해의 오류\n\t9. 흑백 논리의 오류\n\t10. 복합 질문의 오류\n3. 언어적 오류\n\t1. 애매어의 오류\n\t2. 은밀한 재정의의 오류\n\t3. 애매문의 오류\n\t4. 강조의 오류\n\t5. 사용과 언급을 혼동하는 오류\n\t6. '이다'를 혼동하는 오류\n\t7. 범주의 오류\n\n## Philosophy\n\n#### 근대철학자\n- 17세기 경 부터 르네상스 이후 인간에 대한 인식 변화를 가져온 시대\n- 데카르트는 모든 것을 의심하여, 진실에 대한 새로운 인식을 가져왔다.\n    - '나는 생각한다. 고로 나는 존재한다' 가 진실의 시작이라고 했다.\n- 경험론 - 합리론에 맞서 사유가 아니라 경험에서 지식이 유래한다고 주장\n- 관념론 - 칸트, 인간의 관념이 사회를 형성한다고 주장\n- 실존주의 - 니체, 사르트르, 보부아르, 철학적 사유의 시작을 개인의 경험으로부터\n- 실용주의 - 실천과 이론을 연결시키려고 했다. [이이의 이통기국](#이통기국은 이상이 현실 속에 존재함을 의미한다.)이 생각난다\n- 분석 철학 - 비트겐슈타인, 러셀\n\n#### 모더니즘\n롤랑바르트\n보르헤스\n\n구조주의\n- 사물은 주변 환경에 의해 본질이 바뀐다\n- 근데 그 본질은 하나로 귀결된다\n\n포스트구조주의\n- 본질이 바뀌는건 맞는데, 본질이 하나가 아니라 다양하고, 그래서 다양한 의견을 제시하는 것 자체가 가치있다\n\n모더니즘\n- 이성이 짱이고 문제 해결을 위한 핵심이다.\n- 이성적으로 답이 정해져있어서 권위적이고, 경직된 느낌\n\n포스트모더니즘\n- 이성만이 짱이 아니다.\n- 다양성 추구\n\n모더니즘이 건축, 디자인 영역에서는 의미없는 장식이나 형식을 깨고, 기능에 집중하는 방식으로 쓰이고, 이는 현대에도 계속 사용되고 있다. 특히 less is more, minimalism.\n\n포스트모더니즘은\n이성의 부작용인 경직되고 획일화된 사고를 뛰어넘어\n감성, 비주류, 다양성을 조명\n\nhttps://ko.wikipedia.org/wiki/%EA%B7%BC%EB%8C%80%EC%B2%A0%ED%95%99\n\n#### 베이컨이 제시한 인간이 생각을 가지게 되는 경로 4가지 (인간의 우상)\n- 종족 - 인간이라는 종족에 대한 이해\n- 동굴 - 개인적 특성, 상황\n- 시장 - 인간간의 관계에서 배우는 것\n- 극장 - 추상적인, 고찰을 거친 개념(철학)에서 오는 인식\n\n짜임새있게 잘 정리한 것 같다\n\n#### 비트겐슈타인\n> 철학의 임무란 세계와 언어의 한계를 명확히 함으로써 말할 수 있는 것은 더욱 명료하게 말하고 말할 수 없는 것에 대해서는 침묵하는 것이다\n\n#### 주자\n> 모든 행동 속에는 그 안에 이치가 있다. 그 이치를 지배하는 최고의 이치가 있다. 그 최고의 이치가 사람에게 오고, 사람 안에 이치가 있다\n\n#### 도덕적 개인주의는 무엇이 ‘좋은 삶’인지에 대한 끊임없는 성찰, 그리고 ‘자기가 옳다고 믿는바’를 대중의 판단으로부터 독립시켜 사고할 수 있는 자율성을 요구한다.\n> 소크라테스가 자신을 ‘탁월한’ 사람이라고 표현한 바 없듯이, ‘진정한 정치적 기술’을 아는 사람이 꼭 탁월한 ‘소수’일 필요는 없다. 반면 진정한 정치적 기술을 아는 사람들은 누구나 좋은 삶을 끊임없이 추구할 것과, 대중들의 판단에 스스로를 내맡기기보다 자기가 믿는 바를 지속적으로 견지할 것을 요구받는다. 그리고 만약 ‘진정한 진리’(psychagogia)를 조금이라도 맛보았다면, 다른 사람들을 ‘좋은 삶’(eu zen)에 대한 고민으로 이끌어 올 것을 요구받는다. 한 마디로 말하자면, ‘모든 것을 의심해보는 것’과 ‘스스로에 대한 확신’이 끊임없이 진리를 추구해야한다는 정치철학적 전제를 통해 수렴되는 것이다.\n> - https://terms.naver.com/entry.nhn?docId=1928653&cid=51609&categoryId=51609&expCategoryId=51609\n\n#### 꿈 속에서는 내가 겪었던(티비를 본 것도 포함하여) 일들만 일어나는 것인가?\n프로이트의 무의식 이론에 그런 이야기가 있었던 것 같은데 찾아봐야겠다. 그렇다면 겪었던 일이 그대로 나오는게 아니라 겪었던 여러 경험이 꿈 속에서 저절로 조합되서 나오게 되는 내가 꿈꾸던 완전 링크된 기억으로서 꿈이 만들어질 수 있겠다 싶다. 연관관계를 스스로 찾아내서 꿈 속에서 보여줄 수 있겠다 싶다.\n\n꿈 속에서 늘 고민하던 것들이 티비에서 봤던 인과응보의 내용과 섞여서 실제 고민이 해결되는 꿈을 꿨는데 평소에는 연관시킬 생각조차 못하던 것들이 꿈에서 나와서 신기했다\n"},{"headings":[{"value":"오픈소스 기여하기"},{"value":"Open-source - Contributed all people"},{"value":"License"},{"value":"소프트웨어 개방의 단점"},{"value":"장점"},{"value":"버저닝"},{"value":"오픈소스 추천 사이트"},{"value":"발표"},{"value":"40분 발표"},{"value":"계몽주의의 틀을 벗어난 강의 형식."},{"value":"In the conference"},{"value":"Reference"}],"fields":{"slug":"/open_source/"},"rawMarkdownBody":"\n## 오픈소스 기여하기\n- 오픈소스의 배경지식을 알아두는게 좋다\n- 작은 부분에서 시작\n- 먼저 흐름을 파악한다\n- 디버그, 브레이크 포인트를 사용하여 호출 스택 확인\n- 필요한 부분을 먼저 본다\n- 구조를 그리면서 파악한다\n- 나라면 어떻게 할지 생각한다\n- 작성자의 습관, 방식을 파악한다\n - ( if문을 어떻게 사용하는지, 함수를 어떻게 사용하는지, 호출을 어떤식으로 하는지, 테스트를 어떻게 하는지)\n- 비슷한 내용의 다른 것들을 찾아본다.\n - (레퍼런스 확인)\n\n## Open-source - Contributed all people\nthere's license\nalmost free, but no everything is free.\n\n## License\n- MIT\n- Apache\n- GPL 사용한 프로그램을 모두 공개해달라는 적극적 오픈소스 요구의 목적\n- LGPL 개선한 소스에 대해 공유해달라는 요청\n- AGPL 서버에서 사용하더라도 공유해달라는 것\n- 그 외 오픈소스를 쓴 것에 대해 명시하도록 요청\n\n## 소프트웨어 개방의 단점\n- 자신들만의 기술이 공개되어 다른 기업에서 이용하면 자신의 기업이 메리트가 없어짐\n    - 핵심기술은 비공개로 하고 API만 개방하면 괜찮을까\n- 허점을 들킬 수 있음\n\n#### 장점\n- 사용자 증가\n- 생각지 못했던 기술이 더해져서 외연 확장\n    - 직접 개발하지 않은 것들이 사용자 필요에 의해 개발될 수 있다\n\nB2B, B2C 에 따라서 가치가 달라질까? B2B에서는 개방화를 할 필요가 없을까?\n\n## 버저닝\nversioning 할 때 1.2.x 로 해서 x부분은 오류 수정용으로 해서 하위호환성을 무조건 유지하도록 하면\n버그 픽스도 되고, 업그레이드도 안해도 되도록 할 수 있지 않을까\n\n사용할때는 1.2.x로 해놓으면 1.2.x 는 다 받을 수 있게 설정해놔야 한다.\n- 시맨틱버저닝이 내가 생각하던대로 구성된 것이었다\n\n하나의 기능에 버전이 하나 오르는 것까지는 납득된다\n근데 하나의 기능이 많은 코드로 이루어지면 여러 커밋으로 이루어질텐데\n그러면 커밋하고 PR한다고 버저닝이 되는게 아니라\n실제 기능이 동작해야 버전이 올랐으면 좋겠다\n\n#### 오픈소스 추천 사이트\n- https://opensourcestash.com/\n- https://free-for.dev/#/\n\n[[Cleaning#Used Tool]]\n\n## 발표\n\n#### 40분 발표\n40분 발표라면 전체를 구조화해서 10분마다 재밌는 포인트를 배치한다든지 체계적으로 만들 수 있다. 전체를 한 눈에 만들 수 있다. 글도 읽는 시간을 고려해서 중간 중간 포인트를 넣을 수 있겠다\n\n#### 계몽주의의 틀을 벗어난 강의 형식. \n발표할때도 공감이 이어지는 형식이면 좋겠다\n\n#### In the conference\ndoesn't need a count of a second.\njust need a minute.\n\n## Reference\n- [AWS와 Elastic 라이센스 분쟁 - by outsider](https://blog.outsider.ne.kr/1533)\n- [AWS와 Elastic 라이센스 분쟁 - by opsnow](https://blog.opsnow.com/35)\n- [오픈소스 릴리즈 팁](https://spoqa.github.io/2017/09/28/foss-release-tips.html)\n- [오픈소스 구조와 모듈 파악하기](https://kdydesign.github.io/2020/10/19/open-source-flow/)\n- [오픈소스 컨트리뷰터 찾기](https://www.sosconhistory.net/soscon2019/content/data/session/Day%201_1630_1.pdf)\n- [오픈소스 개발기](https://deview.kr/data/deview/session/attach/1500_T1_박재성_깃헙%204.4K%20스타%20billboard.js%20메인테이너가%20들려주는%20오픈소스%20개발기.pdf)\n\n인기 있는 오픈소스 프로젝트 만드는 팁 | GeekNews\n[https://news.hada.io/topic?id=5379](https://news.hada.io/topic?id=5379)\n"},{"headings":[{"value":"말이 잘 통한다는게 어떤 것일까"},{"value":"잘 듣기"},{"value":"설득은 무엇인가"},{"value":"내뱉어야 피드백이 들어오고 피드백은 발전을 만든다"},{"value":"가슴 아픈 말"},{"value":"편하게 얘기하는 법"},{"value":"유대감은 상대의 경계를 완화해준다"},{"value":"소중한 사람을 위할 때 사람은 좋은 일을 할 수 있다"},{"value":"인질 구출 시 인질범도 대화로 풀어나간다고 하는데..."},{"value":"상대방을 알아봐주고 공감해주고 들어주고"},{"value":"비즈니스 협상"},{"value":"좋은 태도"},{"value":"커뮤니케이션에서의 마음가짐"},{"value":"모른다는 것을 알아야 서로를 존중할 수 있다"},{"value":"고양이 측정법"},{"value":"사람을 대할 때"},{"value":"Reasonable, emotion, 대안을 제시한다"},{"value":"말할 때 감정을 담으면 듣기 쉬워진다"},{"value":"자기 얘기를 하는 것"},{"value":"관심 없는 얘기를 계속하는게 문제"},{"value":"대화"},{"value":"생각과 다른 이야기를 하고 싶을 때"},{"value":"육아 대화법"},{"value":"대화"},{"value":"대화"},{"value":"자기방어가 나를 소극적이게 만든다"},{"value":"말"},{"value":"말을 잘하고싶다"},{"value":"기승전결"},{"value":"맥락"},{"value":"최강록"},{"value":"소통"}],"fields":{"slug":"/talk/"},"rawMarkdownBody":"\n## 말이 잘 통한다는게 어떤 것일까\n\n포용력\n\n- 의견 조율이 잘 되야 한다\n- 관심사가 비슷하고\n- 고집 부리지 않고\n- 재치가 있고\n- 여유가 있고\n- 집중력 있고\n\n- 칭찬과 호감표시는 처음 보는 사이에 친밀감을 높여준다\n- 약간의 유머로 자신을 낮추면 친해지기 좋다\n\n#### 잘 듣기\n\n- 듣는걸 잘한다고 생각했는데, 그냥 듣는게 아니라 잘 들어야 한다\n\n인터뷰이는 듣기만 하는게 아니다\n\n- Listening -- friendly, vibe, similar interesting\n- Speaking -- Think my voice and delivery\n\n## 설득은 무엇인가\n\n설득은 어떤 경우에 하는 것인가\n설득이 아니라 가르쳐먹으려 들 수 있음에 주의\n\n#### 내뱉어야 피드백이 들어오고 피드백은 발전을 만든다\n\n내뱉은 말은 주워담을 수 없다의 시대를 지나\n가만히 있으면 잘못을 알 수도 없고 발전할 기회를 잃게 되는 것이 더 큰 것 같다.\n\n그동안 말을 아끼는 것이 가치있다 생각했는데\n잘못된 말이라도 그 잘못을 받아들일 수 있다면 더 나아질 수 있는데 아무 말도 안하면 제자리에 머무를 수 밖에 없다.\n\n#### 가슴 아픈 말\n\n말이라는 게 그저 말 뿐일 수도 있지만, 되게 상처가 되는 말은 신경을 써서라도\n피하는 것이 좋겠다. 당연한 얘기지만...\n\n#### 편하게 얘기하는 법\n\n상대의 수신을 안정시킨다. 그리고 이야기를 한다\n부탁이 있으면 상대방의 마음을 안정시킨 후 얘기한다\n\n기분 상하지 않게 이야기를 꺼내는 것을 익혀야겠다\n확대해석을 조심하자\n이중성을 띌 수도 있지만 조심하자\n뇌에서 생각해서 입으로 말할 수 있어야 한다\n남의 장점을 잘 말해주면 좋겠다\n\n#### 유대감은 상대의 경계를 완화해준다\n\n같은 이스터에그를 공유하면 유대감이 올라간다\n그곳의 문화를 공유하면 유대감이 올라간다\n\n#### 소중한 사람을 위할 때 사람은 좋은 일을 할 수 있다\n\n소중한 사람이 많으면 좋은 사람이 될 수 있다\n마냥 좋은 것을 쫒는 것은 막연하다\n소중한 사람을 위하는 마음이 좋은 행동을 만든다\n\n#### 인질 구출 시 인질범도 대화로 풀어나간다고 하는데...\n\n#### 상대방을 알아봐주고 공감해주고 들어주고\n\n#### 비즈니스 협상\n\n#### 좋은 태도\n\n행동에 이유가 있어야 한다\n반대를 할 때는 대안을 제시한다\n\n#### 커뮤니케이션에서의 마음가짐\n\n고정관념, 편견을 멀리\n오픈마인드\n낮은 자세\n둥글둥글\n쉬운 표현\n수신\n칭찬\n존중\n\n#### 모른다는 것을 알아야 서로를 존중할 수 있다\n\n- 나도 나를 모른다\n  - MBTI, 타로, 기타 성격 테스트는 흥미롭다. 나를 알려주니까\n- 남도 나를 모른다\n- 태어나서 내가 살아온 동안 겪은 것도 다 안다고 할 수 없다.\n- 그 상황이 닥쳤을 때 그동안의 정보를 모두 활용할 수 없다.\n- 뭘 모르는지도 모른다\n- 제품 추천 시에 어떤 게 필요한지도 모른다\n- 내 생각을 제대로 표현하지 못한다\n- 좋은 걸 보고 뭐가 좋았는지 모른다\n\n그래서 뭘 하는지보다 왜 하는지를 전달하면 서로 넓게 생각할 수 있다\n\n#### 고양이 측정법\n\n귀여운 고양이 사진을 보면 기분이 좋아진다.\n고양이 사진을 보고도 기분이 안좋아진다면 감정에 크게 문제가 생긴 것으로,\n스트레스를 과도하게 풀 필요가 있다.\n\n#### 사람을 대할 때\n\n모두 각자의 장점을 갖고 있다. 장점을 찾으려고 하고 내가 그것을 배우면 좋겠다.\n\n#### Reasonable, emotion, 대안을 제시한다\n\nopen mind\n\n#### 말할 때 감정을 담으면 듣기 쉬워진다\n\n꾹꾹 눌러담은 말보다\n어떤 말이 튀어나올지 모르니까 죄송하다고 양해를 구하고 말하는 게 더 현실적이다\n\n#### 자기 얘기를 하는 것\n\n자기얘기를 하는것  \n듣기힘들게 늘어지게 말하는것  \n사전설명이 필요한것을 말하는것\n\n자기계발서의 뻔한 얘기들을 들으면 반발심이 생긴다\n\n#### 관심 없는 얘기를 계속하는게 문제\n\n감정표현 더하기, 공감부터 하기, 관계에 대한 대화로 풀어가기  \n군대, 축구 얘기를 하는걸 싫어하는 경우를 많이 봐서 이런식으로 한 주제에 길게 얘기하는것에 방어기제가 있었던 것 같다. 군대, 축구 얘기가 문제인게 아니라 관심 없는 얘기를 계속하는게 문제다.  \n적당히 눈치봐서 관심없어 보이면 다른 주제로 넘어가면 되지 무조건 한 주제에 대해 길게 얘기하는걸 피하려고 하지 않아도 된다. 관심없어 보이면 공통관심사로 다시 풀어나가면 된다\n\n#### 대화\n\n티키타카가 안됐다\n다음 질문 생각한다고 지금 얘기에 대해 생각을 못했다. 현재에 집중하고 몰입해야 한다.\n그러나 애초에 어떤 말을 들으면 대답이 떠오르지 않는다. 그냥 아 그렇구나 하고 만다.\n의미없는 말을 하고 싶지 않았지만, 아무 얘기도 안하면 결국 대화는 끊긴다.\n영화에서 외삼촌 앞에서는 가서 아쉽다는 식으로 얘기하고 가고 나면 '이 시간에 와서 민폐야' 이런 식으로 얘기하는 연출을 비슷한 것을 이전에도 봤었는데 그 때는 아 저런 장면 별로다 라고 생각했는데, 나도 사실은 앞에서 솔직하게 말해서 기분 나빠지면 저런 말을 굳이 왜 해 라고 생각하면서 기분 상해했다. 이중적인 모습을 또 발견하게 되어 다행이다.\n의례적으로 하는 말이라고 나쁜게 아니고, 솔직하게 말해준다고 기분 나빠할 필요도 없다. 고마워해야할 것들이다.\n의례적인 말은 되도록 안하고 싶지만, 대화를 위한 대화를 안하고 싶었지만, 최소한의 매너가 될 수 있겠다.\n내 진심이 뭔지 모른다.\n\n- 벌새를 보고\n  #movie\n\n#### 생각과 다른 이야기를 하고 싶을 때\n\n먼저 동의하고 공감해주고\n다른 사람들의 그럴만한 사정도 한 번 짚어주고\n다시 동의해주면\n나중에 다른 사람들의 그럴만한 사정을 한 번 더 생각해줄까\n\n다른 사람들의 그럴만한 사정을 알고 있어도 그냥 기분 나쁜건 어쩔 수 없는걸까\n\n#### 육아 대화법\n\n아이에게 잘 말해주는 게 평소에 대화하는 것에도 유용한 방법일 것 같다\n\n타인의 마음을 알아봐주는 거\n\n가치 있는 사람으로 대해주는 거\n\n아이는 부모가 좋아하는 것을 하려고 한다\n\n아이가 24시간 내내 이쁠 수 없다\n\n한번 말해줬다고 바뀌지 않는다 천번 만번 전달해줘야 한다\n\n육아관련 책이나 강연을 들으면 그 때는 이해가 되는데 실제로 하기가 힘들다 #이상과현실\n\nhttps://www.youtube.com/watch?v=iqDZH5-auZQ\n부모와 자식이라는 위치를 상정해놓고 아이를 대한다는 이야기도 하신다\n\n넘지 말아야 할 인간의 도리를 알려줘야 한다고 한다\n\n- 아이에게는 할 수 있는 말이지만 어른들끼리는 그 선을 알기 어렵다\n- 친구를 밀어서 상처를 입힌 상황에서, 밀면 안되는거야 라고 훈육해야한다고 하신다. 근데 밀면 어떻게 되는지 직접 생각하게 해서 그렇게 하면 안된다는걸 깨닫게 하는 쪽이 더 낫지 않을까 싶긴 하다\n  - 근데 또 즉시 대답을 해야하는 상황을 유도해놓고, 답을 정해놓고 그 대답을 하도록 만드는 것으로 느껴질 수도 있겠다\n  - 그 상황에서 납득시키기보다 그 상황에 대한 이야기를 같이 공유해서 스스로 납득하도록 하면 좋겠다. 그러기 위해서 그런 상황에 맞는 창작물을 잘 알아놓으면 좋겠다\n\n육아의 최종 목적은 독립\n\n우리가 어린 시절에 어른들로부터 듣고 싶었던 말\n\n#### 대화\n\n다른 사람의 감정을 살피자\n\n윈스턴 처칠은 순간적으로 받아치는 능력을 키우기 위해 수천 수가 넘는 시 외웠다고 한다\n\n#### 대화\n\n리액션을 더 잘해야겠다\n사실 위주의 대화를 하고 있는 것 같다. 좀 더 호응을 생각해야 한다\n어제도 좋아하는 기분에 더 맞춰줬어야 했는데 자꾸 걱정을 앞세웠다.\n오늘도 이야기 진행에 더 호응 해줬어야 했는데 반박하는 말을 언제꺼내지 생각만 했다. 내 말은 나중에 또 꺼내면 되고 일단 흐름에 맞추면 좋을 것 같다. 이야기를 끝내고 싶으면 반박하면 된다.\n\n첫 대화는 어느정도 개선된 거 같은데, 그 뒤가 문제다. 두번째부터 잘하는 것도 또 생각해야한다. 관계를 새로 맺는 것을 안하다가 하게 되어서 배우게 되었고, 이제는 새로 맺은 관계를 발전시키는 것을 배울 차례다.\n\n#### 자기방어가 나를 소극적이게 만든다\n\n> 감추고픈 상처 때문에 자기를 꾸미게 된다\n\n#### 말\n\n그냥 말을 들었을 때 느꼈던 감정이 있으면 그걸 그냥 말하면 될 거 같다. 답만 딱 하려고 했던 경향이 있는데 오히려 감정도 같이 전하는게 더 좋을 거 같다. 이게 내가 하는 축구 플레이와도 비슷해서 신기했다. 어차피 재밌으려고 하는 축구니까 내가 하고 싶은 플레이를 되든 안되든 해보면 되는건데 자꾸 패스만 하려고 했다. 패스 빠르게 주는게 좋은 상황도 있지만 내가 하고 싶은 플레이가 있으면 해도 된다. 너무 남을 의식하려고 하지 말자.\n\n차분하게 침착하게 여유롭게\n\n- [ ] 하나의 주제를 가지고 짧게 영상으로 말하기 연습\n\n멍청해 보이는 걸 두려워 하지 말아야 하는데 잘 안된다\n남의 눈치를 안봐야 하는데 본다 안봐도 된다\n근데 사람을 대할때는 사랑하는 마음으로 대해야한다\n\n자기방어 기제 극복\n열등감을 원동력으로\n과거는 중요하지 않다 그것에 대한 관점을 새롭게 함으로써 미래에 원동력으로 삼을 수 있다\n열등감을 컴플렉스로 삼을게 아니라 원동력으로 삼아야한다\n\n플랜을 준비해야할 때와 아닐 때\n시간을 채워야하거나 해야할것이 명확할때는 준비를 철저히 하면 좋다\n하지만 사람을 만나러 갈때는 사람이 목적을 위해 만나는게 아니라 순간에 집중하고 즐기러 가는거라 준비가 오히려 독이 될 수 있다\n여행은 순간을 즐기는 것과 목적을 띄는 두가지명이 다 있는데 이 부분은 좀 더 생각해봐야겠다\n\n갑자기 쏟아내는 것은 아무 효과가 없더라\n발표를 하면 뭔가 확 영향이 있을 줄 알았는데 전혀 없고 오히려 내용도 잘 전달이 안된 것 같다\n전달은 천천히 서로간의 앎의 상태를 정렬하고 나서 얘기가 진전되야 통하지 갑자기 때려부으면 이해도 안되고 전달도 안된다\n\n코드를 맞추고\n진심을 공유하고\n감정과 사실을 나누고\n상대방의 마음을 숙고하여 말한다\n\n두루뭉술하고 하나마나한 얘기는 할 필요 없다. 마음에 담기지 않는다\n\n\n#### 말을 잘하고싶다\n말로 현혹하는게 아니라 떠벌리는게 아니라 그냥 생각대로 잘 전달되게 말하고싶다\n\n#### 기승전결\n\n기승전결의 기는 시상을 일으키는 단계. 말할때도 시상을 떠올리게 할 수 있으면 좋겠다\n\n#### 맥락\n\n같은 맥락속에서 대화하면서도 맥락 밖에도 있을 수 있는 것을 생각한다면 더 다채롭게 대화하면서도 좋은 방향성으로 대화의 질을 만들어 나갈 수 있을 것 같다\n\n#### 최강록\n\n과묵하지만 소극적이지는 않음\n말을 하지 않아도 내공이 있음\n까칠하지 않고 소극적이지 않은 중간\n\n조용하지만 까칠하거나 고고하거나 도도하지 않고 소극적이지도 않은 따뜻하고 나다우면 된다\n\n최강록의 언어도 모으면 좋겠다\n\n#### 소통\n\n소통 뜻 : 뜻이 통하여 오해가 없음\nex 서로의 의견 소통이 잘 이루어지다\n\n소통이 긍정적인 의미를 내포하고 있는데 잘 이루어지다라고 수식이 되는게 긍정적인 것 자체도 잘 만들어나가야하는 노력이 필요하다는 것 같아서 어려움이 느껴진다\n\n나와의 소통도 있다 -> 내면의 준비가 되어있는지\n"},{"headings":[{"value":"Convention"},{"value":"Commit"},{"value":"Conventional commits"},{"value":"keep a changelog (change log convention)"},{"value":"semantic versioning"},{"value":"Code review"},{"value":"코드리뷰 어려운점"},{"value":"API document"},{"value":"그 기술을 도입하기 위해 회의한 회의록이나 고려사항들을 볼 수 있을까"},{"value":"코드 파악하기"},{"value":"업무 할당 받으면"},{"value":"코드 파악 시 힘든 점"},{"value":"작업 흐름"},{"value":"oss 메인테이너를 생각하면"},{"value":"gitlab communication Top Tips"},{"value":"정보 불균형"},{"value":"라이브러리 찾기"},{"value":"실수를 기회로"},{"value":"github workflow"},{"value":"서비스의 구조와 팀의 구조가 닮는다"},{"value":"같은 영역에 있는 개발자들끼리 한 동영상으로 같이 스터디"},{"value":"리더가 되면"},{"value":"피자 2판 팀"},{"value":"직종별로 팀이 나눠져있다가"},{"value":"기능별로 팀을 나눈다"},{"value":"전체를 보는 방법"},{"value":"분업"},{"value":"적절하게 선택된 개체들에게"},{"value":"리멤버 회사 서버/웹 팀이 일하는 방식"},{"value":"업무의 만족도에 영향을 미치는 요소"},{"value":"재택 근무가 가능한 업무와 아닌 업무가 있겠다"},{"value":"일을 진행할 때"},{"value":"커뮤니케이션에 대한 불안"},{"value":"비판 대신 진취적 개선에 에너지를 쏟는다."},{"value":"모험 지향적인 사람 vs 확실성 지향인 사람"},{"value":"감독이 없는 팀이 잘 굴러가려면?"},{"value":"Compare manager role in many field"},{"value":"이태섭 신부님"},{"value":"프로젝트 한 페이지에 관리"},{"value":"새 프로젝트"},{"value":"개발의 목표"},{"value":"Project start flow"}],"fields":{"slug":"/teamwork/"},"rawMarkdownBody":"\n## Convention\n회사별 룰\n- 코딩 컨벤션\n- 빌드룰\n- 커밋룰\n    - versionning\n- 이슈관리룰\n- 문서작성룰\n- 핫픽스룰\n\n## Commit\nwith semantic versioning\n     and changelog\n\n툴을 이용해서 커밋을 하면 컨벤션 지키기도 쉽고 관리도 쉬워지겠다\n- standard-version - versioning, changelog, commit\n    - 커밋을 인터랙티브하게 했으면 좋겠는데 그냥 설정파일 기반으로 한다\n- semantic-release - standard-version + publishing(release)\n- *git cz*\n    - need package.json file\n    - `echo '{ \"path\": \"cz-conventional-changelog\" }' > ~/.czrc'`\n    - `-a` option 넣으니 된다\n    - 이건 커밋만 해주고 체인지로그는 안바꿔준다\n        - 체인지로그와 버저닝은 github actions에서 해주는게 좋겠다\n- git-chglog\n    - need config file\n- release-it - versioning, changelog, publishing(release)\n\n#### Conventional commits\nfeat()\nfix\ndocs\nrefactor\nstyle\ntest\nchore\n\n```\nfeat(lang): add korean language\n\nBREAKING CHANGE: new release (options)\n```\n\nfeat은 minor, fix는 patch, BREAKING CHANGE는 major를 변경하는 식이다.\n\n> https://www.conventionalcommits.org/ko/v1.0.0/\n\n#### keep a changelog (change log convention)\nAdded\nChanged\nDeprecated\nRemoved\nFixed\nSecurity\n\n> https://keepachangelog.com/en/1.0.0/\n\n#### semantic versioning\njavascript 에서는 편의를 위한 라이브러리가 많이 있는데\ngolang에서도 각각 따로 구현되어있다\nchangelog를 자동 생성해주고\nversioning을 도와주고 lint 해주고\n\n- 푸시를 할 때 태그를 이용해서 버전을 직접 입력해줘야 하나?\n    - default는 마지막 patch로 한다\n    - CI로 설정해놓으면 commit 메시지를 읽고 자동 변경\n    - 처음에 v0.0.0 태그와 latest 태그만 생성해준다\n- changelog는 직접 입력하는건가?\n    - commit message로 template을 정해서 적는다\n\nkeepachangelog template\nbumper\n\n## Code review\n\n#### 코드리뷰 어려운점\n\n어떤 이슈를 해결하기 위한것인지 파악해야함\n바뀐 파일들이 많으면 순서가 있으면 좋겠음\n너무 많은 PR을 만들면 머지를 해야할게 많아져서 귀찮아져서 하나의 PR로 만드는데 이렇게 되면 변경사항이 너무 많아져서 놓치는 부분이 생길 수 밖에 없다\n\n- 배포가 브랜치 단위라서 PR이 묶인다?\n\n## API document\n[[Document]]\n\n#### 그 기술을 도입하기 위해 회의한 회의록이나 고려사항들을 볼 수 있을까\n\n\n## 코드 파악하기\n특정 부분을 돌려보고 디버깅 해보기\n특정 부분을 수정하려면 어떻게해야할지 생각해보기\n\n#### 업무 할당 받으면\n1. 일단 그림 그려보고 실행 목록 세워보기\n    - 1-1. 레퍼런스 확인하기\n2. 구현하기\n    - 2-2. 문서화 확인\n3. 커밋으로 작업 내용 공유\n\n#### 코드 파악 시 힘든 점\n아키텍처가 일관성을 가지는게 제일 중요할 것 같다.\n- 분기를 어디서 할지 결정하는게 시간이 걸린다.\n- 기존 작업하던 대로 진행하고 싶은데, 그 참고할 데이터를 바로 못찾겠다\n\n#### 작업 흐름\n- 최소의 실행 가능한 것만 있는 뼈대를 찾아서 가져온다\n    - create-react-app이 그런 것을 한다.\n    - 나는 node-react-docker-compose를 이용한다\n    - cookiecutter라는 파이썬 툴도 있다.\n- 필요한 기능과 리소스를 가져온다\n- 배포하면서 확인한다\n\n\n## oss 메인테이너를 생각하면\n다른 기여자들에게 응대하는 일이 많은 시간을 차지한다.\n회사에서 다른 팀과 커뮤니케이션하는 것 이상으로 많은 메시지가 들어온다.\n커뮤니케이션도 개발의 일부지만, 기존의 정보를 잘 활용해서 같은 질문에 계속\n대답해야 하는 것은 줄이도록 하는 방법이 필요하다.\n[[Feedback]]\n[[Open_Source]]\n\n#### gitlab communication Top Tips\n1. 모든 소통은 영어로 한다. 1:1 일때도, 대화내용을 누군가에게 전달해야 할 때가 있다\n2. 웬만하면 비동기로 대화를 한다(채팅, 이메일, PR, 이슈, 슬랙 알림). 채팅으로\n   인한 인터럽트 없이 일 할 수 있어야 한다.\n3. 이슈에 대해 토의하거나, PR은 다른 무엇보다 중요하다. 만약 급한 응답이\n   필요하다면 이슈나 PR의 링크와 함께 챗을 보내고, 거기에 질문을 남겨라. 하지만\n   바로 응답하지는 않을 수도 있다. 슬랙에 대한 자세한 내용은 따로 정리돼있다.\n4. 채팅 대신 이메일 쓰고 싶으면 써도 된다. 근데 내부용 이메일로 짧은 메시지만\n   작성해서 써라. 채팅할 때처럼\n5. 너도 항상 일하고 있지는 않을거다. 근무 시간 외에 응답이 올거라는 기대도 없다.\n6. 동기적 소통도 좋을 때가 있다. 하지만 동기적인 상황을 기본으로 놓지는 말자.\n   화상 통화를 하는게 바로 문제가 해결될 때가 있지만, 화상통화에 대한 가이드를\n   참조해라\n7. 질문 많이 하는건 너무 좋다. 계속 질문해줘라. 그리고 많은 사람들이 볼 수 있게\n   이슈나 전체 대화방에 올려줘라. 1:1 챗이나 이메일 말고.\n   뭔가를 핸드북에서 찾다가 못찾겠으면 핸드북 링크와 함께 어떤 것을 못찾겠다는\n   것을 공유해줘라.\n8. 누군가가 너에게 핸드북 링크를 주면 이는 답변이 이미 문서화 되어있었다는\n   것이다. 니가 답을 찾거나 완벽한 답변일 필요없다. 명확해지기 위해 편하게\n   질문해라.\n9. 답변이 아직 문서화되지 않았으면, 즉시 PR 만들어서 핸드북에 올려줘라. 이건\n   질문에 답변해 준 사람이 그 대답 한 번으로 다른 비슷한 질문들에 대한 예가 될 수\n   있어서 좋다. PR은 도와줘서 고맙다고 말하기에 가장 좋은 수단이다.\n10. 뭔가에 언급한게 있다면 링크도 같이 넣어줘라.\n11. 모든 회사의 데이터는 공유 가능한 것이 기본이다. 개인 파일 만들어 쓰지 말고\n    이슈에 댓글 달아주는게 낫다.\n12. 누군가 질문을 하면 마감시간을 알려주거나 답변을 해라. 'OK', '할게', '나중에\n    할게'는 아무런 도움이 안된다. 작은 일이면 2분 정도 들여서 해버려라. 다른\n    사람이 빨리 그걸 잊어버리게. 큰 일이라면 다시 알려주고 다른 방식을 찾아보게\n    해라.\n13. 이슈에 참조로 누군가를 거는건 좋은데, 참조만으로는 누군가가 그걸 보지 않을\n    수 있다. 참조된 사람이 읽고 뭔가 더 액션을 안 취할 수 있다. 명확하게\n    @누구누구로 불러서 뭐가 필요한지 얘기해라\n14. 내부적인 얘기라고 개별적인 그룹 만들어서 얘기하는걸 피해라.\n    - 방해되고 (새 그룹에 새 메시지가 가니까)\n    - 찾을 수 없고\n    - 공유되지 않고 (사람을 추가할 수 없다)\n    - 각 그룹마다 주제가 달라서 주제를 까먹는다.\n    - 기록이 사라진다.\n15. 고객 한 명을 위해서이더라도 채널 만드는 것은 좋다. 이름 형식을 지키고,\n    내부적인 룰을 지켜라.\n16. 문맥이 많지 않도록 소통해라. 명료하게, gitlab은 전부 재택이고, 전 세계에\n    흩어져있다. 문맥에 대한 정보를 최대한 제공하고, 혼란을 피하자. 관련해서,\n    우리는 유비쿼터스 언어를 쓴다.\n17. 개념을 이야기 할 때, 가설에 너무 기대는 것을 조심하자.\n\n- [ ] + 핸드북 부분, MR 부분 더 확인해보자\n\n#### 정보 불균형\n3명이 같이 프로젝트를 진행하다가 1명이 없을 때 기능에 대한 얘기가 진행되면\n그 한 명은 나머지 2명보다 정보가 차이가 나게 된다. 3명 뿐이라면 1명을 위해\n최대한 내용을 전달하자는 노력을 하겠지만, 이게 회사 단위가 되면 정보 비대칭은 더\n심해지고.\n근데 애초에 회사에서는 전체 내용 중에 일부만 정리해서 전달한다.\n\n#### 라이브러리 찾기\n개발자가 새로운 기능 구현 시 프로젝트 구조를 파악하면서 내가 구현해야하는 것에\n필요한 라이브러리를 찾아서 쓴다는게 가능한가? X 불가. 해변에서 바늘찾기. 그래서\n메타적으로 관리하는 페이지가 있어야 한다. 아니, 그런 관리 페이지가 있어도 찾기가\n어려운데!\n\n#### 실수를 기회로\n온보딩을 하면 기본적인 흐름을 파악 할 수는 있다.\n근데 온보딩에도 빈 곳이 많을 수 밖에 없고, 애매한 부분을 만났을 때 상사에게\n질문하는 것이 기본이겠지만, 일단 생각나는대로 해보고 그것을 다음 신입사원은 그런\n고민을 안하도록 고치는 것이 더 현실적이고 나은 방법 같다.\n넛지를 잘 만들던가, 온보딩을 강화하던가.\n\n#### github workflow\ngithub issues: ghi 로 확인\ngit commit - changelog - release: 한번에 가능\ngithub pull request: cli로 가능\ngithub actions: action-cli로 실시간 확인 가능\n\nissue 확인하거나 등록하고, 커밋하고, 풀리퀘스트 올리면 액션 실행되고\n액션 모니터링 하면서 확인되면 코드리뷰 신청 가는거 확인\n코드리뷰 완료되면 머지까지 한 곳에서 확인\n\n\n## 서비스의 구조와 팀의 구조가 닮는다\n\n#### 같은 영역에 있는 개발자들끼리 한 동영상으로 같이 스터디\n\n#### 리더가 되면\n\n> 여러분의 조직에서는 실패를 공유하고 있습니까. 만약 리더가 “나는 수치로 나타난 성과만 보고 직원들을 평가하겠다”고 선언한다면, 어떤 부하가 자신의 실수와 실패를 동료와 공유하겠습니까.\n\n- 퇴근할때는 인사없이 퇴근하도록\n- 공개된 자리에서 잘못을 목격하면 그 자리에서 뭐라하기 보다는 나중에 그것을 지적해주고 주변에 아무도 없으면 그 자리에서 얘기해준다\n- 니가 이걸 해줘서 참 다행이야, 당신이 이 일을 맡아줘서 다행입니다. 라고 말해주자\n- 리더가 되면 기능 개발이 잘 됐는지 확인할 때 말로만 확인하지말고 확인한 부분을 체크하고 새로 추가된게 있으면 그 부분이 잘 확인이 됐는지 판단해서 빠진 부분을 같이 채워나가도록 해주면 좋겠다고 배웠다\n- 사장이 모든 결정 권한을 갖지 않고 역할별로 권한을 갖게 될 경우에 각 역할에서 했던 결과가 좋지 못할 경우 그것을 제지하는 것은 결국 사장(또는 인사)이 아닌가?\n- 리더가 구체적인 만들 목표를 제시하는 것보다 (무엇을 만들자) 가야하는 길을 알려주는게 팀이 더 잘 동작한다\n\n#### 피자 2판 팀\n서비스 당 10개 정도의 라이브러리 사용\n- 아마존 팀은 피자 2판 팀으로 유명한데 팀이 일하는 방식과 팀간의 일하는 방식이\n  실제로 어떻게 이루어지고 있는지 알고싶다\n\n기능 단위로 팀이 분리가 되면\n다른 기능에 대해 아이디어가 생겨도 개발하기 힘들다\n직접하기 보다는 기존 팀이 하는 것이 더 좋을 것이다\n그렇다면 아이디어를 기존 팀에 잘 전파하고 공유할 수 있어야 한다\n이 소통창구는 라이브러리 공유에도 쓰일 수 있겠다\n\n#### 직종별로 팀이 나눠져있다가\n프로젝트가 시작되면 직종마다 사람이 와서 합쳐져서 뭉치도록 하면 되겠다\n\n모두 프로젝트를 진행중이라면 전체 프로젝트 확인이 되는 것이고,\n프로젝트가 끝나면 다음 프로젝트로 넘어갈 수도 있고.\n\n이미 이렇게 일하고 있겠다.\n\n이걸 자료 검색에도 이용할 수 있겠다\n카테고리별로 분류 되있다가 어떤 다른 검색이 들어오면 그대로도 검색이 되도록\n쿠팡이 첫페이지에서 카테고리를 보여주고 있는 것도 이런 생각이 이미 거친 것이겠다\n\n\n프로젝트별로 각 부서에서 모여서 작업하는 방식이\nTF를 구성해서 긴급사안에 대비하는 것과 비슷해보이는데\nTF는 대게 겉만 파다가 끝나는 경우가 있다\n\n어떻게 하면 효과적으로 TF팀이 일을 할까?\n사례를 찾아보면 도움이 되겠다\n\n#### 기능별로 팀을 나눈다\n하나의 플랫폼이 있고, 그 안에 기능을 분리하여 팀도 기능에 맞춰서 분리하는 구조\n기능의 고도화, 유지 및 관리에 유리할 것 같다. 소프트웨어의 사이즈도 적당히\n제한될 수 있을 것 같다.\n예를 들어 전자결제 플랫폼이라면,\n\n마이크로서비스는 한 기능의 크기를 작게 하는 대신 기능별로 연결 시 오버헤드가\n증가하고, 각 기능별로 상태를 확인하는 것도 오버헤드다\n\n#### 전체를 보는 방법\n전체를 보는 역할을 하는 사람을 따로 두어 관리하게 한다. ex 풍훤\n\n타이거팀 https://bcho.tistory.com/992\n\n문서를 효과적으로 관리하려면, 한 곳에 모으고, 계속해서 업데이트하고, 커뮤니케이션을 위한 문서만 만들도록 하면 효과적일 수 있겠다.\n\n회사에서 리더가 일을 다 끌어안으면 안되고 잘 나눠야하는 것처럼 일상생활에서도 이런 방식으로 만들어나가야 할 것 같다\n\n#### 분업\n- 전체를 직접 관리 - 피드백은 빨라진다. 그러나 분업의 장점도 있다. 설계, 고객대응, 개발을 모두 하면 좋은 제품이 나온다?\n- 고객과 개발자가 분리되있어서 동상이몽을 하는 것이 문제되어 연결하고자 하는 것 같은데, 기획과 개발을 합치려는 것인가\n- 시작할 때 큰 설계\n- 시작할 때 목표를 설정\n- 큰 틀 잡는 것 없이 짧게 짧게 설계\n- 설계 후 구현 시 짧은 주기로 구현 확인\n\n#### 적절하게 선택된 개체들에게\n\n> 한정된 자원을 두고 경쟁하게 하면 통제자가 없어도 집단이 잘 동작한다고 한다는 연구가 있다\n> - 복잡하지만 단순하게\n\n\n#### 리멤버 회사 서버/웹 팀이 일하는 방식\n- https://blog.dramancompany.com/2020/12/리멤버-서버-웹-팀은-어떻게-일을-하는가/\n\n테크 스택, 코드 퀄리티(리뷰, 테스트), 오버 커뮤니케이션, 문서화\n\n테크 스택\n- AWS, EC2, Auto scaling, Fargate\n    - Code Build를 이용하여 테스트 분산처리\n    - ELB prewarm으로 트래픽 대응\n- Ruby on Rails\n- React\n\n코드 퀄리티\n- 코드 리뷰\n- 테스트 코드\n\n업무구조\n- 기능조직(서버, 웹, 디자인 등)\n- 목적조직(광고, 커리어 등)\n    - crew와 이를 도와주는 베이스캠프로 이루어짐\n\n#### 업무의 만족도에 영향을 미치는 요소\n- 물질적인 보상과 기회\n- 일 자체가 불러일으키는 의욕과 흥미\n- 복지, 근무환경, 조직들 사이의 위치\n- 관리자와 리더의 능력\n\n팀 전체가 참여하여 설정한 목표를 추구한다면, 결과물을 더 쉽게 얻을 수 있다.\n\n#### 재택 근무가 가능한 업무와 아닌 업무가 있겠다\n티켓별로 각자 일하면 되지 않을까 생각했는데, 연관된 사람들과 같이 해야하는 일이\n있고, 생산직 같은 경우는 노동 시간이 곧 생산량이 되기도 한다.\n\n매니저가 되면 구성원들의 상태를 확인하고 필요한 것들을 잘 연결 시켜 줘야 한다.\n\n#### 일을 진행할 때\n\n하려는 것과 왜 하려는지와 기대하는 것을 같이 전달해야 서로 오해가 줄어든다\n\n#### 커뮤니케이션에 대한 불안\n\n너무 바쁜것으로 보이는 리더\n일일이 물어보기 죄송\n진행상황은 보고 하고 싶은데 진행상황 정리가 잘 안됨\n\n\n#### 비판 대신 진취적 개선에 에너지를 쏟는다.\n> 개발자와 PO는 오버헤드를 감소시키면서, 속도와 품질을 향상시키기 위해 프로세스가 어떻게 수정되어야 하는지 논의한다. 우리가 한 것을 뒤돌아보고 비판하는 대신, 진취적으로 프로세스를 개선하는데 모든 에너지를 쏟는다. 방어적인 태도는 줄어들고, 협동력은 향상된다.\n> - https://pitzcarraldo.medium.com/번역-잘-가요-스크럼-반가워요-칸반-e27d1db15699\n\n#### 모험 지향적인 사람 vs 확실성 지향인 사람\n- https://maily.so/nenep/posts/mjz65e7vrwk\n\n#### 감독이 없는 팀이 잘 굴러가려면?\n자본주의 위에 세워진 사회주의가 기존의 ceo들을 자리에서 물러아게 하면 혁명세력들이 그것을 차지하게 되는데 이들이 공장을 잘 운영할 수 있을까?\n혁명가 중 우두머리에 의지하게 될까?\n혁명가 중 우두머리를 세워놓되 견제를 쉽게 할 수 있게 하면 될까?\n프로그래밍 팀에서 팀장이 없이 될까?\n애자일이라는 프로젝트 진행 방법론에서도 이를 운영하는 애자일마스터가 존재하긴 한다\n어느곳이든 다수의 의견을 모을 중심점은 있어야 하는가\n\n사회주의를 보면 지나친 중앙통제는 실패한다\n적절한 조절을 해야한다\n\n[[Teamwork]]\n\n#### Compare manager role in many field\nFootball coach\n- 프로에서는 개인의 능력을 최대한 끌어내는것이 감독의 역할\n물론 자신의 노하우를 알려주면서 더 배울 수 있지만 가르치는 역할은 아니다\n- Movie director\n- Software team leader\n- My previous company pm\n\n#### 이태섭 신부님\n믿음을 주면 능력 발휘를 잘 할 수 있다\n이태섭 신부의 믿음이 의사가 되는 원동력이 되었다\n구체적으로 해답을 주면 한 걸음을 갈 수 있지만 방향을 잡아주면 오래 갈 수 있다.\n선문답 같이 느껴질 수 있지만.\n\n\n## 프로젝트 한 페이지에 관리\n\n- 개요\n- 전체 아키텍처\n- 프로젝트 깃헙링크\n- 구글드라이브 링크\n- 아사나 링크\n- 컨플루언스 링크\n- 채팅에서 나왔던 내용\n- aws 환경 링크\n- 관련 사이트 링크 (nhn)\n\n#### 새 프로젝트\n\n새 프로젝트를 시작할 때 다시 0부터 시작하는 느낌이 들면 안된다\n회사일을 하면서 노하우가 점점 쌓여야지 계속 0부터 시작하면 회사가 동작하는 방식과는 조금 다르다\n시작할 때 이전 프로젝트의 히스토리를 찾아본다\n\n\n#### 개발의 목표\n개발을 하면 사용자가 원하는 것을 그대로 맞춰주는 것도 중요하지만\n그대로 맞추는 것보다 사용자가 생각하는 이미지의 껍질을 깨뜨려 줄 신선한 이미지를 구현해낼 필요가 있다\n그렇다고 내 것을 주장해야 되는게 아니라 사용자에게 좋다고 느껴지게 만들어야 한다\n나는 좋다고 생각하는데 사용자가 마음에 들어하지 않으면 안된다\n사용자에게 감동을 일으켜야 한다\n\n> 영화의 전권을 쥐고 있는 사람은 어디까지나 감독이다. 감독이 \"이 음악은 아니다\"라고 말하면 내가 아무리 좋다고 주장해도 받아들여지지 않는다.\n> 처음부터 다시 만들어야 한다. 그렇다고 감독이 말하고자 하는 이미지나 영상에 너무 집착해서도 안도니다. 감독의 이미지 안에서 무난한 작품을 만들면 작곡가로서 아무런 재미가 없지 않은가!\n> 대부분의 감독은 풍부한 창조성을 가지고 있다. 그들은 자신의 내부에 있는 모든 창조 에너지를 쏟아부어 영화를 만든다.\n> 따라서 영화음악을 만드는 사람도 그에 걸맞은 풍부한 창조성을 가지고 있어야 한다. 감독은 항상 자기 이미지의 껍질을 깨뜨려 줄 신선한 음악을 찾고 있기 때문이다.\n>\n> - 히사이시 조\n\n#### Project start flow\n1. System Design\n    * Data Design\n    * Analysis Point Design\n    * Architecture Design\n2. Scenario\n    * Test code\n3. Implement\n4. Check\n    * Feedback of Analysis Point\n    * make Report\n5. Refactoring\n\n- 시장 파악\n- 피드백 빨리\n- 반복되는 경험은 미리 조사 가능\n"},{"headings":[{"value":"LLM 이후"},{"value":"추천 -> 의도 이해"},{"value":"생성형 AI의 진화 방향 -> 인간 개입 감소"},{"value":"에이전트의 동작"},{"value":"에이전트 만들면서 고려할 것"},{"value":"GPT"},{"value":"프롬프트 노하우"},{"value":"프롬프트를 쓰면서 오히려 더 배우게 된다"},{"value":"AI 컨텍스트"},{"value":"벡터 스토어"},{"value":"초지능 인공지능에 순응할 것인가"},{"value":"프롬프트 아카이브"},{"value":"학습 시키기"},{"value":"학습시킬수있는 개인용 ai를 어떻게 쉽게 만들 수 있을까"},{"value":"LLM"},{"value":"AI Stack"},{"value":"머신러닝"},{"value":"스포티파이의 머신러닝 기술은 데이터 속 단순 패턴이 아닌 인과관계를 찾는데 주력한다"},{"value":"ML"},{"value":"인공지능"},{"value":"workflow"},{"value":"구성 요소"},{"value":"MLOps"},{"value":"mlops"},{"value":"ml devops"},{"value":"predicting data"},{"value":"Machine Learning framework"},{"value":"tensorflow"},{"value":"GAN"},{"value":"데이터 분석"},{"value":"Reference"},{"value":"AI 최신 기사"}],"fields":{"slug":"/ai/"},"rawMarkdownBody":"![study_ai](../img/F4fl0tfacAAt-8z.jpeg.jpg)\n\n\n- AI\n\t- 머신러닝\n\t- 모델\n\t- LLM\n\t- RAG\n\t- 파인튜닝\n\t- 에이전트\n\t- 생성형 AI\n- LLM\n\t- RAG\n\t- Vector Store\n\t- MCP\n\t- Agent\n\n## LLM 이후\n\n#### 추천 -> 의도 이해\n기존 패턴 매칭, 반응형 추천으로 하던 것을 LLM 이후에는 실제 의도와 고객 맥락\n이해, 지능적 이해, 선제적 제안을 할 수 있는 기술적 기반이 마련되었다.\n\n#### 생성형 AI의 진화 방향 -> 인간 개입 감소\n- 어시스턴트: 규칙 기반\n- 에이전트: 단일 목표, 광범위한 작업\n- 에이전틱: 완전 자율, 다중 에이전트\n\n#### 에이전트의 동작\n- 액션을 하고 관찰을 한다.\n- 메모리와 툴이 필요하다.\n\n#### 에이전트 만들면서 고려할 것\n- 초기 레이턴시\n- 비용\n- 불필요한 호출 줄이기\n- ReAct (Reasoning + Action)\n    - 생각과 액션을 분리. 이미 cursor 등 에이전트가 이런식으로 돌고있음\n\n#### GPT\ngenerative pre-trained transformer\n- 생성형\n- 미리 학습된\n- 이 데이터에서 규칙을 찾아 내 - 트랜스포머의 역할\n\n\n#### 프롬프트 노하우\n- 용도에 맞는 AI 선택\n\t- 자료 기반 AI 대화 : NotebookLM, Lilys AI\n\t- 범용 기반 AI 대화 : chatGPT, claude\n\t- 검색 기반 AI 대화 : perplexity\n- 역할 부여\n- 스스로 검증\n- 초기 기획 구체화\n- 프롬프팅\n\t- 3명의 전문가가 토론하는 라운드테이블 대화를 만들어줘\n\t- 주제 빠르게 배우는 로드맵을 알려줘 \n\t- 어려운 개념은 초등학생도 이해할 수 있게 알려줘\n- 이미지 프롬프팅\n\t- 복잡한 디자인 배제\n\t- 프롬프트 명확한 지침\n\t- 잠재적 문제 최소화\n\t- https://sshong.com/blog/15161\n- 프롬프팅\n\t- https://maily.so/airecipe/posts/8do78ydnrgq\n\t- 적극성을 제어해야한다. (AI가 알아서 하게 할지, 이것만 하게 할지)\n\t- 모르는 게 있어도 스스로 찾아라\n\t- 천천히, 깊게 생각해라 (ultra thinking)\n\t- gpt5는 기본적으로 \"신중형\" 성향이라 가능한 모든 맥락을 모으고 최대한 확실하게 답을 주려고 한다. 그래서 완전히\u001e 정확하지 않아도 된다고 명시해주면 수집 단계가 조금 빨리 넘어감\n\t- https://maily.so/airecipe/posts/32z8wgp1zn4\n\t- 깊이, 길이, 적극성을 조절한다\n\t- https://maily.so/airecipe/posts/8mo5pj9nz9p\n\t- 페르소나를 구체적으로 설정해줄수록 세밀한 답변을 받을 수 있다\n\t- 나의 상황을 솔직하게 공유\n\t- https://maily.so/airecipe/posts/w6ov6yy7zk5\n\t- 구현 잘된 이미지 프롬프트\n- 프롬프트\n\t- 이 작업을 잘 모르는 동료가 할 수 없다면 클로드도 못한다\n\t- 맥락 정보가 있으면 더 잘한다\n\t- 아래 프롬프트를 개선하기 위해 나한테 4가지 질문해줘 그것을 기반으로 프롬프트 만들어줘\n\t- 사고과정을 출력하게 해서 생각의 연쇄를 만들게 해야 진짜로 깊게 생각함. 단순한 것부터 복잡한 순으로\n\t    - 단계별로 생각해보자\n\t    - 이건 특정인의 사고연쇄과정을 물어보는 식으로도 쓸 수 있다. 전문인의 지식이 녹아있기 때문에.\n\t    - 근데 이걸 잘 뽑는 것도 프롬프팅을 잘 써야할 듯\n\t- [프롬프트 엔지니어링 가이드 사이트](https://www.promptingguide.ai/kr/introduction/examples)\n\t- https://docs.anthropic.com/ko/docs/build-with-claude/prompt-engineering/overview#vs\n\t- xml 형식처럼 열고 닫는 태그로 요청 구분\n\t\t- xml 이란 html처럼 미리 정해진 태그가 아니라 사용자가 지정할 수 있는 태그를 쓰는 마크업 언어\n- 강조는 효과가 있다\n\t- ** Strict Rules! 반드시 이 룰은 지키게 됩니다. **\n- AI는 거인의 어깨에 제대로 올라탈 수 있는 기회다\n- 검색이 아닌 질문\n\n\n\n#### 프롬프트를 쓰면서 오히려 더 배우게 된다\n- 직관을 가지게 된 나의 사고과정을 스스로 다시 상기해서 프롬프트에 넣어주는 작업을 하게 된다\n- 운영 안정성 검증도 프롬프트로 물어보면 된다\n\t- 코드 테크닉은 결국 필요하다\n\t- 서비스 중단 시 데이터 정합성 문제 없을 것인가\n\t- 데이터가 선형적으로 증가할 때 속도도 선형적으로 느려질 것인가\n\t- a/b 테스트 가능한가\n\t- 기능 플래그 사용으로 배포가 가능한가\n\t- 오래 걸리는 작업은 배치로\n\t- 상태와 무상태 구분\n\t- 모든 스키마를 json으로 처리하는건 인간이 보기 힘듬\n\n#### AI 컨텍스트\n- https://memoryhub.tistory.com/entry/AI-%EB%AA%A8%EB%8D%B8%EC%9D%98-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EA%B8%B8%EC%9D%B4-%EC%99%84%EC%A0%84-%EB%B6%84%EC%84%9D-%F0%9F%A7%A0-GPT-4%EB%B6%80%ED%84%B0-Claude-Gemini-Llama%EA%B9%8C%EC%A7%80\n- gpt4 turbo는 400페이지 분량의 책에 해당하는 정보까지 컨텍스트로 가질 수 있었음 (128K)\n- gpt-4o는 128K\n- gpt3는 1024였음\n- gpt5는 400K, 24년 9월까지 데이터\n- gemini 2.0은 2G\n- claude 3.7, 4 sonnet은 200K\n- 토큰 최대치에서는 성능이 제대로 안나오고 성능 포화점이 더 낮은 지점에서 존재하고 있음\n- 토큰이 증가하면 비용도 증가한다\n\n#### 벡터 스토어\n- 들어온 정보와 유사한 정보를 검색해서 대답할 때 사용하는 기술\n- 앞서 관련된 정보가 있으면 찾을 수 있다?\n- 사실적인 정보를 쿼리할 수 있다?\n- 청킹으로 컨텍스트 분리\n\t- 청킹 방법별 특징\n\t- 고정 크기 청킹\n\t- 시맨틱 청킹\n\t- 재귀적 청킹\n\n\n#### 초지능 인공지능에 순응할 것인가\n만약에 초지능 인공지능이 만들어지면 그 인공지능을 인간이 막을 수 있는 능력이 없다면\n- 1. 인공지능에 순응한 채로 살아간다\n- 2. 억제할 방법을 어떻게든 찾으려고 살아간다\n- 나는 어떤 스탠스로 가야할까\n- https://littlefoxdiary.tistory.com/105\n- 지금은 플랜을 세우고 그걸 하나 하나 체크하는 식으로 AI를 돌리니까 제어가 가능하다\n\n#### 프롬프트 아카이브\n- TDD\n- My Clean Architecture\n\t- 사이즈가 작을 때는 상관없고 좀 크게 갈거 같을 때 고려한다 아 프로젝트가 작아도 파일을 그 이름으로 만들면 되고 사이즈가 커지면 파일명대로 폴더로 만들어서 기능별로 분리해도 되겠다. 근데 람다니까 기능으로 또 나누면 되니까 파일레벨에서 다 끝나게 해도 좋을듯\n- 프로덕션 레디 상태가 필요할 때 체크리스트로 몇개 뽑는다\n\t- 퍼포먼스, 보안, 모니터링, 안정성, \n\t- 코드레벨에서는 로그 잘 남기고 피처플래그 잘 보고, 트랜잭션 확인만 하고 병렬처리만 신경쓰자\n\t- 이벤트 드리븐, 캐싱은 인프라에서 처리하고 싶은데 가능할까?\n\n#### 학습 시키기\npinecone이라는 벡터 데이터베이스에\n배포를 학습시키면 명령어를 만들어주지 않을까?\n배포를 원하면 argocd app create를 하고 옵션을 하나씩 알려주고\n배포된 상태를 보여주라고 하면 argocd app get 하면 되고\n아니면 아예 argocd document를 알려주면 알아서 명령어를 쓰려나!?\ns3를 데이터 소스로 사용하니까 명령어를 알게 된다!\n\n일단 개인 노트를 s3에 올려서 잘 읽는지 보고 만들어놓고\n하루에 요금 얼마나 나오는지 봐야겠다\n한달에 만원정도로 사용할 수 있을까\n출력 토큰 1,000개당 요금이 나오는데 토큰이라는게 단어 하나를 의미할 거 같다\n\n#### 학습시킬수있는 개인용 ai를 어떻게 쉽게 만들 수 있을까\n\n\n#### LLM\n- LLM 모델 비용 비교 사이트\n\t- https://docsbot.ai/tools/gpt-openai-api-pricing-calculator\n- 기존 LLM이 할 수 있는 것과 할 수 없는 것\n\t- 언어 영역\n\t\t- 요청한 내용의 관련 내용을 찾을 수 있다\n\t\t- 빠른 검색과 분석\n\t- 우리의 컨벤션을 기억해서 그대로 구현해 줄 수 없다\n\t- 찾아서 검색해서 결과를 알려주는거지 전체적인 맥락을 이해하지는 못한다\n\t- 이미지를 이해하는건 멀티모달의 영역이다\n\t\t- claude 4 sonnet이 잘한다고 하는데 어떤지 보자\n- 프롬프트 엔지니어링\n\t- G.S.T.A.R\n\t- goal\n\t- situation\n\t- tone\n\t- amount\n\t- remark (추가 안내사항)\n- planning 후 todo 처리\n- chaining\n- https://cookbook.openai.com/\n- llm은 찾기에 최고 강점이 있어서 이 주소를 주고 원하는 걸 찾으면 찾을 수 있을 것이다\n- gpt 파인 튜닝\n\t- 필요한가\n\t\t- 비용과 실제 용도를 확인해야 한다\n\t\t- 단순 프롬프팅으로도 할 수 있을 수도 있다\n\t- 어떻게 하는가\n\t- 데이터는 어떻게 준비해야 하는가\n\t- 얼마나 필요한가\n\n\n#### AI Stack\n![ai_stack](ai_stack.png)\nAI Stack\n- https://www.youtube.com/watch?v=0HB6NIrRe2A\n- Semiconductor\n- cloud\n- fm\n- application\n\n## 머신러닝\n\n지도학습 : 입력값과 결과를 같이 알려주는 것\n비지도학습 : 입력값만 줘서 군집을 파악하는 것\n강화학습 : 입력값에 대한 처리를 보고 보상을 조절\n머신러닝\n딥러닝 : 신경망을 층을 쌓아서 처리하게 하는 것\n생성형 ai\n예측 ai\n\n머신러닝 안에 다 포함되는 개념\n\n- 지도학습\n- 비지도학습\n- 강화학습\n  딥러닝을 이용해 지도학습, 비지도학습, 강화학습을 할 수 있다\n  모델을 이용하는게 딥러닝\n\nTODO 성능평가방법 찾아보기\n\n#### 스포티파이의 머신러닝 기술은 데이터 속 단순 패턴이 아닌 인과관계를 찾는데 주력한다\n[\"스포티파이의 머신러닝 기술은 데이터 속 단순 패턴이 아닌 인과관계를 찾는데 주력한다\" ](https://it.donga.com/31774/#:~:text=%EC%8A%A4%ED%8F%AC%ED%8B%B0%ED%8C%8C%EC%9D%B4%EC%9D%98%20%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D%20%EA%B8%B0%EC%88%A0%EC%9D%80%20%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EC%86%8D%20%EB%8B%A8%EC%88%9C%20%ED%8C%A8%ED%84%B4%EC%9D%B4%20%EC%95%84%EB%8B%8C%20%EC%9D%B8%EA%B3%BC%EA%B4%80%EA%B3%84%EB%A5%BC%20%EC%B0%BE%EB%8A%94%EB%8D%B0%20%EC%A3%BC%EB%A0%A5%ED%95%9C%EB%8B%A4)\n\n## ML\n\n#### 인공지능\n\n기계도 학습에 의해서 정보를 습득하고 공부한다\n데이터 라벨링을 해서 빅데이터를 이용해 공부를 시킨다\n학습은 뇌세포의 연결강화 - 도널드 헵 -> 가중치(weight) 개념의 토대\n인공지능 신경망은 뇌를 모델로 했다. (사람이 기준이다)\n\n현재까지 해결된 문제들\n\n- 한 방향의 학습모델은 XOR 문제를 해결하지 못한다\n  - Output을 Input에 다시 적용\n  - 역전파 알고리즘\n  - CNN\n- 신경망이 깊어지면 예전 신경망 데이터가 날아간다 (Vanishing Gradient)\n  - 초기화가 중요하고, 초기화의 효율성이 좋아져야 한다.\n  - 자비어 초기화\n- 학습을 많이 시키면 오히려 부정확해진다\n\n인공지능 연구목적\n\n- 인간 능력 증진\n- 사람이 어떻게 사고하는지 이해하기 위해\n\n> 출처: 야사와 만화로 배우는 인공지능\n\n#### workflow\n\n- 데이터 클리닝\n- 데이터 축소\n- 데이터변환\n- 정규화\n- 더미 코딩\n- 평가지표\n- 평가방법\n- 데이터분리\n- k 겹 교차검증\n\n#### 구성 요소\n\nplaceholder\nVariable\nMatmul\nNn.relu\nNn.softmax\n\n파일에서 데이터 불러오는 방법\n\n일단 입력데이터를 만들어내야 한다\n\nleaner regression - 선형 회귀\n\n- 비례 관계에 있다고 여겨지는 사건 예측 할 때 사용 가능\n\ncost function\n\ngradient descent algorithm\n\n- 제일 좋은 가중치를 얻어낸다\n\nconvex function\n\nsigmoid\n\n#### MLOps\n\ncontinuous training model\ncontinuous deploy model\neasy update test model\n\ntraining\nserving\n\n#### mlops\n\nfirst-order-model: gif를 이용해서 사진을 특정 동작을 하도록 구현한다\nbuild-model: 간단한 모델 생성 파일\nkeras-flask-deploy-webapp: 간단한 플라스크 구동 앱. h5파일을 빌드하고 실행한다\ncnn: cactus recognizer, cnn 모델 생성 파일 있다\n\nbuild-model을 이용해서 모델을 빌드하고 keras-flask-deploy-webapp으로 실행한다\n\n! keyerror: sample_weight_mode 에러가 뜬다\n\n- model.save()와 model.save_weight 차이가 뭔데\n\nkeras-deploy는 지금 텐서플로 모델을 불러와서 실행하고 있다.\n커스텀 모델을 실행 가능하도록 설정 필요하다\n\n! h5 마다 다 차이가 있어서 실행이 잘 안된다.\n\ntensorflow Serving server라는게 있어서 모델을 여기에 저장해놓고\n플라스크에서 호출해서 쓸 수 있다\n그냥 모델을 플라스크 서버에 저장할 수도 있지만, 분리도 가능하다\n\n- [serving server](https://towardsdatascience.com/deploying-keras-models-using-tensorflow-serving-and-flask-508ba00f1037)\n- pb 파일만 사용 가능, h5를 pb로 변환 가능\n\nweight가 뭐고\nweight, losses, optimizers를 h5 파일 안에 넣는단다\n저 값들이 있으면 예측모델이 되는건가\n\n#### ml devops\n\ndata composing\ndata preprocessing\nmodel build to `.h5`\n\nloading model\nroute page\n\n#### predicting data\n\nDNN\ncsv\nmake model\nload model\ncontinuous update data\ncontinuous update model\nbacktesting\ndelivery to server\n\nregression for predict\nclassification for choice one of the fruit\n\n#### Machine Learning framework\n\n- tensorflow\n- torch\n- keras\n- scikit learn\n\n#### tensorflow\n\n- tensorboard in docker\n- `--bind_all`\n\n#### GAN\n\n진짜데이터를 기준으로\n제네레이터가 진짜데이터와 비슷한 것을 계속 생성하고\n검사자는 진짜데이터와 제네레이터 데이터를 비교해서 진짜를 찾는과정인데\n제네레이터는 작업을 하면 할수록 진짜와 비슷한 작업물을 만들 수 있고\n검사자는 더 잘 구분할 수 있게 된다\n데이터가 충분치 않을 때 사용하면 원하는 데이터를 얻어낼 수 있다\n\n#### 데이터 분석\n\n- 데이터 출처 이해\n\t- 보통 csv 파일로 받는다\n- 데이터 크기 확인\n\t- `data = pd.read_csv(file_path)`\n\t- `data.info()`\n- 데이터 구성 요소(키, 몸무게) 확인\n\t- 속성 탐색 (데이터로 무엇을 얻어낼지 생각)\n- 구성 요소 간의 상관 관계 탐색\n- 분석\n- 시각화\n- pandas\n- 분석 결과의 타당성을 검증하기 위해 분석 대상 간 통계적 차이를 검정하는 과정이 필요하다\n\t- [ ] 통계적 차이가 뭐지?\n1. 텍스트 마이닝: 데이터 파싱 - 시각화\n2. 미래 예측 (회귀 분석)\n- arima\n- 의사결정 트리\n- 랜덤 포레스트\n- XGBoost\n- heuristic\n- 머신러닝을 위한 데이터\n\t- https://archive.ics.uci.edu/ml/index.php\n\n\n## Reference\n\n#### AI 최신 기사\n- https://www.aitimes.com/news/articleList.html?view_type=sm\n\n"},{"headings":[{"value":"Container"},{"value":"docker strength"},{"value":"Docker image vs compose"},{"value":"docker logs"},{"value":"container"},{"value":"Docker의 위기?"},{"value":"Dockerfile"},{"value":"docker compose에서 빌드 단계의 이미지를 쓸 수 있을까"},{"value":"docker-compose를 이용해 이미지를 바로 배포하는 것과 Dockerfile을 쓰는 것"},{"value":"배포 뼈대 만들기"},{"value":"docker image"},{"value":"docker compose execute bash"},{"value":"docker cmd vs entrypoint"},{"value":"docker 간 통신"},{"value":"Kubernetes"},{"value":"resource"},{"value":"api"},{"value":"쿠버네티스는 os와 클라우드를 추상화할 수 있나?"},{"value":"kubernetes volume"},{"value":"쿠버네티스 네트워크의 이해"},{"value":"deploy"},{"value":"deployment kill"},{"value":"kubernetes test"},{"value":"쿠버네티스 클러스터 중에 마스터가 자원을 많이 쓰나, 노드가 많이쓰나?"},{"value":"쿠버네티스는 어떻게 복잡성을 관리하는가"},{"value":"쿠버네티스 멀티 클러스터 그 이후"},{"value":"docker kubernetes istio"},{"value":"Network Resource"},{"value":"nginx vs istio"},{"value":"nginx canary"},{"value":"kubernetes supports cluster"},{"value":"kubernetes access remote cluster"},{"value":"kubernetes dns"},{"value":"Test"},{"value":"test"},{"value":"Plugin"},{"value":"helm k3s Kubernetes cluster unreachable error"},{"value":"eks vs ec2 autoscale and setting kubernetes vs kubernetes hpa"},{"value":"container serverless"},{"value":"k3s"},{"value":"k3s monitoring"},{"value":"k3s helm"},{"value":"k3s connect remotely to the cluster"},{"value":"helm"},{"value":"helm install from local"},{"value":"turn on and access to grafana in kubernetes nodes"},{"value":"kubernetes load balancer"},{"value":"kubernetes network service test"},{"value":"kubernetes tool"},{"value":"deploy"},{"value":"인프라 관련 툴과 서비스 관련 툴을 분리하면 좋을 것 같다"},{"value":"쿠버네티스 네임스페이스를 어떻게 분리할까"},{"value":"kubernetes local image 사용하기"},{"value":"RBAC"},{"value":"argocd"},{"value":"kubernetes monitoring"},{"value":"istio"},{"value":"istio 설치"},{"value":"istio routing /, /tag, /tag/:tag 값 적용시키기"},{"value":"knative istio"},{"value":"spinnaker"},{"value":"kubernetes를 쓰면서 쉽게 실수하는 10가지"},{"value":"kubernetes in VCNC"},{"value":"eks 참고사항"},{"value":"배포 후 롤백 테스트"},{"value":"helm을 안쓰고 kubernetes로 가변적인 배포를 쉽게 할 수 없을까"},{"value":"클러스터 네임스페이스 컨텍스트"},{"value":"새로운 유저로 get pod 하기"},{"value":"인증서 재설정 필요"},{"value":"Kubernetes External Library Installation"},{"value":"설치"},{"value":"helm"},{"value":"Kompose"},{"value":"Statefulset PV SC"},{"value":"glusterfs 설치"}],"fields":{"slug":"/container/"},"rawMarkdownBody":"\n# Container\n\n#### docker strength\n- isolation process\n- no dependency\n- portable\n- light-weight\n\n#### Docker image vs compose\n- image vs volume\n    - test with volume, deploy with image\n\n#### docker logs\n- make stdout\n  - `echo \"test\" >> /proc/1/fd/1`\n- `--log-opt`\n  - `max-size`\n  - `max-file`\n\nFluentd와 Eleasticsearch를 이용해서 로그 수집 및 검색\n\n표준출력(stdout)으로 로그를 출력하도록 두고, 이를 수집하도록 한다.\n\nnginx는 stdout으로 출력되도록 설정이 필요하다\n- 1.19.8 버전을 쓰는 지금은 stdout으로 출력되도록 설정되어있다.\n\n#### container\nlibcontainer 개발로 kernel에서 namespaces, cgroups 등을 직접 실행\nLXC -> runC 컨테이너 런타임 변경. OCI 준수\n그 외 rkt, cri-o 등이 있음\n\nLXC는 다른 호스트에서 실행했을 때 설정 차이로 동일하게 돌아가지 않는 경우가\n있었다고 한다.\n도커도 버전 다르면 안돌아간다.\n\nContainer 구동 원리\n- `chroot` - 입력받은 디렉토리를 루트로 하여 격리된 환경을 만들어준다\n- cgroups - 시스템 리소스를 격리할 수 있다(cpu, memory, network, disk)\n- overlayFS - 프로세스 간 파일 시스템 분리\n    - image layer + container layer(컨테이너 안에서 수정되는 파일들)\n- namespace - `unshare` 프로세스 간 시스템 자원들을 격리하는 기능\n    - cgroup - `-C`\n    - user - `-U`\n    - mnt - `-m`\n    - ipc - `-i` 프로세스 간 통신. 같은 네임스페이스 안에 있어야 통신 가능\n    - pid - `-p` 컨테이너 안에서는 프로세스 번호를 새롭게 받는다\n    - uts - `-u` hostname 격리\n    - net - `ip netns add <ns name>` 네트워크 규칙들을 새롭게 받는다\n- https://speakerdeck.com/devinjeon/containerbuteo-dasi-salpyeoboneun-kubernetes-pod-dongjag-weonri?slide=29\n\n네임스페이스와 컨테이너, 네트워크까지 잘 정리된 링크\n- https://www.44bits.io/ko/keyword/linux-namespace\n\n#### Docker의 위기?\n- container is light-weight and portable more than virtual machine image\n- but it can same work that PC's work\n- Can exist more than light-weight task from docker?\n\n- OCI(Open Container Initiative)\n- Container Runtime\n- Image Download -> Extract Image -> Execute Container\n- Container has cgroups, namespace, networking\n- alternative to Buildah, skopeo, podman\n  - docker is one big process. It can make single point of failure.\n  - divide docker position by 3.\n\n#### Dockerfile\n- 바이너리를 도커파일에서 받을 때 체크섬을 검증하는 내용을 적으면 이미지의 신뢰성이 올라간다\n- 루트 대신 사용자 추가하는 내용을 디폴트로 한다\n    - `RUN useradd sam`\n    - `USER sam`\n    - 간단하다\n- docker.sock은 호스트의 도커 컨테이너 관리를 장악할 수 있다\n- dockerfile에 locale, time 등 설정 해두는게 좋지 않을까\n\n#### docker compose에서 빌드 단계의 이미지를 쓸 수 있을까\nDockerfile은 멀티 빌드로 해놓고 배포시에는 마지막 빌드 이미지를 쓰지만\n개발 시에는 빌드한 것으로 쓰고 싶은데\n```\nbuild\n  context: ./\n  target: build\n```\nbuild에 target으로 이름 맞춰주면 된다.\n\n#### docker-compose를 이용해 이미지를 바로 배포하는 것과 Dockerfile을 쓰는 것\ndockerfile 없이 이미지로만 할 때의 문제점?\n- 어떤 것을 바꿨는지 추적하기 힘들다\n- 설치파일들 찾기 힘들다\n- docker layer와 image size를 줄일수록 배포가 빨라지는 도커의 장점을 이용못한다.\n\ndockerfile로 하면 쿠버네티스 사용 시 이미지 빌드를 또 해줘야 하잖아?\n이미지로 올리는 경우는 왜 이미지로 올리는거지?\n\n볼륨을 해도 커밋 시 볼륨된 내용은 적용 안되고, 기존 이미지가 갖고 있던대로 된다\n\ndockerfile에서 copy를 한 폴더를 외부에서 수정 후 내부에 들어가면 수정되어 있나?\n- No\n\nbuild - docker file to image\ndocker-compose up 을 하면 이미지를 새로 부른다? volume\n\ndockerfile -> image -> pods\nbuild -> push -> kubernetes apply(set image)\n\n개발환경에서는 볼륨을 해서 compose로 개발하고\n배포 시에는 Dockerfile을 이미지화해서 배포한다\n개발디렉토리는 Dockerfile에도 COPY에 있어야하고, compose에도 볼륨을 한다.\n개발환경에서 쓰는 이미지는 배포 시 쓰는 이미지와 같은 것을 사용한다.\n이미지 빌드는 CD pipeline을 통해서 한다. 이미지 혼동을 막기 위해\n- [ ] 이미지를 기반으로 작업을 하면 이미지가 업데이트 되었는데 이전 버전으로\n      작업하던 사람들은?\n- [ ] 최초 작업 시 이미지가 없어서 compose를 실행 못시키니, 빌드 파이프라인을 먼저 만든다?\n\n내가 원하는게 디렉토리 전체를 덮어쓰는게 아니라 일부만 수정하는 거라서 좀 꼬였다\n- [ ] 일일이 COPY를 해야 하나? compose에서는 어떻게?\n\n```\nDockerfile\nCOPY /app /app\n\n---\n\ndocker-compose.yml\nvolume: /app:/app\n```\napp 폴더의 내용을 수정 후 docker build나 compose up을 하면 동일한 상태가 된다.\n\n서버 설치: vagrant up (git pull -> [docker-compose up or kubectl apply])\n서버 수정: git pull -> docker-compose up -> 수정 -> 테스트 -> git push -> 서버 적용\n\n서버 개발: git pull -> docker-compose up -> 수정 -> 테스트 -> git push\n서버 업데이트: git pull -> docker-compose up\n\n실서버에서도 볼륨으로 돌릴까? 순수 이미지로만 돌릴까?\n실서버에서도 수정을 하고 싶은데 다른 회사들은 어떻게 하지? 실서버는 안건드리는게\n좋으려나?\n그러면 compose.yml을 두개를 만들어야 하나\n실서버에서도 그냥 볼륨을 하면 어떨까?\n\n실서버에서 수정을 하는게 편하지만 절대로 하면 안된다고 권고한다\n번거롭더라도 재빌드 재배포를 하라고 한다\n그렇다면 핫픽스를 최대한 빨리 배포할 수 있도록 해야 하는데\n쿠버네티스에는 명령어 하나로 되돌릴 수 있다\n깃헙 액션으로 바로 되돌릴 수 있어야 한다\n핫픽스 or 롤백\n\n배포는 ansible로 github action 하면 되겠다\n근데 ansible로 하면 서버 private key가 필요한게 번거롭다\n그렇다고 vault서버에서 가져오는 것도 private key를 관리해야되서 번거롭다\n보안은 번거롭지만 해야되긴 한다\n\n#### 배포 뼈대 만들기\nkubernetes 버전\ndocker image 버전\n\n최소 docker image로 빌드하고, 여유가 있으면 kubernetes를 이용\nCI로 간단 검증\nCD는 ansible 또는 argoCD\n핫픽스룰을 따로 만들어 둔다.\npush를 하면 검증을 한다\n1. commit, 2. merge, 3. hotfix\n\n- [ ] 빌드 요청은 어떻게?\n- [ ] 버저닝은 어떻게?\n\n#### docker image\nalpine, stretch, slim, buster\nbuster, stretch는 debian용\nalpine은 alpine linux로 만든 것\nslim은 그 이미지를 실행하기 위한 최소한의 설치파일만 있는 것\n\n근데 slim보다 alpine이 더 이미지 크기는 작다?\n\n#### docker compose execute bash\n- `entrypoint: /bin/bash` failed\n- `tty:true; stdin_open:true` success\n- `docker-compose run app bash` success\n\n#### docker cmd vs entrypoint\n커맨드 툴을 도커명령어에서 바로 실행하려고 하면\nCMD로 하면 안되고 ENTRYPOINT로 하면 된다\n`docker run hanspell-cli -h`\n\n대신 ENTRYPOINT를 쓰면 -it /bin/sh 는 인식을 못한다\n\n#### docker 간 통신\n- compose 에서 네트워크 명시적으로 설정해줘서 compose에 설정한 이름으로 통신하면 된다고 한다\n- --network host 를 써도 된다고 한다\n- docker buildx build --network host --platform linux/arm64 -t goodby .\n- https://marshallku.com/dev/deploy-rust-with-docker\n\n# Kubernetes\nA person has a very small component, and it composes of one architecture.\nthe kuberetes seem to be this.\nand I want to make software like this architecture.\nstrong small component to flexible architecture.\nkubernetes makes easy to a devops works\nabout deploy, scaling, update, healthcheck, orchestration\nbut devops works is not clear.\n\n- `kubectl run curl --image=radial/busyboxplus:curl -i --tty`\n- pods cluster inside curl pod\n\nkeep focusing only bisuness logic\n- 1. monitoring - feedback - update logic\n- 2. data management\n- production deploy behavior make easy\n  - update and rollback\n  - scale up and down\n\nhttps://github.com/dennyzhang/cheatsheet-kubernetes-A4/blob/master/README.org\n- ClusterIP vs NodePort vs Ingress\n- service account?\n- cluster role?\n- cluster? - node\n- daemon set?\n  - it makes every node to make pods\n  - example: every node can have logstash\n\n#### resource\n- pods\n- replicaset\n- deployment\n- service\n\n컨테이너 리소스\n- pod, deployment\n\n보안 리소스\n- rolebinding\n\n설정 리소스\n- configmap\n\n#### api\n- master\n    - kube-apiserver\n    - kube-scheduler\n    - kube-controller\n    - kubelet\n    - kube-proxy\n    - etcd\n- node\n    - kubelet\n    - kube-proxy\n\n#### 쿠버네티스는 os와 클라우드를 추상화할 수 있나?\n서비스의 장애가 os에 영향을 미쳐도 서비스를 격리하면 문제가 해결될 수 있나?\n그렇다면 '쿠버네티스', '마이크로서비스', '데이터'가 소프트웨어의 큰 줄기가 될 수 있다\n원래는 인프라, 서비스, 데이터인 것을 쿠버네티스가 인프라를 완전 대체?\n\n#### kubernetes volume\n특정 노드의 폴더를 사용할 때는 hostPath를 사용할 수 있다.\n근데 노드 상관 없이 폴더를 써야하는 경우가 대부분일 것이다\n\n#### 쿠버네티스 네트워크의 이해\n팟들끼리의 통신은 veth 을 통해서 하게 된다 eth0 -> docker0 -> veth0\n그리고 eth0이 어떤 veth0과 연결되어 있는지 라우팅 테이블이 존재한다\n하지만 팟은 언제든 사라졌다가 다시 생겨날 수 있어서 이를 추상화하는 레이어가 하나 필요하고 이것을 service로 만들었다\n(IP 네트워크는 보통 자신의 host에서 목적지를 찾지 못하면 상위 게이트웨이로 전달하도록 동작)\nservice는 리눅스 커널 기능인 netfilter와 iptables를 이용한다\nkube-proxy라는 녀석도 같이 동작에 관여하는데 얘는 netfilter에 규칙을 수정하는 역할만 하고 실제 동작은 netfilter에서 이루어진다\n클러스터 외부에서 트래픽을 내부로 전달하고 싶다면 로드밸런서를 이용한다\n외부에서 요청이 오면 NodePort를 거쳐서 내부 Node의 ip를 찾게 되고 이것이 다시 netfilter를 거쳐서 팟을 찾을 수 있게 된다\n하지만 NodePort를 확장한 LoadBalancer Service도 제약사항이 있는데 한개의 로드밸런서가 여러 서비스를 연결하지 못한다는 점이다.\n그래서 ingress가 나왔다\ningress는 그래서 한개의 로드밸런서로 여러 서비스를 유연하게 설정할 수 있게 해준다\ningress는 ingress-controller가 동작하게 해야하고, 각 클라우드 플랫폼 마다 ingress-controller 구현체가 있다\n\n#### deploy\n- 배포와 릴리즈를 분리\n  쿠버네티스에 apply를 해도 실제 서버에 바로 적용되는게 아니라 서비스 메시에서\n  릴리즈를 관리 -> istio를 이용\n- 서비스 키고 시간이 지나면 api 접속이 안됨\n- istio, monitoring, argocd 켜놨는데 어디가 리소스 많이 먹는지 알고 싶다\n\n#### deployment kill\ndeployment 정지시키려면 scale --replicas=0 으로 해야되나보다\n- pod을 삭제하는 건 kill로 한다\n\n#### kubernetes test\n- local test, production build pipeline\n- local test with only dockerfile\n- local test with same with production\n- In msa. need kubernetes?\n- In msa. github repo is seperated?\n- developer can build docker image?\n- how to provide docker image to developer?\n- when developer push updated source. pipeline is\n    - kubernetes apply?\n- build with tags?\n    - git tag 1.0.0\n    - git push origin --tags\n- hpa\n- service\n- minikube\n\n#### 쿠버네티스 클러스터 중에 마스터가 자원을 많이 쓰나, 노드가 많이쓰나?\nmaster\n- api server, etcd 등 기본적으로 자원을 많이 사용한다.\n\n서비스가 빡세게 돌면 노드가 많이쓰나?\n\n쿠버네티스 로그 서비스 추가해서\n노드 하나를 일부러 끄면 로그 잘 남는지 확인하고\n죽은 서버를 살릴 수 있을지 확인\n\nram 1기가 서버에 ram 0.5를 쓰는 서비스를 6개를 레플리카하면 동작하나?\n- 자원 한도 넘어가면 파드를 안 만든다.\n\n글러스터fs 와 db 레플리케이션을\n쿠버네티스에서 편하게 할 수 있는 방법이 있나?\n\n클러스터를 한번씩 껐다 켜서 리프레시 했을때 안좋은점이 있을까?\n없다면 접속자 적은 시간을 뽑아서 한 서버씩 재부팅 해줘야겠다\n페일오버 테스트도 되고, os도 리프레시 되지 않을까\n\n걱정되는 점은 한쪽 노드에 팟들이 몰려있다가 다시 돌아갈 때 과부하 걸리지 않을지\n\n#### 쿠버네티스는 어떻게 복잡성을 관리하는가\n- ingress -> service -> deployment 식의 계층적 추상화\n- namespace 격리\n- controller pattern - 이건 좀 더 찾아보자\n\t- 각 리소스별 전용 컨트롤러가 상태 관리\n\t- 단일 책임 원칙으로 복잡성 분산\n\t- Reconciliation Loop로 일관된 동작 보장\n- Operator pattern\n\t- 도메인 특화 로직을 CRD로 추상화\n\t- 인간의 운영 지식을 코드로 전환\n- 그치만 쿠버네티스도 한계가 있다\n\t- 노드 수 제한도 있고\n\t- API 서버가 초당 수천개 요청에서 성능 저하하는 처리량 한계도 있다\n\t- 컨트롤 플레인은 사용량이 선형적으로 증가할 수 밖에 없다\n- 또한 복잡성의 새로운 차원이 있다\n\t- 네트워킹 오버헤드 (CNI 성능 이슈)\n\t- 스토리지 관리 복잡성 증가\n\t- 보안 정책의 기하급수적 복잡성\n\t- 디버깅과 트러블슈팅의 어려움\n- 그래서 클러스터를 분리해야한다\n\t- 팀별 / 환경별\n\t- 그러면 분리된 클러스터도 관리를 쉽게 할 수 있어야 한다\n\t- 하나의 클러스터로 다 하려고 하는건 확장적이지 못하다\n- 하나의 클러스터를 잘 관리할 수 있으면 멀티 클러스터도 관리할 수 있다\n\n#### 쿠버네티스 멀티 클러스터 그 이후\n- 클러스터간 관리를 하는 중앙 관리가 필요할 것 같다\n- 중앙 클러스터가 있고\n- 도메인별 클러스터를 따로 만든다\n- 도메인별 클러스터에는 최대한 공용 인프라를 안쓰고\n- 중앙 클러스터에서 관리할 수 있도록 한다\n\n\n#### docker kubernetes istio\n| docker   | kubernetes                        | istio                        |\n| -------- | ---------------------             | ---------------------------  |\n| 이식성   | 배포 (단일 배포점, 롤링 업데이트) | 서비스 메시                  |\n| 고립성   | 로드 밸런싱                       | 어플리케이션 api 마다 프록시 |\n| 가벼움   | 서비스 디스커버리                 | 서킷 브레이킹                |\n| 헬스체크 | 스케일링                          | 카오스 테스트                |\n| 페일오버 | 고가용성 확보(3 node)             |                              |\n|          | 확장 시 서버 셋팅 자동화          |                              |\n|          |                                   |                              |\n\n롤백, 자원관리, 모니터링, 시크릿 관리\n\n## Network Resource\n#### nginx vs istio\n- service -> Ingress\n- istio Gateway -> Virtual Service -> Destination Rule\n\n트래픽을 한 곳에서 다 처리하느냐, 각 서비스마다 분리해서 처리하느냐가 큰 차이\n사이드카가 많아져서 생기는 중복 오버헤드가 많을까, 비대해진 하나의 객체가\n오버헤드가 많을까\n내부에 직접 통신하면서 트래픽을 제어할 수 있는 것은 장점\napi gateway의 상위호환이 되려고 한다\n\nistio\n- 트래픽 모니터링 가능\n- 트래픽을 제어할 수 있다\n- 각 서비스마다 분리되어 있어서 단일 고장점이 아니다.\n- retry 및 timeout 동작\n\nnginx(api gateway)\n- 단일 객체\n- 트래픽 제어\n\n#### nginx canary\n```\nmetadata:\n  annotations:\n    nginx.ingress.kubernetes.io/canary: \"true\"\n    nginx.ingress.kubernetes.io/canary-weight: \"20\"\n```\n\n#### kubernetes supports cluster\n- < 5000 nodes\n- < 150000 pods\n- < 300000 containers\n- < 100 pods per node\n\n#### kubernetes access remote cluster\n`scp <user>@<ip>:/home/vagrant/.kube/config ~/.kube/config`\n\n#### kubernetes dns\nkube-dns\ncoredns 1.12 버전부터 사용, 호환성을 위해 라벨링은 kube-dns로 되있다\n\n`myapplication.namespace.svc.cluster.local` 형식으로 되있다\n- https://jonnung.dev/kubernetes/2020/05/11/kubernetes-dns-about-coredns/\n\n## Test\n#### test\n- how to test account system?\n    - check send complete\n    - check response code\n- stress test per process\n    - `while true; do curl http://localhost; done`\n    - hpa\n        - when do switching, connection is waiting?\n    - how to destroy one pod\n    - recovery time in replicaset\n- image to rollup, rollback\n- ci/cd\n\nSpinnaker - build tool\nEnvoy - proxy, c/b, network tool\n\n- [ ] image size is matter for performance?\n\n1. build image\n    - `docker build shdkej/imagename:tag .`\n    - `docker login`\n    - `docker push shdkej/imagename:tag`\n3. deployment, service\n    - `kubectl apply -f file.yml`\n4. test\n    - `kubectl run -it curl --image=radial/busyboxplus:curl `\n    - `curl http://deploy-name:port`\n1. port forward\n    - `kubectl port-forward svc/svc-name 8080:8080`\n2. client run\n3. check some signal\n4. report how many success is\n\ncase 1. normal string output check - 100000 user\n    - for 10000 -> 24s\n    - for 100000 -> 1m30s\n    - goroutine 100000\n        - server can't accept\ncase 2. stream output check\n\n\n파드하나에 접속량을 몰아서 뻣는 경우 테스트\n노드 하나에 몰아서 테스트\n전체에 영향가게 테스트\napi서버가 어떻게 부하를 받는지 확인\n\n\n## Plugin\n#### helm k3s Kubernetes cluster unreachable error\nset `export KUBECONFIG=/etc/rancher/k3s/k3s.yaml`\nhttps://github.com/rancher/k3s/issues/1126\n\n#### eks vs ec2 autoscale and setting kubernetes vs kubernetes hpa\n\n#### container serverless\n- knative, lstio, open-faas\n\n#### k3s\n- token `/var/lib/rancher/k3s/server/node-token`\n- join\n    - `curl -sfL http://get.k3s.io | K3S_URL=https://192.168.0.50:6443 \\ K3S_TOKEN=join_token_we_copied_earlier sh -`\n- connect remotly\n    - `scp root@ip:/etc/rancher/k3s/k3s.yaml ~/.kube/config`\n    - replace 127.0.0.1 -> remote ip\n\n#### k3s monitoring\n- `kubectl apply -k github.com/premist/k3s-kube-prometheus/setup`\n- `kubectl apply -k github.com/premist/k3s-kube-prometheus`\n\n#### k3s helm\n! Kubernetes cluster unreachable\n- `export KUBECONFIG=/etc/rancher/k3s/k3s.yaml`\n- or `kubectl config view --raw >~/.kube/config`\n\n#### k3s connect remotely to the cluster\n```\nmkdir ~/.kube\nscp <user@ip>:/etc/rancher/k3s/k3s.yaml ~/.kube/config\nsed -i '' 's/127\\.0\\.0\\.1/192\\.168\\.0\\.22/g' ~/.kube/config\n```\n\n#### helm\nchart.yml\nvalue.yml\ntemplates/\ncharts/\n\ninstall `helm install <name> <chart>`\n상태 보기 `helm status <name>`\n업그레이드 `helm upgrade -f <value.yml> <name> <folder>`\n지우기 `helm del <name>`\n\n#### helm install from local\n`helm install <name> <directory> --values <values.yaml>`\nor just setting key\n`helm install <name> <directory> --set <key=value,key2=value2>`\n\n#### turn on and access to grafana in kubernetes nodes\n- build kubernetes setup -- vagrant\n- access nginx from just node\n    - `kubectl create deployment --image nginx my-nginx`\n    - `kubectl expose deployment my-nginx --port=80 --type=LoadBalancer`\n- access from master node\n- deploy grafana\n- add kubernetes monitoring script\n\n#### kubernetes load balancer\nmetallb\n\n#### kubernetes network service test\nistio\nconsul\nload balancer\n\n#### kubernetes tool\nchaos-mesh\nspinnaker\nknative\n\n#### deploy\ndeploy spinnaker\n\nkubernetes는 github에서 돌아가야 한다. 근데 로컬에서도 똑같이 할 수 있어야 한다\ngithub action에 종속되지 않고 CI를 하려면 스크립트를 호출하는 방식으로 해야하나\ngithub action server와 비슷한 서버를 만들어서 에러 시 리다이렉트 해야하나\njenkins는 자체 서버를 돌리니까 이를 이용해야 하나\n\n#### 인프라 관련 툴과 서비스 관련 툴을 분리하면 좋을 것 같다\n- 모니터링, 로깅,\n- 보안, 리버스 프록시\n- 실제 로직 구동 앱\n- 미들웨어(카프카)\n\n#### 쿠버네티스 네임스페이스를 어떻게 분리할까\n지금 istio, argocd, monitoring으로 나눠져있는데\n그러면 monitoring에서 다른 네임스페이스를 참조할 수 있나?\n\nproduction 과 development로 나누면 똑같은 파일로 두번 apply하면 되나?\n\n#### kubernetes local image 사용하기\n- `image` 밑에 `imagePullPolicy`를 `Never`로 설정한다\n- minikube 사용 시 `eval $(minikube -p minikube docker-env)` 입력\n- docker image를 새로 빌드해야한다.\n\n#### RBAC\nrole-based access control\nmatching user - role\n\n- ServiceAccount\n- Role\n- RoleBinding\n- ClusterRole\n- ClusterRoleBinding\n\nRole과 ClusterRole의 차이\n- Role은 네임스페이스 하나에만 할당되고 ClusterRole은 여러개가 되며, 허용범위가\n  넓다.\n- Cluster라 함은 Master와 Node의 범위다.\n\nservice account 생성\n```\nkind: ServiceAccount\nmetadata:\n  name: developer1\n  namespace: team1\n```\n\n허용할 api와 리소스, 명령어를 지정해준다\n```\nkind: Role\nmetadata:\n  ...\nrules:\n- apiGroups: ['', 'apps']\n  resources: ['pods', 'deployment']\n  verbs: ['get', 'list']\n```\n\n롤 바인딩 파일에서 서비스 어카운트와 롤을 매칭해준다\n```\nkind: RoleBinding\nmetadata:\n  ...\nsubjects:\n- kind: ServiceAccount\n  name: developer1\n  apiGroup: \"\"\nroleRef:\n  kind: Role\n  name: role-dev\n  apiGroup: rbac.authorization.k8s.io\n```\n\n#### argocd\n```\n# kubernetes에 argocd 올리기\nkubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\nkubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'\n## port 확인하거나 port-forward 해서 접속 가능\n\n\n# 로그인이나 클라이언트 명령 처리 시 클라이언트 툴 설치\nVERSION=$(curl --silent \"https://api.github.com/repos/argoproj/argo-cd/releases/latest\" | grep '\"tag_name\"' | sed -E 's/.*\"([^\"]+)\".*/\\1/')\ncurl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-linux-amd64\nchmod +x /usr/local/bin/argocd\n\n# 로그인 후 비밀번호 변경 (기본값은 파드 이름)\nexport ARGOCD_PASSWORD=`kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d'/' -f 2`\nargocd login <ARGOCD_SERVER>\nargocd account update-password\n```\n```\necho \"test1\"\necho \"test2\"\necho \"test3\"\n```\n\nargocd 에서 helm 이용하기 `argocd app set <name> --values <value.yml>`\n\n#### kubernetes monitoring\nhttps://gruuuuu.github.io/cloud/monitoring-02/#\n1. cluster role\n2. configmap\n3. prometheus deployment\n4. node exporter daemonset & service\n5. prometheus service\n\nconfigmap... 필요한건가\n\n#### istio\n하나의 팟 관리를 위해 각 팟마다 관리용 팟을 생성하는 사이드카 패턴을 이용해서 각 서비스를 관리\n관리용 팟이 들어오고 나가는 네트워크를 모두 처리함으로써 로깅, 모니터링,\n디스커버리 모두 가능해진다\n- 리소스 사용이 2배가 되겠네?\n    - 경량 프록시라서 리소스가 2배는 아니다\n- envoy를 이용해 프록시를 한다\n- 파일럿을 통해 디스커버리, 로드밸런싱\n- 시타델을 이용해 인증서, 키 관리\n\n서비스 메시가 있으면 서비스는 통신에 신경 쓸 필요가 없나?\n- 통신은 메시지로 하고, 서비스 통신의 프록시를 해준다\n\nistio 자체의 gateway를 이용해 라우팅 할 수 있다\n\n#### istio 설치\n```\ncurl -L https://istio.io/downloadIstio | sh -\ncd istio-1.9.0\nexport PATH=$PWD/bin:$PATH\nistioctl install --set profile=demo -y\n```\n\nside inject enable\n```\nkubectl label namespace default istio-injection=enabled\nkubectl label namespace istio-system istio-injection=enabled\n```\napply bookinfo\napply bookinfo-gateway\napply grafana, prometheus\n\n```\nexport INGRESS_HOST=$(minikube ip)\nexport INGRESS_PORT=$(kubectl get svc istio-ingressgateway -n istio-system \\\n                    -o jsonpath='{.spec.ports[?(@.name==\"http2\")].nodePort}')\nexport GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT\n```\n\n- bookinfo 가 과부하를 일으킨다\n\n#### istio routing /, /tag, /tag/:tag 값 적용시키기\n- httpbin 이라는 서비스로 istio가 예제를 제공해주고 있다.\n- 이걸로 테스트하니까 match로 지정해주지 않아도 하위 url도 다 전달해준다.\n- 여기에 ingress를 달아주니까 주소기반으로 라우팅도 된다.\n    - 같은 호스트로 인그레스를 달아주니까 두 서비스를 섞어서 라우팅해준다\n- ingress에서 path를 /header로 지정해주면 /header로 찾아간다\n    - 주소를 /v2로 해놓았을 때 v2라는 주소가 없으면 루트로 찾아가나?\n        - /, /aaa가 설정되있으면 /ccc를 넣어도 / 가 있어서 /로 인식한다\n    - whoami 서비스는 이상한 주소로 넣어도 다 받아주고, httpbin은 url\n      못찾는다는 에러를 준다.\n    - ingress에서 지정해주는 주소가 루트로 인식하는 줄 알았는데, 그게 아니라\n      매칭을 해주는거였다.\n        - traefik에서는 원하는 주소를 넣을 수 있어서 헷갈렸던 것 같다.\n- ingress에서 여러 주소를 한 서비스에 넣으려면 콤마(,)로 구분하면 된다\n\n#### knative istio\n- before use knative, install istio first.\n\n#### spinnaker\nspinnaker 설치를 halyard를 통해서 해야 한다\n```\nmkdir -p ~/.hal/kube\ncp ~/.kube/config ~/.hal/kube/config\nchmod 755 ~/.hal/kube/config\n\ndocker run -p 8084:8084 -p 9000:9000 \\\n    --name halyard --rm \\\n    -v ~/.hal:/home/spinnaker/.hal \\\n    -it \\\n    us-docker.pkg.dev/spinnaker-community/docker/halyard:stable\n\ndocker exec -it halyard bash\n\n### initial in container\n$ source <(hal --print-bash-completion)\n$ hal config provider kubernetes enable\n$ hal config provider kubernetes account add <my-account> \\\n    --context $(kubectl config current-context)\n$ hal config features edit --artifacts true\n$ hal config deploy edit --type distributed --acount-name <my-account>\n```\n\nset persistent store\n- we will use minio, why?\ninstall minio\n```\nhelm install minio -n spinnaker \\\n    --set accessKey=<access_key> \\\n    --set secretKey=<secret_key> \\\n    stable/minio\n```\n\nspinnaker deploy\n```\n$ hal deploy apply\n! failed check for namespace/spinnaker is null\n> kubectl get pod >> error >> no search file or directory '/home/sh/.minikube/'\n>> cp -r ~/.minikube ~/.hal/\n\n### open access ip\nkubectl edit svc spin-deck -n spinnaker\n# edit ClusterIP to NodePort,\n# add nodePort: 30900\n\nkubectl edit svc spin-gate -n spinnaker\n# edit ClusterIP to NodePort,\n# add nodePort: 30808\n\n$ hal config security ui edit \\\n    --override-base-url \"http://<HOST_IP>:30900\"\n$ hal config security api edit \\\n    --override-base-url \"http://<HOST_IP>:30808\"\n$ hal deploy apply\n```\n\nconnect to '<HOST_IP>:30900' in browser\n\n#### kubernetes를 쓰면서 쉽게 실수하는 10가지\n1. 리소스 설정 (cpu, memory)\n2. 헬스 체크(liveness, readiness)의 차이에 따른 사용\n3. 모든 서비스에 로드밸런서 달아버리는 것\n4. 쿠버네티스가 모르는 자동확장(?)\n5. 권한 관리 부재\n6. Anti Affinity 설정(pod가 node에 분산해서 실행하지 않으므로 명시적 설정 필요)\n7. PodDisruptionBudget 설정(pod 최소필요량(minAvailable))\n8. 클러스터 공유(네임스페이스는 환경 분리가 안되므로 차라리 클러스터를 나눠라)\n9. `externalTrafficPolicy: Cluster` 설정은 네트워크 지연을 일으킬 수 있다\n10. 클러스터를 애완동물처럼 다루기 + 마스터에 너무 큰 부하주는 것\n11. +1. latest tag 사용하는 것\n- https://coffeewhale.com/kubernetes/mistake/2020/11/29/mistake-10/\n\n#### kubernetes in VCNC\n상용 kubernetes를 위한 추가 도구\n\ningress - ingress controller\n- nginx vs aws nlb\n- Class ELB는 동시에 많은 연결을 처리하려면 웜업이 필요하다\n- nlb는 gRPC를 지원하지 않는다.\n- 트래픽 흐름: NLB - NodePort - NGINX ingress controller - service\n    - 외부 로드밸런서를 추가하는 것이 클러스터 오토스케일러를 추가하는 것처럼\n      불가피한 것일까\n\nAWS IAM을 사용하기 위해 kube2iam 사용 (19년 03월) -> EKS에서는 지원될 듯\n\n로그\n- fluentd를 daemonset으로 노드마다 실행해서 cloudwatch로 전송\n- https://github.com/fluent/fluentd-kubernetes-daemonset\n\n모니터링\n\nhttps://engineering.vcnc.co.kr/2019/03/kubernetes-on-aws/\n\n#### eks 참고사항\n쿠버네티스 버전 업 시 전체 노드 새로 올린다?\n\nEKS의 파드들이 IAM을 인증받는 방법은?\n- kube2iam\n\nEKS에서는 워커 노드 당 Pod 개수 제한이 있다 - flannel을 쓰면 해결되지만 기본은\n제약이 있다.\n\nECS, fargate, lambda 차이는?\n- Fargate: 서버리스 컨테이너\n\nAZ, multi region도 지원해주나?\n\n네트워크 구조\n- Region - VPC(논리적) - subnet - AZ - route table - Security groups -\n- vpc, subnet, route table 각각 cidr을 설정 가능하다?\n\nnginx-ingress deprecate 됐고, ingress-nginx를 쓰게 된다.\n\neks에서도 kubernetes metrics-server를 통해서 오토스케일링 조절하나?\n- cluster autoscaler라는게 있다\n\n부하 테스트\n`ab -c 200 -n 200 -t 30 http://$(kubectl get ingress/backend-ingress -o jsonpath='{.status.loadBalancer.ingress[*].hostname}')/contents/aws`\n\n- [ ] provider \"kubernetes\"는 뭐지\n\n#### 배포 후 롤백 테스트\n지금 서버에 버전 두 개 만들어서 올리고 배포 후, 테스트하고 롤백하는 것 10초 컷\ngif로 만들어보기\n\n```\ndocker build -t <image:tag> .\ndocker push <image:tag>\nkubectl set image deployment/<name> <name>=<image:tag> --record\nkubectl rollout history deployment/<name>\n```\n\n띄워져 있어야하는 팟 개수 / 현재 개수 확인 바로 할 수 있는 방법은?\n- `kubectl get deploy -A`\n\n카오스 툴 띄워서 회복 잘 하는지 테스트\n- 동작안함..ㅠㅠ\n\n#### helm을 안쓰고 kubernetes로 가변적인 배포를 쉽게 할 수 없을까\nhelm에 install --values도 values 파일을 작성해야하는데, 이러면 그냥 kubernetes\nsnippet으로 만들어도 큰 차이는 없을 것 같다...\n괜히 helm을 안깔아도 될 것 같은데\n\ngist에 파일을 올려놓고, 설정파일에 이름을 넣어서 이름 확인해서 어떤 gist를\n가져올지만 정해서 불러와서 실행시키면 되겠다.\ngitkube라는 서비스도 있다. kubernetes 안에다가 리소스를 만들어놓고 감시하는\n컨셉이다\n\n이제 세부적인 설정이 필요해지면 어떻게 수정하지\n\n#### 클러스터 네임스페이스 컨텍스트\n- 컨텍스트 안에 클러스터, 사용자, 네임스페이스가 있음\n- $KUBECONFIG 에 새로 생성한 config 파일을 넣으면 --kubeconfig config-demo 명령어를 안쳐줘도 됨\n\n```bash\nsource <(kubectl completion zsh)  # 현재 셸에 zsh의 자동 완성 설정\necho '[[ $commands[kubectl] ]] && source <(kubectl completion zsh)' >> ~/.zshrc # 자동 완성을 zsh 셸에 영구적으로 추가한다.\n```\n\n##### 새로운 유저로 get pod 하기\n- 인증서 등록\n- config-demo 만들기\n- role 만들기\n- roleBinding 만들기\n- CSR 만들기\n- 인증서 approve 하기\n- auth can-i 실행해서 확인\n\u001f\n##### 인증서 재설정 필요\nminikube 재시작 후 서버 포트 변경됨\n- minikube context에서\n- `openssl genrsa -out developer.key 2048`\n- `openssl req -new -key developer.key -out developer.csr -subj \"/CN=developer\"`\n- `k apply CSR.yaml`\n- `k certificate approve developer`\n- `k auth can-i list pods --as developer`\n\n-----------------------------------------------------------------------\n\n## Kubernetes External Library Installation\n#### 설치\n- `curl -s https://packages.cloude.google.com/apt/doc/apt-key.gpg | apt-key add -`\n- `/etc/apt/sources.list.d/kubernetes.list` 파일에\n  - `deb https://apt.kubernetes.io/ kubernetes-xenial main` 입력\n- `apt-get update && apt-get install -y apt-transport-https curl`\n- `apt-get install kubelet kubeadm kubectl`\n- `sudo swapoff -a`\n- `sed -i '9s/^/Environment=\"KUBELET_EXTRA_ARGS=--fail-swap-on=false\"\\n/' /etc/systemd/system/kubelet.service.d/10-kubeadm.conf`\n- `sudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab`\n\n초기화\n- `kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors Swap`\n\n네트워크 설치\n- flannel\n  - `kubectl apply -f https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml`\n- calico\n  - `kubectl apply -f https://docs.projectcalico.org/v3.10/manifests/calico.yaml`\n- weave\n  - `kubectl apply -f \"[https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\\n')](https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\\n'))\"`\n\nflannel 설치 시 coredns 안붙음.\ncalico로 설치\nhttps://docs.projectcalico.org/v3.10/getting-started/kubernetes/\n\nSlave node 접속\n- `kubeadm join 192.168.0.3:6443 --token 8nt7ze.bm7pa8pi3t1jgr70\\ --discovery-token-ca-cert-hash  sha256:4337d62bce67b7ebf55466da74dfa8deb7cda3632ce5054bcc24b1fe3fcf2bff`\n\ntoken 생성 및 확인\n- `kubeadm token create`\n- `openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'`\n\nNode 제거\n- `kubectl delete node <node-name>`\n\nMaster reset\n- `kubeadm reset`\n\nscale 늘리기\n- `kubectl scale deploy <deploy_name> --replicas=10`\n\n#### helm\nkubernetes package manager\n\n`curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | cat > /tmp/helm_script.sh \\ && chmod 755 /tmp/helm_script.sh && /tmp/helm_script.sh --version v2.8.2 helm init --upgrade`\n출처: <https://sktelecom-oslab.github.io/Virtualization-Software-Lab/Helm/>\n\n- `kubectl create serviceaccount --namespace kube-system tiller`\n- `kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller`\n- `helm init --service-account tiller --upgrade`\n- `helm update repo`\n- `helm install stable/redis --version 3.3.5`\n\nrepo 추가\n- `helm repo add stable https://kubernetes-charts.storage.googleapis.com/`\n출처: <https://stackoverflow.com/questions/43499971/helm-error-no-available-release-name-found>\n\nhelm init\n- search\n- install\n- repo update\n- list\n- delete\n\n#### Kompose\ndocker-compose to kubernetes yaml\n출처: https://kubernetes.io/docs/tasks/configure-pod-container/translate-compose-kubernetes/#build-and-push-docker-images\n\n```\ncurl -L https://github.com/kubernetes/kompose/releases/download/v1.21.0/kompose-linux-amd64 -o kompose\nchmod +x kompose\nsudo mv ./kompose /usr/local/bin/kompose\nkompose up\nkompose convert\nkubectl apply -f <file>\nkompose down\n```\n\n#### Statefulset PV SC\nStatefulset을 사용하기 위해 pv를 만들어야 하고\npv를 만들기 위해서 storageclass가 필요\n\nstorageOS 설치\n출처: <https://docs.storageos.com/docs/platforms/kubernetes/install/1.10>\n\nSC default 설정\n- `kubectl patch storageclass fast -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'`\n출처: <https://proinlab.com/archives/2308>\n\nSC default 해제\n- `kubectl patch storageclass <your-class-name> -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"false\"}}}'`\n\nglusterfs pv pvc 예제\n- https://teamsmiley.github.io/2019/06/29/kubernetes-glusterfs/\n- https://docs.okd.io/latest/install_config/storage_examples/gluster_example.html\n\n\n#### glusterfs 설치\ngfs1, gfs2 라는 서버가 있다고 하자.\n- 양쪽 서버에서 /etc/hosts에 host 이름 둘 다 적어준다\n```\nsudo apt-get install software-properties-common\nsudo add-apt-repository ppa:gluster/glusterfs-5\nsudo apt-get update\nsudo apt install glusterfs-server\nsudo ufw allow proto any from <상대아이피> to <자신아이피>\nsudo service glusterd start\n\nsudo gluster peer probe gfs2 # gfs1에서는 gfs2를, gfs2에서는 gfs1을 둘 다 입력\nsudo mkdir -p /gluster/fs\nsudo gluster volume create vol replica 2 transport tcp gfs1:/gluster/fs gfs2:/gluster/fs force\n# (루트 파티션에는 볼륨 설정 안하기를 권하고 있으나 강제로 가능)\n\nsudo gluster volume start vol\nsudo mkdir -p /mnt/gluster\nsudo mount -t glusterfs <자신아이피>:/vol <마운트할 폴더> # (양쪽 서버에서 실행)\n```\n- /gluster/fs/ 는 파일 저장되는 공간\n- /mnt/gluster 는 마운트 시켜서 사용하는 공간\n\n/etc/fstab에 추가\n- `gfs1:/vol /mnt/gluster glusterfs defaults,_netdev 0 0`\n\npeer 추가 시\n- `gluster volume add-brick glus_vol gluster5:/data1/gluster gluster6:/data1/gluster`\n출처: <http://junhyung2.blogspot.com/2014/12/7-glusterfs.html>\n\nvolume 삭제\n- `gluster volume remove-brick vol_dist vmlnx005:/data`\n출처: <http://blog.syszone.co.kr/3038>\n\nGlusterfs 로 data volume 구성.\n볼륨형태\n- Replication : 완전 복제\n- Distributed : 분산 저장, 파일별로 분산\n- Striped     : 완전 분산 저장, 하나의 파일도 분산, I/O 성능 향상, 하나의 서버가 죽으면 파일 유실\n\nVolume2가 꺼졌다가 켜지면 동기화가 어떻게 되는지?\n\n목표\n- 스웜으로 두개를 킨 후 하나의 서버를 종료 시켜도 접속 가능하게\n- DB 컨테이너 생성 시 볼륨을 시킨다\n\n[[Troubleshooting#kubernetes]]\n"},{"headings":[{"value":"Database"},{"value":"대용량 작업"},{"value":"Redis"},{"value":"data structure [[redis]]"},{"value":"redis hash crud"},{"value":"elasticsearch"},{"value":"elasticsearch"},{"value":"synonym and user dictionary"},{"value":"elasticsearch"},{"value":"elastic search"},{"value":"클릭하우스"},{"value":"데이터 관리방법"},{"value":"회사 데이터"},{"value":"computer and data"},{"value":"데이터, 메모리, 기억, 히스토리"},{"value":"input 소스는 계속 쌓이는데 처리도 바로 하지 못하고"},{"value":"연상력"},{"value":"memory"},{"value":"하루키는 생각을 노트로 안적는다고 한다"},{"value":"기억 기록"},{"value":"내가 모르는 것들, 재밌는 것들이 그곳에 무수히 있다고 생각되었고 그것들을 놓치고 싶지 않았다"},{"value":"1에서 20까지 있을 때 7번을 보고있으면 마음이 초조해진다"},{"value":"좋은 정보를 다 알고 싶다는 것은 욕심이다"},{"value":"웹서핑과 인박스"},{"value":"맞춤형 서비스와 정보 공유"},{"value":"중첩 구조보다"},{"value":"Search"},{"value":"permutations"},{"value":"기본 기능"},{"value":"graphql"},{"value":"board 상태 수정"},{"value":"하둡 하나로 단일 진실 원천을 만드려고 하는 것"},{"value":"단일 원천"},{"value":"데이터 저장소는 Bigquery이고 이를 불러오는 것은 다른 툴에서 할 수 있다"}],"fields":{"slug":"/data/"},"rawMarkdownBody":"\n## Database\n\n- Data management: File - RDB - NoSQL\n- ACID\n- Atomicity\n- Consistency\n- Isolation\n- Durability\n- How would you find the most expensive queries\n- NoSQL, for document and relational db\n- NoSQL, CAP theorem\n- N+1 Problem\n\n#### 대용량 작업\n- 람다에서 한번에 많은 요청을 비동기로 하게 될 때 최대요청량을 제한 (p-limit)\n- 대용량의 검색이 필요할 때 무조건 paging 또는 iterator 또는 stream을 써야 메모리 문제가 발생하지 않는다는 것\n- select 시 10만 건 이상이 조회되는 경우 피하기 위해 stream 이나 paging 필요함\n\t- paging도 10만건 넘는 대용량에서는 성능이 딸려서 기간 제한을 두거나 카운트를 안하고 다음 페이지, 마지막 페이지로만 이동하게 시킴\n\t- 메모리가 한정적이기 때문에 select를 계속 들고 있어도 안되고 조작도 힘듬\n- 스프링에서 메모리가 계속 쌓이는 원인 중 2차캐시를 사용 중이면 old 메모리를 gc가 잘 회수해가지 못한다. gc가 잘 동작하도록 유도해줘야 한다\n\t- 일단 2차캐시 끄니까 메모리 사용량이 줄어듬. 계속 쌓이던게 잘 안없어져서 계속 늘어남\n\n\n## Redis\n\n- http://highscalability.com/blog/2019/9/3/top-redis-use-cases-by-core-data-structure-types.html\n- Chained Linked List에는 약점이 있습니다. 한 Bucket 안에 데이터가 많아지면 결국 탐색 속도가 느려집니다. 이를 위해서 Redis는 특정 사이즈가 넘을 때 마다 Bucket을 두 배로 확장하고, Key들을 rehash하게 됩니다.\n  - https://tech.kakao.com/2016/03/11/redis-scan/\n- hash를 쓰면 일정 크기 이하까지는 ziplist라는 형태로 저장된다\n- 메모리 사용이 많아져서 swap을 쓰게 되면 접근하는데 속도가 떨어진다\n- maxmemory 확인\n- keys, flushall 보다 scan 사용\n\n#### data structure [[redis]]\n\n- set vs hash vs strings in article\n- ? which type fit for index file -- hash?\n- true,false type -> bitmap 1.2M 10,000,000\n\t- [source](t.ly/KqGO)\n\n#### redis hash crud\n\njson data\n\n- HMSET -> HSET\n- HMGET\n- HSCAN\n\n## elasticsearch\n\n- Argument\n  - cluster, node, replica\n  - index\n  - documents with properties\n- Search\n  - get\n  - search(match)\n  - term\n  - should, must, must not\n- Type\n  - completion\n  - keyword\n  - custom\n  - text\n  - date\n- 증분 색인\n\n#### elasticsearch\n\n기본\n\n- 인덱스 생성 후, 그 안에 도큐먼트를 넣는다\n- Type, Id는 뭐지\n  - Type은 원래 인덱스 안에서 카테고리 역할이었는데 없어질 예정이라고 한다.\n  - 고정값으로 생각해도 되겠다(\\_doc) 6.7 버전에서 \\_doc으로 고정되었다\n  - Id는 도큐먼트를 인식할 수 있는 값, db에서 primary key 같은 느낌\n- 맵핑 - 데이터 형태 지정\n- 쿼리를 안넣으면 전체검색이 된다는데? - ok\n- 토크나이저와 아날라이저를 구분, analyzer가 tokenizer를 포함할 수 있다 +\n  synonym도 포함 한다\n- index 끼리 shard 할 수 있고, routing 하는 기능이 있다\n\n정보\n\n- tokenizer 설치 후 리스타트 해줘야 한다.\n- 인덱스 수정은 힘들고, 새로 만들어서 리인덱싱 해줘야 한다.\n- elasticsearch로 데이터를 관리하는 것은 우선순위 큐를 이용하는 것과 비슷한\n  느낌이다. es에 넣으면 내부에서 기대하는 로직을 수행하고, 결과값을 기대했던대로\n  받는다.\n- 검색 기능은 Lucene이 담당하고 elasticsearch는 클러스터의 기능을 담당한다.\n\n궁금한 것\n\n- [x] 쿼리에 어떤 것들을 쓸 수 있는지, must, should,\n- [x] 분석기 설정한 인덱스에서 검색했는데 결과가 동일함\n- [ ] 초기화를 elasticsearch에서 할지, api server에서 할지??\n- [ ] update할 때 기존에 것에 추가하는 작업이 안됨\n- [x] 전체 검색이 전체를 검색 안한다. 카운트는 정상적으로 세는데 hit는 하다\n      마나? default size가 10이었다.\n\n#### synonym and user dictionary\n\nuserdict.txt 와 synonyms.txt를 준비해두고 인덱스 생성\n\n```\n> curl -X PUT \"localhost:9200/analyze?pretty\" -H 'Content-Type: application/json' -d'\n{\n  \"settings\": {\n    \"analysis\": {\n      \"tokenizer\": {\n        \"nori_user_dict\": {\n          \"type\": \"nori_tokenizer\",\n          \"decompound_mode\": \"mixed\",\n          \"user_dictionary\": \"userdict.txt\"\n        }\n      },\n      \"analyzer\": {\n        \"korean_analyzer\": {\n          \"filter\": [\n            \"pos_filter_speech\", \"nori_readingform\",\n            \"lowercase\", \"synonym\", \"remove_duplicates\"\n          ],\n          \"tokenizer\": \"nori_user_dict\"\n        }\n      },\n      \"filter\": {\n        \"synonym\" : {\n          \"type\" : \"synonym_graph\",\n          \"synonyms_path\" : \"synonyms.txt\"\n        },\n        \"pos_filter_speech\": {\n          \"type\": \"nori_part_of_speech\",\n          \"stoptags\": [\n            \"E\", \"J\", \"SC\", \"SE\", \"SF\", \"SP\", \"SSC\", \"SSO\", \"SY\", \"VCN\", \"VCP\",\n            \"VSV\", \"VX\", \"XPN\", \"XSA\", \"XSN\", \"XSV\"\n          ]\n        }\n      }\n    }\n  }\n}'\n```\n\n#### elasticsearch\n\nuser dictionary가 수정되면 다시 읽어야 하고, 인덱스를 close, open 해야 한다\nuser dictionary는 인식하지 못하는 단어를 인식하게 하는 것이고\n\n- 신조어, 고유명사의 경우에 추가\n  synonyms는 인식한 단어들 중에 다른 단어도 같이 검색되게 하는 것\n- 사릉해, 얼굴-와꾸 등 기존 단어가 있는데 추가 검색이 필요한 경우 추가\n\n#### elastic search\n\nsecurity\n\n- don't bind to a public ip\n- proxy all client requests to elastic search\n- disable dynamic scripting(pre 5.x version)\n\ndesign\nindex management patterns\n\n- monolith\n- rolling indexes(time based events)\n\nquery\nterm, bool\n\n- smallest number of terms as possible\n- use filter context for static, non-full-text term queries\n- scripts will show down your searches\n\n? how to manage score? (weight)\n\n\n## 클릭하우스\n\n- 분석용 데이터를 저장하기 좋은 데이터베이스\n- Postgres에서 저장한 트랜잭션 데이터를 분석을 위해 옮기는게 일반적인 사용 방법\n- 그래서 CDC 도구를 이용해서 rdb에서 옮기는 것도 구성할 수 있음\n- 실시간 복제 : postgres -> cdc -> kafka -> clickhouse\n- 배치성 복제 : postgres -> airflow -> clickhouse\n- aws athena가 이 역할을 할 수 있다고 한다. 좋은데?\n\t- 실시간성이면 클릭하우스가 성능면이나 비용면이나 나을 것이고\n\t- 배치성으로 구해도 괜찮으면 athena로도 감당 가능 할 것 같다\n\n\n---\n\n## 데이터 관리방법\n\n과거의 기록이 필요할 때 찾아지려면?\n조선시대의 기록이 책의 형식으로 남아있는데 사료를 남기는 것의 중요성이 여기서 인식이 된다\n그 중 직급을 적어놓은 책이 있는데 이 책은 직급에 해당하는 사람이 바뀌게 되면 책을 다시 써야될 것 같다\n아니면 특정한 직급만 모아놓은 책을 만들 수도 있을텐데 관리를 다르게 해야되고 여러번 같은 내용을 작성하게 된다\n데이터를 남기는 것의 중요성은 인식되었는데 책에는 한계가 있다\n블록체인과 데이터를 어떻게 이용하면 데이터를 쉽게 관리할 수 있을까\n\n#### 회사 데이터\n\n데이터는 계속 쌓인다\n필요없는 데이터를 정리해도 데이터는 쌓인다\n데이터를 가공하는 것은 나중에 하더라도 최대한 많은 정보를 모으면 추후에 도움이\n될 수 있다 - 추후를 대비하는 것은 코딩을 할 때는 당장 안쓰면 앞으로도 안쓴다고 하지만\n데이터는 또 다른 것일까\n데이터를 어떻게 보관하고 가공하고 관리할까\n현재 이용되는 데이터, 잠재적으로 필요한 데이터, 남겨진 데이터\n가득 쌓여있는 데이터를 안전하게 보관해야 되서 또 사본도 저장해야 한다\n백업과 압축\n\n잘 보관하려면 여러 위치에 여러 번 저장하면 될 것 같다.\n그리고 격리된 장소에.\n\n데이터를 잘 쓴다는 것은 무엇일까\n원하는 데이터를 빠르게 가져올 수 있으면 될까\n\n하둡 등 데이터 관리 툴은 어떤 가치를 주도록 설계 되있을까\n\n데이터를 저장하는 형식은 어떤 것이 좋을까\ncsv, json, 순수 텍스트\n순수 텍스트를 json으로 변환해서 사용할 수 있긴 있다\njson을 순수 텍스트로 가공하기는 쉽지만\n순수 텍스트를 json으로 가공하려면 신경을 써야 한다\n\n#### computer and data\n\n- big data make compute better work\n- but I want make something that without data\n\n#### 데이터, 메모리, 기억, 히스토리\n\n## input 소스는 계속 쌓이는데 처리도 바로 하지 못하고\n\n처리하려고 접근을 해도 바로 처리가 안되는 것이 있다.\n이 지연상태가 답답함을 만든다\n처리를 하면 어떻게 처리를 해야할까\n일일이 모든 글의 리뷰를 남기면 좋겠지만 쉽지 않다\n\n## 연상력\n\n하나의 물체를 볼 때 여러 영역의 것들을 연상하고 연결하는 능력\n연상력과 기억력\n관련 영역에 있는 것을 연상하는 것도 중요\n관련 영역에 없는 것을 연상하는 것도 중요\n타이머를 개발한다고 했을 때\n시계의 기능이 어떤 것이 있는지도 연상해보고\n시계바늘을 또 다른 영역과 연상해보고\n\n## memory\n\n노트에 모든것을 기억하려고 하면 기억하려는 능력을 발달시키지 않으려 한다\n플라톤의 대화에도 이런 이야기가 있다고 한다\n[[Information#About write to a paper]]\n\n#### 하루키는 생각을 노트로 안적는다고 한다\n\n김중혁 작가도 그렇게 한다고 본 것 같다\n중요한 생각이라면 다시 생각날 것이라 생각한다고 한다\n하지만 나는 모든 것을 적으려고 한다\n적어서 누적된 것을 보면 잊었던 것이 떠오르니까\n\n#### 기억 기록\n\n기억을 단련하면 좋다\n근데 잊어버린 기억이 너무 많다\n공부를 해도 시간이 지나면 까먹는다\n기록에 의존하지 않고 잘 이용해야 한다\n\n#### 내가 모르는 것들, 재밌는 것들이 그곳에 무수히 있다고 생각되었고 그것들을 놓치고 싶지 않았다\n\n지금도 마찬가지고, 분명 저곳에는 내가 원하는 것이 수없이 많이 있을 것이기 때문에 찾고 또 찾아도 채울 수 없는, 다 찾을 수 없는 것이다. 하지만 못찾은 것들이 너무 아쉽고 뒤처진다는 느낌도 든다.\n새로운 정보, 좋은 정보를 얻고 싶은데 모두 가질 수는 없다. 하지만 가질 수 있을거란 미련이 계속 생긴다\n\n#### 1에서 20까지 있을 때 7번을 보고있으면 마음이 초조해진다\n\n나머지 것들이 뭔가 있을 것 같아서\n그렇다고 7번이 마음에 들었는데 넘어가면 7번을 잊을까봐 걱정된다\n\n#### 좋은 정보를 다 알고 싶다는 것은 욕심이다\n\n조절해야한다\n\n새로운 분야의 정보를 습득하는 것과\n깊게 파고들 때의 공부 방식은 다른가?\n\n가치판단이 필요한 경우?\n정보 전달을 목적으로 하면 가치 판단이 없는 것이 나은 것 같다\n경험 공유의 목적이라면 가치 판단이 있어도 될까\n\n#### 웹서핑과 인박스\n\n웹서핑을 통해 의외의 발견을 하면 기분이 좋다\n하지만 인박스에 많은 것이 남아있고 웹서핑은 효율이 떨어지기 때문에 우선순위를 생각할 필요가 있다\n그때그때 하고싶은게 있고\n그냥 웹서핑으로 내가 뭘하고싶은지 찾고 싶을때가 있고\n인박스에 넣어놓은 것을 볼 때도 있다\n\n#### 맞춤형 서비스와 정보 공유\n\n개인 맞춤 서비스는 감시도구가 많을 수록 잘 써질 수 밖에 없다\n주의해야 한다\n\n정보 조직\n어떤것을 보여주느냐에 제작자의 판단이 안들어갈 수 없다\n투명한 정보제공은 가능한가?\n\n모든 서비스는 사람이 만들기에 만든 사람의 영향이 들어간다\n블록체인도 개발자가 피할 수 없는 이득을 가지게 되어있다\n\n#### 중첩 구조보다\n\n같은 구조인데 연결을 확인할 수 있는 구조가 좋을 것 같다\n\n태그도 그렇고, 그래프도 그렇다.\n\n마이크로서비스에서 데이터 연결 시 연결용 필드만 추가해서 연결해서 호출할 수 있도록 하면 좋겠다\n\n- 근데 RDBMS의 관계 1:N, N:M 구조를 잘 구현하려면 그냥 RDBMS를 쓰는게 낫지\n  않을까\n\nClean Architecture에서도 나오듯이 순환 참조 구조가 되면 복잡해진다.\n\nDAG라는 데이터 형식으로 관리하는 방식이 있다.\n\n## Search\n\n#### permutations\n\ndata = 서피스 프로, 서피스프로\nsearch 서피스 프로 -> result = 2 object?\nreaching in bottom line,\nrendering comment object\n\n#### 기본 기능\n\n- 검색어에 -<키워드> +<키워드> 를 사용 가능하도록\n- 유의어 검색\n\n---\n\n#### graphql\n\n유저와 제품이 있으면\n제품은 하나의 유저를 가지기 때문에 제품과 유저는 묶일 수 밖에 없다?\n그러면 마이크로서비스에서 유저와 제품은 하나가 되어야 하나?\n\n백엔드에서 만든 로직을 클라이언트에서 일부분만 가져다 쓰는 것이 장점인가?\n백엔드에서 대충 던져줘도 클라이언트에서 조합해서 쓰는 것은 안되나?\n\nuser를 가져오고 그 user의 ID를 이용해서 comment를 가져오려고 한다.\nuser 안에 comment가 있는게 아니라 comment안에 user가 있어서 반대로 찾으려고\n한다.\n\n#### board 상태 수정\n\n텍스트만 허용되던 댓글창에 이미지와 동영상을 받아들이게 하려면\n1년 정도 이내의 글들에 한해 텍스트 필드를 확장시키는 작업을 하고,\n댓글의 속성을 변경하면 될까\n\n텍스트 필드를 변경하는 동안에 다른 사람이 접근하면 문제가 생기나?\n\n## 하둡 하나로 단일 진실 원천을 만드려고 하는 것\n\ncqrs에 하둡을 쿼리용 디비로 두고\n각 서비스가 커맨드를 한다?\n서비스에 캐시 - 서비스 - 디비를 둬도 될까\n캐시의 위치 더 좋은데가 있을까.\n\n이 아키텍처에서\n검색 기능을 추가할 때 쿼리만 가져오면 되나?\n유저들의 기록을 바탕으로 제품 추천도 해줄 수 있나?\n\n- 어떤 데이터 영역이 문제를 일으킨게 전체에 영향을 주기 때문에 마이크로서비스가\n  나왔다. 그러면 하둡은 서비스와는 별개로 백업용으로 운영되어야 하려나...\n\n#### 단일 원천\n\n진실의 원천\n오컴의 면도날\n추론의 건전성\n\n#### 데이터 저장소는 Bigquery이고 이를 불러오는 것은 다른 툴에서 할 수 있다\n\n툴을 다른걸 쓰더라도 데이터는 같은 것을 쓸 수 있도록 할 수 있다\n"},{"headings":[{"value":"DevOps"},{"value":"데브옵스의 목표는"},{"value":"DevOps"},{"value":"Devops goal"},{"value":"데브옵스는 린, 에자일의 연장선"},{"value":"포지션으로서의 데브옵스"},{"value":"데브옵스의 필요성"},{"value":"process 그 다음을 생각해야겠다"},{"value":"이상적인 개발 프로세스"},{"value":"궁금증"},{"value":"자주 쓰는 모듈을 이용해 프로젝트 진행 시 쓰게 되면"},{"value":"Serverless"},{"value":"Migration to own devops pipeline"},{"value":"Devops for machine learning"},{"value":"데브옵스 레퍼런스"},{"value":"기업들이 데브옵스 채용 후의 상황 변화된 사례나 데브옵스들의 경험담을 보고싶다"},{"value":"운영"},{"value":"장애 대응"},{"value":"Postmortem"},{"value":"SRE"},{"value":"서비스 사용자 수용량 확인"},{"value":"성과 측정과 개선"},{"value":"edge case"},{"value":"빌드와 배포"},{"value":"CI / CD 전체적인 흐름"},{"value":"CI"},{"value":"CD"},{"value":"CI 서버와 CD 서버를 나눌 필요가 있을까"},{"value":"제한"},{"value":"배포 파이프라인"},{"value":"배포 어려운점"},{"value":"쿼츠 무중단 배포 왜 안되는가"},{"value":"배포 시 마스터 머지 안됐을 때 방지하기"},{"value":"CI"},{"value":"CI strategy"},{"value":"CI cookbook"},{"value":"jenkins"},{"value":"pipeline"},{"value":"커밋 시 동작 가능한 단위로 한다"},{"value":"기능에 문제 없는 것이 확인 된 단위로 커밋을 하고 싶다"},{"value":"버저닝"},{"value":"meshkorea"},{"value":"고언어 ci cd 파이프라인 모아서 깃헙에 저장"},{"value":"정적 소스 분석"},{"value":"report"},{"value":"workflow"},{"value":"workflow"},{"value":"CD"},{"value":"퀵 픽스와 롤백"},{"value":"Feedback"},{"value":"인프라 레포와 코드 레포 분리"},{"value":"infra와 source를 분리"},{"value":"배포 자동화"},{"value":"스테이징 대신 카나리로 직접 테스트"},{"value":"다른 버전을 사람들이 쓰면 문제가 생긴다"},{"value":"모노레포에서 도커 빌드하기"},{"value":"deploy"},{"value":"argocd"},{"value":"이상적인 개발 - 배포 환경"},{"value":"시나리오"},{"value":"상황 1"},{"value":"상황 2"},{"value":"상황 3"},{"value":"reference"},{"value":"github이나 jenkins, travis에서 ci/cd 노하우를 공유할 것 같은데 찾아보자"},{"value":"ETC"},{"value":"java build quickly"},{"value":"DevOps한 백엔드를 위한 개발환경구축 가이드"}],"fields":{"slug":"/devops/"},"rawMarkdownBody":"# DevOps\n\n## 데브옵스의 목표는\n\n![devops](../img/devops.png)\n\n> 개발자로 구성된 소규모 팀이 기능을 독립적으로 구현하고, 프로덕션과 유사한 환경에서 정확성을 검증하며, 코드를 프로덕션 환경으로 빠르고 안전하게 배포하는 것이다.\n>\n> - Devops Handbook (https://johngrib.github.io/wiki/devops/)\n\n- [[Infra]] - Cloud\n- [[Container]]\n- Operating / Maintaining\n- CI / CD\n- Fail Tolerance / Chaos\n- Monitoring / Observability\n- Security\n- SLA / SLO / SLI\n\n\n## DevOps\n\nwhat is benefit of devops\n\n- makes team source useful.\n- developer think only source version control system(git, etc)\n- easy deploy, easy rollback, feedback\n\nDevOps' goal is for a small team of developers to implement functions\nindependently, verify accuracy in a production-like environment, and distribute\ncode quickly and securely to the production environment.\n\nDevOps gonna make fast to deploy\nSRE gonna maintaining production to reliability\n\n#### Devops goal\n- Build automation\n- Quickly release\n- Test automation\n- Feed back\n- 그리고 문화로서 개발자가 직접 개발한 것을 직접 빌드할 수 있는 환경을 만들어준다\n\n[[History#Devops came from agile 2009]]\n\n#### 데브옵스는 린, 에자일의 연장선\n- 예전에 제품 출시까지 오래 걸리고 회사 전체가 움직이던 것이 리스크가 있고 느려서 시대에 뒤처진다는 것에서 대응\n- 개발과 운영을 분리된 것이 아니라 제품 출시에 있어서 같이 진행되어야 하는 것으로 보고 통합하는 문화\n- 각 팀으로 분리하는 것이 아니라 같은 팀으로 묶여서 협업하는 문화\n\t- 개발자가 운영도 하는 업무의 확장으로 느끼지 않고, 제품 전반적인 관리를 참여하는 문화가 되도록 해야겠다\n\t- 사용자와 interaction을 늘리는 것인데, 현실적으로 개발자가 마케팅을 같이 하는 것은 무리가 있다. 개발과 마케팅의 간극을 줄이고, 응집력을 높이게 하는 것이 DevOps engineer의 역할일 것 같다.\n\nDevOps is the union of people, process, and products to enable continuous delivery of value to your end users.\n- Deployment frequency - faster time to market\n- Lower change failure rate - faster lend time for changes\n- Increase Revenue\n- Faster Mean time to recover\n\n#### 포지션으로서의 데브옵스\n인프라, CI/CD 파이프라인을 구성 및 관리하고 개발을 편하게 하기 위한 도구들을 개발하고 관리하는 포지션\n- 개발자들이 개발에만 집중하고 빠르고 편하게 개발할 수 있도록 돕는다\n- 개발자들이 개발에만 집중하지만 고객과의 interaction은 가깝게 느낄 수 있도록 한다.\n\n사람과 사람을 장벽 없이 연결 시키는 작업\n- 제품 개발에 참여하는 인원들 간의 장애물을 낮추기 위해 노력\n\n데브옵스는 다른 영역도 취미로 하는게 좋겠다. 다른 작업을 편하게 해주는게 대브옵스의 목표라고 생각\n- 사용자에게 바로 영향이 가는 서버를 운영할 때 데브옵스는 어떻게 해야 할까\n- 데브옵스는 포지션으로서 존재할 필요가 있는가?\n- 데브옵스는 qa엔지니어와 가깝나 백엔드와 가깝나\n\n#### 데브옵스의 필요성\n작은 기업에서는 기획,개발,qa,데브옵스를 나누지 않을 것이고\n규모가 커져야 qa엔지니어의 필요성을 느끼는 듯하다\n서버가 코드화되면서 개발자가 서버를 관리하기 쉬워졌다\n그래서 백엔드가 서버도 관리할 수 있게 되었는데 백엔드와 데브옵스를 분리할 필요가 있을까?\n프론트가 nodejs와 함께 백엔드를 할 수 있게 되었는데 그런 풀스택 개발자는 엔터프라이즈에서도 먹히잖아?\n\n규모가 커짐에 따라 세부적으로 역할을 나누는 것이 일반적이지만 데브옵스는 엔지니어의 역할 확장으로서 존재해도 되지 않을까? 프론트든 백엔드든 qa이든 서버가 어차피 코드화되어 있다면 같이 신경쓰는게 오히려 관리가 쉽지 않을까? 세분화되고 분리되면 고도화하기 좋긴 하겠다\n\n개발과 운영의 통합은 종속성, 의존성이 아니라 조화다\n각 마이크로 서비스도 데이터영역과 서비스 영역이 서로 의존하는게 아니라 조화를 이루게하면 되겠다\n\n1. Plan\n2. Develop + test\n3. release\n4. monitor + Lean\n\n개발자로서 데브옵스라면 팀의 소스를 모두 풀링해서 서버에 올리는 것에 신경 쓸 것이고\n문화로서 데브옵스라면 각 개발자가 서버에 쉽게 올릴 수 있도록 신경 쓸 것이다\n\n동작은 어차피 서버에서 자동으로 하겠지만, 개발자가 서버에 어떻게 올릴지 설정을 하게 할지, 아니면 운영자가 설정을 할지의 선택요소가 남아있다\n\n개발자가 피드백을 받으려면 개발자가 직접 설정해서 받는쪽이 나을 것 같다. 프로덕션에서 테스트도 해봐야할 것이고, 개발자가 설정하되, 파일 하나로 할 수 있고 쉽게 할 수 있도록 해야겠다\n\n\n#### process 그 다음을 생각해야겠다\n\n- [ ] 개발자들의 퍼포먼스를 올리기 위해서 어떤 작업들이 필요할까\n  - 이슈트래킹 서비스에 링크와 작업내용을 적고 github과 연동되어 github을 안들어가고 이슈트래킹 서비스에서 인터랙티브하게 동작되면 좋지 않을까\n- [ ] 시각화를 어떻게 만들어서 업무에 도움이 되게 할 수 있을까\n\n#### 이상적인 개발 프로세스\n\n- 새로운 이커머스 시스템 요청이 들어왔다\n- 기존의 라이브러리를 블럭처럼 추가해서 구현한다\n- 약간의 업데이트가 필요해서 업데이트를 한다\n- 이전의 소스에는 영향이 없다\n\n\n#### 궁금증\n- [프론트엔드 서비스를 통합 포인트로 설정할 수 있나?](Archive#프론트엔드%20서비스를%20통합%20포인트로%20설정할%20수%20있나?)\n- [프론트와 백엔드의 협업은 어떻게 진행되지?](Archive#프론트와%20백엔드의%20협업은%20어떻게%20진행되지?)\n- [스테이징 단계를 없앨 수 있을까?](Archive#without%20stage%20server)\n\n\n#### 자주 쓰는 모듈을 이용해 프로젝트 진행 시 쓰게 되면\n\n쓰면서 개선한 부분이 이전 프로젝트에 적용되야 할 수도 있고 안되야 할 수도 있다\n\n- [ ] 전체 적용되도록 형태를 잡는다면 이전의 프로젝트에 적용하는 방법은?\n\n\n#### Serverless\n데브옵스를 문화로써 받아들인다면. 모두 serverless로 만들어서 마이크로서비스화하는게 서버관리 리소스를 없앨 수 있고, 그럼에도 서버가 필요한 작업은 모놀리스하게 만든다. 중앙 집적 리소스 서버에서 모든 자원을 관리한다.\n\n#### Migration to own devops pipeline\n\n1. Check Github repository\n2. Dockerization\n3. Manual test\n4. Make CI test pipeline\n5. Make package\n6. Make kubernetes environment\n7. Deploy pipeline\n8. Make feed back loop\n9. Make everything to automation\n\n\n#### Devops for machine learning\n\nAI > ML > DL\n\nProgramming\n\n- Algorithm + Data => Result\n\nML\n\n- Result + Data => Algorithm\n- Result + Data => Model\n  Data => Predictions\n\nMachine Leaning\n\n- Prepare data -> Build and train -> Evaluate -> Prepare data\n\nPlanning\n\n- Experimentation doesn't exclude planning\n- Track work in the same tool as developers\n- Provenance / Explainability\n\nSource control\n\n- Everything in source control\n- canonical data sources\n- ETL/ELT process in code\n- Infrastructure as code\n\nCI/CD\n\n- Tests, linting, evaluation and scoring\n- Training and experiment runs\n- Artifact/model management\n- Operationalization and deployment\n- Commit - Triggered pipelines\n\nMonitoring and Learning\n\n- Retraining strategy\n- Data triggers for CI/CD\n- Don't forget performance\n- Portability\n\nData - Preprocessing - Training - Test\n\nHow Training data work in production?\n\n- Result is solid data?\n\nHow to add production data to training data?\n\n\n## 데브옵스 레퍼런스\n\n#### 기업들이 데브옵스 채용 후의 상황 변화된 사례나 데브옵스들의 경험담을 보고싶다\n\n- https://www.theteams.kr/teams/522/post/63940\n\t- 데브옵스 채용이라기 보다는 문화를 바꾼 후 코드 관리에 집중함으로써 품질을 높였다.\n- https://blog.kmong.com/크몽-모바일-데브옵스-960627d053cf?gi=c89f3ade7b36\n\t- 경험보다는 어떤 것들을 하고 있는지 잘 정리돼있다.\n- https://www.bucketplace.co.kr/post/2020-07-23-오늘의-집사-서버-개발부터-운영까지-전부-다-맡겨-devops팀-리더-쟈니/\n\t- 데브옵스 팀의 리더의 이야기\n- https://www.itworld.co.kr/news/155512\n- [Line](https://engineering.linecorp.com/ko/blog/line-ads-devops-culture/)\n    - 기획, 코드, 빌드, 테스트, 릴리스, 배포, 운영, 모니터링\n    - 기획 - confluence로 관리, kanban에 이슈 매칭, jira로 이슈 트래킹\n    - 코드 - git-flow를 간소화해서 develop에 featrue를 붙여 개발 후 master에 병합\n        - 코드리뷰 - 이슈트래커 번호, 1명의 승인 필요\n    - 빌드, 테스트 - 언어별 기본 test, 요청 응답 테스트, 두 장비가 요청을 보내\n      같은 결과를 보내는지 비교(api comparator)\n        - PR 생성, 변경 시 단위 테스트\n        - 상위 브런치에 머지했을 때 API 테스트\n        - 특정 주기마다 테스트 반복\n            - 단위 테스트 실패 시 머지 불가 조건\n    - 릴리즈, 배포 - 위에서 검증 완료되었는지 한번 더 확인\n        - kanban에서 confirm상태가 됐는지 확인하고 deploy로 상태 변경\n        - 배포 전에 변경 공지를 등록하고 어떤 변경사항인지 관리자와 공유(메신저)\n        - 배포 시작되면 전체 공유\n        - 카나리로 배포, 1대에 배포 후 모니터링 되면 3분의 1부터 배포\n            - 장애 발생 시 이전 상태로 재배포. PR revert, Tag 제거\n\n## 운영\n\n#### 장애 대응\n- 인식\n- 보고\n- 롤백\n- 복구\n- 피드백\n\n#### Postmortem\n대응 후 회고\n\n\n#### SRE\n\nTo upgrade site reliability\n\n1. Monitoring\n   - Monitoring various content\n   - Make automation\n2. Performance check\n\nQuick recovery scenario\n\n- Check error 5xx, when error occurred rollback to prev version. And reporting\n  error situation. Which are link, behavior, data, code line, build package,\n  (commit source)\n\n#### 서비스 사용자 수용량 확인\n\n서비스가 빠른지 확인 방법 Throughput, Latency\n\n- Throughput 시간당 처리량 TPS, RPS 등\n  - 병목 발생한다\n- Latency 응답 지연 시간\n  - 모든 서비스 지연시간이 영향을 준다\n\n부하발생시키기\n\n#### 성과 측정과 개선\n- DevOps 성과 지표\n\t- DORA Metrics\n\t\t- Deployment Frequency\n\t\t- Lead Time\n\t\t- MTTR\n\t\t- Change Failure Rate\n\n#### edge case\n- 로그 폭발\n- 권한 남용\n- 시스템 다운\n- 네트워크 혼잡\n\n# 빌드와 배포\n\n\n## CI / CD 전체적인 흐름\n개발\n- Git Commit\n- Git Push\n\n개발자가 해야할 일\n- 기능 개발\n- 오류 수정\n- 새로운 아키텍처 추가\n\nCI\n- 정적 분석\n- 테스트 실행\n- 패키징\n\nCD\n- 배포\n\nci/cd 선택요소\n- pr or push\n- 브랜치명\n- 스킵\n- 배포 형태\n\n흐름\n- 기능 브랜치 해서 푸시하면 ci 실행\n- 머지하면 cd 실행\n- 마스터에 푸시 막기\n\n#### CI\n여러 개발자들의 변경 사항이 하나의 공유 공간에 통합시키는 것이고 나아가서 빌드 및 테스트까지 자동으로 이루어지게 하는 작업\n\n#### CD\n공유 공간에 모인 작업 내용을 배포 하는 것. 실제 배포까지 한번에 자동화할 수도 있고, 배포는 시기와 상황에 맞춰 수동으로 할 수도 있다\n\n#### CI 서버와 CD 서버를 나눌 필요가 있을까\nCD는 배포된 내역을 관리하는 대시보드의 필요성이 있다\n\n#### 제한\n- 커밋 전 체크 1초\n- 풀 리퀘스트 후 테스트 시간 10분\n- 머지 후 배포 10초\n\n#### 배포 파이프라인\nIDE에서 이슈 확인 -> 작업 -> 테스트 -> 푸시 -> 알림 ->\n\n알림이 가면 리뷰를 하고 -> 알림이 쌓이면 이전 알림을 못볼 수 있으니 이 점 체크 필요\n알림 확인은 됐는데 모종의 이유로 배포는 연기해야 하면 이 상황을 다시 전달 -> 이벤트가 다시 전달되고 -> 다시 알림 온다 -> \n\n#### 배포 어려운점\n- 배치잡이 돌고있을때 새로운 인스턴스가 뜨고 기존 인스턴스가 꺼지는 상황에서 배치잡이 돌고 있어도 강제로 꺼지게 된다\n\n#### 쿼츠 무중단 배포 왜 안되는가\n인스턴스 2개 떠있는 상태에서 새로운거 2개가 떴을 때 왜 중복 연동이 될 수 있을까\n중복 연동 때문에 쿼츠를 끄고 했던가 미연동 때문에 쿼츠를 끄고 했던가\n2개가 떠있는 상태에서 새로운게 떠도 기존게 돌릴 수 있어서 쿼츠의 꼬임 걱정은 안해도된다\n새로운 인스턴스가 떴을 때 그 인스턴스에만 쿼츠가 가도록 하게 할 수 있을까? 이렇게 된다해도 새로운 인스턴스가 성공적으로 못떠서 꺼지면 다시 기존 인스턴스에서 쿼츠가 실행될 수 있을까\n기존 인스턴스가 종료되기 전에 쿼츠 잡을 성공적으로 완료되면 꺼지게 할 수 없었다\n그럼 새 인스턴스가 뜨자마자 쿼츠잡을 이어 받아야 하는데\n이런 꼬임이 걱정되서 그냥 끄고 했다\n그러면 끄는 거라도 자동으로 해도 될까. 배포 전에 api를 쏜다?\n근데 이미 돌고 있는게 있는지 체크하는건 신경 써야 한다\n\nCD 툴이 따로 필요한가? 어차피 스크립트로 배포는 할 수 있는데\nargocd를 보면 배포된 것을 관리하는게 되야 가시성이 생겨서 필요한가\n생명주기를 관리해주는 역할도 할 수 있을 듯, 켜고 끄고를 관리자 창에서 관리할 수도 있고\n\n#### 배포 시 마스터 머지 안됐을 때 방지하기\nhttps://sixmen.com/ko/tech/2022-08-28-1-prevent-deploy-invalid-branch/\n- 회사에서는 마스터 머지된거만 배포하긴 한다\n- 스테이지 배포 시에는 개인의 신경에 달려있긴 하다. 마스터 머지 안되서 안된적이 있긴 있음\n\n\n## CI\n- coding convention\n- test\n- code profiling\n\t* lint, coding convention check - static code analyse\n\t\t* security check(synk)\n        * codefactor\n        * codecov\n        * 도커 이미지 보안 스캔하는 서비스 - docker bench for security\n        * Find bugs or perform static analysis tool - pychecker, pylint\n        * [semgrep](https://semgrep.dev/)\n    * [size limit check](https://github.com/andresz1/size-limit-action)\n\t* check test. check coverage\n- pull request with report\n- pull request and code review\n- build\n- [version marking](Team_management#Conventional commits)\n\n#### CI strategy\n실패를 먼저 확인한다\n- pull request를 보내고 테스트가 실패하는 것을 먼저 달게 하는 템플릿을 만든다\n\n진행 결과를 코멘트해준다\n- test\n- 릴리즈 태그\n- 변경된 파일(?)\n- 배포 결과\n\n#### CI cookbook\n- 실패 시 메시지\n    - `if: failure()`\n- 스킵\n    - commit이나 pr에 [ci skip] 또는 [skip ci]를 하면 자동 스킵\n- 풀리퀘스트에 코멘트 달기\n    - `uses: actions/github-script@0.3.0`\n    - `script: github.issues.createComment()`\n- 테스트 결과 코멘트 달기\n    - coveralls 이용. coveralls bot을 레포에 초대해야한다. 잘 안붙는다\n    - codecov 도 있다\n    - `uses: romeovs/lcov-reporter-action@v0.2.16`  심플 커버리지 확인\n- pull request, push 상황 체크\n    - `on: [\"push\", \"pull request\"]`\n- pull request 생성\n    - `uses: repo-sync/pull-request@v2`\n    - destination_branch, pr_title, pr_body 등 설정\n- 변수 여러줄 저장하기\n    ```\n    go test -cover -v > output.txt\n    body=$(cat output.txt)\n\n    body=\"${body//'%'/'%25'}\"\n    body=\"${body//$'\\n'/'%0A'}\"\n    body=\"${body//$'\\r'/'%0D'}\"\n\n    echo \"::set-output name=body::$body\"\n    ```\n    - 파일에서 읽으려면 예약된 문자들을 입력해줘야 여러 줄로 인식이 됨\n    ```\n    echo ::set-output name=stdout::`go test -cover -v`\n    ```\n    - stdout을 바로 받으려면 이렇게만 해도 된다\n- cache\n    - actions/cache 이용\n    - `if: steps.cache.outputs.cache-hit != 'true'` 로 체크\n- terraform 구동\n    - `uses: hashicorp/setup-terraform@v1`\n    - terraform cloud 토큰 생성 후 이용 가능\n- docker repository\n    - github repository\n    ```\n    echo \"${{ secrets.GITHUB_TOKEN }}\" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin\n    VERSION=$(echo \"${{ github.ref }}\" | sed -e 's,.*/\\(.*\\),\\1,')\n    docker push docker.pkg.github.com/${{ github.repository }}:$VERSION\n    ```\n    - dockerhub repository\n    ```\n    uses: docker/login-action@v1\n    with:\n        username:\n        password:\n    ```\n- artifect\n\n- [github default context](https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context)\n- [awesome-actions](https://github.com/sdras/awesome-actions)\n\n#### jenkins\n수동 배포도 되는 것이 장점\n\n코드 분리 가능 (github action, circle ci는 불가)\n\n선언형과 groovy같은 스크립티드 문법 중 선택해서 쓸 수 있는데, 선언형으로 안되는\n것들이 있어서 스크립티드를 써야하는 경우가 있다고 한다.\n\nConfiguration as code 플러그인을 설치하면 코드로 설정 관리 가능\n- https://tech.kakao.com/2021/07/16/devops-for-msa/\n\n#### pipeline\n백엔드는 깃 폴더 내에서 작업하고\n푸시하면 이미지가 만들어지고 파이프라인에 들어간다\n디비나 다른 프로그램 사용이 필요할 때 바로바로 사용할 수 있어야 하고, 연결과 내부 확인이 바로 되어야 한다\n개발과 테스트가 자유자재로 되어야 한다\n개발을 하다가 테스트가 필요하면 바로 할 수 있어야 한다\n\n프론트엔드도 깃 폴더 내에서 작업하고\n백엔드의 데이터를 마음대로 가져올 수 있어야 한다\n라이브러리 관리가 되어야 한다\n\n커밋 전 확인할 것\n- 커밋 시에 사전체크가 오래 걸리면 업무가 지연된다\n커밋 후 확인할 것\n\n직접 관리할 서버와 서비스를 이용하는 것은 어떻게 나눠야할까\n젠킨스, 깃헙 액션\n\n메인서버의 데이터를 바로 테스트용으로 카피할 수 있으면 좋겠다\n그러려면 메인서버의 데이터 자체가 너무 비대해지면 안되겠다\n\n세부설정을 할 수 있게 하되, 기본값은 실제 서버값으로 하면 테스트하기 좋지 않을까?\n기본값으로 초기값을 하면 정확한 테스트가 안될 것 같다\n\n테스트 서버의 자원을 로컬에서 할지 공용 풀에서 할지 선택하면 좋겠다\n\n관리페이지 접속 -> 서비스 신청 -> 주소 할당\n\n#### 커밋 시 동작 가능한 단위로 한다\n한 동작마다? 한 단위마다?\n처음 틀 만들 때는 빠른 개발을 위해 되는대로 작성해놓고 커밋만 따로 쪼개서 하고\n싶은데 가능한가?\n\n#### 기능에 문제 없는 것이 확인 된 단위로 커밋을 하고 싶다\n기능에 문제가 있는지 없는지는 어떻게 확인할까\n검사하기 좋은 아키텍처를 가지는 것도 중요하겠다\n- 정적 테스트가 완료되면 문제 없다고 할 수 있게끔 해야겠다\n\nCI를 커밋할 때 하는 것보다 PR을 할 때 하면 PR에 결과 표시해주면 한 곳에서 확인할 수 있어서 좋겠다\n\n커밋할 때는 짧게 확인 가능한 위주로 테스트하고, PR에서 좀 더 진행하면 좋겠다\n\n개발자들이 실제 작업하는 환경을 수시로 확인하는 작업이 필요하다\n\n#### 버저닝\npr마다 버전을 넣으면 금방 100을 넘을 것 같은데?\n컨테이너 이미지 만들 때 버저닝 같이 하게 된다\n\n#### meshkorea\n젠킨스파일을 각 레파지토리에 추가해서 파일 하나로 CI/CD 작업을 연결한다\ntag 기반으로 젠킨스에 훅을 보낸다\n메뉴얼로 바로 배포하는 옵션도 있다\nkubernetes 레포와 소스코드 레포를 분리했다\nhelm 의 values만 수정해서 관리할 수 있게 했다\n\n#### 고언어 ci cd 파이프라인 모아서 깃헙에 저장\n배포는 4가지 경우의 수 제공\n로컬(앤서블), 클라우드(테라폼), 깃옵스,\n\n테스트 및 릴리즈는 일반적인 경우 바로 받을 수 있도록\n\nusercontent 링크로 바로 받아서 파일로 만들 수 있도록\n\n이미지로 어떤 것들 제공해주는지 한 눈에 확인\n\n\n#### 정적 소스 분석\n- lint check\n- test\n- secure check\n- size check\n* Dead branch check (long time)\n* Dependency check\n* Execute time check\n\n상황 처리\n- push, pull request, 특정 branch만 받기\n\n테스트 결과 이슈에 남기기\n\n현업에서 필요한 복잡한 CI/CD 구성을 알고 싶다\naws에서 복잡한 구조를 지원하는 것을 어필하기 위해 소개하는 문서가 있을 것 같은데\n\n터미널에서 푸시를 하면 깃헙 사이트에 들어가야 진행 상황을 알 수 있다\n그래서 슬랙을 써서 하는 회사들이 있는데\n터미널에서 바로 인터랙티브하게 할 수 없을까\n- actions-cli\n\n#### report\n- 소스 코드 정보\n    - 신규로 추가한 라인 수, 변경된 라인 수, 소스 코드 파일 개수, 커밋 개수 등\n- 소스 코드 정적 분석 데이터\n- 소스 코드 빌드 데이터\n    - 작업별 빌드/테스트 시간\n    - 빌드 성공/실패율, 빌드 로그\n    - 빌드 테스트 리포트, 패키지(APK) 정보, 버전 정보\n    - 빌드 옵션, 메모리 덤프 데이터\n    - 빌드 태스크 의존성 정보\n- 빌드 시스템 정보\n    - 사용자 시스템 정보(CPU, 메모리)\n    - CPU 사용량, 메모리 사용량, 디스크 사용량\n    - 빌드 대기 시간, 빌드 장비 활용 시간\n- 패키지 크기\n- https://engineering.linecorp.com/ko/blog/build-a-continuous-cicd-environment-based-on-data/\n\n#### workflow\n개발 전 - 개발 중 - 개발 후 관리\n- 개발 전\n    처음 프로젝트 시작 시 필요한 파일\n    깃헙 워크플로우\n    도커 컴포즈 파일\n    깃 훅\n  - workflows, pre-commit, PULL-REQUEST 파일 불러오기\n  - synk 등 github third party 허가 등록\n  - 특정 언어 템플릿이나 미들웨어 서버 필요 시 불러오기?\n  - security 정보 등록\n- 개발 중\n  - git-cz 등 개발편의용 도구\n  - workflows 실행으로 테스트 자동\n\n처음에는 infra repo에서 가져와서 서비스를 배포하는데\n서비스별로 별도의 infra가 필요해지면 쉽게 변경 가능해야할까? 아니면 굳이\n안바꾸는 것을 권장해야할까?\n\n스테이지 서버에서 테스트 후 프로덕션 서버로 카나리 배포, 롤링 업데이트를 하게\n될텐데 이 설정들은 infra repo에 고정적으로 있으면 되나?\n\nci/cd에서 하는 것이 배포 위치 지정(dev, prod 지정),\n\n#### workflow\n운영쪽에서 개발코드를 지정할 수도 있고\n개발코드쪽에서 운영쪽으로 푸시할 수도 있고\n\n그러고보니 argocd를 실행하는 코드는 개발소스 레파지토리에 등록해서 써야하겠다\n- 운영용 레파지토리에서 개발용쪽을 트리거 받는 방법도 있긴 하네\n젠킨스파일처럼 파일 하나만 폴더에 추가해서\npr요청하면 그 파일이 서버에 훅을 보내서 특정 작업들을 실행하도록 한다\n\n파일에는 세부 설정도 가능하지만 기능 on/off 정도만 해도 되도록 하면 좋지 않을까\nargocd라고 적어놓으면 배포자동화가 되도록\n\n\n코드 푸시하는 곳에서 이슈 리스트를 확인하고 코드를 내려받고, 푸시하면 리포트를\n받아보게 되는 올인원 툴이 있으면 좋겠다\ngithub action 추적도 되고\n\n관리 쪽에서 개발소스를 컨텍해서 올리는게 더 안전성이 높지 않을까\n\n\n-----------------------------------------------------------------------\n\n## CD\n\n배포 관리\n- 배포 현황 파악\n- 싱크\n- 롤백 등 버전 관리\n\t- 핫픽스를 어떻게 할 것인가\n- 피드백 만들기 필요\n- 인프라 구성 코드 관리\n\n#### 퀵 픽스와 롤백\n\n퀵 픽스는 불합리한 것 같다\n급하게 고쳐야한다면 다시 또 문제가 생길 수 있고 간단하게 고쳐진거라면 단계를 건너뛰고 올릴게 아니라 그냥 일반적인 플로우대로 진행하면 될거 같다. 서버에 있는 걸 직접 고치는 것은 요즘에는 잘 안하니까...\n\n큰 릴리즈를 했는데 에러가 발견되서 예전으로 되돌릴 수 없을때 퀵픽스를 하려고 하겠다. 큰 릴리즈를 하고 처음에는 괜찮았다가 뒤늦게 문제가 발견되면 롤백보다는 빨리 조치를 하는게 낫겠다\n\n#### Feedback\n* Measure Code, server(package), user experience to github issue\n* Code static is reported in CI cycle.\n* package is reported in CD cycle\n* Error time, count, environment,\n\n#### 인프라 레포와 코드 레포 분리\nargocd에서 쿠버네티스 템플릿을 가지고 있고, 코드 레포지토리에서는 이미지만 빌드하게 하면 좋을까\n- 인프라 레포와 코드 레포의 분리.\n- 코드 레포는 ci와 이미지 빌드까지 진행\n- 인프라는 자동 감지\n\n#### infra와 source를 분리\n쿠버네티스 테스트 레포지토리와 myspace 레포지토리를 분리하고\nMyspace의 폴더가 곧 프로젝트 목록이 되도록 구성\n\n1. Basic 폴더를 만들어서 이를 복사해서 쓰도록한다\n2. Argocd에서 폴더를 등록한다\n3. 배포 완료\n\n인프라 코드도 개발자가 관리하도록 하기 위함.\n개발 코드는 컨테이너 이미지 배포하기까지 자동\n\nPrefix로 infra 서비스와 비즈니스 서비스 구분\n\nargocd를 github action에서 실행한다면\n소스코드와 인프라코드가 분리되있는데\n소스코드 변경을 인프라가 어떻게 알아차릴 수 있지?\n\n소스코드 변경 후 인프라를 다시 건드리면 안된다\n인프라는 인프라대로 관리되고, 소프트웨어 업데이트는 소스코드에서 따로 처리되야 한다\n\n인프라 변경 시 변경될 것은 쿠버네티스 셋팅, 서버 셋팅\n소스 변경 시 변경될 것은 소프트웨어 버전, 세부 설정\n\n둘 다 쿠버네티스 어플라이를 해야되는 건 같다.\n\n인프라 생성 시 argocd 등록 되도록 하고, 그게 소스코드를 보도록 하면 될까?\n1. 레포지토리 생성\n2. 도커 빌드\n3. 인프라 레포에서 폴더 생성\n4. argocd 싱크 등록을 1 레포지토리로 등록\n5. 레포지토리 업데이트\n6. argocd 동작\n\n#### 배포 자동화\n- docker package\n- maven package\n- exe 파일로 package\n\n- ansible로 로컬 배포\n- terraform으로 클라우드 배포\n- docker 패키징\n- argocd\n\nCD 로 로컬 서버에 배포하는 작업 보안 확인\n\n\n#### 스테이징 대신 카나리로 직접 테스트\n그러면 카나리 하다가 전체가 문제가 생기면 어떻게 하냐는 걱정 생긴다\n\n격리를 잘 하고, 고가용성을 챙기고 데이터 변경으로 인한 영향이 없도록 해야한다\n\n먼저 쿠버네티스, 깃헙을 이용해 개발하다가\n팀이 따로 분리되어 전문화 되면 비로소 자체 시스템이 필요하지 않을까\n\n처음에는 여러 역할이 한 팀에 있고, 이 팀들을 관리하는 팀이 있는 구조에서\n팀을 관리하는 팀을 관리하는 팀이 필요해지는 시점 정도부터 세부적인 팀의 분리를 하던가, 상위팀이 하위 팀을 위한 툴을 개발하는 팀으로 역할을 하던가 하면 되지 않을까\n\n스테이징 서버 없이 카나리로 테스트\n실제환경에서 카나리 테스트\n\n데이터에 문제 생길 것에 대비해서 업데이트 시 스냅샷을 찍어놓고 찍은 후 생긴 데이터를 따로 더할 수 있게한다. 문제가 생기면 스냅샷으로 롤백하고 추가된 데이터를 더한다. 스냅샷과 데이터복구가 잘 되는지 검증한다\n\n- 배포와 릴리즈 분리\n\n#### 다른 버전을 사람들이 쓰면 문제가 생긴다\n특히 db 처리에서 차이가 있으면 그렇겠다\n롤링업데이트는 괜찮은게 맞나?\n- 어댑터 패턴이라는 것이 있다\n  점진적 업데이트 시 이전 버전의 데이터를 갖고 있다가 출력을 바꿔주는 식\n\n카나리를 먼저 하고 롤링 업데이트를 하면 되지 않을까?\ndb 같은 업데이트는 카나리로 하는게 좋겠다\n\n#### 모노레포에서 도커 빌드하기\nyarn workspace, docker, jenkins\n\n모노레포와 모놀리틱 아키텍처의 차이\n- 모노레포는 각각의 단일 서비스가 한 프로젝트 내에서 각각 빌드 가능하다\n- 모노레포 안의 디렉토리는 개별적인 서비스로 구동 가능해야한다.\n- 모노레포는 의존 라이브러리를 루트에서 관리하되 링크를 걸어준다.\n\n도커파일 하나에 환경변수를 받아서 각각의 서비스를 빌드하도록 할 수 있다.\n\n한 프로젝트 안의 한 서비스를 보통 수정하게 되고, 푸시하면 변경된 서비스의\n이미지가 업데이트 되어야 한다.\n- lerna 에서는 지원하는 기능일까?\n- workspace document는 없는건가?\n\n도커 안에서 어차피 pakage.json을 읽어서 인스톨한다면 링크가 있던 없던 상관없지 않을까\n- node module 대신 package.json만 넣는 이유\n- 도커의 캐싱 시스템을 이용하는 것인데,\n- package.json 파일이 바뀔 때만 npm install을 해줘서 바뀌지 않을 때 시간을 단축 시킨다\n\nworkspace 에서 루트에 모두 설치되고 각 서비스에 링크된다\n\n워크스페이스로 참조하고 있는 다른 서비스가 package.json에는 있는데, 실제로\n빌드할 때는 없어서 한 서비스 빌드할 때도 넣어줘야한다\n\n#### deploy\n서버의 kube config를 가져온다 - private key를 github secret에 등록시키고 scp를\n이용한다\n변경된 파일을 인식해서 apply 한다\n\n1. 인프라에서 추가를 하면 서비스에 설정파일을 주입한다.\n2. 서비스에서 간단한 파일이라도 추가해서 신호를 준다\n\t- 관건은 서비스를 업데이트 했을 때 따로 설정 없이 인프라가 알아챌 수 있는지인데\n\t- cron을 계속 한다? 무리...\n\t    - argocd도 근데 레포지토리를 cron하는 방식 아닌가?\n\t- argocd로 배포를 하면 처음 등록만 수동으로 해주면 된다.\n\t- kubernetes를 워크플로우에서 동작하면 argocd 필요 없다\n\t- argocd가 소스코드 변경을 보는게 아니라 yaml 파일을 보는거라...\n\n지금은 일단 elasticsearch에 dockerfile 빌드할 때 synonym 파일을 집어넣었다\n이러면 github과 연동이 안되어서 버전 업데이트 할 때 날아간다.\n대응 방법을 생각해야 한다\n쿠버네티스 로컬에서 볼륨을 만들어서 연결해도 github에 업데이트는 못한다\ncron으로 파일을 파싱해야 할까. 매일 한번씩 카피해서 올려도 될듯\n\n#### argocd\nterraform 으로 master ip 얻어서 argocd 마스터로 전달\n인프라 레포에서는 생성만 하고, 싱크는 argocd가 github을 보면서 할 수 있나?\n\n서비스 레포에서 푸시 -> 도커 이미지 변경 -> 인프라 레포에서 변경 인식\n-> argocd sync\n- 소스 레파지토리에서 인프라 레파지토리의 버전값을 변경하고 푸시하는 방식으로\n사용하더라\n\n- argocd에서 kubernetes.local로 접속하는게 어디?\n\n#### 이상적인 개발 - 배포 환경\n\n> 그러면 이번 장에서는 이런 현대의 서버 개발 환경이 어떻게 구성되는지를 살펴보기로 한다. 다음과 같은 시나리오를 생각해보자. \"개발자가 아침에 출근해서 책상 앞에 앉아서 노트북을 켜고 **로그인을 한다.** IDE 도구인 이클립스를 실행하면 이슈 트랙킹 도구와 연결되어 **오늘 해야 할 일들이 자동으로 리스트 업 된다.** 개발자는 그중에서 하나의 태스크를 가져와서 내용을 확인한다. 해당 태스크의 상태를 진행 중(In Progress) 상태로 바꾸고, 소스 코드 관리 시스템에서 최신 소스 코드를 내려받는다. 로직을 구현하고, 코드를 검증하기 위해서 단위 테스트 코드를 작성하여 테스트까지 수행한 후 정상적으로 작동하는 것을 확인한 후에 다시 소스 코드 관리 시스템에 **코드를 반영 요청**을 한다. 반영 요청을 즉시, 자신의 **선배 개발자에게 통보**가 되고 선배 개발자는 해당 개발자가 변경한 코드의 내용을 형상관리 시스템에서 확인하고 시스템을 통해서 코드에 대한 **피드백을 적어 놓는다.** 코드 상에 문제가 없으면 코드 반영을 허가하고 변경 부분은 전체 소스 관리 시스템에 반영된다. 코드가 반영되면 중앙화된 자동 빌드 시스템에서 코드를 내려받아서 컴파일 및 **테스트 서버에 자동으로 배포**하고, 이미 정의된 테스트를 수행한다. 테스트가 끝나면 전체 소스 코드 줄 수 중에 어느 줄이 테스트가 되었는지, 전체 코드 중 테스트 된 줄 수의 비율 등을 자동으로 측정해서 **리포트를 생성**해 준다. 또한, 자동화된 규칙에 따라서 코드 상에 에러 처리가 안 된 부분이나 명명 규칙(Naming Rule)이 틀린 부분을 자동 검출하여 팀원에게 알려준다. 모든 빌드와 테스트가 끝나면 해당 코드는 **스테이징 (Staging) 환경으로 자동 배포**가 되 고, 변경 부분은 QA 팀에 의해서 테스트를 거친 후에, **매일 밤에 운영 시스템에 반영**된다.\n> - (책) 조대협님\n- 연계된 서비스의 배포는 어떻게 하고 QA를 진행하지? 자동으로는 안되고 배포 시마다 알려줘야 할 거 같은데\n\t- 기능이 하나의 서비스에서만 동작하는게 아니라 여러 서비스가 같이 배포되어야 원하는 동작이 되는 경우일때.\n\n\n-----------------------------------------------------------------------\n\n## 시나리오\n- 상황 1. 개인 프로젝트로 go web server를 구축하여 원격 서버에 배포\n- 상황 2. 10인 개발팀이 개발은 compose로 진행하고 배포를 argocd로 배포\n- 상황 3. 3명의 개발자가 terraform으로 인프라 관리 및 배포\n\n#### 상황 1\n개인 프로젝트로 go web server를 구축하여 원격 서버에 배포 시 에러가 발생한 상황\n- 브랜치별 개발 - 푸시 - 정적 테스트 - 배포 - 릴리즈\n- 릴리즈 된 것이 개발팀에 바로 피드백을 줘야 한다\n\t- 테스트 실패\n\t- 배포 실패\n\t- 릴리즈 실패\n\t- 릴리즈 시 특정 동작 문제 발생\n\t- 이슈 보고\n\t- 리소스 부족\n\t- 외부 라이브러리 문제 발생\n- 에러가 생각나서 긴급 수정\n\n#### 상황 2\n10인 개발팀이 개발은 compose로 진행하고 배포를 argocd로 배포\n- 권한 관리 (개발팀이 경영팀에 마음대로 들여다 볼 필요 없음)\n- 휴먼 에러 방지\n- 비슷한 템플릿으로 관리\n\n#### 상황 3\n3개의 실제서버를 구성해놓고 오토 스케일링 하도록 한다\n- 업데이트시 롤링 업데이트를 기반으로 하는데 하나를 카나리로 설정한 다음 서버별 접속 링크를 제공해서 접속현황과 실제 테스트를 진행할 수 있게 한다\n\n개발서버 - 실제서버\n단계로 바로 갈 수 있게 하고\n개발서버에서 각 파트가 다른파트에 영향을 최대한 안주도록 한다\n\n깃 푸시하면 도커로 테스트하고 풀리퀘스트 머지를 하면 바로 실제서버로 가게하거나 배포 시기를 정해놓는다면 배포큐에 쌓아놓는다\n\n#### reference\n- https://blogs.oracle.com/developers/adventures-in-cicd-3-running-tests-publishing-test-reports\n    - test, failure check,\n- https://www.aaron-powell.com/posts/2020-03-23-approval-workflows-with-github-actions/\n    - set version, create version file, approval workflows\n- https://johnny-mh.github.io/post/standard-version-기반-서비스-배포프로세스\n    - commitizen, standard-version, ci pr check, cdn 업로드(?)\n    - frontend는 index.html만 배포하면 되겠다. 컨테이너보다 훨씬 가볍다\n- https://shivanshs9.me/medium/do-github-acti on-like-a-pro-594bcb813b22\n- https://ahnheejong.name/articles/web-developers-flutter-cicd-using-travis-ci/\n- https://woowabros.github.io/experience/2018/06/26/bros-cicd.html\n    - slack bot으로 배포 알림, 릴리즈 확인\n- https://www.theteams.kr/teams/7242/post/70736\n    - development, qa, deployment로 프로세스 구분\n- https://www.slideshare.net/awskorea/cicd-aws-aws-aws-summit-seoul-2019\n    - 소스 빌드 테스트 프로덕션으로 프로세스 구분\n- https://roseline.oopy.io/dev/github-action-cahce\n    - size-limit-check 해주는 js용 action이 있다\n- https://velog.io/@hax0r/Node-프로덕트-퀄리티를-높이는-협업-방법-q29zo12w\n    - commitlint, semantic release, husky 사용하자\n- [banksalad](https://blog.banksalad.com/tech/become-an-organization-that-deploys-1000-times-a-day/)\n    - pr 횟수를 모니터링, slack의 대화내용에서 파싱\n    - git-flow를 간소화\n    - gomplate\n    - build - lint, test, docker image build\n    - deploy용 bot을 만들어 사용\n        - status, deploy, history 기능 지원\n\n#### github이나 jenkins, travis에서 ci/cd 노하우를 공유할 것 같은데 찾아보자\n- [travis ci blog](https://blog.travis-ci.com/)\n\n## ETC\n\n\n#### java build quickly\n\nbuild 스테이지와 deploy 스테이지를 분리한다\n\nbuild에 artifact 옵션을 주면 된다.\nartifact에서 untracked 옵션은 git에 untracked 된 것들을 담을지 여부다.\n근데 이걸 false로 하니까 새로 만든 폴더를 artifact로 못만든다. 빌드파일에 쓰고 싶으면 true로 해야 할 듯\n파이프라인 탭에서 artifact를 직접 다운받을 수 있는데 이걸 다운 안받게 하는 방법은 딱히 없는 것 같다. 괜히 안만들고 싶은데..\n\n빌드는 자동으로 하고 배포는 수동으로 할 때 artifact가 만료되어 버릴 수 있어서 전달이 안될 것 같은데? artifact expired_in 시간을 줄이고 시간 지난 뒤에 해보자\n마지막으로 실행한 artifact는 시간이 지나도 지워지지 않는다.\n\npaths 는 어떤 것을 artifact 할지 인데, ./ 하면 gitlab의 현재 위치의 것들을 모두\n한다. 그래서 특정 위치를 잡아줄 수 있다\n\n- dependencies는 특정한 빌드의 artifact를 받기 위해 필요하다\n\t- deploy에 dependencies 옵션을 주면 선택된 빌드의 빌드파일이 넘어간다\n\t- [https://docs.gitlab.com/ee/ci/yaml/index.html#dependencies](https://docs.gitlab.com/ee/ci/yaml/index.html#dependencies)\n\n\n\n#### DevOps한 백엔드를 위한 개발환경구축 가이드\n\n필요한 리소스\n\n- github repository + github flow\n- minikube + 주소를 secret에 입력\n- cookiecutter\n- 개발 폴더\n\ncookiecutter\n\n- ci/cd pipeline\n- ansible script\n- grafana prometheus\n- fluentd\n- traefik\n- some yaml for kubernetes\n\n좀 더 생각해볼 것\n\n- cookiecutter를 인프라용 레포지토리 템플릿으로 만들어서 쓰면 편하지 않을까\n\t- 프로젝트 생성 시마다 레포지토리를 만들 수도 있지만, 참조해서 쓸 수도 있어야 할 것 같다. 즉, cookiecutter를 쓰지 않더라도 한 번 구축해놓은 인프라를 다른 서비스를 개발할 때도 쓰도록 하는 것이 좋을 것이다.\n\t- 간단한 커맨드라인 툴을 만들어서 레포지토리의 버전을 읽어와서 적용하고 추가설정파일로 CoC가 되면 되겠다. 근데 이 커맨드라인 툴을 조심히 만들어야겠다.\n- CI workflow로 툴을 실행시키고 설정파일이 따로 없으면 내 인프라 설정파일을 보도록?\n- 각자 설정해야만 하는 것: 서버 주소\n- 서비스 종류는 docker를 읽으면 되지 않을까\n- 프론트엔드는 lerna, package.json 으로 create-app -> code -> ssg build -> deploy 프로세스가 잘 돼있다.\n- 배포처(ex. netlify)에서 github 주소만 넣으면 끝이다.\n- 개발 프로세스 전체 과정이 설정파일 하나로 파악되면 좋겠다.\n- 기본 테스트 프로세스는 무조건 실행하도록 default로 돼있고, 추가로 원하는 테스트도 할 수 있도록 돼야한다.\n- private github 대신 github 같은 것을 실행하도록 해서 주소도 자동으로 얻게하려면 -> 개발자 간 공유가 힘들긴 하겠다.\n- 일단 코드로 시스템을 구성할 수 있으면 어떻게든 변환할 수 있다."},{"headings":[{"value":"인프라 레벨"},{"value":"최소한의 인프라"},{"value":"규모가 커짐에 따라 안정적인 운영을 위한 추가 인프라"},{"value":"강력하게 탄탄한 인프라"},{"value":"About Cloud"},{"value":"모든것을 위한 클라우드는 없다"},{"value":"정적페이지로 최대한 만들어서 cdn 이용하기"},{"value":"클라우드는 편리하지만 내부를 통제할 수 없다"},{"value":"ec2 인스턴스 리소스 요금 항목"},{"value":"aws 서버들 간 벤치마크"},{"value":"kubernetes 셋팅을 위한 cloud hosting 자원 종류"},{"value":"NAT gateway 비용이 은근 많이 나올 수 있음"},{"value":"Serverless"},{"value":"람다를 기가 막히게 사용하고 싶다 + 큐와 함께"},{"value":"서버리스를 선호"},{"value":"람다의 약점"},{"value":"서버리스 프레임워크 단점"},{"value":"람다를 큰 규모로 사용할 때 뼈대를 잡아주는 프레임워크"},{"value":"AWS"},{"value":"신규 업데이트 확인"},{"value":"네트워크"},{"value":"컴퓨팅"},{"value":"스토리지"},{"value":"VPC"},{"value":"IAM"},{"value":"IAM Guidelines & Best Practices"},{"value":"Storage"},{"value":"메시지 큐"},{"value":"Hands-on"},{"value":"aws beanstalk eip 없이 접속하기"},{"value":"AWS 자격증"},{"value":"AWS Developer Associate"},{"value":"SAA"},{"value":"Test 전략"},{"value":"how to test"},{"value":"server stress test"},{"value":"TEMP"},{"value":"변경 파일만 검사하는 lint"},{"value":"인프라"},{"value":"ec2 os 패치"},{"value":"eks"},{"value":"점프서버"},{"value":"시스템 버전 업데이트 어떻게 할 것인가"},{"value":"RDS 디비 접속"},{"value":"IAM"},{"value":"키네시스 로컬 테스트"},{"value":"argocd"},{"value":"인프라 레퍼런스"},{"value":"당근마켓 당근페이 인프라 구축 이야기"},{"value":"당근 채팅 시스템 아키텍처"},{"value":"람다를 이용한 아키텍처 모범 사례"},{"value":"시퀀스"},{"value":"패턴화"}],"fields":{"slug":"/infra/"},"rawMarkdownBody":"## 인프라 레벨\n\n#### 최소한의 인프라\n- 정적 페이지\n- CDN\n- S3 저장소\n- 람다\n- API Gateway\n\n#### 규모가 커짐에 따라 안정적인 운영을 위한 추가 인프라\n- 데이터베이스\n- 캐시\n- 오토스케일러\n\n#### 강력하게 탄탄한 인프라\n- 메시지 큐\n\n\n## About Cloud\n#### 모든것을 위한 클라우드는 없다\n- 그럼 트리 구조로 선택 가능한가\n- 회귀 가능한 요소는 어떤게 있을까\n- 집약 세분화 집약 세분화\n- 비용\n- 사용자\n- 시간\n- 공간\n\n#### 정적페이지로 최대한 만들어서 cdn 이용하기\n스테이트리스 한건 정적으로, 스테이트풀한건 서버를 사용해야 한다\n\n#### 클라우드는 편리하지만 내부를 통제할 수 없다\n\n클라우드에서는 시스템 자원 관리는 클라우드에 맡김으로써 하드웨어의 효율화에 대한 고민은 생략된다. (캐시와 CPU, DISK 간의 구성에 대해 신경을 못쓴다). 이 부분의 최적화는 생략하는 대신 내 서비스가 잘 실행되느냐에 집중할 수 있다.\n\n- AWS, GCP, AZURE\n- server -> lambda -> dynamodb -> server\n- web, db, lambda, mq\n- cognito\n- cloud program micro service - use app engine\n- lambda <-> sns server <-> web server\n\n#### ec2 인스턴스 리소스 요금 항목\n\n인스턴스 유지하는데 비용은 표시된만큼 나오는데 사용하다보면 그 외에 추가 요금이\n생긴다\npublic static ip\nbandwidth (per GB)\n\n#### aws 서버들 간 벤치마크\n\n- https://dev.to/yaorenjie/benchmarks-of-aws-ec2-5-4-3-series-1kpl\n- C (cpu) / M (general) / R (memory) 시리즈가 있고, 3, 4, 5세대로 발전하고 있다\n- 싱글코어에서는 시리즈별 차이는 거의 없다\n- AMD 서버는 CPU는 20% 빠르지만 메모리는 25% 느렸다\n\n#### kubernetes 셋팅을 위한 cloud hosting 자원 종류\n\n- control plane (aks, gke ...)\n- compute instance (on demand, reserved, spot)\n  - kubernetes cluster need at least 3.5GB of RAM\n- load balancer\n- disk storage\n- container registry\n- https://georgepaw.medium.com/how-to-run-the-cheapest-kubernetes-cluster-at-1-per-day-9287abb90cee\n\n\n#### NAT gateway 비용이 은근 많이 나올 수 있음\n- 프라이빗망의 인스턴스가 퍼블릭에 접근해야 하는 경우 통신됨\n- S3에 업로드/다운로드가 많이 일어난다면 비용 폭탄\n\t- S3 전용 VPC Endpoint를 쓰면 무료라고 한다\n\t- S3와 DynamoDB는 Gateway 형식의 Endpoint. VPC당 20개 쓸 수 있음\n\n## Serverless\n\n채팅서비스에서의 람다가 적합하지 않을 수도 있겠다\n처음엔 인스턴트성이 강해서 필요할때만 켜지는게 효율적이다 생각했는데\n콜드스타트 문제로 처음 응답이 느릴 수 있고\n그걸 해결하고자 계속 켜지게하면 사용시간이 늘면서 비용이 늘고 람다를 쓰는 의미가 없어질 수도 있다\nGPT도 동일하게 말해준다. 지속실행이 어렵고, 사용자가 많아지면 비용이 급증하고, 웹소켓 상태 관리가 어렵고 높은 지연시간이 있다\n- Lambda는 **요청당 비용**이 발생하므로, 사용자마다 개별 Lambda가 떠 있으면 **비용 부담이 큼**\n\n그래서 fargate를 쓰는게 대안이고 redis pub/sub도 써서 메시지 브로드캐스팅용으로 쓰기를 제안한다\n\n데이터베이스는 \n- 실시간 메시지 전송은 Elasticache\n- 채팅 로그 단순 저장은 DynamoDB, (유저 정보도 여기 저장하지 못할 이유가 없다)\n- 채팅방/유저 데이터 관리는 RDS\n\n#### 람다를 기가 막히게 사용하고 싶다 + 큐와 함께\n\n왜 람다가 좋으냐\n\n람다를 써도 될까 람다를 쓰면 안되는 경우\n\npLimit\n팬아웃\n큐와의 조합\n\n콜드스타트는 여전히 느리고,\n어느순간 트래픽이 폭증하면서 온디멘드와 별반 차이가 없어졌고,\n오만 수단을 다 동원해도 배포가 너무 느림\n\n#### 서버리스를 선호\n아키텍처를 그릴 때 서버리스로 가능한지 먼저 확인한다\n서버리스로 할 수 없는 특징이 없다면 서버리스로 시도한다\n관리포인트가 줄어드는점\n모듈화가 되어서 다른 서비스 연결이 잘 되는점\n가벼운점\n작업의 실행을 보장할 수 있다\n\n서버리스로 하기 어려운 특징이 어떤게 있냐면\n이번회사를 다니면서 백엔드 서버가 딱 있으니까 좋다고 느낀게 있었다\n쿼리로 데이터 관리할 수 있는 점 - 트랜잭션\n머신러닝처럼 컴퓨팅 성능이 중요한 경우\n실시간성이 중요한 서비스\n\n그래서 람다의 한계를 배우게 된다\n- 지속 연결이 필요하면 못 쓴다\n- 빠른 응답이 필요하면 못 쓴다\n\nfargate도 서버리스 컨테이너 서버이기 때문에 서버리스를 쓰는거긴 하다\n\n서버가 필요한 작업\n- 데이터베이스에 접근\n- api 핸들링 (클라이언트에서 가능할듯)\n- 모니터링?\n\n#### 람다의 약점\n- 느린 시작\n- 모노리스에 비해 통신의 비용이 든다(마이크로서비스라면 비슷)\n\n로컬 테스트와 배포된 람다 간에 연결성을 높여보도록 구성해봐야겠다\n\nserverless에 배포 전 로컬 테스트.\n배포 후 자동 테스트\n배포 후 에러 처리\n\n#### 서버리스 프레임워크 단점\n- 도큐먼트\n- 어떤 입력값을 쓸 수 있는지 나와있는 문서가 없다\n\t- cloudformation 값을 참고 할 수 있음\n\n#### 람다를 큰 규모로 사용할 때 뼈대를 잡아주는 프레임워크\n- [middy](https://middy.js.org/)\n- [aws powertools](https://docs.powertools.aws.dev/lambda/typescript/latest/)\n\n\n## AWS\n\n연결된 서비스 : serverless, cloud, gcp, azure, container\n\n### 신규 업데이트 확인\n\n- 신규 업데이트 확인\n  - aws blog\n  - aws reinvent\n\n### 네트워크\n\n- [[Network]]\n- 격리\n\t- vpc\n- 외부 연결\n\n### 컴퓨팅\n\n- 서버\n- 컨테이너\n\n### 스토리지\n\n- fully management service\n\t- rds\n\t- aurora\n- serverless\n\n## VPC\n\n외부 - VPC - AZ - subnet - instance - route table - igw (subnet을 퍼블릭으로 만들어주는 것과 같은 효과) - nat gateway (subnet이 private 상태로 인터넷 연결) - NACL (control ALLOW and DENY) - security group (control only ALLOW)\nVPC Flow Logs\n\n- 네트워크 트래픽 정보를 캡쳐한 것을 볼 수 있다\n- VPC 안에서 개별로 설정\n\nVPC Peering\n\n- VPC 끼리 통신할 수 있도록 해주는 것\n\nVPC Endpoints\n\n- 외부에 있는 S3에서 VPC Endpoint를 통해서 다른 VPC에 있는 프라이빗 인스턴스에 접근 가능\n\nENI\n\n- 실질적으로 인스턴스와 Security group, VPC 등이 연결되는 네트워크 인터페이스 장비라고 보면 될 듯\n\n## IAM\n\nIAM = Identity and Access Management, Global Service\nRoot account created by default\nUsers - people within your organization, can be grouped\nGroups only contain users, not other groups\nUsers don't have to belong to a group, and user can belong to multiple groups\naccount id에다가 alias를 달 수 있다 fnckop 처럼\nfnckop에 iam 유저로 로그인하면 account id를 같은 걸 쓴다\n\nIAM: Permissions\npolicies(정책) - contains effect, action, resource, (principal), (sid)\n정책은 최소 권한의 원칙으로 관리하는 걸 권장함. 유저가 딱 필요한 권한만 주는 것\n정책은 그룹에도 걸 수 있고, 유저에도 걸 수 있음\nprincipal은 account/user/role 중에 특정 대상에만 적용하게 하기 위한 조건\n\n- 근데 그러면 정책 자체가 특정 대상에 걸리는건데 principal이 필요한가?\n- 리소스 기반 정책이 있고, 자격 증명 기반 정책이 있다.\n- principal은 리소스 기반 정책에 필요하고, 유저나 그룹에 거는건 자격 증명 기반 정책\n\n#### IAM Guidelines & Best Practices\n\nDon't use the root account except for AWS account setup\nOne physical user = One AWS user\nAssign users to groups and assign permissions to groups\n\nShared Responsibility Model for IAM\nAWS가 책임지는 것\n\n- 인프라\n- 설정과 취약점 분석\n- 컴플라이언스 검증\n\n유저가 책임져야 하는 것\n\n- 유저, 롤, 정책 등에 대한 관리 및 모니터링\n- MFA를 사용하는 것\n- 키를 자주 바꿔주는 것\n- 적절한 권한을 설정하는 것\n- 접근에 대한 분석, 권한 리뷰\n\n## Storage\n\nglacier\nhttps://bluese05.tistory.com/35\n- 데이터 가져오고 검색하는게 좀 한계가 있어서 활용도는 떨어지는 듯\n\n#### 메시지 큐\n\nsqs에 실패처리용 큐를 하나 만들어서 거기에 담아서 에러를 확인한다.\n메시지큐에서 실패한 것들을 받으면 람다를 실행하게 해서 오류처리 할 수 있다\n\n\n## Hands-on\n#### aws beanstalk eip 없이 접속하기\n- vpc 연결 안된다고 떴던 에러 해결하면 될 듯\n- 내 vpc 와 비교\n- 라우팅 테이블에 igw 가 있는지 없는지가 다르다\n\n여기에 igw 설정을 하지 않고도 사용할 수 있는 방법이 있을까?\n지금 만약에 바로 igw를 연결하면 default vpc가 외부와 연결되서 보안이 다 뚫릴 것 같다.\n근데 eb를 외부 igw 연결된 것만 생성 가능한 것도 이상하다.\nvpc endpoint 라는 것을 이용하면 된다고 하는 것 같다\n\nhttps://docs.aws.amazon.com/ko_kr/elasticbeanstalk/latest/dg/vpc-vpce.html\n\n기본 요구사항은 vpc가 퍼블릭이면 igw가 연결되어 있어야 하고,\n프라이빗이면 NAT 디바이스를 이용하라고 한다.\n\napp-private 에 NAT 가 연결되어 있어서 이걸로 테스트해보면 되겠다.\n로드밸런서와 인스턴스 둘 다 private으로? -> 된다\n\nnat를 쓴다는 것 자체가 하나의 EIP 를 쓴다는 것이긴 하다.\nNAT 없이 private으로 만들고 load balancer를 연결할 수 있을까?\nbeanstalk은 정말로 public에 대한 연결을 필수로 요구하는 것인가?\nvpc endpoint를 써보자\n\n## AWS 자격증\n\n4종류 12개\n\n1. 프렉티셔널 (기초)\n2. Associate (일반)\n3. Pro\n4. Special (Pro와 같은 레벨)\n\nAssociate\n\n- Developer\n- Solutions Architect\n- SysOps Administrator\n  Pro\n- DevOps\n- Solutions Architect\n  Special\n- Advanced Networking\n\n예제 사이트\nhttps://www.examtopics.com/exams/amazon/aws-devops-engineer-professional/\n덤프 문제 풀이\nhttps://blog.naver.com/PostView.naver?blogId=asd7005201&logNo=222606780619&parentCategoryNo=&categoryNo=23&viewDate=&isShowPopularPosts=true&from=search\n\n수험 가이드\nhttps://gist.github.com/serithemage/df61aaf396046eff7244b6eaa8d58d4a\n\nhttps://goddaehee.tistory.com/194\n\n#### AWS Developer Associate\n\nhttps://www.notion.so/aws-developer-associate-e91595fe733d494d99db3458e3535677\n\n덤프\n\n- https://dumps.kr/dumps/amazon-dva-c01/3\n- https://www.examtopics.com/exams/amazon/aws-certified-developer-associate-dva-c02/view/\n- https://www.knowledgehut.com/practice-tests/aws-certified-developer-associate-practice-test/Result/TWZCVHpBWktwK0JSS05pZkhvNVJxY2JDWkxFMzRPMmY=\n\n#### SAA\n- [강의](https://www.udemy.com/course/aws-certified-solutions-architect-associate-saa-c03/)\n- [요약 2019 버전](https://github.com/serithemage/AWSCertifiedSolutionsArchitectUnofficialStudyGuide)\n\n덤프\n- https://dumps.kr/dumps/amazon-dva-c01\n- https://www.examtopics.com/exams/amazon/aws-certified-developer-associate-dva-c02/view/\n\n범위\u001e\n- IAM\n- EC2\n- ELB, ASG\n- RDS + Aurora + Elasticache\n- Route 53\n- S3\n- CloudFront, AWS Global Accelerator\n- AWS Storage Extras (snow family?, FSx?)\n- SQS, SNS, Kinesis, Active MQ\n- ECS, Fargate, ECR, EKS\n- Lambda, Lambda@Edge, Dynamodb, API Gateway, Step Functions, Amazon Cognito\n- Database (RDS, Aurora, ElastiCache, DynamoDB, S3, DocumentDB, Neptune, Keyspaces, OLDB, Timestream)\n- Data Analytics (Athena, Redshift, Opensearch, EMR, QuickSight, Glue, Lake Formation, Kinesis Data Analytics, MSK)\n- ML (Rekognition, Transcribe, Polly, Translate, Lex+Connect, Comprehend, Comprehend Medical, SageMaker, Forecast, Kendra, Personalize, Textract)\n- Monitoring (CloudWatch - Metrics, Logs, Agent, Logs Agent, Alarms, EventBridge, CloudTrail)\n- Security (KMS, SSM, Parameter Store, CloudHSM, Shield, WAF)\n- VPC\n- DR, Migration\n\nEBS, EFS, FSx\n- EBS : 하나의 인스턴스에 연결해서 사용, 단일 AZ에 저장, 볼륨 단위 관리, EFS 보다 빠름, 다른 인스턴스로 이동은 가능\n- EFS : 자체적으로 사용 가능, 여러 AZ에 중복 저장, 파일 단위 관리, 자동 확장, NAS 쓰는 느낌\n- EC2 생성 시 EBS는 기본으로 연결되고 EFS, FSx는 따로 생성되어있으면 연결 가능하다\n- 인스턴스 스토어라는 휘발성 저장소도 있는데 특정 인스턴스 유형으로만 시작할때만 연결할 수 있음\n- FSx : EFS 보다 고성능, 다양한 기능을 가진 서비스\n\n다른 스토리지 서비스\n- DataSync : 온프레미스에 저장된 데이터를 AWS로 옮겨줌\n- Snowball : 초대용량 데이터를 옮길 때 AWS에서 지원해줌\n\nAthena : S3에 저장되어 있는 로그를 쿼리할 수 있는 기능\n\n\n---\n## Test 전략\n\n#### how to test\n\nistio를 쓰면 플로우 모니터링 하긴 용이하다\n\n#### server stress test\n- redis i/o test\n- go http server\n- kubernetes pod\n- simple http server stress test\n\n1. find report\n2. manual test\n   - make test code\n     - while\n     - concurrent\n   - curl\n     - `ulimit -n` -> 1024 (default) -> `ulimit -n 10000`\n     - `while true; do curl localhost; done`\n\n- it depends on CPU, memory\n\n## TEMP\n\n\niam 역할과 정책 비교\n- 정책은 사용자, 역할, 그룹에 할당하는 실제 규칙\nirsa\n- IAM Roles for Service Accounts\n\n\n#### 변경 파일만 검사하는 lint\n- git diff\n\t- `git diff $(git merge-base origin/${base} origin/${head})..origin/${head} --name-only --diff-filter=d | grep -E '.(js|jsx|ts|tsx)$'`\n\t- git merge-base : base 브랜치와 타겟 브랜치의 공통 조상을 찾는다\n\t- -name-only : 파일 이름만 출력한다.\n\t- -diff-filter=d : 삭제된 파일은 제외한다\n\t- grep -E : 특정 확장자만 필터링\n- github actions에서 fetch 기본값은 최신 커밋 하나만 가져오는 건데 공통조상을 찾기 위해 전체 히스토리를 가져옴\n\n\n#### 인프라\n* subnet, route table\n\t* route table에 변경할 서브넷이 aws에는 만들어져있고, 이를 테라폼으로 안가져와서 이걸 가져와서 route table에 적용할지, 바로 그냥 스트링으로 입력할지?\n* 스테이징 서버 subnet 끼리 연결해줄 수 있도록 연결\n* terraform import 로 aws에서 땡겨올 수 있다.\n\t* terraform으로 이름만 만들어서 import 하고 내용 입력해서 plan해서 쓸 수 있다.\n\t* plan 해서 aws랑 sync하고 원하는 상태로 변경.\n\t* 각 폴더가 루트라서 data.terraform_remote_import 써서 output 만들어서 데이터 받아온다.\n\t\t* 루트끼리 데이터 교환을 바로 못하나? 모듈에서는 됐던것 같은데\n* AZ존 a, c에 비해 b, d가 잘 안되는 이슈가 있다.\n\t* 주로 a를 쓰고 c는 eks 하면서 조금씩 추가하고 있다.\n* eks subnet 자동으로 만들어진 것들\n\t* 통신을 위한 포트가 랜덤으로 열려있음\n\t* nlb client는 0.0.0.0으로 열려있고 health는 특정 서브넷마다 할당 되있다. 왜그렇지?\n\t\t* 임의 설정 가능한지 어노테이션 확인\n* NLB\n\t* 웹소켓 등 다른 프로토콜 쓸 수 있다\n\t* 빠르다\n\t* 바이패스로 지나가는 느낌이라 시큐리티 그룹으로 설정 못해준다\n* 테라폼\n\t* 버전 업데이트에 따른 수정사항이 생기면 내가 바꾼 거랑 섞여서 보기 힘들다\n* 인그레스 컨트롤러\n\t* class로 인그레스 어떤거 쓸지 선택, 디폴트 elb, nlb는 선택 필요\n\t* stable/nginx-ingress가 만료되서 새로 업데이트 해야한다\n\t* EKS 업데이트 시 인스턴스가 재생성 해야되서 elb에서 다시 수동으로 인스턴스를 잡아줘야하는 이슈가 있다\n\t\t* eks internal로 직접 만들어서 수동 설정하는게 있다\n* kubectx 로 컨텍스트 설정\n* 운영에서는 에러 뜨면 바로 반응 오는게 맞다\n* elb - nlb 일 필요 없다\n* ldap, saml #infra\n\t* aws login 등 할 때 마이크로소프트 saml 이용해서 중앙에서 권한 제어한다.\n* browser에서\n\t* response-header에 content-security-policy로 컨텐츠 http 제한, https는 허용하는 식으로\n* 새로운 k8s 리소스 생성하기\n\t* 1. helm create 하고 운영서버 데이터 적당히 옮긴다\n\t* 2. argocd 웹 들어가서 앱 생성\n* NLB -> ALB\n\t* 주소 앞에 www를 붙이는 처리를 기존에는 apache 웹서버를 이용해서 했었는데, ALB에서 리다이렉트 처리가 가능해서 ALB를 사용하려 한다.\n\t\t* 관리포인트가 줄어든다\n\t* 문제는 ALB의 IP 주소가 한번씩 바뀌어서 NLB가 ALB를 못바라본다.\n\t* 그래서 람다를 이용해 NLB가 ALB를 찾을 수 있게 해주고 있다.\n* monorepo with yarn workspace\n\t* 같은 프로젝트 안에 다른 서비스끼리 참조하면 임포트를 해줘야하나?\n- 캐시\n\t- 캐시 전체 페이지 하고 있는데 비회원,회원 구분된 페이지에서 비회원화면이 캐시되있으면 회원이 접속해도 캐시된 화면 출력되는데 그래서 새로운 구분값이 추가되면 캐시페이지도 구분해줘야한다.\n- 장애 : 서비스가 의도한 대로 동작하지 않는 모든 것\n- 장애감지 - telegram 으로 alert megazone과 구축\n- /var/log/mesages에 리눅스의 기본적인 로그가 남고 어떤 프로세스가 죽었는지 확인됨\n- 인프라 모니터링 + APM 으로 요청 검사\n- 빈스톡의 nginx 기본 설정이 잘 막혀있도록 설정되어있음\n\n\n#### ec2 os 패치\n- devops, sta running 으로 검색\n- 인스턴스 백업\n\t- 이미지 및 템플릿 - 이미지 생성 = 스냅샷 생성\n\t- 이미지 이름은 인스턴스 이름 + BACKUP-날짜\n\t- 운영에서는 재부팅 안 함을 활성화\n\t- AMI 에 생성됨, 볼륨 생성됨, 스냅샷 생성됨\n- 시연은 JUMPSERVER를 이용해서 접속해서 했음 \n\t- (근데 끊어져서 서버가 뻑난적이 있음. 접속이 끊어지면 안됨)\n- os 확인 - centos\n- sudo yum update -x docker* (docker 관련 리소스는 업데이트 안함)\n\t- docker는 업데이트를 안했는데도 도커가 재시작 되는 경우가 있음\n\t- 운영에서는 해당 인스턴스를 LB에서 빼주는게 안전\n\t- 도커는 업데이트 해도 되는데 파라미터 수정해줘야 함\n- 리눅스 재시작\n\t- sudo shutdown -r now\n- 패치 확인\n\t- last reboot\n\t- version 이 다르게 표시된 걸로 확인\n- 도커 컨테이너 확인해서 실행 안되어있으면 실행\n- /usr/lib/systemd/system/docker.service\n\t- ExecStart=/usr/bin/dockerd 이 줄에 -H 옵션이 붙어있다면\n\t- 뒤에 -H 붙이지 않는 걸로 수정해줘야 함\n\t- -H fd:// --containerd=/run/containerd/containerd.sock\n- 수정파일 적용\n\t- sudo systemctl daemon-reload\n\nEB Incorrect application version found on all instances. Expected version 에러\n- 인스턴스 1개면 EC2 리부팅 해주면 다시 됨\n\n#### eks\n개발자 작업내역 로깅?\n개발자별 권한관리\n\n```\nawslogs get /aws/lambda/lambda-func-fnc-stg-an2-send-email-nhn ALL \\\n  --start='1h ago' --watch \\\n  --profile ums-dev --aws-region ap-northeast-2\n```\n\n\n\n#### 점프서버\njumpserver 안쓰면 다른 ssh 툴로 접속해야 하나?\ndocker 업데이트 후 수정해야하는 것과 아닌 것의 차이는?\ndockerfile은 어디에 있을까?\n\n- 서버 접근 제어 솔루션\n- 점프서버를 aws2020에 설치하여 사용\n- 누가 언제 접속하고 어떤걸 했는지 로깅\n- 동영상으로도 저장\n\n#### 시스템 버전 업데이트 어떻게 할 것인가\n#infra \nec2, rds 업데이트\nstg-eks 는 terraform\nrds 는 aws console에서 수정 눌러서 업데이트\n- 블루/그린 배포 추가된듯?\n- mysql 5.6 -> 8로 업데이트 시 인스턴스 변경 필요한데 어떻게 하면 사이드이펙이 적을까\n\n500에러\nALB에서 500 에러가 발생 가능하다\nELB는 가지고 있는 큐가 1024개 제한이 있다\n\n#### RDS 디비 접속\n#infra\n서브넷이 private용으로 돼있는데\nsecurity group 만 풀어주면 접속이 되나? 아니면 서브넷도 풀어줘야 하나?\n서브넷이 nat 만 열려있어서 그렇다. igw 연결 시켜줘야 했음.\n근데 db-public을 만드는 방향으로 가야함\n\n\n#### IAM\nIAM 적용에는 시간이 걸린다 #infra \n\n\n#### 키네시스 로컬 테스트\n- docker-compose 실행\n- stream 생성\n- 큐에 넣기\n- 이터레이터 조회\n\t- 이터레이터로 레코드 조회\n- 레코드 데이터 base64 디코딩\n- 이터레이터 유효기간 때문에 처음에만 조회가 된다\n- 이터레이터를 새로 받으면 ~ 된다\n- 이터레이터를 먼저 환경변수에 세팅하고, 값을 넣으면 그 이터레이터로 조회가능\n\n로컬 키네시스 테스트\n- 이터레이터 하나 확인 (source get_records.sh 하면 환경변수에 저장 가능)\n\t- 키네시스로 전송\n\t- 레코드 확인 (레코드가 배열로 여러개 있음)\n\t- base64 디코딩\n\t- json 형식으로 변환\nstderr, stdout 일 때 처리를 다르게 해줘야 하나..\n#infra \n\ncdn -> \ncache, cdn을 둬서 사용자가 많아져도 부하를 줄일 수 있다\n헤더를 한줄로 만들어서 람다로 분해해서 cdn에서 인식하게 한다\n- 조작을 방지하기 위해\n#infra\n\n[[이벤트 드리븐]] #infra \n\n- 쿠버네티스\n\t- 인그레스로 연결 접속 허용하는 사람 설정\n\t- 인그레스 여러 개 사용하면서 적합한 것 사용\n\n- lb용으로 서브넷 따로 따져있음\n- 스테이지는 스팟인스턴스 사용\n- 디비는 메모리많은걸 써서 캐시 잘 되게 함. 조인할때도 그렇고 메모리에 적재할때 부족하면 느려져서 많으면 좋음\n- eks_manage_user 로 하면 생성할때만 설정가능해서 role로 관리하는게 나을수도\n- proxy_protocol_v2 -> 클라이언트 ip 전달을 위해 헤더에 값 넣어주기 위한 설정 (https://purpleio.atlassian.net/wiki/spaces/PURPLEIO/pages/168067247/AWS+ELB+ALB+NLB+CLB+nginx+ingress+EC2)\n\t- nlb 는 ppv2 지원\n\t- alb 는 x-forwarded-for 헤더에 기본 지원\n\t- nlb 에 annotation 설정 해주면 됨\n\t- configMap 에도 설정\n\t- 타겟 그룹에 preserve client ip address 값에 따라\n\t\t- sg에 클라이언트 ip 를 열어줘야 할 수 있음\n- 디비는 테라폼으로 같이 묶여있으면 지울때 날라가면 크리티컬\n\t- 그냥 테라폼코드를 지우면 삭제하는 동작을 해서 따로 안보게 하는 설정을 해줘야 함\n\nblue, green은 statefulset 으로 되있는데 다른건 뭘로 되어있는지? <-> deployment\n- deployment 대신 쓰는건데\n- service를 다른걸 쓴다\n- 파드가 죽다 살아나도 그 파드 그대로 사용된다\n\nec2에 설치된 오라클은 플러그인같은걸 쓰고 있었는데 RDS에서는 못써서, 근데 개선할 예정\n\nlb controller\n- ELB, NLB 를 쿠버네티스가 관리할 수 있게 해주는 컨트롤러\n- ingress controller가 예전버전인데 이걸 써야 nlb - ingress 연결이 된다?\n- https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/alb-ingress.html\n\nCLB에 비해 NLB 의 달라진 점은 어떤게 있지\n\n버전을 variable로 다 빼도 될까?\n- 차트별로 버전 확인하려면 어떤 리소스인지 봐야되서 왔다갔다 하기 번거로울 수 있다\n\nlocals랑 variables랑 뭐가 다르지\n- locals 는 상수\n- variables 는 terrafrom 명령어 칠 때 사용자가 변수 주입 가능\n- output 은 모듈 외부에서 값 받아쓸 때 사용 가능\n\n2023으로 만든거에 helm으로 만든거는 eks 위에서 안뜨나?\n- argo를 먼저 띄워놓고 그걸로 띄우나? <-> 모니터링 같은 시스템 쪽은 argo로 배포 안해도 될텐데\n- helm 자체가 eks 위에서 실행되긴 해야하는데\n\nhttps://sineui.home.blog/2020/02/29/aws-eks-clb-alb%EB%A1%9C-%EC%9D%B4%EC%A0%84%ED%95%98%EA%B8%B0-1-%EB%B0%B0%EA%B2%BD/\n\n\n#### argocd\n처음 깔면 레포지토리 등록\ngitlab에서 repository > deploy token 에서 토큰 생성 후에 등록\nargocd에서 destination 추가\n\na 레코드로 하면 한번에 아이피를 찌르는데\ncname 을 거치면 한번 더 쳐야 되서 a 레코드가 낫다\n\nargocd에서 kubernetes namespace를 바꿀 때 ingress가 안지워지면 새로운 ingress가 안뜬다. 자동으로 안됨. service나 deployment도 안지워지고 새로운게 뜸\n\n\n\n---\n\n- [ ] kubernetes toleration, taint\n\t- taint\n\t\t- 노드에 설정\n\t\t- 팟이 할당 안되도록 하는 설정\n\t\t- 이름을 명시적으로 설정. (ex: system, normal, large)\n\t\t- tolerations와 함께 써서 특정 노드에만 뜨게 하기 위해 사용\n\t- tolerations\n\t\t- 팟에 설정\n\t\t- key, operator, value, effect 를 taint에 설정된 것과 같게 입력해주면\n\t\t- taint가 설정 되어 있어도 할당 되게 해줌\n\t\t- 만약 해당 taint값이 없으면 생성이 실패되나?\n\t\t- node selector와는 어떤 관계지\n\t\t- node affinity도 있음\n\nroute 53 연결 해줬는데 인증서가 kolonmall 이 없는걸로 연결되서 400으로 에러남\n- 인증서 바꿔주면 시간 지나면 적용 됨. 캐시 남아있을 수 있음\n\ningress에 nodeSelector가 manage로 되어있던데 eks 만들때는 manage로 tag 걸어논게 없던데 이상없이 잘 떴음. manage는 기본으로 생성되는건가 아니면 이름 없으면 그냥 아무거나 붙는건가?\n\nkop-api 띄우다가 image 없다고 에러 뜸\n- ecr에 lifecycle policy에 50개까지만 저장한다고 설정되어있음\n\nkop-web, kop-hybris beta 는 kop30-frontend 에서 ingress를 띄워서 연결해서 쓰고 있음\n\nexternal dns를 helm으로 띄워서 팟이 인터벌 간격마다 확인하면서 dns 할당하는 역할을 함\n주소 매핑할때는 kubernetes 에 어노테이션 달아주면 되는데, ingress에 hosts 등록되어있어도 되는 거 같다\n\nkeyv-cronjob\n- 레디스에 쓸데없는 거 쌓인 거 지워주는 크론\n- 무슨 라이브러리 쓰는게 있는데 그거때문에 데이터가 계속 쌓여서 메모리를 많이 차지해서 임시로 지워주게 처리함\n- 그 라이브러리가 keyv 일 수 있음\n\n레디스 elasticache 버전이랑 클라이언트 버전 맞춰주기\n\n디비나 레디스같은 건 인바운드 열어줘야 할 수 있으니 확인\n\n하이브리스도 레디스에 로그인 세션 저장해서 사용중\n\n- aws cni \n\t- container network interface\n\t- eks 가 아닌 기본 쿠버네티스를 띄울 때는 calico 등을 썼었는데 그것의 aws 버전\n\n모니터링 테라폼 켤 때 aws cni 에서 ip 할당 안되는 에러 발생\n인스턴스 마다 할당 가능한 ip 제한이 있다 - 근데 xlarge 정도면 충분한듯\naws cni 설정 중에 minimum ip 관련 설정이 있다\naws cni 설정을 지우고 띄워보니 뜬다\n- [ ] warm 어쩌고 설정이 어떤 건지 확인\n- [ ] 해당 ip 설정 어떻게 하면 좋을지 확인\n- aws eks cni\n\t- 이 설정이 eks 설정 전체에 되는거라 minumum 설정 때문에 전체 ip가 부족했을 수 있을까?\n\t- warm ip\n\t- warm prefix target\n\t\t- 이걸 4로 했을 때의 의미는?\n\t\t- 이거 말고 다른 설정이 보통 안내되긴 하는데 잘 설정한거맞나?\n\t\t- ENABLE_PREFIX_DELEGATION 이 설정은 없어도 되나?\n\t- minimum ip target\n\t\t- 노드가 처음 나타날 때 최소 IP 할당 개수\n\t- l-ipamd\n\t- c6i.xlarge 58 - eni max pods\n![[Pasted image 20231102182900.png]]\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html\n\neni 할당 모드에 secondary ip mode와 prefix 모드가 있다\n![[Pasted image 20231102170558.png]]\nhttps://www.eksworkshop.com/docs/networking/prefix/\nhttps://dobby-isfree.tistory.com/201\n- secondary ip mode가 디폴트인데\n- prefix 모드가 새로 나왔고 aws에서 권장하는 옵션\n- prefix 모드로 하면 ip 할당에 api 호출이 필요없이 빠르게 된다고 한다.\n\n\nhttps://aws.amazon.com/ko/about-aws/whats-new/2022/12/amazon-s3-automatically-enable-block-public-access-disable-access-control-lists-buckets-april-2023/\n- s3 정책 수정되어서 최근 s3 버킷은 생성 시 ownership 유형 설정 추가 필요\n\nloki 설치하니까 너무 팟이 많아서 인스턴스가 더 떠서 다 필요한 건지 확인\n레플리카 줄여서 띄움\n\n그라파나에서 로키 수동 등록\n\n그라파나 ldap 로그인 다 허용되서 제한 필요\n\n\n## 인프라 레퍼런스\n\n#### 당근마켓 당근페이 인프라 구축 이야기\n\n핀테크 기업으로서 보안 등 제약이 있는 상황에서 클라우드 서비스를 이용해야 했음\n\n1. 로그인서비스를 어떻게 구성했는가\n   - 계정 별로 환경 분리\n   - 로그인 제한 -> 계정 별로 분리되어있지만 로그인은 대표계정에서 한다. cloudfnc와 동일하네\n     - 로그인은 security라는 계정이고 이 계정은 로그인만을 위해서 사용하고, 이렇게 로그인하면 dev, sta, prod 계정에 접속이 가능하게 된다. 외부 접근권한이 있는 security가 탈취되어도 dev에 접근 못하게 되면 아무것도 할 수 없다는 식\n   - 계정 탈취 시 여파 최소화\n2. 서버 접근을 어떻게 할 것인가\n   - teleport - ssh 접속 후 행동을 영상으로 녹화해서 보여준다\n3. 애플리케이션 구성을 어떻게 할 것인가\n   - kubernetes vs ec2\n   - 쿠버네티스가 오버 엔지니어링이 아닐까 싶었지만\n     같은 회사 다른 서비스에서 사용중이어서 조언을 얻을 수 있었고, 같은 팀의 팀원이 사용 경험이 있어서 충분히 도움을 받을 수 있는 환경이어서 사용하기로 했다\n   - alb -> istio 변환 예정\n4. 배포 파이프라인 구성을 어떻게 할 것인가\n   - eks 에 맞는 도구를 찾으려고 했다\n   - 툴에 대한 운영 경험이 있고 Github과 연계가 손쉽게 구성될 수 있는 기술 스택 선택\n   - Github Actions, Argocd, Argocd pipeline\n   - github 설치형을 n5.4xlarge 에 사용. 디스크 관리만 하면 무리없이 사용하기에 좋았음\n5. 관측 시스템을 어떻게 구성할 것인가\n   - 컨플라이언스 (보안) 문제로 SaaS 사용이 힘들었음 (Datadog, new relic 등)\n   - ElasticStack, Prometheus, Grafana 로 직접 구축\n   - FileBeat, Node Exporter 는 DaemonSet으로 올림\n   - Prometheus Operator를 이용해 Prometheus를 구성함\n   - AWS 리소스는 CloudWatch를 통해 모니터링\n     - SNS -> AWS Chatbot을 통해 Slack 으로 발송. (이전에는 람다를 직접 구현했어야했음)\n6. 성능 테스트를 어떻게 진행할 것인가\n   - locust (kubernetes용인 klocust를 이용)\n   - 테스트의 목적\n     - 최대 성능을 측정하는 형태는 목적이 불분명\n     - 10분 동안의 테스트를 통해 99퍼센타일 응답 시간이 100 ms 이내일 때의 최대 TPS를 구하려고 함 -> 99%가 진행됐을 때의 응답 시간이 100ms ?\n     - 파드 하나당 400TPS 라는 수치를 얻게 됨\n   - 테스트를 하면서 close_wait 소켓이 쌓이는 현상 발견. undertow를 netty로 변경\n\nhttps://www.youtube.com/watch?v=8a2-b9X7Xno\n\n#### 당근 채팅 시스템 아키텍처\n큰 회사에서도 개발을 하는 인원은 적을 수 있고 최대한 매니지드 서비스를 이용하는 경향이 있다\n\ndynamodb를 쓰면서 에러는 거의 안나서 안정적이었다\n근데 쿼리를 잘 쓰기 어렵고 인덱스를 건 item만 가져올 수 있어서 인덱스를 잘 두어야하기 때문에 설계에 대해서 고민이 많이 필요함, Full scan은 안해야한다\n채팅방 하나를 partition하나 정의\nsort key\b는 message의 id로 설정\n\nredis cluster로 stateless하게 웹소켓용으로 썼고 좋아보임\n\n\n#### 람다를 이용한 아키텍처 모범 사례\n\n> 서버 기반 아키텍처 모범 사례가 있습니다.(단일 장애 지점 제거, 배포 전 변경 사항 테스트, 중요한 데이터 암호화 등)\n> - https://dc2348.tistory.com/6#:~:text=%EC%84%9C%EB%B2%84%20%EA%B8%B0%EB%B0%98%20%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98%20%EB%AA%A8%EB%B2%94%20%EC%82%AC%EB%A🙋‍♂️1%80%EA%B0%80%20%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4.(%EB%8B%A8%EC%9D%BC%20%EC%9E%A5%EC%95%A0%20%EC%A7%80%EC%A0%90%20%EC%A0%9C%EA%B1%B0%2C%20%EB%B0%B0%ED%8F%AC%20%EC%A0%84%20%EB%B3%80%EA%B2%BD%20%EC%82%AC%ED%95%AD%20%ED%85%8C%EC%8A%A4%ED%8A%B8%2C%20%EC%A4%91%EC%9A%94%ED%95%9C%20%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EC%95%94%ED%98%B8%ED%99%94%20%EB%93%B1)\n\n- 단순한 동작을 여러겹으로 겹치면 깔끔하고 보기도 좋지 않을까?\n- 유닉스의 파이프라인처럼 api를 파이프라이닝 해서 원하는 값을 만들어도 괜찮을까\n\t- 함수형 프로그래밍을 이용해서 파이프라이닝 형태로 만들어주는 api를 만들어서 api로 api를 불러서 파이프라이닝 하는 것.\n\n\n#### 시퀀스\n\n어두운 도서관 입구에서 시작해서\n가장 중심인 곳은 가장 밝은 판테온 형태의 밝은 전시관이 있다\n\n[[2022-05-01#빨강 - 핑크 - 보라]]\n\n#### 패턴화\n\n가드레일을 만들되 자유도를 느낄 수 있도록\n\n- 젤다의전설\n- 오픈형월드게임\n\n"},{"headings":[{"value":"제품"},{"value":"고객 만족은 장기이익을 극대화하는 유일한 방법"},{"value":"렌치구멍을 사용자가 사용하기 쉽게"},{"value":"community"},{"value":"바리에이션"},{"value":"어떻게하면 환경도 지키고 기존 제품보다 뛰어난 제품을 만들 수 있을까"},{"value":"먼거리에 이동 속도가 가장 빠른 비행기."},{"value":"디스콰이엇이 시장 조사를 한 방법"},{"value":"제품과 인간"},{"value":"성과 측정"},{"value":"마케팅 기본 마인드셋"}],"fields":{"slug":"/product/"},"rawMarkdownBody":"\n\n## 제품\n\n#### 고객 만족은 장기이익을 극대화하는 유일한 방법\n\"이렇게 실제로 멤버십 플랜을 구독하는 사용자들을 보면서, 가격이 서비스의 가치에 직결이 된다는 ≪헤르만 지몬의 프라이싱≫의 책을 내용들을 이해할 수 있었습니다.\n\n궁극적으로 소비자는 자신이 얻을 가치만큼만 지불하고자 한다. 모든 판매자의 과제는 소비자가 지각하는 가치가 어느 정도인지 알아내고, 상품이나 서비스의 가격을 이에 맞추는 일이다. 판매자와의 교환이 공정했다는 여운을 남길 때에만 소비자는 충성스러운 고객으로 남는다. 고객 만족은 장기이익을 극대화하는 유일한 방법이다.\n\n서문 고백 중에서\n[동준님의 2021회고](https://dongjunlee.github.io/retrospective/2021_Retrospectiv\ne)\n\n#### 렌치구멍을 사용자가 사용하기 쉽게\n렌치 구멍은 사이즈가 나뉘어져있는데 사용자가 사용할때는 여기에 어댑터를 달아서\n손으로 조절하기 쉽도록 해주면 사용자는 맞는 렌치 찾을 필요 없이 편하게 쓸 수 있다\n\n#### community\n더쿠나 펨코처럼 각 커뮤니티마다 글들을 쉽게 볼 수 있는 편의기능을 잘 만들어놨다.\n커머스사이트도 이를 벤치마킹 할 수 있다.\n\n#### 바리에이션\n바리에이션 하는게 그저 따라하는게 아니라 맞춤형 타겟을 찾아가는 작업일 수 있겠다\n10대 20대용으로 제작된 것을 20대30가 쓰도록 하면 변형으로 사용자의 니드를 채워줄 수 있다\n\n#### 어떻게하면 환경도 지키고 기존 제품보다 뛰어난 제품을 만들 수 있을까\n\n써달라고 호소하거나, 불편함을 감내하게 하기보다는\n더 좋은 점을 만들어 쓰고 싶게 만들어야 할 것 같다\n\n기존보다 더 나은 제품을 만든다고 해도 또 알리는데 성공해야한다\n\n#### 먼거리에 이동 속도가 가장 빠른 비행기.\n\n프랑스에서는 가까운 거리에서는 비행기 이동을 금지하게 되었다\n기술 발전이 인간을 이롭게 하지만, 기후에 안좋은 영향을 미치지 않도록 신경써야한다\n소프트웨어에서 탄소배출은 어떤 관계가 있을까\n전기를 소모한다.\n저전력 머신에서 돌아가면 될까\n저전력을 많이 만들면 총 사용량은 비슷할건데\n한 서비스가 쓰는 리소스를 줄이면 한 피씨에 사용되는 서비스가 많아질 수 있다\n\n\n#### 디스콰이엇이 시장 조사를 한 방법\n\n디스콰이엇을 개발하면서 그리고 저희 사용자들과 인터뷰를 하면서 배운 것을 바탕으로 답변을 드릴게요.\n\n제품 개발할때 대부분의 메이커들이 레퍼런스 리서치를 하는데 시간을 투자하는데요 리서치를 할때 몇가지 유형이 있습니다.\n\n1. 나와 비슷한 문제를 해결하는 프로덕트들 리서치 (예 - 채용 문제를 해결하려 하는데 원티드, 블라인드, 리멤버 커리어 등이 있죠)\n\n2. 문제는 다르지만 해결책(UX)이 비슷한 프로덕트들 리서치 (예 - 호스트와 여행객을 연결시켜주는 에어비앤비, 강사와 수강생을 연결시켜주는 탈잉)\n\n3. 나와 비슷한 BM을 갖고 있는 프로덕트 리서치 (예 - 다양한 subscription 모델들)\n\n4. 나와 비슷한 기술을 갖고 있는 프로덕트 리서치 (예 - 디스콰이엇의 경우 넷플릭스의 협업 필터링 모델과 미국 Lunch Club이라는 곳의 알고리즘이 어떻게 되어 있는지부터 유사 서비스들의 기술 스택이 어떻게 되는지 리서치를 많이 했었고 지금도 하고 있습니다.)\n\n5. Go-to-market 전략 리서치 (예 - 디스콰이엇의 경우 성공한 대부분의 소셜네트워킹 서비스들과 양면 플랫폼들이 어떻게 성장했는지 그 스토리를 다 리서치했습니다.)\n\n위에 나와있는 것들을 보면 사실 모든 프로덕트들이 성공하기 위해서 검증해야 되는 타깃 사용자와 그들의 문제/니즈, UX, Engineering feasibility, BM, 사용자 유치 관련된 것들입니다. 리서치를 통해서 영감을 얻고 자신의 상황에 맞게 아이디어를 변형하고 구현해서 검증을 해보는 과정을 거치게 되는 것 같아요.\n\n기간을 따지자면 디스콰이엇의 경우에는 리서치에서 구현까지 2주 단위로 실행을 하려 하고 있습니다. 물론 지키는 것이 쉽지는 않아요 ㅠㅠ\n\n두번째 카피하는 것으로 인해 생기는 문제에 관해서는 저도 법률 전문가는 아니지만 소프트웨어 업계는 카피로부터 법적으로 보호할 수 없는 생태계적 특성을 갖고 있는 것으로 유명한 것 같습니다. 사례는 무수히 많아요. 인스타그램이 스냅쳇을 카피한 것, 최근 클럽하우스가 핫해지자 레딧, 트위터, 디스코드 등 너도나도 카피한 사례, 우버를 카피한 중국의 디디추싱 등.\n\n\nhttps://www.tech42.co.kr/ai%EA%B0%80-%EC%BD%94%EB%94%A9%ED%95%98%EB%8A%94-%EC%8B%9C%EB%8C%80%C2%B7%C2%B7%C2%B7%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EA%B0%80-%EC%82%B4%EC%95%84%EB%82%A8%EB%8A%94-%EB%B2%95%EC%9D%80/\n> 존 카맥 - 소프트웨어가 아니라 제품에 집중해라.\n\n#### 제품과 인간\n인간의 아이러니\n- 그럼에도 다른 사람들이 많이 찾는걸 쓰고 싶어하고 다른사람도 해야 나도 하고 그렇지만 묻혀갈 수 있어야 한다 상호작용과 익명성\n- AI가 뽑아준 또 하나의 소비특성. 프리미엄 평범함\n- 평범한 물건이지만 특별한 것. 평범한 것의 고급화\n- 사람들은 쉽게 이익을 얻는 것을 좋아함\n- 시스템 설계할 때 굳이 사람이 행동하는 흐름을 거스르는 방향으로 하지 말고 내리막을 이용해라\n- 인간의 자연스러운 욕구를 활용. 편의성, 즉시만족, 사회적 인정, 경쟁심\n\n의식적 제약\n- 인지적 과부하 - 적당히 좋은게 아니라 진짜 좋은것을 찾기 시작\n- 사람들이 원하는 건 사실 기술적으로 가장 뛰어난 것이 아니라 내 삶의 맥락에서 가장 적절한 것\n- 기술적 우월성이 시장이 원하는 것이 아니다\n- 아이폰은 사용 경험의 일관화를 잡았다\n- 기술은 뛰어나되 뽐내지 않고 자연스러워야 한다\n- 사람들한테 물어본다고 되는게 아니다 사람은 자신이 원하는 게 뭔지 설명하지 못한다. 스티브 잡스는 고객은 원하는 것을 모른다고 했다\n- 말하는 것과 행동하는 것 사이의 간극을 잘 포착해야 한다\n- 사람들이 불편해하는 지점을 찾고 그럼에도 뭔가를 하는 그 경계선을 찾아서 그 부분을 편하게 해주면 사람들은 그것을 쓴다\n\n\n## 성과 측정\n\n- AB 테스트 툴\n\t- 기존에 구글 옵티마이즈가 있었나보다. 근데 종료됐다고 한다\n\t- VWO, AB Tasty, Optimizely\n\t- https://www.bucketplace.com/post/2021-10-29-%EC%98%A4%EB%8A%98%EC%9D%98%EC%A7%91-a-b-%EC%8B%A4%ED%97%98-%ED%94%8C%EB%9E%AB%ED%8F%BC-%EA%B5%AC%EC%B6%95%EA%B8%B0/\n\t- 아 기능을 A/B로 나눠서 보여주려면 각각의 배포본이 필요하다고 생각했는데 하나로 할 수 있겠다\n\t- 클라이언트/서버에서 나눠서 생각해보면\n\t- 클라이언트에서는 툴이 js를 삽입해줘서 화면을 바꿔줄 수 있을 것이고\n\t- 서버단에서는 이미 A/B가 모두 반영되어 있는걸 배포해놓고 툴은 주소에 플래그를 조절해 A/B를 각각 요청하게 하면 되겠다\n\t- 플래그 결정 방식은\n\t\t- 랜덤 할당 (해시 함수)\n\t\t- 속성 기반(지역, 디바이스, 성별, 등급)\n\t\t- 롤아웃 비율 조절 (5% 고객 -> 10% 고객 -> 30%)\n\t\t- 고정 할당\n\t\t- 서버에서 룰을 정해서 평가해서 할당\n\t\t- \n- CTA 버튼\n\t- https://pixso.net/kr/skills/cta-button/\n\t- 성과 측정에 매우 중요하고 유효한 요소\n\t- 장바구니 담기, 구매하기 등 액션을 부르는 버튼\n- 보통 쇼핑몰에서는 이것저것 비교하고 고민하고 알아보다가 구매하지 상품 설명을 보고 바로 구매로 이어지지는 않는다\n\t- 물론 계속 보고 있던 충성 고객이라면 충분한 설명으로도 구매할 수도 있다\n\t- 그래서 충분한 여정을 할 수 있도록 해주는 한편 즉시 구매로 이끌 수 있도록 스무스한 환경도 있어야 한다\n\t- 브랜드 스토리가 구매 여정에 녹아 있으면 좋겠다\n\t- 코오롱몰은 그래도 종합쇼핑몰이라서 이것저것 사이트 내에서 비교를 할 수 있다. 기획전도 여러 상품을 비교할 수 있게 제공해주면 좋겠다\n\n\n#### 마케팅 기본 마인드셋\n마케팅의 기본\n- 누구에게 팔면 좋을지\n- 그들은 어떤 사람들인지\n- 그들은 왜 우리가 원하는 대로 움직이지 않는지\n- 달성해야할 목표를 정하고\n- 최적의 방법을 만들고\n- 제대로 실행해서\n- 기대했던 결과를 얻어내는 것\n\n마케팅의 본질은 소비자에 있다\n- 소비자의 입장에서 제품을 바라보고\n- 소비자가 모르는 그들의 불편까지 느끼고\n- 소비자가 듣고 싶어하는 얘기를 알고 들려주는 것\n\n파는 게 아니라 사고 싶게 한다\n\n개성이 있으면 애정하는 대상이 될 수 있고 애정하는 대상이 되는 브랜드는 성장할 수 있다\n"},{"headings":[{"value":"Web"},{"value":"웹으로 할 수 없는 것"},{"value":"web should support this"},{"value":"웹페이지에서 있으면 좋은 편의성 UI"},{"value":"데스크탑, 모바일 일관된 UI vs 한 환경에 집중"},{"value":"새로 고침 시에 어떤 동작을 하게 해야 할까"},{"value":"mobile view, web view"},{"value":"브라우저"},{"value":"렌더링 엔진"},{"value":"browser"},{"value":"nodejs"},{"value":"노드 비동기 원리 확인"},{"value":"html5 article 태그는 독자적인 내용을 담고 있을 때 사용한다고 한다"},{"value":"static site generator"},{"value":"speed"},{"value":"SSR CSR"},{"value":"SSR, CSR"},{"value":"csr 사이트 단점"},{"value":"웹 성능"},{"value":"웹 개발자로서"},{"value":"브라우저 페이지 전환 시 스크롤 위치"},{"value":"앱의 장점을 웹에서 표현하기"},{"value":"왜 앱에서만 되는 이벤트를 해서 앱 설치를 유도하는걸까?"},{"value":"노년의 웹사이트 접근을 쉽게 하는 방법은?"},{"value":"웹에서 안좋은 경험"},{"value":"reference"},{"value":"웹 개발 기본"},{"value":"Cloud"},{"value":"Route53"},{"value":"CloudFront"},{"value":"Oauth2"},{"value":"oauth2.0"}],"fields":{"slug":"/web/"},"rawMarkdownBody":"\n## Web\n\n- 통신 시스템의 데이터 보관 및 전송 필요성 대두\n- 하이퍼링크 구현 (문서간 이동)\n- 웹 구현 (문서 뿐 아니라 더 많은 데이터 이동)\n- 플래시, 액티브엑스 대두 (웹의 기능 외의 것들 구현하는 플러그인)\n- 무거움과 보안 문제 대두\n- 자바스크립트 대두\n\n액티브엑스는 C++로 만들어졌고\n플래시는 액션스크립트로 만들어졌다고 한다\n그 후 위에 둘은 없어지고 자바스크립트로 그것들의 구현을 대체하게 되었다.\n그리고 지금 웹 어셈블리라는 프로그래밍 언어 활용이 가능한 방식이 대두되고 있다.\n웹 어셈블리는 대세가 될 수 있을까? 대세가 되지 않더라도 역할을 구축할 수 있을까?\n\n#### 웹으로 할 수 없는 것\n\n백그라운드에서 실시간 데이터 입력받아 적용하기\n예) 집에 들어오면 바깥 조명 확인해서 불켜주는 것\n\n- PWA(progressive web app) makes it possible.\n\n#### web should support this\n\n- dark mode\n- accessibility\n- i18n\n- link to new tab\n- session manage\n- history back button (undo button)\n- '컨텐츠로 건너뛰기'를 만들어서 접근성을 높여야 한다\n- 웹에서 센서를 추가해서 감지한다\n  [[Design]]\n\n[침하하로 옮기면 침착맨님 글썼는지 상시 체크해야되겠네요..? : 네이버 카페](<[https://m.cafe.naver.com/ca-fe/web/cafes/29646865/articles/243917?fromList=true#:~:text=%EB%B0%A9%EC%9E%A5%EB%8B%98%EC%9D%B4%20%EA%B8%80%EC%93%B8%EB%95%8C%EB%A7%88%EB%8B%A4%20%ED%95%B8%EB%93%9C%ED%8F%B0%EC%97%90%20%ED%91%B8%EC%8B%9C%EC%95%8C%EB%A6%BC](https://m.cafe.naver.com/ca-fe/web/cafes/29646865/articles/243917?fromList=true#:~:text=%EB%B0%A9%EC%9E%A5%EB%8B%98%EC%9D%B4%20%EA%B8%80%EC%93%B8%EB%95%8C%EB%A7%88%EB%8B%A4%20%ED%95%B8%EB%93%9C%ED%8F%B0%EC%97%90%20%ED%91%B8%EC%8B%9C%EC%95%8C%EB%A6%BC)>)\n\n- \"방장님이 글쓸때마다 핸드폰에 푸시알림\"\n\n#### 웹페이지에서 있으면 좋은 편의성 UI\n\n- 위 아래, 댓글로 가는 네비게이션\n- 사이드 바\n\n#### 데스크탑, 모바일 일관된 UI vs 한 환경에 집중\n\n- 보여주는 컨텐츠 개수를 많이해서 일관되게 (유튜브)\n- 모바일에 특화 (무신사)\n\n#### 새로 고침 시에 어떤 동작을 하게 해야 할까\n\n뭔가를 추가하는 동작을 한다면 새로 고침 시에 그 동작을 다시 하게 하면 안된다\n\n뒤로가기를 할때는 작업하던 상황이 그대로 유지되야 한다\n\n#### mobile view, web view\n\n노트북에서 반쪽으로 브라우저를 띄우면 보기 불편한 웹페이지들이 많다\n모바일 친화적인 곳은 보여지는 것이 웹보다 적은 경우도 있고\n웹 친화적인 곳은 모바일 사이즈를 고려하지 않아 짤려 보여서 좌우로 계속 스크롤\n해야하는 경우가 생긴다.\n\n#### 브라우저\n\n- 사용자 인터페이스(ui)\n- 브라우저 엔진(chrome v8)\n- 렌더링 엔진(webkit, gecko, blink)\n- 네트워킹, 자바스크립트 해석기, 데이터 저장소\n\n#### 렌더링 엔진\n\n통상 8KB 조각 단위로 렌더링 수행\nHTML 파싱 - 렌더 트리 구성 - 트리 배치 - 트리 그리기\n\n#### browser\n\n웹브라우저 엔진은 js용 쓰레드가 1개만 도는데 대신 web api라는게 따로 구현되어 있고 비동기작업을 처리하고 태스크큐에 보내 다시 js 쓰레드로 보내는 방식으로 비동기를 구현했다\n\nWeb api는 쓰레드를 여러개 쓴다. File, timer, ajax 등을 컨트롤한다.\nJs thread\nWeb api - task queue - js thread?\n\n#### nodejs\n\n싱글 스레드로 동작하는 방식이라 PM2라는 라이브러리를 이용해 멀티 코어를 쓰도록\n할 수 있다.\n\n싱글 스레드로 비동기 동작을 한다. 말이 안되는 것 같지만 이벤트 루프 등의\n알고리즘을 이용해서 효율적인 성능을 보이고 있다.\n\n#### 노드 비동기 원리 확인\n\n- 싱글 스레드\n- 이벤트루프\n- 프로세스 큐\n- 브라우저 API\n\n비동기는 이벤트루프가 큐에다가 넣어서 실행하도록 한다.\n\n- [ ] 그래서 큐 안에서 순차적으로 실행? ㅇㅇ\n- 게다가 큐는 스택이 모두 비워진 후에 스택에 넣어서 실행된다고 한다.\n- 스택이 비어있어야 큐에 있던 게 실행된다면 비동기가 어떻게 효율적으로 동작될 수 있지?\n\n#### html5 article 태그는 독자적인 내용을 담고 있을 때 사용한다고 한다\n\n다른 곳에서 참조할 때 article 안에 있는 내용을 가져다 써도 그 내용만으로도 말이\n되는 내용이 들어간다는 것이다\n예를 들어 애플 읽기모드로 들어가면 article 안에 있는 내용만 읽어들여 읽기에\n집중하게 해준다.\n\n이와 비슷하게 section이라는 태그가 있는데 이는 영역을 구분할 때 쓰면 좋다. 예를\n들어 목차 영역 만드는 곳에 써서 접근성(스크린 모드) 사용 시 본문에만 집중하게\n안내해줄 수 있다.\n비슷한 것들로\naside, nav, header, footer 등이 있다\n이를 semantic(의미론적인) 태그라고 한다\n\n## static site generator\n\nReact 등으로 개발 후 html 정적 페이지로 만들어서 가볍게 서버를 돌릴 수 있도록\n해준다.\n\n- gatsby\n  - I'm choice this\n  - it is graphql friendly\n- jekyll\n- nextjs\n\n#### speed\n\n- server side rendering\n- client side rendering\n- seo\n- speed with first access or second access\n- client side is good to second access(moving page to page)\n- server side is good to first access(find webpage, and access webpage)\n\n#### SSR CSR\n\n둘 다 html로 만들어놓을 수는 있다.\n서버에서 만들어진 html을 전달하고 javascript를 나중에 불러온다\nSSR은 매 호출마다 새로 요청하고, CSR은 한번 로딩하면 다시 호출 안한다.\n\n- 요청이 생기면 데이터는 다시 호출할 수도 있다.\n\n구글에서 검색 후 빠르게 페이지 확인하고 다른 블로그로 넘어갈 때 CSR 페이지는\n느리다.\n\n커뮤니티 사이트에 CSR을 적용하면 페이지당 이동속도가 빠를까? 글쎄 아닐 것 같다.\n\n- 새로운 글이 계속 생겨 서버에서 계속 데이터를 받아와야 한다.\n- 클라이언트에서 모두 로딩해야 하는데, 그러면 처음 속도가 미친듯이 느릴 것이다.\n\nuseEffect는 브라우저에서 로딩해서 동작할텐데\n\nnextjs는 처음엔 SSR, 로딩 후에는 CSR로 동작해서 두 장점을 모두 가져온다.\n\n#### SSR, CSR\n\nSSR의 장점이 SEO인 이유는?\n서버에서 렌더링 된 값을 크롤러가 읽을 수 있기 때문에?\n그러면 csr은 어떻게 크롤러가 데이터를 가져갈 수 있게 하지?\nreact에서 ssr 설정하는 방법은? 어렵다는데? ssr 설정하면 검색이 잘되나? 왜?\n\n크롤러 개발할 때 생각해보면 자바스크립트를 따로 읽지 않고 그려져있는 html 태그를 읽는게 기본이다. 그래서 페이지에 진입해서 자바스크립트가 안돌아가면 그 내용을 읽을 수 없다. 그래서 CSR이 SEO에 안좋다는 이야기가 있었던 것 같다.\n\ngatsby, nextjs는 ssr, csr을 모두 지원하는데, ssr을 적용하는건 어떤 과정이지?\ngatsby는 ssg, nextjs는 ssr을 메인으로 개발되었다.\n\n#### csr 사이트 단점\n\n뒤로가기 인식 잘 못한다.\n\n- github, disquiet\n\n#### 웹 성능\n\n컨텐츠 타입에 따른 속도 차이가 있나? 가장 빠른 것은?\nbase64로 하면 더 빨라지려나?\n\n#### 웹 개발자로서\n\nbrowserstack 처럼 브라우저 대응에 관심가져야겠다\n리액트의 아쉬운부분을 개선하고싶다\ngo로 웹\n브라우저 디펜던시가 낮은 것으로 구성하고 싶다\n\n#### 브라우저 페이지 전환 시 스크롤 위치\n- 원래 브라우저에서는 페이지 전환 후 되돌아오면 스크롤 위치가 그대로 유지됨\n- 근데 react SPA는 페이지 이동이 내부 상태 전환이라 따로 세팅 해줘야함\n- 동적 컨텐츠면 불러오는게 또 다를거 같기도 하네\n\t- 그래서 현재 불러진 페이지나 커서위치를 기억시켜놓고 써야 한다고 함\n\n\n## 앱의 장점을 웹에서 표현하기\n\n#### 왜 앱에서만 되는 이벤트를 해서 앱 설치를 유도하는걸까?\n\n앱에 기능을 많이 준비해놨으니까?\n사용자가 앱에서 돈을 많이 써서?\n앱에 있으면 사용시간이 늘어난다는 통계데이터가 있나?\n\n- https://brunch.co.kr/@growthlead/6\n\n+사용자 행동을 바탕으로 알림 발송 가능 +젊은 사용자의 경우 앱에 접근하여 소비하는 것이 활성화되어있고 소비도 많음\n\n앱 유도 -> 웹에서 클릭하면 앱으로 연결해주는 서비스들이 있다.\n\n#### 노년의 웹사이트 접근을 쉽게 하는 방법은?\n\n회원가입하고 비밀번호 찾는게 귀찮아서 하기 힘들어 한다  \n공인인증서는 거의 못한다고 봐야 되나  \n웹사이트 여기 저기를 왔다갔다 하는 부분이 힘들 것 같다. (은행사이트 갔다가 다시 돌아와서 쓰는거)  \n원하는 페이지로 접근을 하기 어려울 것 같다  \n예전의 시스템에서는 원하는 것을 얻기 위해 어떻게 했나  \n그렇다고 음성인식을 넣는다고 그걸 잘 이용할지 의문이다. 인터렉션을 못 느낄 것 같은데\n\ndagger 는 로컬에서 테스트하고 사용할 수 있다?\n\n#### 웹에서 안좋은 경험\n\n로그인을 하고 뒤로가기하면 나타날 화면은?\n\n- 로그인 되었습니다라고 알림 띄워줘서 다시 뒤로가기 하지 않도록 넛지하기?\n\n뒤로가기 했을 때 팝업 이전 화면으로 가는 것\n팝업은 x를 눌러야 하게 되어있는 것\n팝업인지 페이지 이동인지 사용자가 알 수 없을 수 있다\n\n#### reference\n\n유튜브 댓글 버튼 이펙트 잘 만든듯 - 다크모드에서 마우스 갖다 댔을 때 느낌이 좋음\n\n \n#### 웹 개발 기본\n- 폰트가 로딩되는 타이밍 (안깜빡이게 하는법)\n\t- html에서 preload link 추가\n\t- css에서 font-display swap 설정 추가\n\t- unicode-range 최적화. 한글에만 적용\n- 하이드레이션 꼬이는 경우가 있나?\n- javascript로 로딩을 하면 (SPA를 쓰면) html css 과 속도가 같을 수 없나?\n\t- 초기에 js 번들을 로딩하기 때문에 차이가 있을 수는 있음\n\t- 100~300k 정도면 쾌적\n\t- 리액트 최초 번들 시는 50~100k 정도\u001f\n- 빌드 도구 뭘로 하면 될가\n\t- webpack에 대응되는게 vite\n\t- 프로젝트 사이즈와 상관없이 초기 구동이 빨리 됨\n\t- 작은 번들 크기\n- 패키지 관리\n\t- bun 도 가볍게 빠르게 되는걸로 요새 뜨지만 pnpm이 안정적이면서 빠르다고 함\n\n## Cloud\n\n#### Route53\n\nDNS\n\n- Domain Name System\n- 호스트 이름을 IP로 번역해주는 것 (google.com => 172.217.18.36)\n- Domain Registrar - Route53, GoDaddy\n- DNS Records - A(ipv4), AAAA(ipv6), CNAME(다른 호스트네임), NS(DNS 주소)\n- Zone File\n- Name Server\n- Top Level Domain : .com, .us, .in\n- Second Level Domain - amazon.com, google.com, ...\n- Sub Domain - www\n- 웹브라우저 -> 웹서버 -> 로컬 DNS -> .com DNS -> example.com DNS\n  개요\n- 퍼블릭 호스팅 존, 프라이빗 호스팅 존 설정 가능\n- 프라이빗 호스팅 존도 퍼블릭 처럼 같은 가격\n  TTL\n  CNAME vs Alias\n- CNAME은 다른 서브도메인을 매핑 가능\n- Alias는 aws 의 주소를 매핑 가능 (EC2의 DNS name에는 매핑 안됨)\n  라우팅 정책\n- 심플\n- 가중치\n- 지연 시간 기반 (route53에서 미리 측정한 값?)\n\n#### CloudFront\n\n개요\n\n- CDN\n- 엣지에 콘텐츠가 캐시된다\n- aws의 216개의 엣지로케이션 모두를 사용한다\n- DDoS를 막아준다\n- Origins (연결 가능한 리소스)\n  - S3 bucket\n  - Custom Origin (HTTP)\n- 프라이빗 VPC에 접속할 수 없음 (ALB를 통해 우회 가능)\n  캐싱 및 캐싱 정책\n- header\n- query string\n- cookies\n- none, whitelist, include all-except, all\n  캐시 무효화\n- 백엔드가 변경되도 cloudfront는 알 수 없음\n- TTL이 끝나야 백엔드를 다시 치기 때문\n- 그래서 캐시 무효화가 필요함\n- 근데 무효화를 언제 실행할 것인가 -> 백엔드가 배포되면 수동으로?\n  오리진으로서의 ALB\n- 프라이빗 VPC에는 Edge Location이 접근할 수 없고 Edge Location의 보안그룹도 열어줘야 함\n- 그래서 ALB를 이용해서 EC2는 프라이빗으로 두고 ALB를 연결하게 할 수 있다\n  지리적 제한\n- 접속 허용 국가, 제한 국가 설정 가능\n  Signed URL/쿠키\n  고급개념\n- 가격\n  - price class all 모든 리전을 사용하고 가장 퍼포먼스가 좋지만 비싸다\n  - price class 200 200개만 쓰는데 조금 싸다\n  - price class 100 100개만 쓰는데 조금 싸다\n- 멀티 오리진\n- field level encryption\n  Real Time Logs\n- kinesis datastream을 통해 실시간 로깅을 할 수 있음\n- api 요청에 대해 몇%만 로그를 남길지 설정할 수 있음\n\n\n## Oauth2\n\n브라우저, 사용자, 서버, Oauth 제공자\n\n서버는 브라우저에 Oauth를 표시한다\n사용자는 브라우저에 Oauth 버튼을 누른다\n브라우저는 서버에 사용자 정보를 주면서 신호를 준다\n서버는 Oauth 제공자에게 사용자 정보를 준다\nOauth 제공자는 사용자에게 코드를 보낸다\n사용자는 서버에 코드를 보낸다\n서버는 Oauth 제공자에게 코드와 사용자 정보를 보낸다\nOauth 제공자는 확인 후 서버에 토큰을 준다\n\n사용자 -> 서버 -> Oauth (사용자 정보)\n사용자 <--------- Oauth (코드)\n사용자 -> 서버 -> Oauth (사용자 정보 + 코드)\n서버 <- Oauth (인증 후 토큰 제공)\n\n서버가 바뀌어도 사용자는 자신이 원래 하던 일을 그대로 할 수 있나?\n\n#### oauth2.0\n\n- 로그인\n- 토큰 획득\n- 토큰 및 아이디로 내부 저장\n- 토큰을 사용자 헤더에 갖도록 하기\n\n토큰 확인\n사용자 확인\n요청 동작 실행\n"},{"headings":[{"value":"아키텍처 설계 목표"},{"value":"아키텍처 필수 고려사항"},{"value":"테크니컬 고려사항"},{"value":"Check Point"},{"value":"아키텍처"},{"value":"일관성이 중요한 것 같다."},{"value":"중심만 남긴다"},{"value":"인프라 개발자의 관점에서 3 요소"},{"value":"프로젝트 아키텍처"},{"value":"그동안의 아키텍처 모델"},{"value":"SOA, MSA, DDD"},{"value":"좋은 아키텍처가 성공을 보장하지는 않지만 나쁘면 망한다"},{"value":"아키텍처"},{"value":"코드레이아웃"},{"value":"유지 보수가 잘 되게 하려면?"},{"value":"관련 백링크"},{"value":"필요한 컴포넌트"},{"value":"component"},{"value":"Monitoring"},{"value":"중요한 포인트"},{"value":"system"},{"value":"web"},{"value":"웹 성능 확인 지표"},{"value":"트래픽을 측정하는 방법?"},{"value":"메인 모니터링 판넬에서 보여져야 할 것들"},{"value":"monitoring"},{"value":"etc"},{"value":"서버를 오래 켜놓았을 때 생기는 문제점"},{"value":"모니터링 범주"},{"value":"문제 분석과 재발 방지"},{"value":"대규모 서버에서 겪는 문제"},{"value":"대용량 트래픽"},{"value":"의사 결정 트리로 시스템 모니터링 하면 되려나"},{"value":"Observability를 높이기 위해서는 어떻게 해야할까"},{"value":"reference"},{"value":"Security"},{"value":"jwt, oauth, session"},{"value":"double check, error handling, logging, security"},{"value":"reference"},{"value":"SSH"},{"value":"SSL/TLS"},{"value":"RSA"},{"value":"공개키, 대칭키"},{"value":"TLS"},{"value":"HTTPS"},{"value":"OAuth"},{"value":"user 세션 관리"},{"value":"reference"},{"value":"Production"},{"value":"프로덕션에 필요한 속성"},{"value":"Program"},{"value":"Need Extra Component"},{"value":"서비스가 커져감에 따라 직접 구현해야하는 기능"},{"value":"reboot report"},{"value":"구성보다 관습, CoC"},{"value":"자동화"},{"value":"자동화의 문제점 (자동화보다는 일괄적용의 문제점 일 수 있겠다)"},{"value":"AI와 자동화"},{"value":"CSP"},{"value":"오토스케일링"},{"value":"Micro Service Architecture"},{"value":"마이크로 서비스"},{"value":"마이크로서비스"},{"value":"마이크로서비스"},{"value":"서비스메시"},{"value":"CQRS"},{"value":"event driven architecture"},{"value":"microservice experience"},{"value":"junk food"},{"value":"architecture process organization"},{"value":"When many people come to site. how to keep working server"},{"value":"섀시"},{"value":"마이크로서비스에서 두 서비스에서 불러온 데이터를 어떻게 합칠까"}],"fields":{"slug":"/architecture/"},"rawMarkdownBody":"\n## 아키텍처 설계 목표\n\n인프라 구축 및 배포를 쉽고 빠르게, 피드백을 잘 받아 점진적으로 발전하는 환경을 만들겠다.\n\n**좋은 아키텍트는 세부사항에 대한 결정을 가능한 한 오랫동안 미룰 수 있는 방향으로 정책을 설계한다.** \n- 클린 아키텍처\n\n\n#### 아키텍처 필수 고려사항\n\n- 변하지 않을 것과 변할 것을 정해놓고 조정한다.\n- \b피드백 루프를 만든다\n    - 어떤 항목을 봐야 이것이 잘 진행되는지를 확인 할 수 있어야 한다\n    - 변화의 기록을 챙겨야 한다 (following changed thing)\n- 백업 잘 해야 한다. 백업 전략을 세워야 한다\n- 시스템 구성을 하나하나 검증하며 도입하기\n- 재사용성\n- 실패를 빨리 한다. 실패 상황을 고려한다.\n\n#### 테크니컬 고려사항\n- local loading file time > 0.4s\n- external network time > 0.4s. - total 0.8s\n- 배포용 이미지를 만든다.\n\t- 배포용 이미지는 항상 처음부터 새로 빌드돼야 한다. 덮고 덮는 방식은 불확실성을 증가시킨다.\n- 도메인을 생각하자. 도메인이 디자인을 만든다.\n- auto scaling\n- auto recovery\n- 고효율 저비용\n- 덮는 방식인 프레임워크보다 붙이는 방식인 **어댑터 방식**이 좋다\n- 내부적으로는 효율을 최대로 하되 사람들은 쫙빠진 것보다 넉넉한 것을 더 좋아하는 점을 생각한다\n- User experience searchable website\n- 서비스는 관리자가 관리하지말고 사용자가 관리할 수 있게 하면 좋겠다\n- 기능을 제공해주지 말고 모듈로 만들 수 있게 하고 여러 개 선택할 수 있도록 한다\n- 새로운 툴이 관리점은 줄이고, 편의기능은 늘릴 수 있으면 좋겠다.\n- 복잡도는 낮추고 싶고 서비스는 많이 만들고 싶다\n- SOLID - Open Closed Principle\n\t- 변화를 최소화 하기 위해 변화 예상가능한 부분을 설계시 나눠놓아야 한다는 원칙인데 그 기준선을 어떻게 설정하느냐가 중요할 것 같다\n- [[Devops#server architecture to using some company service]]\n- 피처 플래그 사용\n\t- 피처플래그는 aws parameter store를 사용해서 api로 관리해도 되겠다 람다로도 해도 되고 와우\n\n\n## Check Point\n프로젝트 전 한번씩 점검하기\n- 수시 배포 vs 정기 배포\n\t- 결과를 빠르게 확인 가능\n\t- 에러 확률 증가 - 빠른 롤백으로 위험도 낮출 수 있음\n\t- vs\n\t- 너무 큰 배포 단위가 될 수 있음\n\t- 테스트 상태의 결과와 실제 결과가 다를 수 있음\n\t- 배포일자에 에러 집중\n- 강제성을 얼만큼 할지, 자율성을 얼만큼 할지\n- 업무가 가능한지 아닌지 판단할 방법\n\t- 업무를 받으면 어떻게 시작하면 좋을지? 관계가 어떻게 되있는지 알아야 하는데..\n- 코드와 설정을 분리한다. divide code / config file\n\t- CoC 를 위해 설정을 쉽게 할 방법\n\t\t- 사용자 스펙을 읽어서 없으면 서버 스펙을 사용한다.\n\t\t- 서버 스펙은 사용자가 건드리지 않게 한다.\n\t\t- nagios도 이렇게 되있었고, vim이나 zsh등 커맨드라인 툴들도 이렇게 되있다. odoo도 파일을 만들어서 오버라이드 되게 해놨지만 기존 코드를 바로 건드릴 수는 있었다.\n- 자주 변하는 것과 자주 변하지 않는 것 고려하기\n\t- 자주 변하지 않는 것은 신경 안써도 되도록 하기\n- 계산 중심 구조(cpu) vs 데이터 중심 구조\n- 디렉토리 단위를 기능별로 할지, 역할별로 할지\n- 코드 분리 기준\n\t- 회사에서는 레이어별로 나눴다\n\t- 마이크로서비스에서는 기능별로 나눈다\n- monorepo vs microrepo\n- 깊이 vs 넓이\n- 팀 구조에 따른다\n\t- 프로젝트별 팀 vs TF 팀 vs 역할별 팀 vs 기능별 팀\n- 디렉토리를 중첩시켜 한 레포 안에 둘지\n\t- 디렉토리가 중첩되면 프로젝트를 분리 시켜 레포를 나눌지\n- 회사의 소프트웨어를 자체적으로 구축한 것을 쓰느냐, 잘 가져다 쓰느냐\n\t- 나의 아키텍처를 너무 좋아하게 되면 다른 아키텍처를 거부하게 되거나 보기 힘들어지지 않을까\n\t- 내 아키텍처를 만들기보다 다른 사람들의 아키텍처를 받아들이는게 나을까\n\t- [[About_Development#쿠팡이 자체적으로 만든 서킷브레이커와 api gateway]]\n- 하나의 툴과 종속성\n\t- 쿠버네티스의 기능을 모두 쓰는 것이 다른 도구를 줄일 수 있는 방법이다. 근데 그러면 쿠버네티스에 종속성이 심하게 걸린다\n- 개발은 docker compose로 운영은 kubernetes로 하도록 사람들을 유도할 수 있을까? 나는 이렇게 작업하고 있는가?\n\t- [[Container#docker-compose를 이용해 이미지를 바로 배포하는 것과 Dockerfile을 쓰는 것]]\n\n\n## 아키텍처\n\n#### 일관성이 중요한 것 같다.\n각 회사마다 저마다의 아키텍처가 있어서 개발자는 그 아키텍처를 파악해야한다.\n그렇다면 한 부분을 알았을 때 다른 부분도 그와 비슷하거나 일관성이 잘 유지되어\n있는 구조라면 쉽게 익힐 수 있다. 어떤 아키텍처인지는 그 다음 문제인 것 같다.\n일단 일관성이 있으면 가독성이 올라가고, 이것이 소프트웨어를 좋게 만들어준다.\n\n#### 중심만 남긴다\n개발 로직, 중앙 문서 관리 서비스, 코드 저장소, 데이터 저장소\n\n#### 인프라 개발자의 관점에서 3 요소\n인프라 - 데이터 - 서비스\n\n서비스 안에는 백엔드, 프론트, 디자인, 기타 등등이 또 따로 있을 것이다.\n인프라에는 시큐리티, 로깅 등등이 있고,\n모든 요소에 QA와 테스트가 있다.\n\n#### 프로젝트 아키텍처\n- 넷플릭스 모델 - 전체가 하나로 묶여있다\n- 네이버 모델 - 각 역할별로 분리되있다\n- 리디북스 모델 - 데이터가 묶여있다\n\n#### 그동안의 아키텍처 모델\n- 3 layer\n- MVC - MVVC - MTV\n- 네트워크 레이어\n- 12 Factor app\n- MSA\n- DDD\n- JAM stack\n- [Clean Architecture](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html)\n- SOA\n\n그리고\n- 육각형 아키텍처\n- DCI data, context, interface 제임스 코플리언\n- BCE bounded control entity\n- https://ahnheejong.name/articles/package-structure-with-the-principal-of-locality-in-mind/\n- https://mingrammer.com/translation-structuring-applications-in-go/\n- https://geminikim.medium.com/지속-성장-가능한-소프트웨어를-만들어가는-방법-97844c5dab63\n- https://overthecode.io/the-meaning-and-limits-of-atomic-design-from-a-software-design-perspective/\n\n#### SOA, MSA, DDD\nservice oriented architecture\n- 중간에 enterprise service bus를 둬서 서비스 간 공유를 하려고 했으나, 당시\n  시대상 팀 구조가 변화에 재빠르게 대응하지 못했고, MSA와 비슷한 목표를 가졌으나\n  성공하지 못했다.\n- MSA의 핵심은 통신 처리이고, 이 처리 흐름을 만들어내는 서비스 메시가 등장했다.\n  마이크로 서비스는 서비스의 수가 많고, 이를 관리하는 방법이 필요하다\n\n#### 좋은 아키텍처가 성공을 보장하지는 않지만 나쁘면 망한다\n\n- 나쁘지 않게 하는 것은 되야한다\n- 완벽보다는 안정\n- DDD는 쉽게 설명가능한가? 복잡한 구조라도 쉽게 설명되면 된다. 쉽게설명되지 않으면 나쁘다\n- 객체지향을 넘어 인간지향 인간중심\n- 나쁘면 안된다는걸 생각하지만 안티패턴을 피하는 방어적 접근보다는 좋은걸 찾는 공격적 접근을 하고싶다\n- 아키텍처가 시스템 구성을 다 정하는게 아니라 이해관계자와 먼저 요구사항을 정의하고 팀원들과 기술적 문제해결방법을 의논하고 패턴을 같이 찾고 정하게 되는 건가보다. 충섭팀장님의 쿰스를 이끄는게 아키텍처의 모습을 그대로 보여준거 같다 잘 기억해야할듯\n- 푸시 개발했던게 프로젝트 진행하면서 중간에 반발이 생긴 사례인거 같다 푸시 개발 과정을 정리하는 것도 좋을듯. Nhn에 수많은 요청을 보낸것부터 새로운 api 개방을 요청하고 사용한 것까지\n\n> 개발자에서 아키텍트로 - 마이클 킬링\n\n#### 아키텍처\n\n> 정책과 세부사항으로, 룰과 가이드를 구분.\n> 아키텍처의 목표는 정책과 세부사항을 적절히 구분해 세부사항의 결정은 최대한 미룰 수 있게 하는 것\n> - 클린 아키텍처\n\n아키텍처 구축의 목표점은 없다\n**좋은 기준점을 만들어서 그 기준점을 계속 개선해나가는 것이 최선**\n\n큰 그림 > 작은 그림\n\n선택과 집중, 유연하고 융합적인 환경 - 두 가치를 어떻게 잘 융합할 수 있을까\n- 분산화 하는 것이 시대의 흐름\n- 심플하게 유지. 0에서 10은 심플이 아니다. 100에서 10이 심플\n- 제한이 필요하다\n\n설정가능해야하고 플러그인 방식으로 동작\n\nlog data 나 db table 등을 초기에 설계해서 쭉 써야하는 것보다는 변경에 유연했으면 좋겠다\n변경에는 근거가 필요하지만, 실제로 변경할때는 쉽게 할 수 있도록. 마이그레이션이 쉽지 않다\n변경에 유연한 것들은 무엇이 있을까\n\n관리요소가 많아지면 일관성이 깨지기 쉽다\n코드가 많아지면 고쳐야하는 지점이 늘어난다\n\n한 부분의 변화를 위해 다른 부분을 신경 쓰지 않아야 한다.\n한 부분의 변화가 다른 부분에 영향을 주지 않아야 한다.\n\n#### 코드레이아웃\n- controller, Service, Domain, entity\n- controller에서는 1단계 if와 명료한 함수들로만 이루어져있다\n- service에는 간단한 유닛함수를 묶은 로직만 있다\n- domain에는 간단한 유닛함수들만 있다\n- entity는 리턴값과 등등을 감싸주는 래퍼를 가지고있다\n- controller와 service 사이에 세세한 에러 처리 로직은 facade에 들어간다\n\n#### 유지 보수가 잘 되게 하려면?\n- 정확한 정책을 통해 역할을 분리, 위임한다\n\n\n#### 관련 백링크\n- [[Standard]]\n- [[Decision]]\n- [[Reality#러셀과 화이트헤드]]\n\n\n---\n\n## 필요한 컴포넌트\n\n최소 아키텍처를 먼저 준비해놓고 거기에 필요에 따라 하나씩 추가한다.\n규모가 일정 범위 이상 커지면 다음 패러다임을 준비한다.\n\n#### component\n기본\n- db\n- backend: lambda\n- frontend: nettlify/now/surge\n- file: s3\n- image: cloudinary\n- con: ifttt\n- 큐/캐시: redislabs\n- design: figma\n- domain\n- dns\n- MQ\n\n추가\n- 오토스케일링 2~8개 파드로 유지\n- ingress - 내부 아이피 전달용\n\t- tls인증서, failover, 로깅, 모니터링\n- 자동dns, ssl, 로드밸런싱: CloudFlare Proxy -> AWS L4 NLB\n- cdn\n- secret - kubeseal\n- clickhouse - 분석데이터\n- 모든 인프라 코드를 한 곳에 저장해놓고 끌어다쓰기?\n- 오류 추적\n- profiling - cProfile, snakeviz\n- 서버 부하 분산 - haproxy and zookeeper\n- 대기열\n- 로드 밸런싱 후 헬스체크 해서 이상 발생시 자동 재실행 스크립트 실행\n- 서버 증설 확장 용이\n- 다운되도 대응 가능(failover)\n- when would you use request/reply and publish/subscribe\n\t- 이벤트 드리븐 아키텍처\n\n## Monitoring\n\n![observability](../img/observability.jpg)\n\n#### 중요한 포인트\n- urgent\n- important\n\n#### system\n- 보안 (로그인 체크)\n- load average\n- error message\n- memory\n- disk\n- network + time wait port\n- https://www.mimul.com/blog/linux-server-operations/\n\n#### web\n\n- api response time\n- 웹 요청량\n- homepage health\n- 접속자 로그\n- 접속한 페이지\n- 사람들이 어떤 메뉴를 많이 쓰는지 확인\n\n#### 웹 성능 확인 지표\n\n- DNS Lookup time\n- tcp 연결 시간 (브라우저와 서버간 연결 시간)\n- SSL 연결 시간\n- 첫 번째 바이트 다운로드 시간\n- 전체 다운로드 시간\n\n#### 트래픽을 측정하는 방법?\n\n- tps\n- 접속자 수\n- resource usage\n- page view\n- api count\n- loading time\n- response time\n\n#### 메인 모니터링 판넬에서 보여져야 할 것들\n\n- node 대수\n- cpu, memory 사용량\n\t- cpu, memory, disk, network\n- 응답량\n- 처리 시간\n\n#### monitoring\n\n- application, framework, os, cloud 이 정도가 기본 관리 영역이겠다.\n- 정상 상태를 추가해야한다. 범위를 정해서 이 정도면 정상인 범위로 놓고, 정상 범위 내를 계속 건드려서 카오스 테스팅 하고, 범위 벗어난 값은 다 알림 보내도록 해보면 좋겠다\n- 알림은 정말 확인해야 하는 것과 일반적인 안내를 분리해야 하고 확실히 눈에 띄게 해야 한다\n\n#### etc\n\n- 각 서비스 상태\n- 노드 살아 있는지 체크\n- 접속자 수\n- 응답시간\n- 처리시간\n- DB 관련\n- 접속한 어플리캐이션\n- 부하율\n- 알람\n- docker up/total\n- 트래픽 관리\n- GCDN\n- static code analysis\n- lambda, ec2, s3, Dynamodb\n- GCP\n\n#### 서버를 오래 켜놓았을 때 생기는 문제점\n\n아파치에서 동시작업을 위해\n자식 프로세스를 생성하도록 하고, 부모 프로세스와 메모리를 일정 부분 공유하면서\n메모리를 절약하는데,\n공유되는 메모리의 양이 시간이 지날수록 적어져서 자식 프로세스를 재시작\n해줘야한다고 한다\n\n이처럼 시간이 지남에 따라 성능 저하를 일으키는게 있으면 확인해봐야겠다\n\n그야말로 켜놓고만 있었는데 성능이 안좋아지는 원인 중 하나였다\n\n리눅스에서 jiffies 라는 변수가 32비트라 500일 정도 지나면 오버플로우 될 수\n있었는데 최신 커널은 64비트로 할당되어 최신 커널을 쓰면 넉넉해진다\n\n쿠버네티스단, 리눅스단, 기타 서비스단에서 체크 필요\n주로 데이터가 쌓이거나 메모리 사용량이 쌓일 때 문제가 생긴다\n\n#### 모니터링 범주\n\n프로파일링\n로깅\n트레이싱\n메트릭\n알림\n디버깅\n추세 파악(트렌딩)\n플러밍\n\n#### 문제 분석과 재발 방지\n\n예측하지 말고 측정한다\n\n#### 대규모 서버에서 겪는 문제\n\n데이터\nCPU\n네트워크\n\n데이터의 동기화\ncpu 병목\n네트워크 병목\n\nload average를 확인하고\nsar을 통해 cpu 문제인지 io문제인지 확인한다\n\n#### 대용량 트래픽\n\nWAS에서 문제가 생길 때 다중화로 해결이 힘든 이유\n\n- 다른 WAS를 찾아야 한다.\n- 로그인 정보를 전달해줘야 한다. (세션 클러스터링 필요)\n  - 그에 따른 관리 지점 증가\n\n데이터베이스 다중화 힘든 이유\n\n- 동기화\n\n#### 의사 결정 트리로 시스템 모니터링 하면 되려나\n\nload average yes\n\n- cpu bound\n- io bound\n\nload average no\n\n- network\n  근데 이러면 dfs로 전체탐색을 해야하겠네\n\n#### Observability를 높이기 위해서는 어떻게 해야할까\n\n이 문제가 발생했는지를 내가 설정하지 않아도 알 수 있으려면 바로 observability가 필요하다\n\n- 피드백을 받기 위해\n- 문제가 일어나기 전에 예측하기 위해?\n- 분산 환경에서 모니터링이 한눈에 되어야 한다\n- Metrics, Events, Logs, Traces 를 한눈에 확인한다\n- 예측하지 못한 문제를 찾으려고 한다\n- [제어이론](https://ko.wikipedia.org/wiki/제어이론)에서\n  **관측 가능성(observability)**이란, 시스템의 **출력 변수(output variable)**를\n  사용하여 **상태 변수(state variable)**에 대한 정보를 알아낼 수 있는지를\n  나타내는 용어이다. 시스템의 출력 변수를 사용하여 특정 상태 변수에 대한 정보를\n  알아낼 수 있을 때 그 상태 변수는 **관측 가능하다(observable)**고 하며,\n  시스템의 모든 상태 변수가 관측 가능할 때 그 시스템은 관측 가능하다고 한다.\n- 메트릭이란? 최적의 네트워크 경로 또는 측정 가능한 단위(평가지표)\n\n서버를 가상화해서 사용 시 서버는 추상화가 되고 서버의 상태를 일일이 확인할 필요가 없다. 문제가 생기면 없애고 새로 만들면 되기 때문에.\n\n근데 문제가 생겼는지 확인하려면 기준점이 있어야 하고, 기준이 설정되어 있지 않다면 문제가 발생했는지 알 수 없다\n\n정상 상태를 정의하고, 비정상 상태로 만든 후 정상 상태로 돌리는 것을 통해\nObservability를 높인다. 이것을 카오스 엔지니어링이라고 한다.\n\n예측하는 것이 아니라 관찰할 수 있도록 만든 후 관찰 하는 것.\n\n- Observability\n- post mortem\n- 무엇을 보여줄 수 있는가\n- 무엇을 해결해야 하는가\n- 어떤 문제가 생길 것 같은가\n\n서비스 장애 시간\n지표\nSLO\n\nSLO는 목표고 SLI는 지표다\n지표가 있어야 그걸 기반으로 목표를 세운다\n\n부팅시간 10초 이내는 합리적인 지표일까?\n시스템이 고장났을 때 빨리 재시작 되는게 중요할 것 같은데 어차피 헬스체크 간격이 15초라면 부팅시간이 의미가 있을까. 헬스체크 간격을 그렇다고 너무 빠르게 할 필요 있을까?\n\nLog Trace Metric\n프로메테우스는 메트릭 전문\n로키는 로그 전문\nTempo라는 트레이싱 전문도 생겼구나\n트레이스는 네트웍 영역이고 다른 툴이 필요\nSigNoz라는 오픈소스 툴이 있다\nOpenTelemetry와 연계가 잘 되는 듯\n\n\n#### reference\n\n- https://andromedarabbit.net/무엇을-모니터링할-것인가/\n  - AWS, Kubernetes 등에서의 모니터링 파라미터\n- https://www.mimul.com/blog/linux-server-operations/\n  - 리눅스 시스템 상태 확인 스크립트\n- [CPU 지표](https://brunch.co.kr/@leedongins/75)\n- [리눅스 60초 안에 상황 파악하기](https://luavis.me/server/linux-performance-analysis)\n\n---\n\n## Security\n\n- how to manage ssh key?\n  1. make every each computer\n  2. keep other storage\n\n[[Tool#서버 보안 설정]]\n\n#### jwt, oauth, session\n\n- token can make easy check current users count?\n\n#### double check, error handling, logging, security\n\n#### reference\n\n- [암호화 이것만 알면 된다](https://www.slideshare.net/ssuser800974/ss-76664853)\n\n#### SSH\nssh 접속 후 생기는 파일\n- .known_hosts\n- .authorized_keys\n- authorized_keys에는 pub키가 들어간다. 서버측에.\n\nSSH 와 TLS를 같은 원리로 생각했다.\n- ssh에도 public_key와 private_key가 있지 않은가\n- TLS에는 crt와 key가 있다,\n- TLS = RSA + 대칭키\n- HTTPS는 HTTP + TLS\n- 해시 함수 MD5, SHA <-> 대칭키 AES, 공개키 RSA\n\n#### SSL/TLS\n- HTTP를 HTTPS로 만들어주는게 TLS 연동하는 거\n- SSL은 처음 나왔을 때 이름. 현재는 TLS라고 불림\n- SSL3.0 이 TLS1.0과 같음\n- TLS 1.2가 2008년 버전이고 TLS1.3이 2018년에 나옴\n- 빨라지고, 단순화되었다.\n- nginx나 브라우저에서도 TLS1.3이 지원되어야 한다\n\n#### RSA\nRSA는 결과값을 가지고 있어도 원래의 값을 알 수 없는 소수의 소인수분해의 어려움을 통해 강력한 보안성을 가진다.\n이게 TLS에서 어떻게 쓰이는거지?\n비밀키가 원래의 값이고 공개키가 결과값인가?\n\n#### 공개키, 대칭키\n- 공개키는 비밀키를 공유하지 않아도 된다는 점에서의 장점이 있다.\n- 대신 공개키를 가지고 있으면 누구나 정보를 볼 수 있다?\n- 공개키로 암호화한 것은 대칭키가 없으면 볼 수 없다.\n- 공개키 방식만으로는 서버에서 클라이언트에 안전하게 정보를 전달할 수 없다.\n\t- 대칭키가 해독을 해야하는데, 서버는 정보를 전달하는 쪽이니까.\n- 공개키로 암호화 된 것을 복호화 할 수 있다. 그래서 공개키 방식은 파일의 안전을 보장해주지는 않는다. **하지만 그 파일의 신원을 확인해줄 수 있다.**\n\n#### TLS\n\npublic 과 private.\n- private 는 목적지. 한 곳에서만 가지고 있는다\n- public 은 접속자. 모두가 자유롭게 갖는다\n\nci 이용 시나 push할 때 ssh permission을 확인하려는 목적인가?\n\n- ci 툴에서 서버는 ci 서버가 되는 것인가? 클라이언트가 내가 되고?\n\t- ci 툴이 접속자고, github 저장소가 서버가 되어서, **서버에서 pub키를 가지고 접속자가 private key를 가진다**\n\t- 서버가 접속자고, 나는 목적지\n- 클라우드 서비스에서는 노트북에서 생성한 ssh 를 cloud instance에 넘기고 내가 다시 public이 되어서 접근하는 것인가?\n\t- ec2에서 pem키를 받는 것은 ec2가 목적지고 내가 접속자\n\t- private는 미리 aws에 올려놓고 그것을 가져다 쓰도록 하면 좋겠다\n\t- aws 에서도 pub키를 서버에 보내고, 비밀키는 노트북에 둔다\n- 포맷을 대비해서 ssh key를 파일로 갖고 있으려고 하는데 private key를 갖고 있어도 되나?\n- 공개키를 서버에 등록해서 클라이언트가 비밀키를 가지고 있는다?\n- authorized_keys에 공개 키를 복사해 넣으면, 접속하는 곳에서 비밀키를 물어본다\n- .pem 파일은 뭐지 = 형태만 다른 private key와 같은 용도\n- [[Archive#내가 오해한 SSH key]]\n\nGPG - 개인용 메시지를 암호화하려고 할 때 쓴다\n\n- 내 공개키는 마구 뿌린다\n- 그러면 내 공개키를 이용해 만든 데이터는 내 비밀키로만 열 수 있다.\n- 내 공개키를 갖고 있다고 내 정보에 접근할 수는 없나? 수신용인가?\n- 주인장의 사이트에 공개키가 올려져 있어도 그것이 조작된 것일 수도 있다. 그래서 CA 업체에서 이를 검증한다.\n\n- [x] SSH에서 pub키는 gpg키처럼 마구 공유해도 되는게 아니지 않나? pub키만 있으면 서버에 마음대로 접속할 수 있는데\n  - pub키가 서버가 갖는 키고, 클라이언트는 private key를 갖는다.\n  - 그래서 pub키가 많이 퍼지면 클라이언트는 많은 곳을 갈 수 있다.\n\n비밀키도 어차피 키를 지켜야한다는 것은 하나의 비밀키를 공유하고 그것을 지키는 것과 똑같다. 근데 비밀키를 공유한 적이 있냐 없냐의 차이로 보안성의 차이가 있다.\n\n- [ ] HTTPS도 공개키 방식처럼 암호화를 개인키로 하면 비밀키로 복호화를 해야하는 방식인가?\n- 공개키는 누구나 가질 수 있다. 비밀키로 암호화 한 것을 공개키로 누구나 열 수 있다면 내용이 지켜지지는 않을 것 같다.\n\t- 그래서 End-2-End 암호화도 신경 써야 한다.\n\t - HTTPS에서 인증서로 신원을 확인하고, 그 통신에서 확인한 랜덤값으로 다시 키를 만들어서 그 키로 데이터를 암호화한다.\n\t - 클라이언트가 처음 접속할 때 보내준 공개키로 랜덤키를 암호화해서 서버에 주고, 그 키로 정보를 공유한다. 즉, 처음 만들었던 인증서는 신원확인용이다.\n\t - 신원 확인은 제 3자가 한다. (CA 업체)\n  - 즉, HTTPS는 공개키 방식과 대칭키(암호) 방식을 모두 쓴다.\n  - https://bravenamme.github.io/2019/12/03/https-2/\n- [ ] 비밀키를 서버가 갖고, 공개키는 아무나 갖는다. 근데 CI에서 비밀키를 가지는 것은 어떻게 생각해야하지? 브라우저에서는 서버가 비밀키를 갖는다.\n  - 비밀키를 클라이언트가 갖는다. CI secret에 비밀키를 입력하면 builder에 접근할 수 있게 된다. pub키는 어떻게 등록했더라? 다시 동영상 봐야겠다.\n    - pub키를 deploy key에 넣고 private key를 secret에 넣었다. github도 이렇게 되나? 되네\n\n\n#### HTTPS\n\n- [ ] 서버가 자신임을 증명해야 하는 이유는?\n  - 클라이언트는 어차피 불량한 사이트에 들어가도 작업이 정상적으로 될텐데.\n  - 중간에 길을 꺾어서 자신에게 결제하게 하는 것은 막을 수 있겠다.\n  - 중간에 데이터 탈취를 못하게 하는 역할이 주 역할인가?\n- [ ] HTTPS는 국가에서 막기 힘든 이유는?\n\n#### OAuth\n\n[[Web#Oauth2]]\n\n\n#### user 세션 관리\n\n하나의 서버를 스케일 아웃해서 여러 대로 만들어놓으면 유저 정보가 어느 곳에는\n있고, 어디에는 없는 상황이 벌어진다. 이를 해결하는 방법이 몇개 있는데.\n\nsticky\n\n- 유저가 처음 접속한 서버에 계속 접속하도록 유지하는 방법.\n- 서버 과부하가 일어날 수 있다.\n- 서버가 뻗으면 데이터를 잃기 때문에 단일 실패지점이 된다.\n\nclustering\n\n- 각 서버끼리 데이터를 공유해서 동기화하는 방식\n- 데이터 동기화를 하는데 자원이 많이 소비될 수 있다.\n\n따로 세션 서버를 두는 방식\n\n- 접속 시 세션 서버에서 데이터를 불러와서 검증하는 방식\n- 관리 지점이 증가한다.\n- OAuth가 이를 대신해준다.\n  - 대신 유저 정보를 따로 관리해서 이용할 수 있어야 한다. 서비스 개선을 위해.\n\nhttps://chagokx2.tistory.com/93\n\n#### reference\n- [vault](https://www.slideshare.net/DoyoonKim30/20-vault-107929281)\n- [jwt](https://lazyhoneyant.tistory.com/m/7)\n\n\n---\n\n## Production\n\n#### 프로덕션에 필요한 속성\n\n보안, 개별 설정을 유연하게 하는 것, 관측성\n- 되돌릴 수 있는가\n- 복구할 수 있는가\n- 수습이 가능한가\n- 인수인계할 때 무리가 없는가 (사람을 구할 수 있는가)\n- 안정성\n\n#### Program\n- code with log, test, api\n- CI with lint, test, performance, dependency\n- CD with deploy\n- Monitoring with check node, api, log, performance\n\n#### Need Extra Component\n- M/L\n- Elasticsearch\n- [[Information#무질서한 원숭이(Chaos Monkey)]]\n\n#### 서비스가 커져감에 따라 직접 구현해야하는 기능\n\n- 깃 레포지토리 > gitlab이 자체 서버 구축 가능하다\n- ci 툴\n- 서비스로 제공되는 소프트웨어들\n- 최소한 이중화가 되도록 해야한다\n\n#### reboot report\n\nload average 확인 후 cpu bound인지 memory bound인지 disk i/o문제인지 확인하는 것처럼\n문제 감지되면 확인된 기록들을 캡처해서 리포트로 보내주고 재부팅하도록 설정\n소프트웨어 로그, 시스템로그도 같이 캡처\n\n#### 구성보다 관습, CoC\n\n설정을 일일이 하기보다 관습적으로 따르게 하고, 설정이 필요할 때만 설정을 하는 방식\n\n같은 약자로 Code of Conduct(행동 규범)이 있어 헷갈릴 수 있다.\n\n#### 자동화\n\n자동화는 오류를 일으키기 쉽다\n조심히 도입해야한다\n\n메타적으로\n\n흐름만 만들고 세부사항은 자동화해서 알아서 일하게 한다\n\nservice output이 feedback이 되도록\n\n- 테스트 문서 자동화\n- 모니터링 문서화\n- api 문서화\n\n업무자동화 한번에 왜 안되는가\n- 새로운 업무환경을 이혀야 함\n- 엑셀로 관리되는 데이터. 수기로 입력해야만 하는 데이터\n- 아는 범위까지만 최적화 되고 놓친 부분이 있으면 거기가 꼬인다.\n- 기존 시스템을 다 파악하기 힘들다. DB 테이블 명세와 메뉴얼 부족\n- 보안적인 요소\n\n#### 자동화의 문제점 (자동화보다는 일괄적용의 문제점 일 수 있겠다)\n\n자동이 자동으로 잘 동작안하는 걸 자주 보고\n스마트가 스마트하지 않았고\n한번에가 한번에 되지 않았다\n전체를 스크립트를 짜서 변환시키는 것도 항상 실패하는 것들이 나온다.\n\n#### AI와 자동화\n- 사람이 하면 누락이 생길 수 있다\n- 스크립트로 하면 기계적으로 동작한다. 정해진 폼이 아니면 이상한걸 막 가져온다\n- AI로 하면 결과가 매번 다르고 정확하지 않다\n\n#### CSP\n\nCommunicating Sequential Processes\ngolang의 groutine의 동작 방식이자, 네트워크로 연결되있는 자원들이 서로 통신할 때 효과적인 모델.\n마이크로서비스에서 수많은 서비스들 간의 연결과 복잡성을 관리하기 위한 hashicorp의 선택\n\n#### 오토스케일링\n- cpu나 메모리가 70% 이상이면 1대씩 늘리고 30% 미만이면 1대씩 줄이는 방식\n- 근데 cpu와 메모리가 한번에 100%가 되는 경우가 왕왕 있음\n\n## Micro Service Architecture\n\nMSA 는 작은 규모에서는 과한 느낌이 있다\n모놀리스로 쉽게 관리가 될 것을 MSA를 사용하면 관리포인트가 엄청 많아진다\n\n- every node make end-point, http, grpc\n\t- need documentation\n- flexible micro service. it can be split and compose\n- logging and visualization\n- 마이크로서비스에서 문제가 생긴 지점을 바로 확인할 방법은?\n\n#### 마이크로 서비스\n\n라이브러리를 쓰듯이 다른 서비스들을 사용하면 성능 상의 손해가 있다\n마이크로아키텍처는 관리할 지점이 늘어나는 단점이 있지 않나\n\n- 메시지 기반의 비동기 통신\n- 사가 패턴 - 데이터 일관성 유지를 위해\n- 도메인 주도 설계\n- 이벤트 소싱 패턴\n\n- API\n- 서비스 메시\n- 서비스 디스커버리\n- 메시지 처리\n- 서킷 브레이커\n\n- API gateway, 서비스 메시, 서비스 디스커버리 차이는?\n  - 서비스 메시 안에 서비스 디스커버리가 보통 내장되있다\n  - api gateway는 외부에서의 접속, 서비스 메시는 내부의 네트워크 관리\n\n왜 마이크로 서비스인가\n\n- 마이크로 서비스를 위해서는 필연적으로 서비스 간 커뮤니케이션이 필요하고,\n  비동기 통신과 동기 통신을 잘 구분해서 사용해야 한다.\n  - 동기는 API를 이용해서, 비동기는 메시지 큐를 이용해서.\n  - 각 서비스 간 데이터를 메시지 큐에 발행하고 구독하는 식으로 데이터 공유, 이벤트 처리가 가능하다.\n- 마이크로 서비스를 일일이 관리하기 보다 서비스 디스커버리를 이용해서 자유롭게\n  생성과 운영이 되게 해야겠다\n- 단일고장점이 없도록 노드를 여러 개 두어 관리하는 것이 좋겠다.\n\n- 큰 팀을 작은 팀으로 나누면 팀 간 대화에 장벽이 생기고, 안개가 생긴다. 다른\n  팀의 영역에는 안들어가려고 하고, 그 쪽에서 일어난 일이 전달이 안될 때가\n  많아진다. 어떻게 이 장벽을 없앨 수 있을까\n- 핵가족에 이어 1인가구가 늘어남에 따라 대가족일 때는 자연스럽게 알 수 있던\n  것들이 이제는 공부를 해야 알 수 있게 되었다.\n- 수평적인 연결망이 만들어져서 정보공유를 할 수 있게 해야한다. 회사에서 팀장이\n  있고 팀장회의를 하는 것과 비슷한 느낌이지만 수평적인 관계의 연결망으로.\n  (현재의 커뮤니티가 이 역할을 하고 있는 것일까? Web 2.0)\n- 어차피 한 사람이 모든 마이크로서비스를 관리할 수 없다? 그래서 모놀리스에서 서로 엮여있던 것을 마이크로화해서 편하게 관리할 수 있게 하는거지 마이크로서비스를 무한정 많이 만드는 것이 목적은 아닐 것이다. 한 사람이 다루는 서비스를 제한 해주는 것이 좋겠다.\n\n#### 마이크로서비스\n\n접근 포인트\n- 단일 고장 지점을 없앤다\n- 의존 영역을 분리한다\n- 빠르고 가벼운 사이즈를 유지한다\n\n이를 어렵게 하는 요소\n- API endpoint가 많아져서 이를 일일이 관리하기 힘들어 API Gateway라는 것을 이용하려 하는데 이 API gateway가 단일 고장점이 되버린다\n- 흩어져 있는 데이터 여러개를 합쳐서 사용해야 할 경우가 있다\n- 처음에는 작은 사이즈지만 요구사항이 늘어남에 따라 사이즈는 필연적으로 커진다.\n\n이에 대한 마이크로서비스의 대응방법\n- sidecar 패턴으로 API gateway를 없애고 각 서비스에 연결점을 붙인다\n- SAGA, CQRS\n- 사이즈가 커지면 다시 분리한다.\n- 미이크로서비스간 데이터 통합과 작업 일관성 유지를 위해 다른 서비스가 필요한데 이를 커밋과 적용으로 나누는 방식으로 할 수 있고 사가 패턴을 이용해 해결할 수도 있다\n\n궁금\n- 쿠버네티스의 구조처럼 마이크로서비스를 구현하면 되지 않을까\n- 데이터를 다 분리해놓고 중앙에 모아서 처리하다가 요청이 자주 오간다 싶으면 연결하는 길을 추가?\n\n한 마이크로서비스의 단위를 로직 - 데이터베이스 - 사이드카로 놓고 사용\n이 마이크로서비스를 관리하는 툴을 생각해본다\n\n중앙에 데이터들이 하나로 묶인다\n한 마이크로서비스에 요청이 오면 그 응답으로 메시지를 보낸다\n메시지는 중앙, 관리자에게 전달되고, 관리자는 피드백으로 중앙에는 업데이트로 이용된다\n\nkubernetes로 여러개의 서비스로 쪼개면 microservice인가?\nmicro로 서비스를 만들면 microservice인가?\nmonolith와 구분되는 microservice의 특징은 각 서비스가 개별 데이터베이스를 갖는 것인데, micro는 어떤 구성 방식인가\n\n유저 정보 유지해서 계속 불러오는 효율적인 방법은?\n\n모놀리스에서 함수호출을 이벤트 드리븐이 대체했을 때 고속처리가 가능한가? 배민은 되긴 하나보다\n\n- 같은 네트워크에 있다면 rpc로 서비스가 나눠져 있으면 rpc로 데이터를 취합해 api gateway가 모은 데이터를 리턴해주면 된다\n\n쿠버네티스에서는 RBAC가 어느 순간에 동작하는거지?\n\n마이크로서비스의 library를 한곳에 모아서 보여주고 쉽게 호출해 쓸 수 있도록 해야한다. 어떻게?\n\n#### 마이크로서비스\n마이크로서비스는 내 생활방식과 다르다\n마이크로서비스화도 무한정 많이 할게 아니라 탈출지점을 만드는게 좋겠다. 한 팀이 감당할 서비스를 생각해서\n\n분산 데이터\n분산 서비스\n분산 환경을 컨트롤하는 게 필요하다\n\n복잡성도 분산 환경에서 있고 분산이 곧 개별적인 인간 세상과 닮은 소프트웨어의 구조\n\n마이크로서비스의 경계설정\n데이터 쿼리 트랜잭션\n데이터 모아서 처리하기\n\n마이크로서비스는 데이터가 뿔뿔이 흩어져있다고 느낄 수 있다\n신경써야할 요소가 많아진다고 볼 수 있다\n넷플릭스는 이것을 어떻게 관리하지?\n\n모놀리스로 개발하다보면 기존에 것에 계속 추가해야하고 수정해야한다.\n새로운 기능이 필요하면 기존 구조를 건드려야 할 수도 있다\n이것을 막기 위해 마이크로서비스를 쓰지만\n관리포인트는 줄일 수 있어야 한다.\n\n#### 서비스메시\n\n규칙기반의 부하분산으로 배포(테스트에 배포)와 릴리즈(프로덕션에 배포)를 분리하기 좋다고 한다\n\n텔레메트리 관리\n- 네트워크 트래픽 관련 지표 수집 및 추적\n\n#### CQRS\n\n- 쿼리와 커맨드를 분리했다.\n- 쿼리는 CRUD의 Read의 개념이고\n- 커맨드는 나머지 CUD의 개념이다.\n- Read를 조합해서 나머지 명령을 하는 경우가 많고, Read 작업이 다른 작업과 사용되는 빈도에도 차이가 있기도 하다.\n- 마이크로 서비스에서 특히 다른 DB에서 가져올 때 조합하기 위해 이렇게 분리하면 좋을 것 같다\n- 이 개념에서는 애초에 모델, 서비스 자체에서 쿼리와 커맨드를 분리해서 다른 서비스로 만들라고 한다\n\n구성요소\n- 사가\n- 애그리거트\n- 쿼리\n- api\n\n#### event driven architecture\n\n- in micro service, each service need send some event.\n- if not implement event, can parse some data?\n- http server <- event producer -> queue\n  DB\n  lambda\n- lambda can assign http or sqs. how to get data?\n\n#### microservice experience\n\n- [배민](https://www.youtube.com/watch?v=BnS6343GTkY)\n\t- 결제 장애 시 결제만 장애나는 환경을 원했다.\n\t- 모놀리스 서버 테이블이 700개... >> 분리 후에도 한 서비스에 테이블이 많이 있을 것\n\t- 이벤트 기반으로 하니 훨씬 효율이 증가했다.\n- [11번가](https://www.youtube.com/watch?v=J-VP0WFEQsY)\n\t- Spring cloud 이용\n\n#### junk food\n\n넷플릭스가 마이크로서비스를 하면서 느꼈던 개발의 주요 문제점\n- dependency\n\t- circuit breaker 로 의존성 있는 서버가 죽는 것에 대응\n- Scale\n\t- EVCache\n- Variance\n- Change\n\n\n#### architecture process organization\n![successtriangle](../img/successtriangle.png)\n출처: https://kihoonkim.github.io/2018/03/25/Microservices%20Architecture/first-msa-retro/\n\n#### When many people come to site. how to keep working server\n\n1. allow maximum people, others redirect to queue.\n2. scale out\n\n#### 섀시\n\n에러 체크, 로깅, 헬스체크, 회로 차단 등 마이크로서비스에 필요한 것들을 만들어놓은 것을 이용하자는 마이크로서비스 섀시라는 개념이 이미 있었다\ngo-kit, micro 참고\n\n- 외부화(엔드포인트 적용)\n- 헬스체크\n- 모니터링 지표 뽑기\n- 서비스 디스커버리\n- 회로 차단\n- 분산 추적\n- 로깅(액션 기록)\n- 보안\n  이 기능들을 메인로직에 적을 필요없이 섀시를 적용시키면 자동으로 기능이 수행된다\n\n그리고 서비스 메시는 섀시의 진화 형태가 될 것인데, 현재는 일부 기능만 구현하고 있고, 아직 완전 대체제는 아니다\nistio, linkerd\n\nistio에서 분산 추적을 하려면 app: deployname 을 라벨링 해줘야 한다\n\n#### 마이크로서비스에서 두 서비스에서 불러온 데이터를 어떻게 합칠까\n\n두 서비스면 그냥 호출하는데서 부르면 되겠지만\nrdbms에서 하던 조인처럼 자유자재로 하기에는 성능이 안나온다\n\nCQRS의 쿼리를 이 상황에 쓰던가\n아니면 쿼리를 모아서 rdbms로 모으는 추가적인 리소스를 이용해서 해결?\n\n"},{"headings":[{"value":"요약"},{"value":"SOLID"},{"value":"Single reason"},{"value":"DIP를 통해 외부 라이브러리 대신 임의의 객체를 만들어 테스트하기 용이해진다."},{"value":"OOP"},{"value":"폴리모피즘"},{"value":"상속, 위임(Composition)"},{"value":"coupling vs cohesion"},{"value":"DI, IoC"},{"value":"Clean Code"},{"value":"Clean code"},{"value":"TDD"},{"value":"Why Test?"},{"value":"test"},{"value":"BDD, DDD"},{"value":"unit testing, system testing"},{"value":"Refactoring"},{"value":"유닛 테스트"},{"value":"기능이 전반적으로 바뀌는 경우 a/b 테스트를 해야한다"},{"value":"Load vs Performance vs Stress test"},{"value":"stage test"},{"value":"E2E test"},{"value":"Acceptance test"},{"value":"Error Handling"},{"value":"에러 처리"},{"value":"빠른 리턴 vs 리턴은 한 곳에서만"},{"value":"에러 핸들링"},{"value":"Coding Convention"},{"value":"dash(-) vs underscore(_)"},{"value":"space vs tab"},{"value":"코드에서 주렁주렁 달리는 것"},{"value":"클래스 기반 언어와 프로토타입 기반 언어"},{"value":"if statement"},{"value":"해피 패쓰만 생각하지 않기"},{"value":"프로그램에서 어려운 문제"},{"value":"개발"},{"value":"코드 짤때 고려할점"},{"value":"큰 common.js 파일이나 util.js파일은 라이브러리 재사용성을 좋게해주지 못한다"},{"value":"Language Design Principle"},{"value":"Internal Link"},{"value":"Reference"},{"value":"Code"},{"value":"statement, expression"},{"value":"code design"},{"value":"Python"},{"value":"The Zen of Python"},{"value":"Key Point"},{"value":"compiler"},{"value":"파이썬 self"},{"value":"Python concept with id() function."},{"value":"shallow copy, deep copy"},{"value":"Built-in functions"},{"value":"Miscellaneous"},{"value":"한글 사용"},{"value":"requests"},{"value":"파일 입출력"},{"value":"정규식"},{"value":"lambda python pandas parsing csv"},{"value":"reminder recommend python"},{"value":"비동기 프로그래밍"},{"value":"python @classmethod @staticmethod"},{"value":"*args, **kwargs"},{"value":"표준 라이브러리"},{"value":"numpy"},{"value":"singleton in python"},{"value":"if need initial python dependency using this"},{"value":"pickling and unpickling?"},{"value":"json dumps, loads"},{"value":"Defects"},{"value":"WTF"},{"value":"Reference"},{"value":"Golang"},{"value":"Philosophy"},{"value":"Key point"},{"value":"golang has no class"},{"value":"Specification"},{"value":"Auto Rebuild"},{"value":"go folder management"},{"value":"goroutine"},{"value":"go http"},{"value":"Library"},{"value":"graphql-go"},{"value":"measure execution time in go"},{"value":"golang"},{"value":"wasm"},{"value":"defer"},{"value":"golang context"},{"value":"Defects"},{"value":"고 모듈에서 버전관리가 별로다"},{"value":"패키지 관리"},{"value":"go library"},{"value":"vs rust"},{"value":"Reference"},{"value":"다트 비동기"},{"value":"android"},{"value":"Functional_Programming"},{"value":"함수형 언어"},{"value":"haskell"},{"value":"First Object(Class) Citizen"},{"value":"High-order function"},{"value":"Pure function"},{"value":"Immutable"},{"value":"declarative"},{"value":"Currying"},{"value":"Memoization"},{"value":"Composition"},{"value":"Recursion"},{"value":"Monad"},{"value":"etc"},{"value":"docker haskell"},{"value":"Javascript"},{"value":"react function vs class"},{"value":"javascript callback"},{"value":"실행 컨텍스트 생성 시 렉시컬 스코프 내의 선언이 끌어올려 지는 게 호이스팅이다"},{"value":"'int' is not an object, 'Integer' is."},{"value":"object"},{"value":"C++ 50 계명 - 이것만은 기억하자."},{"value":"generic"},{"value":"typescript"},{"value":"delegate"},{"value":"C# linq"},{"value":"데이터 타입을 명시하는 것의 메리트"},{"value":"code"},{"value":"함수를 거쳐서 호출하는 것과 바로 호출하는 것 속도 차이 비교"},{"value":"when useful pointer?"}],"fields":{"slug":"/coding/"},"rawMarkdownBody":"\n## 요약\n\n코딩을 어떻게 하면 좋은 코드가 나올까? SOLID, DRY, YAGNI 등 많은 코딩, 디자인 가이드가 있다.\n\n---\n\n## SOLID\n\n**Abstraction, One Behavior class, Encapsulation**\n\n- S 하나의 클래스는 한 가지 일만, 변경하기 위한 이유는 하나만 갖고 있어야 한다.\n- O 확장에는 열려있고, 변화에는 닫혀 있어야 한다\n- L 하위 클래스는 기존 클래스와 치환되어도 동작 해야 한다\n- I 인터페이스를 작게 하고, 클라이언트가 사용 안하는 함수는 공급도 안하게 한다.\n- D 추상화에 의존해라. 구체적인 것 말고.\n\n#### Single reason\n\n변경하기 위한 이유는 버그 수정이나 리팩토링일 때가 아니라 디자인 설계 시의 얘기\n\n#### DIP를 통해 외부 라이브러리 대신 임의의 객체를 만들어 테스트하기 용이해진다.\n\n테스트 시에 외부 API의 기능을 테스트하는게 아니라 내 구현을 테스트한다.\n\n## OOP\n\n- **Encapsulation, Composition, Inheritance, Delegation, Polymorphism, Open recursion**\n- same Input, should same output\n- Encapsulation = Module?\n  - Encapsulation is hide the value\n\n#### 폴리모피즘\n\n객체 생성 시 고정된 객체를 만드는 것이 아니라 기준만 만들고 실제 구현은 각\n상황에 맞게 수정할 수 있게 하는 것\n\n인터페이스나 추상클래스를 이용하여 상속해 여러 객체를 하나의 기준으로 만드는 것\n그리고 이를 이용하여 오버라이딩 하여 각 객체에 맞게 재구현할 수 있는 것\n\n하나의 객체를 다양한 방법으로 사용할 수 있게 하는 것\n\n#### 상속, 위임(Composition)\n\n상속\n\n- 물건에서 인터넷용과 아닌 것을 구현할 때 물건의 속성은 공통으로 가지게 해서\n  수정을 한 곳에서 하게 할 수 있다.\n- 상속 받는 객체가 많아지면 그 중에 몇개만 같은 속성을 원할 때 상속이 깨지던가,\n  중복된 구현을 각자 하던가 해야하는 상황이 오게 된다.\n- 아키텍처에서 정책과 세부사항을 분리해야 한다고 하는 것처럼 상속도 이 부분을\n  고민해야 한다.\n\n상속 대신 위임을 이용하라고 하는데, Go에서 interface는 구성의 방식인가?\n\n- 덕 타이핑이 위임인가?\n  - 맞다고 할 수 있다.\n  - https://mingrammer.com/translation-go-and-oop/#3-컴포지션-composition\n\n위임으로 상속의 장점을 취하고 단점을 완화할 수 있는 것인가?\n\n- 상속이 더 간단하게 구현되지만 구성으로도 똑같은 느낌을 낼 수 있다.\n- 구성 방식으로 하면 처음부터 어떤 것을 고정하고 어떤 것은 변하게 할지 고민하지\n  않아도 된다. 그래서 웬만하면 구성을 쓰라고 하는 것 같다.\n\n#### coupling vs cohesion\n\n내부에서의 변수들의 활용이 잘되면 응집도가 높다고 한다\n클래스의 변수를 메소드가 여러개 잘 사용하면 응집도가 높다고 볼 수 있다\n각 객체 간 연결이 느슨하게 되있으면 결합도가 낮다고 한다\n\n#### DI, IoC\n\nDI의 이점이 뭐지?\n\n프레임워크와 라이브러리의 차이가 DI의 예시\n\n의존성을 외부에서 주입할 수 있는 스프링의 기능 확인\n\nmain에서 한 방향으로 호출하는 방식에서 함수가 접근하는 방식으로 갔을 때의 장점은?\n\n생성자로 외부에서 주입해주거나, setter를 이용해서 주입해주는 것이 DI\n\n- 외부에서 주입해주는 것이 main에서 호출하는 흐름과는 같은 방향 같은데?\n- 함수 내에서 생성하는게 아니라 외부에서 알려주는 흐름은 화살표가 반대로 되는게 아니라 화살표가 옮겨진 느낌이다. 더 추상화해서 호출한다는 느낌이지 제어 방향이 역전되었다는 느낌은 안든다.\n- 함수의 입장에서는 자신이 생성하던 것을 주입 받으니까 역전이긴 하다. 근데 전체 프로그램 입장에서는 같은 흐름 같다.\n\n이렇게 했을 때 라이브러리는 라이브러리로 활용성은 높아지겠는데, 사용자 입장에서는 직접 객체를 주입해줘야 하지 않나?\n\n스프링이 IoC를 지원해준다는게 무슨 뜻이지?\n\n- @Component로 표시해줘서 등록해두고 쓰는 모양이다.\n- application.xml이라는 파일에 bean을 정의해준다. 근데 이러면 호출자가 부르는 것에 비해 이득이 있나?\n- 또는 빈 생성용 자바 파일을 만들어서 선언해준다.\n\n스프링\n\n- 내가 생각하던 템플릿 제공 프레임워크의 개념의 완성형 버전\n- 여기서 나온 개념들을 알아두면 개발에 잘 써먹을 수 있을 것 같다.\n\nAOP\n\n- 라이브러리(모듈)의 재사용성을 높이기 위해 관점을 기준으로 모은다는 개념\n- 이에 따르는 추가 개념들이 많은데, 예전 같았으면 이런 개념들을 본질에서 벗어나는 부차적인 것이라 생각해서 보기 싫었을텐데, 라이브러리를 모으기 위한 고민을 하는 지금에서는 다른 사람들이 어떤 방식으로 이 문제를 해결하려고 했는지 보는 좋은 레퍼런스로 느껴진다. 그냥 개념들을 보는 것보다, 나의 고민과 필요가 있어야 다른 내용도 관심이 가는 것 같다.\n  - 어떤 접근법으로 보고 있는지 확인하는 차원에서 관심이 간다.\n\n## Clean Code\n\n- Robert C. Martin\n- https://gist.github.com/wojteklu/73c6914cc446146b8b533c0988cf8d29\n\n- Meaningful naming\n\n#### Clean code\n\n심플한 코드(클린 코드)를 지향하는 이유는 모든 서비스는 단번에 완성도를 100으로\n만들 수 없고 유지보수와 기능추가가 반드시 필요하기 때문에 이를 편하게 하기\n위함이다.\n\n## TDD\n\n- at least make test code.\n- Test, Log(error handling), API\n\n#### Why Test?\n\n- code make concrete\n- [The Art of Software Testing](https://drive.google.com/file/d/13r0fkQbcbd_2DG34l9Mm5VMRk8ewIImS/view?usp=sharing)\n\n#### test\n\n- boundary check\n\n#### BDD, DDD\n\n#### unit testing, system testing\n\n- https://www.geeksforgeeks.org/difference-between-unit-testing-and-system-testing/\n- unit testing\n- single module base,\n- system testing\n- depends specific requirement, totally test\n\n#### Refactoring\n\n- 변화는 향상을 가져온다. 마치 책의 퇴고처럼\n- 작가가 퇴고를 거듭하며 더 좋은 글이 되는 것처럼 리팩토링을 통해 더 나은 코드를 만들 수 있다\n- 리팩토링을 두려워하지 말자\n\n#### 유닛 테스트\n\n유닛 테스트를 어노테이션을 만들어서 입력값만 지정해서 원하는 출력값이 나오는지\n확인하면 테스트와 실제 코드가 같이 있게 되어 좋지 않을까?\n결과의 멱등성을 유도하는 방향으로 함수를 작성하고.\n\n```\n@Test(input1:'1',input2:'2')\ndef add(a int, b int):\n    return a + b\n```\n\n복잡한 로직이 필요하거나, 함수 실행 전에 선언해야하는 것들이 있으면 처리가\n힘들겠다.\n\n```\nSquare s = Square{}\ns.SetLength(5)\n\nclass Square():\n    len = ''\n    @Test(what input can in here?)\n    def SetLength(i int):\n        len = i\n```\n\n테스트코드를 먼저 적고 테스트 코드만 통과할 정도의 함수만 작성하고 문제가 생기면\n추가하는 방식으로 한다\n\n- 주먹구구와 점진적 개선의 차이는 뭘까\n\n#### 기능이 전반적으로 바뀌는 경우 a/b 테스트를 해야한다\n\n블루 그린 배포를 하던지 해서 배포 방식을 상황에 맞게 설정해야겠다\n\n#### Load vs Performance vs Stress test\n\nReliability, Stability, Response time, Scalability\n\nPerformance Test\n\n- it includes Load test and Stress test\n- 사용자가 원하는 조건이 있을 때 만족할 수 있는지 확인하기 위해 사용\n\nLoad Test\n\n- how much can handle resource of cpu, memory\n- verifies whether the application can handle the expected load.\n\nStress Test\n\n- find the breaking point(maximum point)\n\n> https://stackify.com/load-testing-vs-performance-testing-vs-stress-testing/\n\n#### stage test\n\n#### E2E test\n\n- End to end test\n\n#### Acceptance test\n\n인수 테스트? (인수/인계할 때 그 인수?) 고객이 인수하는? 수락으로 해석해도 되겠다\n측정할 수 있는 기준을 마련한다는 것\n\n인수테스트를 기반으로 유닛테스트를 조정할 수 있겠다\n\n기획 -> 기능 -> 스토리 -> 시나리오 -> 테스트\n\n## Error Handling\n\n- Exception File, Network\n\n```\n#whitelist?\ndef do_something:\n if do_something:\n  return false\n\n return true\n\nerr = do_something\nif err: generateError\n```\n\n- 엣지 케이스를 확인한다\n- 정상적일 때가 아니라 최악의 상황을 생각한다\n\n#### 에러 처리\n\n예외로 볼것인가 에러로 볼것인가(회복 가능한가 아닌가)\n호출자가 에러처리를 할 것인가, 유닛에서 에러처리를 할 것인가\n유닛 함수는 리턴값을 항상 가지게 한다\n\n하마님의 블로그 참고\nhttps://hamait.tistory.com/1027?category=250996\n\n포프님의 영상 다시 참조해본다\n\n- caller 에서는 에러가 뜬 것만 확인하고 내부를 알려고 할 필요 없다\n\n에러를 밑단에서 처리하면 프로그램이 뻗을지 말지를 호스트가 선택할 수 없다\n에러를 호스트가 처리하면 밑단에서 스택이 잔뜩 쌓여서 호스트에 전달되어야 한다\n\n에러 처리를 어떻게 할지 호스트가 결정해야한다?\n밑에서 처리하고 로그만 남긴다?\n문제가 생겼는데 에러만 남고 아무 이상이 없으면 문제\n문제가 별게 아닌데 정지되도 문제\n\n최대한 정지 없이 문제를 회복해서 진행시켜야 한다\n\n#### 빠른 리턴 vs 리턴은 한 곳에서만\n\ngolang의 에러 처리 방식 vs 책 클린 코드에서 나온 리턴을 마지막에만 두자는 얘기\n\n#### 에러 핸들링\n\n리턴을 어떻게 관리해야하나\n\ngolang에서는 라이브러리들이 웬만하면 에러를 같이 리턴한다.\nFatal은 최종 사용자가 하는거다\n\n에러의 종류\n\n- 내부적으로 처리해야하는 에러 (file)\n- 사용자가 처리할 에러 (network, temporary, null)\n\ngolang의 일반 error는 너무 단순해서 에러가 어디서 났는지 확인하기도 쉽지 않다.\n어디서, 무슨 원인으로 났는지는 확인할 수 있어야겠다.\n\n에러 처리를 한 곳으로 모아서 처리하는 방식\n\n- errormessage(err)로 만들어서 에러 메시지를 띄우는 설비 프로그램 방식\n\n## Coding Convention\n\n회사의 컨벤션 룰을 따르자. lint도 설정하고\n\n- python -- underscore\n- golang -- camel\n- `-` vs `_`\n- `tab` vs `space`\n\n#### dash(-) vs underscore(\\_)\n\ndash\n\n- 타이핑이 쉽다\n- 일반인에게 익숙하다\n\nunderscore\n\n- 파일 시스템에서 공백 대신 종종 사용된다\n- 띄어쓰기와 비슷해보인다\n\n둘 다 camelCase, PascalCase 보다 직관적이다\n그럼에도 golang은 camel,Pascal을 쓰고\n파이썬은 underscore가 특별한 예약어다.\n\n#### space vs tab\n\n- tab can line cleary\n- space little more light\n\n#### 코드에서 주렁주렁 달리는 것\n\ncontext\nlog 설정\n에러 처리\n\n#### 클래스 기반 언어와 프로토타입 기반 언어\n\n- 클래스 기반 언어: 객체를 정의하고 그것을 쓴다\n- 프로토타입 기반 언어: 유사성을 확인해서 가장 유사성이 많은 것을 기준으로 삼는다\n- 클래스 기반 언어: 한번 정의한 것은 그대로 사용된다\n- 프로토타입 기반 언어: 문맥에 따라 의미가 달라질 수 있다\n\n#### if statement\n\n긍정을 먼저 쓴다?\n뒤에 고정값을 둔다?\n\n#### 해피 패쓰만 생각하지 않기\n\n- 나보다 똑똑한 사람들이 만들어내는 예외상황이 생긴다\n- 바운더리(경계선) 예외처리 확인 반드시 해야한다.\n\n#### 프로그램에서 어려운 문제\n\n상태 충돌(메모리 데드락)\n예외 케이스\n일관될 수 없는 상황\n\n#### 개발\n\n1. 확장성을 생각한다. (가독성, 모듈)\n2. 요구사항을 퀄리티 있게 개발한다\n3. 엣지 케이스를 확인한다 (최악의 상황을 대비한다)\n\n#### 코드 짤때 고려할점\n\n응집도 결합도\n동시성 (병목)\n멱등성\n가독성\n에러처리\n\n#### 큰 common.js 파일이나 util.js파일은 라이브러리 재사용성을 좋게해주지 못한다\n\n---\n\n#### Language Design Principle\n\n[C](Software.md#History)\n[[Python#The Zen of Python]]\n[[Golang#Philosophy]]\n\n#### Internal Link\n\n[[Architecture#Goal]]\n[[Project#Project start]]\n[[Think#개발의 목표]]\n[[Information#비판 대신 진취적 개선에 에너지를 쏟는다.]]\n[[Think#Safety programming]]\n[[Think#가려움을 해결한 방법 1]]\n[[Architecture#Check Point]]\n[[Technology#Functional_Programming]]\n\n## Reference\n\n- https://en.wikipedia.org/wiki/SOLID\n- https://en.wikipedia.org/wiki/Object-oriented_programming\n- https://www.freecodecamp.org/news/object-oriented-programming-concepts-21bb035f7260/\n- https://chodragon9.github.io/blog/easy-code/\n- https://github.com/rwaldron/idiomatic.js/blob/master/translations/ko_KR/readme.md\n\n---\n\n## Code\n\n#### statement, expression\n\nfor, if, while은 statement,\nmap, filter는 expression\n\n#### code design\n\nmain - 메인에서 동작만 나타낸다. 구현은 다른 파일에서 한다\n\n```\nfunc main() {\n  init()\n  get()\n  set()\n  health()\n  doSomething()\n}\n```\n\nhttp_server - http로 렌더링하는 작업만 수행한다\nlogic - 인터페이스를 받아서 인터페이스를 구현한다\n\n```\ntype s struct {\n\n}\nfunc (s struct) init() {\n\n}\n```\n\n메인은 전체 흐름\n에러 처리는 내부에서 처리?\n메인 파일은 의미가 있어야 하고, 세부 구현은 적지 않도록...\n\n```\nfunc main() {\n    if err := initHTTPServer(); err != nil { log.Println(err) }\n    if err = addHealthCheck(); err != nil { log.Println(err) }\n    if err = addLogic(); err != nil { log.Println(err) }\n    if err = addLoggig(); err != nil { log.Println(err) }\n    if err = runHTTPServer(); err != nil { log.Println(err) }\n}\n```\n\n# Python\n\nsummary : Beautiful, Explicit, Simple, Complex than complicated.\n\n## The Zen of Python\n\n- _Beautiful_ is better than ugly.\n- _Explicit_ is better than implicit.\n- _Simple_ is better than _complex_.\n- _Complex_ is better than complicated.\n- Special cases aren't special enough to break the rules.\n- Although _practicality_ beats purity.\n\n## Key Point\n\n- what is an object, class\n  - module is not class. module can't do inheritance\n  - but module can contains class\n- generators (how to use, when is useful), yield\n- interpreter, dynamic type\n- floor division?\n- [GIL](Computer_Architecture#GIL is mutex for python to prevent use object by multi thread.)\n- debugging\n- wrapper\n- what is python? What are the benefits of using python?\n  - object\n  - modules\n  - threads\n- How Python is interpreted\n- How memory is managed in python\n  - Python memory is managed by python private heap\n- What are Python decorators?\n- What is the difference between list and tuple?\n- What is Dict and List comprehensions are?\n- Why lambda forms in python does not have statements?\n- Runtime return?\n- What is a pass in Python\n- What is docstring in Python?\n- How are arguments passed by value or by reference\n- How can you share global variables across modules\n\n[[Software#pointer vs reference]]\n[[Data_Structure#Python]]\n\n#### compiler\n\nCPython\n\n- 기본적으로 python 설치 후 실행하면 이 컴파일러로 실행된다\n- 파이썬은 C로 구현되기 때문에 C로 구현된 컴파일러로 제작되었다\n- C언어로 작성된 컴파일러가 파이썬 코드를 읽어 바이트코드로 컴파일하여\n  인터프리터로 실행한다\n- 파이썬에서 C를 이용하는 라이브러리(e.g. NumPy)들이 있는데 이것들을 실행하는데는\n  CPython을 써야 했었다.\n- https://lgphone.tistory.com/m/128?category=913302\n\nCython이라는 C로 변환 후 컴파일하는 컴파일러도 있다.\n\nPyPy\n\n- python으로 구현된 컴파일러\n- JIT (just in time)\n  - 인터프리터의 단점을 보완하기 위해 나온 방식\n  - 인터프리터 방식으로 실행하다가 (적절한 시점에) 네이티브 코드로 변경하여\n    캐싱해 직접 실행\n  - meta-tracing\n  - https://j.mearie.org/post/5125952364/why-is-pypy-faster-than-cpython\n- RPython\n  - static python compiler\n  - 파이썬의 동적인 부분을 없애 정적인 결과물로 만들어 속도 향상을 한다\n  - 인터프리터를 만드는 컴파일러\n- RPython이 만든 인터프리터를 이용해 실행함으로써 읽는 코드의 상태가 다르다.\n  - 인터프리팅 자체의 속도가 빨라진다\n- RPython + JIT로 속도 향상을 이루었다\n\n#### 파이썬 self\n\nsuper, self\n\n- 인스턴스\n  - `a = Test()`\n    할 때 생기는 a\n- 네임스페이스\n\n  - 클래스 생성 시 파이썬 기본 함수 목록에 저장된다\n    이것이 네임스페이스\n    클래스 내부의 인자는 네임스페이스 안에 딕셔너리 형태로 저장됨\n  - 인스턴스 생성시에도 네임스페이스에 저장된다\n    ```py\n    dir()\n    #['Test', '__builtins__', '__doc__', '__loader__', …]\n    ```\n\n- self 는 해당 객체의 인스턴스를 가르킨다\n- 주소값이 들어간다고 보면 될 것 같다\n\n```py\nclass Test():\n def test():\n  print(\"test1\")\n def test2(self):\n  print(\"test2\")\n print(id(self))\n Test.test()\n a = Test()\n print(a.test())\n #self인자가 없다고 에러 발생\n print(a.test2())\n #test2\n #test2의 주소값 출력\n print(Test.test())\n #a.test()와 달리 에러 발생 안함\n #test1\n```\n\n#### Python concept with id() function.\n\nEverything is an Object in Python\n\n- Even function and class, id()\n\nvariable Assignment and Aliasing\n\n- `hello = 'Hello world'`\n- `world = hello`\n- hello's id equal with world's id\n\n`==` operator, `is` operator\n\n- `==` compares the value\n- `is` compares the identities(i.e. memory addresses)\n\ninteger caching\n\n- -5 ~ 255 are caching\n\nshallow and deep copies\n\n- shallow copy make new object.\n- deep copy make new object and if layer has a nested layer, recursively copy\n\na = 1000 을 해놓고 a+=1을 하면 a의 주소는 변한다\n다시 a = 1000 을 하면 1000의 주소는 할당해제 되고 가비지컬랙터가 수거해가서\n새로운 주소가 할당된다\n할당되었다는 것은 메모리를 차지하고 있다는 것.\n가비지 컬렉터가 수거해가나? 언제? del 명령어가 있다\n-5 에서 256이 기본적으로 할당되어 있어서 아이디가 고정되는 것\n\n#### shallow copy, deep copy\n\n파이썬은 기본적으로 대입 연산 시 값이 아닌 레퍼런스를 참조한다.\n\n- 그냥 대입하면 레퍼런스를 참조해버리는데, 참조를 원하지 않을 때 copy를 쓴다\n- 배열형 객체가 아니라면 새로운 값 입력 시 객체가 변경되므로 copy를 쓸 일이 없다\n\ndeep copy와 shallow copy의 차이는 중첩된 배열처럼 중첩된 구조에서 차이를 보인다.\n\n```py\nimport copy\na = [[1,2,3],[4,5,6]]\nb = a\nc = copy.copy(a)\nd = copy.deepcopy(a)\nid(a) # 0x0000\nid(b) # 0x0000\nid(c) # 0x0600 임의의 값. a와 다르다는 의미\nid(d) # 0x0800 임의의 값. a와 다르다는 의미\n\na[0][0] = 0\nprint(a) # [ [0,2,3], [4,5,6] ]\nprint(b) # [ [0,2,3],[4,5,6] ]\nprint(c) # [ [0,2,3],[4,5,6] ] 중첩 된 곳을 참조해버렸다\nprint(d) # [ [1,2,3],[4,5,6] ]\n\na[0] = [1]\nprint(a) # [ [1],[4,5,6] ]\nprint(b) # [ [1],[4,5,6] ]\nprint(c) # [ [0,2,3],[4,5,6] ]\nprint(d) # [ [1,2,3],[4,5,6] ]\n```\n\ncopy.copy() 는 [:]와 동일하다\n\nis 는 객체를 확인하고, ==은 값을 확인한다\n\n#### Built-in functions\n\n- https://docs.python.org/3/library/functions.html\n- abs max min pow sum round divmod\n- all any filter map sorted zip\n- enumerate range len\n- chr hex ord oct\n- id input isinstance open dir eval\n- str tuple type list int\n\n## Miscellaneous\n\n#### 한글 사용\n\n맨 위에 `#-*- coding:utf-8 -*-` 입력\n\n#### requests\n\n```py\nimport requests\ndata = {'id':'12','password':'12'}\nURL = 'url'\nres = requests.post(URL,data=data)\n```\n\n#### 파일 입출력\n\nF = open('C:\\test.txt')\nF.read() - 전체 입력\nF.readline() - 한 줄만 입력\nF.readlines() - 반환값이 리스트\n.split()\n\n#### 정규식\n\n```\nimport re\n.compile\n.sub(pattern,replace,string,count,flag) - 찾아바꾸기\n.search\n.match\n.findall\n.group\n```\n\n#### lambda python pandas parsing csv\n\n- https://stackoverflow.com/questions/39303912/tfidfvectorizer-in-scikit-learn-valueerror-np-nan-is-an-invalid-document\n\n#### reminder recommend python\n\n- Filtering method\n  - Demographic Filtering\n  - Content Based Filtering\n  - Collaborative Filtering- https://www.kaggle.com/ibtesama/getting-started-with-a-movie-recommendation-system\n- ? find visualization system about csv file for weight manage\n- upload lambda with pandas, scikit-learn\n  - https://medium.com/@korniichuk/lambda-with-pandas-fd81aa2ff25e\n\n#### 비동기 프로그래밍\n\n- asyncio\n  - get_event_loop() - asyncio 시작\n  - loop.run_until_complete() - 이벤트 루프 시작\n- 그린 스레드\n- 스케쥴링을 하드웨어가 아닌 애플리케이션 코드가 대신한다.\n- Gevent 는 그린스레드 + eventlet 이다\n- 비동기 프로그래밍 = non-blocking i/o ?\n\n#### python @classmethod @staticmethod\n\n- classmethod has class argument\n- staticmethod hasn't self. but can use statically\n\n#### \\*args, \\*\\*kwargs\n\n- It is convention args is used to how many argument don’t you know\n- Kwargs is used to how many argument don’t you know key:value data type as dictionary\n- It is no need correct name it can use \\*man, \\*\\*dkdke\n\n#### 표준 라이브러리\n\n파이썬 itertools Collection Counter Dequeue\n\n#### numpy\n\n- array\n\n#### singleton in python\n\n여러 상황에서 하나의 객체를 부를 때 동일한 객체를 부르기 위해 싱글턴패턴을 사용하는데 자바에서는 스태틱으로 정적할당을 해주는데 파이썬에서는 어떻게 하지?\n\n- @staticmethod\n\n싱글턴을 안쓰고 그냥 정적변수 또는 전역변수로 써도 같은 역할을 할 수 있지만 싱글턴은 더욱 확장 가능한 객체로 꾸밀 수 있다\n\n#### if need initial python dependency using this\n\nRUN pip3 install --no-cache-dir pandas sklearn requests\nRUN pip3 freeze > requirments.txt\n\n#### pickling and unpickling?\n\npython 객체를 직렬화해서 파일에 저장하고 이용하는 것\n\n- serialize해서 TCP 등으로 전송하기 좋다\n- 여러 파일 간 공유하기 좋다\n- 프로그램 상태를 저장해서 쓸 수 있다\n- https://www.geeksforgeeks.org/understanding-python-pickling-example/\n- http://t.ly/xAQL\n\n#### json dumps, loads\n\ndumps - python object -> json\nloads - json -> python object\n\n## Defects\n\nwhat is the 3 worst defects python\n\n- interpreter(and dynamic assignment), I like interpreter, but It has limit\n- don't use python2 with 3 하위 호환성\n- in web browser, nodejs is better\n\n## WTF\n\nhttps://github.com/satwikkansal/wtfpython\n\n```py\na = 1\nb = 1\n# a address = 0x94ce80\n# b address = 0x94ce80\n```\n\n파이썬에서 -5 부터 256까지는 객체로서 미리 할당되어있다\n\n```py\na = []\nb = []\n# a address = 0x7feaaaea6540\n# b address = 0x7feaaaea65c0\nb = [1,2,3]\n# b address = 0x7feaaaea65e0\nd = []\n# d address = 0x7feaaaea65c0\nb.append([0,1,2,3,4,5,6,7,8,9])\n# b address over d ???\n```\n\n## Reference\n\n- [generator](https://realpython.com/introduction-to-python-generators/) -[yield](https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do/231855#231855)\n- [한글 인코딩](https://redscreen.tistory.com/163)\n\n---\n\n# Golang\n\n## Philosophy\n\n- 패키지는 하나의 목적만을 달성합니다\n- 에러는 명시적으로 처리합니다\n- 빨리 반환하고 깊은 들여쓰기를 피합니다\n- 동시성은 호출자에게 맡깁니다\n- 고루틴 시작 전, 언제 멈출지 알아야 합니다\n- 패키지 레벨 상태를 사용하지 않습니다\n- 단순함은 중요합니다\n- 패키지 API의 동작을 고정하기 위한 테스트를 작성합니다\n- 느리다고 생각된다면, 벤치마크하여 이를 증명합니다\n- 중용은 미덕입니다\n- 유지보수성은 가치있습니다\n- https://docs.python.org/3/library/functions.html\n\n## Key point\n\n- golang is concurrency friendly, I like it.\n- garbage collection\n- pointer vs reference\n- interface\n- goroutine\n\n- defer - panic - recover : check source\n- garbage collection\n\n#### golang has no class\n\n#### Specification\n\n- new(File) and &File{} are equivalent\n\n#### Auto Rebuild\n\n- [CompileDaemon](https://github.com/githubnemo/CompileDaemon)\n- using docker cmd, complicit port\n- [gin](https://github.com/codegangsta/gin)\n- Good Working\n\n#### go folder management\n\n- what is the better?\n- folder separate\n- only one folder\n\n#### goroutine\n\nif main function too short. it finish without running goroutine. so time.Sleep needed\n\n#### go http\n\nServeHTTP와 핸들러에 대한 이해\n\n![http](../img/http.svg)\n\nmux = multiplexer\n\n- 멀티플렉서는 패턴 처리를 여러개 한다는 의미다\n\nListen - (Handler - ServeHTTP) - Serve?\n\n- mux = handler, 서버가 serve를 할 때 mux를 받는데, 안넣으면 디폴트 mux를 쓴다.\n- mux는 ServeHTTP를 구현해야 한다.\n- handler interface는 http 패키지에서 정의되있는 것을 보면 ServeHTTP를 갖는\n  인터페이스다. 그래서 ServeHTTP만 가지고 있으면 핸들러로 쳐준다.\n\n그러면 ServeHTTP는 어떤 동작을 해야 하는가\n\n- mux라 함은 입력값을 받아서 응답을 해주는 것이다.\n- URL을 받아 적합한 연결통로를 찾아서 넘겨준다.\n- ServeHTTP의 역할이 mux의 역할\n- 요청을 패턴이 일치하는 핸들러를 찾아서 전달해주는 것.\n\nhandler, handle, handleFunc, handlerFunc 차이 확인\n\n- handler는 ServeHTTP를 구현하는 interface, response request 활용 가능\n- handle은 패턴과 handler를 받아서 쓰는 handler의 wrapper 느낌\n- handleFunc는 ServeHTTP를 구현한 객체들을 일일이 생성하는 것이\n  불편해서 만들어졌다고 하는데, 잘 모르겠다\n  - handleFunc는 두번째 인자로 받는 func을 ServeHTTP가 실행하도록 해놓은\n    것 뿐이다. (이 func는 writer와 request를 인자로 가져야 하긴 한다)\n  - ServeHTTP가 writer와 request를 가져야 하니까 헷갈렸다.\n- handle과 handleFunc는 둘다 패턴과 핸들러를 받아 처리한다.\n- handle은 handler를 받고, handleFunc는 일반함수를 handler로 wrapping 해준다.\n- handleFunc이 패턴과 함수를 처리한다. http에서는 디폴트 mux에\n  연결해준다.\n- handlerFunc는 일반 함수를 handler 함수로 wrapping 해준다\n\n```go\nhttp.HandleFunc(\"/\", func())\nhttp.ListenAndServe(\":8080\", nil)\n\nhttp.Handle(\"/\", handler)\nhttp.ListenAndServe(\":8080\", nil)\n```\n\n즉 요청을 받으면 ServeHTTP가 실행되고 그 뒤에 원하는 비즈니스 로직을 돌린다.\n\n- gin 내부를 확인해봐도 ServeHTTP가 라우팅으로 연결해주고 있다.\n- https://dejavuqa.tistory.com/314\n\n## Library\n\n#### graphql-go\n\ngqlgen\n\nNeed update just 2 file\n\n1. `resolver.go` -- implement function\n   or `schema.resolvers.go`\n2. `schema.graphqls` -- data structure setting\n\nauto generate to gqlgen\n\n- `model.go`\n- `generated.go`\n\n## [measure execution time in go](https://coderwall.com/p/cp5fya/measuring-execution-time-in-go)\n\n#### golang\n\ngolang library, 실행파일, 서버\n\nbuild\nrun\ninstall - build 시 캐시\n`mod init <directory>`\n\n- go test 하면 모듈 업데이트 된다\n- - go mod tidy 안쓰는 모듈 정리\n    클론 한 패키지 처음 세팅 시 js에서는 npm install 해서 바로 셋팅된다\n    go에서는 go mod tidy 하고, test ./... 해서 셋팅한다\n\npackage 명이 main 인 것은 빌드 시 실행파일로 생성된다\n라이브러리는 폴더명과 같이 package 명을 입력해준다\n실행파일에서도 라이브러리를 가져다 쓸텐데, 같은 프로젝트에서 만든 라이브러리라면\n상대주소 말고 GOPATH/src 밑의 주소를 입력해준다\n\nmain 파일을 여러 개 만들고 싶어하는 사람들이 많아서 cmd라는 폴더 안에 폴더를 또\n만들어서 여러 개의 실행파일을 만들게 레이아웃을 제안하고 있다\n\n---\n\n- redis\n  - https://medium.com/@gilcrest_65433/basic-redis-examples-with-go-a3348a12878e\n- mux handler - http handler what's different\n- update nav css\n- html render\n  - static\n  - template\n  - setting static -> using link `style.css` -> `/style.css`\n  - ! go module upgrade fail\n  - blackfriday not match path\n    - `gopkg.in/russross` -> `github.com/russross`\n    - https://github.com/russross/blackfriday/issues/491\n  - path.Join(\"app/index.html\") not found\n- ! cannot access app directory in docker\n  - current directory is /src/app, and execute server using ../server.go\n    Then, if i want use app-folder directory is ./ or absolute directory\n- use struct in same directory other file\n  - `go run a.go b.go` or `go run *.go` or `go install`-run binary\n\n## wasm\n\n`GOOS=js GOARCH=wasm go build -o main.wasm main.go`\n\n- ! dial TCP: Protocol not available\n  - WASM app don't allow HTTP\n  - how to access Redis - server\n- test -> upload mdfile -> show post\n  - how to automation upload\n- what's different between wasm and was\n  - javascript to wasm language\n- get file\n  - https://github.com/mattn/golang-wasm-example/blob/master/main.go\n  - render local path -> URL\n- use for HTTP Get\n  - use goroutine\n  - https://github.com/golang/go/issues/26382\n- which protocol use to render post? WASM or HTTP\n- what is strength for WASM\n  - use server language in browser\n  - client-side rendering\n- how to use wasm power\n  - compiler\n  - game\n  - calculator\n- tinygo\n- ! Uncaught (in promise) TypeError: WebAssembly.instantiate(): Import #0 module=\"wasi_unstable\" error: module is not an object or function\n- TODO\n- https://github.com/golang/go/wiki/WebAssembly\n\n#### defer\n\ndefer should have know when close.\nObject return something?\ndefer is so great idea\nwow...\nit can more light code\nafter error\ngo has good error handling method\n\n- in python, try catch finally\n\ncalling g\nprinting g 0\nprinting g 1\nprinting g 2\nprinting g 3\npanicking\n//4\n//defer in g 4\ndefer in g 3\ndefer in g 2\ndefer in g 1\ndefer in g 0\nrecovered in f\n//returned normally from g\nreturned normally from f\n\n#### golang context\n\ncontext는 어떨때 사용하면 좋을까\nDB풀 유지하는데는 사용 안하고\nAPI 쓰는데는 사용하는 것 같은데...\n\n- 보안 정보, 분석 정보, 데드라인, 취소 신호, 프로세스 경계 정보등을 가진다\n- 대부분 함수 첫번째 인자로 전달\n- 구조체에 넣지 말고 함수 인자로 전달\n- 커스텀 타입으로 만들지말고 그냥 표준을 써라\n- https://medium.com/@laeshiny/go-code-review-comments-%EC%A0%95%EB%A6%AC-47d05fdb49f6\n\n## Defects\n\n#### 고 모듈에서 버전관리가 별로다\n\n시멘틱 버저닝을 지원하지 않고 패키지에 v2처럼 버저닝을 하기를 권장한다.\njs에서는 package.json으로 자체 모듈 버저닝뿐 아니라 의존성 관리도 유연하게 할 수 있다.\n그래서 시멘틱 버저닝과 체인지로그 관리도 쉽게 할 수 있는데, go는 안된다.\n\n#### 패키지 관리\n\nGolang을 예로 들면, 1.x 버전을 사용하고 있는데 2.x버전이 나오면 자동 업데이트를\n하면 안되고 그렇다고 그냥 방치하거나 수시로 들어가서 확인하는 것도 번거롭다.\n그렇다면 자신의 레파지토리에 있는 라이브러리들을 읽어서 업데이트 하라고 알림\n같은게 오면 좋겠다. 아 그러면 CI 작업 시에 알려주면 되겠다.\nnpm에서는 패키지 설치할 때 알려줄 수 있다. 근데 이러면 설치랑 업데이트가 섞여서\n알아보기 힘들지 않을까\n\nGo에서 패키지 배포를 해봐야겠다\nnote-server/server와\nnote-server/data-store를 한 레파지토리에서 따로 임포트해서 쓸 수 있을까?\n아니면 data-store를 가져오면 딴 것도 같이 가져와질까?\n\n- 상위 레벨에서 깃 레파지토리를 가져온다. 버전도 함께.\n\n고의 장점이 깃에만 올라가있으면 가져올 수 있다는 것이다.\n\n#### go library\n\n라이브러리를 각각 레포를 만들면 너무 번거롭지 않을까\njson으로 리턴을 하고, json으로 입력을 받게 하고 싶다.\n다른 형식이 필요하면 어댑터를 붙이면 될 것이고...\n\n#### vs rust\n\n## Reference\n\n- [Go에서 DIP](https://simplear.tistory.com/24)\n- [common mistakes in go](http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/?ref=hackernoon.com)\n- [Go Hacking.md](https://novemberde.github.io/golang/2021/04/05/Golang-HACKING.html)\n- [ultimate-go](https://github.com/ultimate-go-korean/translation)\n- [Golang과 Clean Architecture](https://blog.puppyloper.com/menus/Golang/articles/Golang%EA%B3%BC%20Clean%20Architecture)\n- [Go error handling](https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully)\n  - (번역) http://cloudrain21.com/golang-graceful-error-handling\n- [Go Standard Layout](https://github.com/golang-standards/project-layout/blob/master/README_ko.md)\n- http://www.dogfootlife.com/archives/452\n- https://umi0410.github.io/blog/golang/go-mutex-semaphore/\n\n---\n\n# 다트 비동기\n\n- 기초\n  - 동기/비동기 차이\n  - 호출 사례\n  - 블록/논블록, 동기/비동기\n  - 다트는 싱글 스레드 환경 (정확히는 싱글 isolate가 기본값이라는 것 같음)\n- 사용법\n  - Future로 리턴값 감싸기, 뒤에는 async 붙여주기\n  - `Future<int> sum(int a, int b) async {}`\n  - 호출 시 await 사용\n  - `final result = await sum(1, 2)`\n  - await 대신 then 도 사용 가능\n- async vs isolate\n  - isolate를 쓰면 스레드가 별개로 생성되서 동작한다고 한다 (병렬 동작 가능)\n  - [ ] 이게 어떻게 구현되어있는거지?\n    - 설계 자체를 스레드 기반이 아니라 isolate 기반으로 해서 이걸 여러개 만들 수 있게 했다. 대신 스레드처럼 서로 자원 공유하지 않고 독립적으로 구성된다\n  - js와 같이 이벤트루프와 이벤트큐가 있다\n- event loop\n  - event queue\n  - microtask queue\n  - future가 completed 인 경우 microtask queue에 then 콜백이 들어간다. future.value, future.sync 인 경우 그렇다.\n    - future value는 리턴값이 결과값이라 future 객체가 아니다\n    - future sync는 동기적으로 실행 후 리턴값을 future.value로 받는다\n- future와 함께 쓰는 함수\n  - wait : 리스트로 함수를 받아서 모두 완료되면 리턴\n  - then, whenComplete : 에러 발생 시 then은 실행안함\n  - any : 성공하든 실패하든 먼저 끝난걸 리턴\n- stream\n  - future는 결과값을 모아서 보여주고\n  - stream은 결과값이 생성중에도 계속 컨트롤 할 수 있다\n- 호출 실패 되는 경우\n  - 동기일때 비동기 호출 시 응답값이 필요할 때\n\n## android\n\n- flutter 설치, android studio 설치\n- flutter 플러그인 설치\n- https://flutter-ko.dev/docs/get-started/codelab\n- 첫 실행 시 license 에러\n  - android 설치 시 java도 설치하므로 java home을 따로 설치 안하고 sdk\n    command-line tools를 설치한다.\n  - https://www.androidhuman.com/2021-06-02-flutter_android_license_noclassdeffound\n- flutter doctor\n\n---\n\n# Functional_Programming\n\n불변성\n\n#### 함수형 언어\n\n함수형언어를 쓰면 코드 읽고 추론하기가 쉬워진다?\n\n- https://www.youtube.com/watch?v=H6JxxWL6bJI\n\n수학적이면 완성도가 높아지는 것 같다. 이런 점에서 함수형 표현을 쓰는게 좋은거 같다\n\n#### haskell\n\n- basic function\n- head [2, 3, 4] -- 2, [2] -- 2\n- tail [2, 3, 4] -- [3, 4], [2] -- []\n- init [2, 3, 4] -- [2, 3], [2] -- []\n- last [2, 3, 4] -- 4, [2] -- 2\n- take 2 [2, 3, 4] -- [2, 3]\n- drop 2 [2, 3, 4] -- [4]\n- !!\n- product\n- ++\n- reverse\n- length\n- function rule\n- f a+b -- f(a) + b\n- f a b -- f(x, y) -- not working -- using with currying\n- f (a,b) -- f(a,b)\n- f (a+b) -- f(a+b)\n- f (g x) -- f(g(x))\n- f x (g y) -- f(x g(y))\n- f x _ g y -- f(x) _ g(y)\n\n```\nsum ns `div` length ns\n= div (sum ns) (length ns)\n```\n\n- Currying\n- `add :: Int -> (Int -> Int)` = `add :: Int -> Int -> Int`\n\n#### First Object(Class) Citizen\n\n#### High-order function\n\n#### Pure function\n\n#### Immutable\n\n#### declarative\n\n#### Currying\n\n#### Memoization\n\n#### Composition\n\n#### Recursion\n\n#### Monad\n\n#### etc\n\n모나드에서 한 함수의 출력이 다음의 입력이 되는 것은\n[디미터 법칙](../About_Development#지금의 메소드 체이닝과 디미터 법칙의 차이)을 위반하는 전형적인 사례가 아닌가!?\n\n고계함수는 독립적이다? 함수를 받아야하는 지점에서 이미 종속적인 것 아닌가?\n\n클로저를 쓴 함수에서, 어떻게 외부함수가 클로저에 변수를 할당할 수 있는거지?\n\n순수함수를 쓴다고 해서 스레드 세이프하지는 않은 것 같다\n\n```\n# 순수함수 아님\nfunc PlusOne(i int) int {\n    return i += 1\n}\n# 순수함수 맞음\nfunc PlusOne(i int) int {\n    return i + 1\n}\n```\n\n여기서 i를 공유하면 값이 원하는 대로 나오지 않을 수 있다.\n\n- 순수함수는 오로지 입력값에 의해서만 동작하므로 충돌 조건이 없다고 한다\n\n그래서 불변 객체를 쓰고, 새로운 객체를 만들어서 해결하려고 한다\n그렇다면 왜 순수함수가 중요할까?\n\n1. 사이드 이펙트가 없다\n2. 결정성이 있다 (= 멱등성이 있다)\n3. 테스트가 쉽다\n\n#### docker haskell\n\n- docker-compose need start point\n- Dockerfile need build image\n- how to make easy build\n- haskell init spent too long time but docker not executable..\n\n---\n\n# Javascript\n\n## react function vs class\n\nfunction 안에 function을 쓰면 렌더링 할 때 다시 렌더링해서 성능 저하 우려가 있다\n`useCallback`이라는 함수를 쓰면 재렌더링을 막아준다.\n근데 아예 밖으로 빼도 된다.\n\n- https://stackoverflow.com/questions/46138145/functions-in-stateless-components\n- useState, useEffect, useCallback 등이 지원된다\n\nclass component는 this나 props를 넘겨주는 작업이 있어서 거추장스럽다\n기존에는 react의 lifecycle을 사용하려면 class를 써야했는데, hooks(useEffect\n등)이 등장하면서 해결되었고, 함수형 컴포넌트를 권장하고 있다.\n\n## javascript callback\n\n콜백함수\n\n- 함수의 호출 시점을 사용자가 아닌 프로그램으로(시스템에서) 결정하는 함수\n\n클로저\n\n- 자신을 호출한 함수 범위의 변수와 자신 내부의 지역변수를 모두 사용할 수 있는 상태\n- 자신을 호출한 함수 범위의 변수를 내부에서 사용할 수 있다는 것이 포인트\n- 호출 시의 컨텍스트를 저장하고 싶을 때 사용한다\n- js에서 커링을 구현할 때 사용된다\n\n컨텍스트\n\n- global context, function context, eval context\n- 실행 컨텍스트\n\nPromise\n\n- 콜백함수를 깔끔하게 표현하는 방식\n- function().then().catch().then() 의 형식으로 사용한다\n- then() 안에서\n\n```\nthen(function(){\n\n},\n\nfunction(){\n\n})\n```\n\n- 로 작성 시 첫번째 function은 성공했을 시 실행되고,\n  두번째 function은 실패했을 시 실행되게 된다\n- fulfill, pending 등의 상태가 있으며, 상태에 따라 실행 가능해진다\n- promise 를 호출하려면 리턴이 promise 이거나 promise로 생성되어야 한다\n\n에로우 표현법\n\n- `=>` 로 표현해서 `function(){return}` 을 명시하지 않도록 해주는 표현법\n- `var x = (y) => y*y;`\n- this 는 호출된 스코프에서 상속받는다\n\n#### 실행 컨텍스트 생성 시 렉시컬 스코프 내의 선언이 끌어올려 지는 게 호이스팅이다\n\n[\"실행 컨텍스트 생성 시 렉시컬 스코프 내의 선언이 끌어올려 지는 게 호이스팅이다\"](https://medium.com/@limsungmook/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%99%9C-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EC%9D%84-%EC%84%A0%ED%83%9D%ED%96%88%EC%9D%84%EA%B9%8C-997f985adb42#:~:text=%EC%8B%A4%ED%96%89%20%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%20%EC%83%9D%EC%84%B1%20%EC%8B%9C%20%EB%A0%89%EC%8B%9C%EC%BB%AC%20%EC%8A%A4%EC%BD%94%ED%94%84%20%EB%82%B4%EC%9D%98%20%EC%84%A0%EC%96%B8%EC%9D%B4%20%EB%81%8C%EC%96%B4%EC%98%AC%EB%A0%A4%20%EC%A7%80%EB%8A%94%20%EA%B2%8C%20%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85%EC%9D%B4%EB%8B%A4%27%EB%9E%80)\n\n#### 'int' is not an object, 'Integer' is.\n\n[파이썬 3에는 오버플로우가 없다?](t.ly/flKE)\n\n## object\n\n- first citizen function\n  - callable like value\n- value != object?\n- class != object?\n- int\n  - int in c, int size is 4bytes = 2^32, it is fix.\n- (Data) types\n- int is class? types?\n- type != object?\n\n## C++ 50 계명 - 이것만은 기억하자.\n\n[HAMA 블로그](https://hamait.tistory.com/1043?category=76104)\n\n#### generic\n\nc++ 템플릿\nc# 제네릭\n\n타입 고정을 하는 강타입 언어에서 여러 타입을 허용하게 하고 싶을 때 오버로딩을\n통해 여러 함수를 만들어야 하는데 그렇기 되면 중복이 많아지므로 여러 타입을\n받는 일반 클래스, 함수를 만드는 방식\n\n정적 형지정을 동적 형언어처럼 쓰려고 만든건가 싶다\n\n#### typescript\n\n한 파일 안에 타입을 적어놓음으로써 변수 타입 확인을 쉽게 할 수 있다?\n파일이 필요한 내용만 최소한 있는 것이 좋을까\n관련 내용은 참조할 수 있게 같이 있는게 좋을까\n\n#### delegate\n\n- 메소드와 동일한 타입의 델리게이트를 만든다 (매개변수, 리턴타입)\n  - 제네릭(템플릿)을 이용해서 타입 일반화를 할 수 있다\n- 콜백함수? 클로저 같은 느낌인가\n- 클로저를 이용해서 커링 함수 만드는 것과 비슷하게 쓰인다\n  - C#에서 람다나 클로저를 구현할 때 delegate를 이용해서 구현한다\n- += -= 을 이용해서 함수를 연결 시킬 수 있다\n\n#### C# linq\n\n- SQL문처럼 C# 안에서 쿼리를 할 수 있는 느낌인데,\n  선언형으로 호출하는 형식이라 C# 의 함수 구현체 같은 느낌이 된다.\n\n#### 데이터 타입을 명시하는 것의 메리트\n\n- 사전 체크를 안해도 항상 그 형태가 온다는 것을 보장해준다\n- 개발자의 실수를 개발 단계에서 줄여준다.\n\n## code\n\n- 코드만으로 얘기할 수 있도록 보기 좋은 코드\n- 문서화는 중요하다 코드만 봐도 되게 하면 더 좋겠지만\n- 주석 대신 프로그램만 읽어서 이해가 되도록\n  - 하지만 주석은 필요하다\n- 직관적으로 쓴다\n- 코드가 간결해야 한다\n- 클린코드를 지향하는 이유는 모든 서비스는 단번에 완성도를 100으로 만들 수 없고 유지보수와 기능추가가 반드시 필요하기 때문에 이를 편하게 하기 위함이다.\n\n#### 함수를 거쳐서 호출하는 것과 바로 호출하는 것 속도 차이 비교\n\npython\n\n- 10000회 수행 시\n- 함수를 타면 3ms,\n- 함수를 안타면 2ms,\n- 분기를 안타면 1ms,\n\n1000000회 수행 시\n\n- 함수를 타면 140ms,\n- 함수를 타는데 할당 없이 바로 호출하면 130ms,\n- 함수를 안타면 60ms,\n- 분기를 안타면 40~80ms\n\ngolang\n\n- 1000000회 수행 시\n- 함수를 타면 0.46ms,\n\n#### when useful pointer?\n\n- 큰 자료형을 옮길 때 객체를 넘기는 것보다 메모리 참조하도록 하는게 가볍다\n- 메모리에 직접 접근해서 작업할 필요가 있는 경우가 있다\n- 포인터에 직접 접근하여 데이터를 바꾸는 방식은 변수를 처음 할당만 하고 바꾸지 않는 함수형 프로그래밍 관점에서는 사이드이펙트가 큰 안좋은 방식이 아닌가? 함수형언어에서는 포인터가 없나?\n  - 함수형 언어는 불변성을 이용하는 것이고, 포인터는 포인터대로의 용도가 있다\n  - 트레이드 오프지, 어느 하나가 우수한 것이 아니다\n  - 포인터를 이용해서도 동시성을 구현해서 잘 이용한다\n"},{"headings":[{"value":"Summary"},{"value":"CPU"},{"value":"process"},{"value":"Process, Thread"},{"value":"MEMORY"},{"value":"C 언어가 메모리를 사용하는 방식"},{"value":"memory management"},{"value":"메모리와 cpu 캐시는 구조가 다르다"},{"value":"Cache"},{"value":"cache"},{"value":"IPC"},{"value":"Disk I/O"},{"value":"세마포어(신호기)"},{"value":"IOCP(input/output Completion Port)"},{"value":"OS"},{"value":"In OS, micro kernel vs monolithic kernel"}],"fields":{"slug":"/computer_architecture/"},"rawMarkdownBody":"\n## Summary\n\n디스크에 있는 프로그램을 메모리로 부르고,\n메모리에 있는 데이터를 CPU가 읽어가면서 프로그램이 동작한다.\n\n## CPU\n\n불 대수 -> 폰 노이만\nTransistor -> Flipflop -> IC -> CPU or RAM\n\n- AND OR XOR\n- ARU MBR MAR -- John von neumann\n\nlow level - Assembly - complier - high level language\n\n- low level (CISC - intel, RISC - arm)\n  - 기계어는 CPU와 1:1 관계라 어셈블리어가 기계어 구조에 맞춰 변환되면 CPU는 동작한다.\n- USER want to running program: HDD -> RAM -> CPU (process) -> OUTPUT\n- really running CPU with RAM and process scheduler\n\n#### process\n\n디스크에 저장된 프로그램이 코드와 데이터를 갖고 있다.\n이를 실행시키면 프로세스를 RAM에 적재하면서 코드와 데이터를 가져오고, 스택과\n힙을 할당 받는다.\n코드를 읽는 것은 CPU에서 메모리를 불러와 명령을 수행한다.\n\n#### Process, Thread\n\nin 1970, computer has only 1 process, can run one program. process can make\nrun multiple program. but people need multi-work. so multi-processing\ninvented.\n\n[[Software#History]]\n\n---\n\n## MEMORY\n\n#### C 언어가 메모리를 사용하는 방식\n\n- Code - Code text, 기계어(Machine Code) ex) RISC\n- Data - Global, Const variable\n- Stack - region(local) variable, function\n- Heap - dynamic variable\n  - 힙 영역에 malloc으로 생성한 동적 변수가 들어가고 이 주소값을 잃어버리면 메모리\n    릭이 발생한다고 한다. (다른 언어에서는 new로 할당하기도 함)\n\n자바는 JVM 위에서 동작하고 메모리 동작 방식이 다르다.\n\n파이썬, javascript 같은 인터프리터 언어도 동작이 다르다.\n\n[[Data_Structure]]\n\n#### memory management\n\n- memory leak\n- internal fragmentation: 100 size but only use 99. 1 is fragmentation.\n- External fragmentation: 100 -- 100 -- 0 -- 100 -- 100, 0 is fragmentation.\n- Paging: memory separate to static size(it called page) by logical memory in\n  physical memory.\n- Segmentation: memory separate dynamic size. even though physical location.\n\n#### 메모리와 cpu 캐시는 구조가 다르다\n\n메모리는 dram, 캐시는 sram\ncpu와 메모리의 발전 속도가 차이나서 지금도 차이가 있다\n\n메모리는 cpu에 비해 데이터 보관이 필요하다\n\n## Cache\n\n- SRAM(static) 으로 만들어진다\n- 일반적으로 사용되는 RAM은 DRAM이다 (dynamic random access memory)\n- 캐시는 키:벨류 타입의 해시테이블로 구성되어 있어서 시간복잡도가 O(1)이다\n\n#### cache\n\n- batch\n- if need store log to db, firstly store log to redis, and batch to db\n\n## IPC\n\nsocket, file handling, pipe, message queue, semaphore, shared memory\n\n#### Disk I/O\n\n#### 세마포어(신호기)\n\nit's like a counter for check the processor is working.\nby dijkstra for multiprocessor's deadlock\nit looks like golang's waitgroup\n\nmutex is binary semaphore for thread.\nGIL is mutex for python to prevent use object by multi thread.\n\n- 멀티 스레드 사용 시 스레드들의 간섭을 막기 위해 Mutex라는 키를 이용하여 접근을 제어한다.\n- 한 스레드가 mutex를 lock 시키면 lock을 해제할 때까지 다른 스레드는 작업을 하지 못하게 해준다.\n\n#### IOCP(input/output Completion Port)\n\nepoll\nkqueue\nit is for asynchronization I/O.\nevery computer use I/O for computing.\nnowadays computer has multiple processor. So windows has IOCP, linux has epoll.\nnetworking also used with socket generally.\n\n## OS\n\n- multics - unix - minix - linux\n- zenix - Macintosh - windows\n- unix, mac, windows are not first os. but it is now most used OS.\n\n#### In OS, micro kernel vs monolithic kernel\n\n- unix, linux = monolithic. base on kernel\n- micro kernel is base on each process. and communicate with other messenger\n- micro kernel can use general hardware. linux made for 1 target hardware.\n  it is good to use more hardware performance. but it depends on 1 hardware.\n  micro kernel's problem is don't use hardware performance efficiently.\n  micro kernel has portability.\n\n[[Software#desktop os history]]\n"},{"headings":[{"value":"How to choice Data Structure"},{"value":"Base"},{"value":"search, add, remove, sort"},{"value":"Data Type"},{"value":"Arrays"},{"value":"Linked lists"},{"value":"Hash Table"},{"value":"Graphs"},{"value":"Binary trees"},{"value":"Maps"},{"value":"Stack, Queue, Heap"},{"value":"Algorithm"},{"value":"DFS"},{"value":"BFS"},{"value":"Using Hash Tables"},{"value":"Variables/Pointers manipulation"},{"value":"reverse linked list (duplicates, removing duplicates)"},{"value":"Binary search"},{"value":"sorting fundamentals"},{"value":"Greedy algorithms"},{"value":"Recursion"},{"value":"Divide and conquer"},{"value":"Dynamic Programming and memoization"},{"value":"Graph traversal"},{"value":"순열, 조합"},{"value":"Binary"},{"value":"쿼드 트리 뒤집기"},{"value":"알고리즘"},{"value":"우선순위 큐"},{"value":"algorithm"},{"value":"algorithm 예외 체크"},{"value":"알고리즘"},{"value":"Others"},{"value":"Golang"},{"value":"Python"},{"value":"Redis"},{"value":"정렬"},{"value":"분할정복"},{"value":"재귀 vs 분할 정복 vs 동적 계획법"},{"value":"algorithm"},{"value":"linked list"},{"value":"인덱스"},{"value":"해시 테이블"},{"value":"검색 엔진"},{"value":"reference"}],"fields":{"slug":"/data_structure/"},"rawMarkdownBody":"\n## How to choice Data Structure\n\n- how to access\n- memory space\n- ordered\n- concurrency\n- duplicates\n- mutable\n- read, write frequency\n- size\n- 데이터 분포, 입출력빈도\n\n## Base\n\n#### search, add, remove, sort\n\n#### Data Type\n\n- int, char, long\n- memory assign to fix size\n\n```c\n// C\nint a = 1\nint b = 2\n// a address = 0x0000\n// b address = 0x0004\n```\n\n#### Arrays\n\n- memory address sequentially called by fixed size\n- in Python, but flexible list\n- add or remove element then other element need shift. it is slow.\n- search O(1), add, remove O(n)\n- also called by List\n- von neumann used array in 1945, for merge sort\n\n```c\n// C\nint a[2]\nint b[2]\n// a address = 0x0000\n// b address = 0x0008\n```\n\n```py\n# python\na = 1\nb = 2\nc = []\nd = []\n# a address = 0x000080\n# b address = 0x000080 a == b\n# c address = 0x000000000040\n# d address = 0x0000000000c0 c size is 80\n```\n\n#### Linked lists\n\n- So linked list is for solve this problem. -> reduce ADD, REMOVE time.\n  - but linked list need time to find behavior.\n  - add, remove O(1)\n  - but search O(n) -> search O(n) means it is add to be O(n) as well\n  - linked list is based on Trees\n- list has limit extend size (delete, insert)\n- benefit: insert time\n- disadvantages: finding. n(th) node takes time to n[O(n)]\n\n```py\nclass Node:\n def __init__(self, data):\n  self.data = data\n  self.next = None\n\nclass LinkedList:\n def __init__(self):\n  node =\n```\n\n```go\ntype Node struct {\n data int\n next Node\n}\n```\n\n```\na1 = new Node(5)\na1.insertAfter(10)\ninsertAfter(int item) {\n  next = new Node(item, next)\n}\n//a1 => item 5, next (item 10, next)\n```\n\n#### Hash Table\n\n- Hash by Hash function\n- Collision management is key issue\n- If hash function is good, then search speed is O(1), most quick\n\n#### Graphs\n\n- edge, vertex(point)\n\n#### Binary trees\n\n#### Maps\n\n- why need map type?\n\n#### Stack, Queue, Heap\n\n[[Computer_Architecture#MEMORY]]\n메모리에서의 용어, 자료구조에서의 용어가 각각 있다.\n\n- 스택\n- 동적\n- 스택은 프로그램이 자동으로 사용하는 임시 메모리 영역\n- 지역변수는 스택에 저장\n- 버퍼메모리 사용시 스택은 후입선출\n- 함수를 호출한 후에 원래 자리로 돌아오려면 원래 자리를 저장해 둬야 되는데 그곳이 스택\n- 힙\n- 정적\n- 전역변수와 static 변수 등은 메모리의 데이터 영역에 저장됨\n- 힙은 프로그래머가 스스로 할당한 메모리 영역\n- 버퍼메모리 사용시 힙은 선입선출\n\n자료구조에서의 스택,큐\n\n- 스택 : 후입선출하는 구조, 깊이 우선 탐색\n- 큐 : 선입 선출, 너비 우선 탐색\n  - list isn't good make queue. delete need moving every node. it is slow O(n)\n- 힙 : 완전 이진 트리\n\n## Algorithm\n\n- sort, search\n- 무결성,복잡도 분석, 그래프 알고리즘, np-완비\n\n#### DFS\n\n#### BFS\n\n```py\ndef bfs(graph, root):\n    visited = set()\n    queue = deque([root])\n    while queue:\n        child = queue.popleft()\n        for neighbour in graph[child]:\n            if neighbour not in visited:\n                visited.add(neighbour)\n                queue.append(neighbour)\n```\n\n![[image.gif]]\n\n\n사전 지식이 필요\n- 트리, 그래프 (링크드리스트)\n- 큐\n\n1차원 --> 2차원\n\n어떻게 트리 구조나 그래프 구조가 들어올 문제라는 것을 알 수 있을까\n- 경로탐색\n- 네트워크\n\n개발하면서 궁금했던거\n- 입력값이 다 2차원 배열로 들어오나? -> 아닐수도 있음. 임의로 2차원배열의 경로형태로 만들어서 풀이를 하는 경우도 있음\n- 현재위치를 어떻게 기억하지? -> 트리는 일반적으로 방향이 있음. 방향이 없다면 전방향에서 플래그값으로 확인 필요\n- 이미 들렸던 곳을 어떻게 체크하지?\n- 입력값이 2차원 배열이 아닐때 2차원 배열 구조로 쉽게 만드는 법\n- 또는 2차원 배열로 만드는게 좋겠다는 걸 알아차릴 수 있는 방법\n\n\n```js\nclass Queue {\n  constructor() {\n    this._arr = []; \n  }\n  enqueue(item) {\n    this._arr.push(item); \n  } \n  dequeue() { \n    return this._arr.shift(); \n  } \n} \nconst queue = new Queue(); \nqueue.enqueue(1);\nqueue.enqueue(2);\nqueue.enqueue(3);\nqueue.dequeue(); // 1\n```\n\n#### Using Hash Tables\n\n#### Variables/Pointers manipulation\n\n#### reverse linked list (duplicates, removing duplicates)\n\n#### Binary search\n\n#### sorting fundamentals\n\n- quicksort (1959 by tony hoare)\n- mergesort (1945 by von neumann)\n  - 나누고 합치는 정렬\n  - 가장 작게 나누고 정렬 후 한 단위씩 합치면서 재정렬한다. O(n log n)\n- bubblesort\n  - 맨 앞부터 인접한 두 원소 비교 후 큰 숫자를 뒤로 옮기면서 맨 뒤에 제일\n    큰 숫자가 가게 된다. 맨 앞까지 전체 순회 반복.\n    간단하지만 성능상 별로 좋지 않다 O(n^2)\n\n#### Greedy algorithms\n\n#### Recursion\n\n#### Divide and conquer\n\n- quick, merge sort\n\n#### Dynamic Programming and memoization\n\n- save previous result, O(n)\n- solving to make problem to subproblem, it's like a Divide and Conquer, but\n  difference is DP use result many time, but DaC use one time.\n  DP for memoization, DaC for problem divide(n/2).\n- DP can use in overlapping subproblem(fibonacci)\n- memoization need lots of space complexiety, sliding window can make better.\n\n#### Graph traversal\n\n- Dijkstra algorithm : find shortest way in graph (if negative exist, can't use)\n  checked-way queue, distance array, remain-way queue\n\n다익스트라 (음수 있으면 안됨)\n벨먼 포드 (음수 확인은 가능)\na\\*(에이스타) - 다익스트라 개선버전\n\n#### 순열, 조합\n\n#### Binary\n\n이진수 활용법\n\n- 정해진 크기가 있는 배열의 유무 감별\n  - 0010000\n- 보수\n- xor\n- 피자 토핑처럼 특정한 요소를 선택할지에 사용\n\n#### 쿼드 트리 뒤집기\n\n```\n# xxwww bxwxw bbbww xxxww bbbww wwbb\n# w -> w\n# xbwwb -> xwbbw\n\n# 한 글자씩 계산해서 뒤집어서 더한다\nfunc reverse(character *char) string {\n  char head = *character\n  ++character\n  if (head == 'b' || head == 'w') {\n    return head\n  }\n\n  upperLeft = reverse(character)\n  upperRight = reverse(character)\n  lowerLeft = reverse(character)\n  lowerRight = reverse(character)\n\n  return \"x\" + lowerLeft + lowerRight + upperLeft + upperRight\n}\n\n```\n\n#### 알고리즘\n\n수행 시간 - 입력의 크기 등이 영향을 미친다\n\n인덱스로 로직을 처리하는 작업에서 배열의 길이가 1개인 것을 놓치면 안되겠다\n끝에 있는 것도 체크를 잘 해야겠다\n범위를 검사하는 것은 2가지만 체크하면 된다\n\na에서 b를 모두 감싸던지, a에서 b 안에 들어와 있던지\n\n1/10 * 3 과 3/10을 비교하면 실수부분 계산이 정확하지 않아서 다르다고 나온다\n10^20/x *x == 10^20을 하면 약분부터 하지 않기 때문에 계산 값이 큰 것부터 계산된다\n\n#### 우선순위 큐\n\n힙은 완전이진트리의 형태를 말함\n힙의 구현이 우선순위 큐의 구현이 될 수 있다\n\n우선순위 큐를 왜 쓰는지 이해가 안됐는데\n우선순위가 있는 값을 삽입할 때 그 위치를 파악하려면 전체 리스트를 순회하는 것이\n불합리해서\n차라리 우선순위를 바로 계산하는 형태로 만들어서 삽입 시간을 빠르게 하기\n위해서라고 한다\n\n일리가 있다\n\n근데 이게 데이터를 미리 다 받아둔 다음 한번에 정렬하는 것과 비교하면 어떤 상황에\n써야할지 감이 안온다\n우선순위 큐가 가장 효율적인 상황은?\n애초에 우선순위 큐를 리스트로 구현가능하다\n근데 삽입시간을 줄이는 목적을 위해 힙을 이용해서 우선순위 큐를 구현하는 것이\n좋을 것 같다\n\n데이터의 크기가 너무 클 경우\n\n우선순위 큐는 사실 기본 자료구조를 이용한 집합판인 것 같다\n탐색에 트리가 효율적이고, 일반적으로 괜찮은 속도를 보여주는 이진검색을 이용해\n이진 트리를 이용하기로 생각한 형태이다\n자료구조의 정리판 같은 느낌이다\n\n힙이 어차피 배열로 구현된다\n\n#### algorithm\n\n- it has solution that I didn't think.\n- 알고리즘의 유형은 다양하고, 이미 최적의 알고리즘이 있다.\n- 그 알고리즘을 생각해내서 만들어내면 좋겠지만 답을 찾아야 한다는 생각때문에\n  생각이 막히는 느낌이 들 때가 있다.\n- 이 유형은 푸는 방식이 따로 있을건데.. 라는 생각때문에 알고리즘 풀기가 잘\n  안된다\n- 답을 봐도 풀이가 이해 안되는 경우도 있고, 상세한 설명을 들어야 하는 경우가\n  있다.\n- 일단 문제를 많이 경험하고, 답을 풀려고 하기보다는 하나씩 접근하고, 30분 정도\n  고민해도 답이 안나오면 빨리 풀이를 보는게 좋을 수도 있다.\n- algorithm has two grade. one is basic, the other hand is for fun.\n\n#### algorithm 예외 체크\n\n발생 상황이 적은 것 체크. 발생 상황을 한정시킨다\n유일하면서 최소 정보를 가진 것으로 정리하기\n\n#### 알고리즘\n\n알고리즘은 어떤 방식으로 풀면 되는지 결과값은 있지만 그 과정을 알고 싶다.\n근데 자료구조는 결과가 안나와있는데 특정 상황을 넣으면 뭘 써라고 알려줬으면\n좋겠다\n자료구조는 인풋값을 내가 가지고 있고, 알고리즘은 인풋값이 방대해서 그런 것 같다\n\n키워드로 링크하는 것을 trie를 만들어 common prefix search라는 알고리즘을 이용해\n구현했다고 한다\n\n내 마크다운 링크도 이를 이용할 수 있을 것 같은데\n이 방식을 어떻게 찾게 되었을까\n그리고 이보다 더 나은 방식이 있는지 찾아보려면 어떻게 해야할까\n\n## Others\n\n#### Golang\n\n[[Golang]]\n\n- array\n  - length is static, only one type\n- slice\n  - length is dynamic\n- map\n\n#### Python\n\n[[Python]]\n\n- list []\n  - mutable, ordered, can add duplicates, any types\n- dictionary {}\n  - cannot nested, key set immutable value to hash, key is unique\n- tuple ()\n  - immutable\n- set\n  - unordered, unique,\n\n#### Redis\n\n- string\n- list\n- set\n- hash\n- sorted set\n- bitmap\n\n#### 정렬\n\n삽입정렬은 랜덤배치에 약하다\n\n퀵 정렬에서 피봇 값을 어떻게 설정하느냐에 따라 분할하는 횟수가 달라지기 때문에\n최대한 절반에 가까운 분할이 되도록 하면 좋다\n\n- 분할하는 횟수가 많아지면 그만큼 작업시간이 길어진다. 각 부분의 크기가 한\n  원소씩만 줄어들게 되면 n 만큼 정렬을 수행해야 되서 분할의 의미가 퇴색된다.\n\n#### 분할정복\n\n언제 분할 정복 사용이 가능한가?\n\n완전 탐색이 필요한 경우 동적계획법을 사용한다\n\n#### 재귀 vs 분할 정복 vs 동적 계획법\n\n재귀는 10가지에서 1가지 씩 적게 하면서 더해가면서 풀이\n\n분할 정복은 반씩 나눠서 풀이 후 결과만 합치기\n\n- 분할 정복에서 분할을 어떻게 하느냐에 따라 중복으로 계산하면서 시간 소모하는\n  경우가 있다\n  - 그래서 중복되지 않도록 분할한다\n- quick sort, merge sort가 대표적인 분할 정복 패러다임 이용 방식\n\n동적 계획법은 분할 정복과 비슷하게 문제를 분할하지만 중복되는 것을 허용하고 이를\n저장해두고 사용한다(메모이제이션).\n\n#### algorithm\n\nB+ tree, Red-Black tree\ntrie\n문자열 알고리즘\npriority queue\n\n#### linked list\n\n데이터의 변화가 많을 때는 링크드 리스트가 좋다?\n딕셔너리와 비교해보면?\n순서가 있으면 링크드 리스트가 낫겠다\n모든 자료구조는 리스트와 링크드리스트로 구현된다\n딕셔너리도 내부는 리스트로 구현되어 있나?\nordered list와 링크드리스트로 구현된다고 한다\n\n해시테이블은 같은 해시값이 있으면 그 안에 리스트로 내용이 들어가고 한 해시값에 여러 내용이 있으면 리스트연산과 똑같은 검색속도를 가지게된다\n왜 굳이 해시화해서 넣는거지? 그냥 딕셔너리로 하면 안되나?\n\n아 해시테이블은 공간을 절약하는 것도 신경 쓴 것이다\n딕셔너리로 한다면 공간이 무한정 늘어나게 되고\n해시테이블은 한정된 공간 안에 효율적으로 골고루 넣어서 찾을 수 있도록 하기 위함이다\n\n#### 인덱스\n\n인덱스는 where절에서 특정 키워드를 검색하려고 할 때 그 키워드를 찾는걸 빠르게\n해줘서 사용한다\n딕셔너리, 해시테이블 같다\n\nselect name from student where number=1\n이렇게 검색하면 인덱스가 없으면 student에서 선형으로 number가 1인 것을 찾는데\n인덱스를 쓰면 number가 1인 것을 바로 찾을 수 있다\n\ndb 인덱스 탐색용으로 B트리가 주로 이용된다\nB트리는 바이너리 트리와 다르게\n노드의 수를 2개로 제한하지 않고 특정한 m 값을 정해서 만든다\n그리고 이 m값을 페이지 캐시의 크기로 한다\n\n일반 검색 시 선형시간이 걸리지만 인덱스를 만들면 로그시간으로 줄어들어 인덱스가\n빠른 것이다\n\nB트리를 개선해 B+트리를 이용한다\n\nDB 인덱스를 효과적으로 설정하는 방법 - 고려해야 할 4가지\nhttps://yurimkoo.github.io/db/2020/03/14/db-index.html\n[mysql] 인덱스 정리 및 팁\nhttps://jojoldu.tistory.com/243\n\n##### 해시 테이블\n\n해시 테이블이 검색 속도가 O(1)인 이유가 명확하게 설명하기 힘들다.\n어레이에서도 인덱스번호로 접근하면 O(1)이 되나?\n키값을 찾으면 거기에 바로 접근할 수 있다는 것이라면 맞아야 할 것이다.\n\n메모리에 저장되는건 어차피 똑같은 주소크기를 차지할텐데\n\n맞는 것 같다\n대신 어레이의 사이즈를 좀 넉넉하게 하는 것 같다.\n그리고 키에 해당하는 값을 아무대나 집어넣으면 공간적으로 비효율적이라서 해시함수를 이용해 특정 공간 안에 모은다. 검색하려면 해시함수를 거쳐서 메모리에 도달한다.\n키값이 해시를 통해 인덱스로 변환되는 것인가.\n어레이[1] 속도가 더 빠르겠네?\n\n- [ ] 실험 필요\n\n#### 검색 엔진\n\n인덱스로 각 단어를 분리 -> 연결된 단어 검색 불가\n구문 쿼리로 단어 간 연결성 검사 -> 동음이의어 등 원하는 것을 정확히 찾았는지 확인 불가\n적합성 검사 -> 이를 고도화해야 함\n\n구문쿼리에서 여러 문장을 하나의 키로 하는게 아니라 키는 각 단어로 해놓고 값에다가 위치를 추가해서 계산한다\n적합성 검사는 랭킹을 매기는게 아니라 단어 사이의 거리를 구해서 가까운지 확인하는 것이다\n\n랭킹 메기는 방법은\n그 페이지가 링크된 횟수를 구해서 점수를 메긴다\n단순히 링크된 횟수만 구하면 좋고 나쁘고를 구분 없이 구하게 되어, 링크한 사이트의 링크횟수를 다시 구해서 그 사이트의 신뢰성도 체크한다\n구글은 이 방식의 장점을 포함한 무작위 서퍼 알고리즘이라는 것을 기반으로 발전했다\n\n## reference\n\n- https://docs.python.org/3/tutorial/datastructures.html\n"},{"headings":[{"value":"Math"},{"value":"statistics"},{"value":"log"},{"value":"tangent"},{"value":"라플라스 변환"},{"value":"Physics"},{"value":"이온 : 전기적 성질을 띄고있는 원자"},{"value":"Force"},{"value":"Energy"},{"value":"Velocity"},{"value":"엔트로피, 에너지, 열역학 1, 2 법칙"},{"value":"왼손 오른손 법칙"},{"value":"기전력"},{"value":"무선통신"},{"value":"이동통신에서"},{"value":"고주파일수록 수신기가 작아진다?"},{"value":"Radio Communication (Radio Frequency)"},{"value":"전자파의 세기?"},{"value":"전자기파"},{"value":"휴대폰 충전은 DC, 전원은 AC"},{"value":"wifi, lte, LAN 다운로드 속도"},{"value":"비와 전파의 상관관계"},{"value":"TV의 통신은 안정적인 이유?"},{"value":"스마트 워치가 수면 측정 하는 원리"},{"value":"생명공학기술과 미래"},{"value":"전자회로의 역사"},{"value":"Block chain"},{"value":"데이비드 차움"},{"value":"분산 대 탈중앙화"},{"value":"하이퍼레저 패브릭"},{"value":"블록체인의 암호화폐는 익명이어야 하나?"},{"value":"블록체인을 회사 안의 플랫폼으로 사용하는 경우"},{"value":"블록체인과 공개 된 정보"},{"value":"코인 대신 nft?"},{"value":"Blockchain"},{"value":"Drone"},{"value":"부품 구매"},{"value":"제어"},{"value":"부품 구매"}],"fields":{"slug":"/math/"},"rawMarkdownBody":"\n# Math\n## statistics\n\n- 합의 법칙 - 분류하는 것(동시에 할 수 없는 것. 빠짐없이)\n- 곱의 법칙 - 동시에(1을 하고, 2도 하는 것) 발생하는 일\n- 순열\n    - 7P3 - 7부터 3개의 숫자를 하나씩 빼면서 곱한다.\n\n## log\n\n상용로그에서 로그의 밑이 생략되있으면 10이 생략된 것인데 알고리즘 풀이 때 로그는 밑을 2로 한다\n자연로그라고 밑은 e로 하는 방식도 있어서 사용처마다 밑이 없는 것이 다르다\n\n## tangent\n\n어떤 원의 오른쪽에 가상의 수직선이 찰싹 붙어 있다고 가정합니다. (가상의 수직선은,\n원의 오른쪽에만 딱 1개 있습니다. 왼쪽에는 없습니다.) 그리고 각도를 나타내는 파란\n직선이, 원의 둘레를 뚥고 나와서는, 그 오른쪽의 가상의 수직선과 만나는 점이\n있습니다. 그 점과 x축을 수직으로 이어준 것이 탄젠트입니다. 각도를 나타내는\n파란 직선의 방향이 어떻게 되든, 무조건 오른쪽에 있는 가상의 선과 만납니다.\n왼쪽에는 선이 없기에 무조건 오른쪽입니다.\n\n[출처] [[펌] 탄젠트 함수 개념 설명 그림; 삼각함수에서 Tan Tangent Diagram 그래프](http://blog.naver.com/baek2187/150029878863)\n출처: http://blog.naver.com/PostView.nhn?blogId=baek2187&logNo=150029878863&parentCategoryNo=&categoryNo=&viewDate=&isShowPopularPosts=false&from=postView\n\n#### 라플라스 변환\n\n- 인간의 변화 기준인 시간을 기계가 인식하는 변화의 기준인 주파수로 변환\n\n---\n\n# Physics\n\n#### 이온 : 전기적 성질을 띄고있는 원자\n\n#### Force\n\n#### Energy\n\n#### Velocity\n\n#### 엔트로피, 에너지, 열역학 1, 2 법칙\n\n지구는 둥글다\n태양도 둥글다\n달도 둥글다\n일정질량 이상의 물체는 둥글게 된다고 한다\n\nspeed = distance / time\na = v-u/t\nacceleration = Final velocity - Initial velocity / time\nd = m/V\ndensity = mass / Volume\nF = ma\nForce = mass _ acceleration\nP = W/t\nPower = Work / time\nWeight = mass _ gravity\n\n#### 왼손 오른손 법칙\n\n플레밍\n\n왼손 - 전동기(전기로 힘을 만든다)\n\n자기장(자속밀도) - 전류(기전력) - 힘\n\n오른손 - 발전기(힘으로 전기를 만든다)\n\n자기장 - 힘 - 전류\n\n어떤 상황에서 왼손, 오른손으로 하는지?\n\n전동기인지 발전기인지 알 수 있는 상황에서 힘이나 전류의 방향을 알기 위해?\n\n암페어의 오른 나사 법칙 - 자기장 - 전류\n\n전류의 방향과 자기장의 방향을 확인할 수 있다\n\n엄지손가락이 전류\n\n#### 기전력\n\n도체 양 끝에서 일정한 전위를 유지시킬 수 있는 능력\n\n회로에 전류를 계속 흐르게 유지시키는 능력\n\n전위가 다른 2점 간에는 전위가 높은 곳에서 낮은 곳으로 전류를 이동시키려는 힘이 작용하는데 이것이 기전력\n\n힘이 아니라 단위 전하당 한 일의 양이라고 한다.\n\nhttps://www.scienceall.com/%EA%B8%B0%EC%A0%84%EB%A0%A5cell-potential-electromotive-force-2/\n\n## 무선통신\n\n- 주파수는 발생 가능하다\n- 대기중에 있는 전자기를 진동시켜서 발생시킨다\n- 진동시키는 방법은?\n- 교류발전을 통해. RLC 회로\n- 주파수 대역은 인간이 설정한 약속된 신호인가?\n- 맞다\n- IEEE 대역, ITU대역 등이 있다\n- 주파수를 잡는 장비만 있으면 인터넷 사용이 가능한가?\n\n#### 이동통신에서\n기지국은 셀 내에서 채널 할당 - 인접한 기지국에 다른 주파수를 할당해서 간섭 감소시킨다.\n다른 주파수를 쓰는 셀들의 집합을 클러스터로 묶어 시스템에서 관리\n\n기지국 - 주파수\n셀 - 클러스터 - 시스템\n\n#### 고주파일수록 수신기가 작아진다?\n\n음파 전파\n음파는 거리가 멀면 감쇠됨 그래서 마이크로폰으로 전파로 변환\n\n송수신 안테나의 길이는 파장의 길이의 1/4 정도로 한다\n저주파 20Hz라면(음성의 파장)\n빛의 속도 = 주파수 \\* 파장\n위 식에 의해 주파수가 낮으면 파장이 커져야 함\n파장이 커지면 송수신 기기가 커져야 함\n\n#### Radio Communication (Radio Frequency)\n\nmose -> radio -> -> 0, 1 transform -> 3G -> 4G -> 5G\nfrequency, bandwidth\nsender, receiver\n\n데이터를 변환해서 전파로 만든다\n대역폭이 정해져 있다면 특정 대역폭을 기준으로 데이터를 추가하는 방식인가?\n\n대역폭이 높은(3GHz) 곳은 데이터도 더 많이 실을 수 있나?\n\n[[Network]]\n\n#### 전자파의 세기?\n\n주파수의 파장과는 상관 없다\n멀리 보내려면 출력이 세야 한다\n무선통신용 4G의 경우는 파장은 크지만 출력은 약하다?\n\n#### 전자기파\n\n파장\n세기\n주파수\n진폭(세기)\n대역폭\n전자파 위험 기준은?\n\n전자기파\n전파(마이크로파 등) -- 광선(가시광선 등) -- 방사선(X선 등)\n파장이 길다 -- 짧다\n진폭은 파형의 높이(세로), 파장은 길이(가로),\n\n이동통신에는 전파 중 마이크로파 사용 중. 파장이 길고 주파수가 높다\n5G는 28Ghz를 쓰고 있고 3G보다 파장이 짧아서 기지국을 가까이 여러개 만들어야 한다\n파장이 커지면 송수신 기기가 커져야 한다고 함\n고주파일수록 수신기의 크기는 작아진다고 함\n수신기의 크기가 크면 멀리서도 받을 수 있다?\n\n주파수 = 1 / 주기\n\n주기는 높은 부분에서 다음 높은 부분까지의 거리(파장)\n\n파장이 길어지면 주파수가 짧아진다\n\n파장 = 전송속도 \\* 주기\n\n송신, 수신.\n송신부에서는 특정 주파수만 생성하는 회로\n수신부에서는 특정 주파수만 받아들이는 회로\nRLC 회로가 직류와 교류에서의 특성이 다르다\n직류는 +에서 -, 교류는 발전기에서 나오는 불규칙한 방향\n교류의 특성인 전류가 흐르는 방식이 영향을 받는다\nRLC가 같이 있게되면 서로 교차하여 공명하는 진동 수(공진 주파수)가 발생하여 특정\n주파수만 받아들일 수 있게 된다\n\n전자레인지는 2Ghz 정도. 근데 전력을 많이 받아 진폭(세기)이 세다고 함\n\n태양 - 빛 - 전자기파\n페러데이 - 맥스웰 - 전자기파 - 가시광선=빛\n전자기파 = 전기 > 빛\n\n빛 = 원자 = 핵 + 전자\n핵 = 양전하, 전자 = 음전하 (전하 = 전기적 성질)\n전기 = 양전하 + 음전하. 그러므로 전기 = 빛\n전기로 빛을 만든다 - 형광등\n\n태양 핵분열 - 전자기력 생성\n\n#### 휴대폰 충전은 DC, 전원은 AC\n\n#### wifi, lte, LAN 다운로드 속도\n\n3G - 21Mbps\nLTE - 150Mbps\n5G - 250Mbps\n공공 WIFI - 350Mbps\n기가랜 WIFI - 500Mbps 초당 62MB를 다운 받는다\n기가랜 유선 - 700Mbps\nLTE는 정지상태에서 1Gbps 가 나온다고 한다. 이동 시 100Mbps\n공유기 5GHz 200Mbps, 2.4GHz 100Mbps 정도 나온다고 한다\n\n기가랜 필요사항: 인터넷, 하드웨어(랜카드), 케이블, 공유기 성능\n\n1000bps = 1.25B/s\n100Mbps = 12.5MB/s 초당 12.5MB 다운\n\n이더넷으로 연결 후 확인해야 제대로 나온다\n벤치비나 통신사 제공 프로그램 이용\n와이파이는 20메가도 잘 안나온다고 한다\n\n#### 비와 전파의 상관관계\n\n지난 2012년 국립전파연구원이 발표한 보고서 '국내 전파전달 및 전파기반 특성 연구'에 따르면 10GHz 이상의 전파는 대기 중을 통과할 때 대기를 구성하는 여러 인자들에 의해 감쇠를 겪게 됩니다. 전파 손실이 발생하는 건데요.\n\n전파 손실은 우리가 일상에서 사용하는 2.4GHz 또는 5GHz 주파수 대역에도 마찬가지로 적용되죠.\n\n전파가 물을 통과할 경우, 전파의 크기가 절반으로 줄어드는데요. 그렇기에 와이파이가 끊기는 현상이 있을 수 있죠.\n\n\n#### TV의 통신은 안정적인 이유?\n\ntv도 어차피 컴퓨터가 각 가정에 송신하는 것 아닌가?\n근데 방송국 서버실이 그렇게 구축되있다면 모바일도 서버용량에는 문제가 없을 것 같은데 끊김이 있고 성능이 왔다갔다 한다.\n\ntv는 어떻게 그렇게 안정적으로 송신할 수 있지?\n\n둘다 전파로 변환해서 쏘는건 마찬가지인데\n\n안테나에 송신하는 장치로 보내기만 하면 나머지는 송신시스템이 알아서 하는건가?\n모바일은 왜 그렇게 안되지?\n방송국은 24시간 연결되있는 주파수가 있어서 되고 모바일은 계속 신호를 새로 잡아야해서 그런걸까\n\n#### 스마트 워치가 수면 측정 하는 원리\n\n가속계, 적외선 기술\n가속계: 움직임을 판단해 잠에 들었는지 확인\n적외선 PPG: 심박수와 심박변이도 확인\n\n깊은 수면 시 심박수 감소, 심박변이 폭 줄어듬\n\n정확도 50%. 깊은 수면은 비교적 정확, 얕은 수면은 안맞을 수 있음\n\n#### 생명공학기술과 미래\n원시 지구는 지금과 대기가 달라서 수중의 무기생물이 유기 생물이 될 수 있었다고 한다\n\n---\n\n\n## 전자회로의 역사\n\n전자회로는 능동소자를 활용한 회로. 다이오드,트랜지스터,저항,콘덴서 등\n반도체의 발전과 함께 전자회로는 발전해나갔다.[^1]\n[^1]:(http://www.amkor.co.kr/archives)\n\n트랜지스터\n\n- 접합형, BJT, 전계효과(FET), 박막 트랜지스터(FET), MOSFET, CMOS\n\n능동소자 중 반도체 소자의 대표적인 소자로 트랜지스터가 있다.\n그 전 반도체 원리의 시효는 진공관이다.\n\nㅇ 진공관의 원리\n\n장거리 통신을 위해 전기신호를 이용한 통신을 시도\n중간중간 신호를 증폭시킬 필요가 있었고 증폭기능을 위해 진공관 개발\n진공관은 부피가 크고 전기도 많이 먹는다.\n\n플레밍에 의해 다이오드(이극진공관) 개발 - 1904년\n트랜지스터 발명 - 1947년\n\n- 벨 연구소 연구원들(월터 브래튼, 존 바딘(접점 트랜지스터),윌리엄 쇼클리(접촉 트랜지스터))\n\n집적회로 발명 - 1958년 텍사스 인스트루먼트사\n\n- [집적회로 발전단계](http://m.blog.daum.net/dasomcap/891)\n\nㅇ집적회로 분류\n\n- TTL\n- CMOS\n- ROM\n- RAM\n\nㅇ 트랜지스터 원리\nㅇ 집적회로 원리\nㅇ 트랜지스터의 소형화와 방법\n\nㅇ 트랜지스터 -1 바이폴라 접합 트랜지스터(BJT)\n쌍극성 트랜지스터\n\nㅇ 트랜지스터 -2 전계효과 트랜지스터(FET)\n단극성 트랜지스터\n\n- JFET\n- MOSFET\n  참고 : [http://www.bloter.net/archives/218176](http://www.bloter.net/archives/218176)\n\nCPU 의 발전 (intel)\n1971 - 4004, 108kHz, 2300개의 트랜지스터, 10마이크로 공정\n1972 - 8008, 500kHz, 3500 10\n1982 - 8086, , 13만 4천 1.5\n1985 - 386\n1989 - 486, 25MHz,120만개 1\n1993 - 펜티엄 발표\n1995 - 펜티엄프로, 0.6\n1997 - 펜티엄2,233MHz,750만개 0.35 - 셀러론의 기반\n1999 - 펜티엄3,500MHz,950만개 0.25 - 작동속도 상승, 전력 공급 상승, 열 상승\n펜티엄3 2세대 3세대 4세대 거쳐 1.4GHz, 0.13 - AMD와의 경쟁 시작\n2002 - 펜티엄4, 2~3.06GHz , 90nm - 대신 전력소비량이 130W에 달함\n2005 - 코어2(듀얼코어도 됨) ,1GHz, 65W, 65nm - 작동속도를 낮췄으나 실제 성능은 펜티엄4와 비슷\n2008 - 코어2 2세대 45nm 2GHz, 60W - 누설전류 심화 -> High-K 소재 사용\n\n- i3,i5,i7 브랜드 시작, 45nm,\n  2010 - 32nm[클락데일 i5] ->2011 샌디브릿지-> 2012 22nm 코어 3세대[아이비브릿지]\n  ->4세대 하스웰 (전력소비량 감소 집중)\n  2013 - 14nm 진입을 위해 3D 핀펫 기술 도입\n  2015 - 14nm , 19억개의 트랜지스터, 브로드웰\n\n\n## Block chain\n\n- 분산경제포럼\n  코인은 한계가 있어보인다.\n  블록체인 이슈 PoS vs DPoS\n  모든 구성원에게 투표권한을 주느냐, 간접 투표로 하느냐\n  [[블록체인] 개발자를 위한 블록체인 로드맵](https://hamait.tistory.com/951)\n  암호화 기술의 개방(DES)\n  프라이버시 보호 운동 -> 사이퍼펑크(암호(cipher) + 사이버펑크(악동))\n\n#### 데이비드 차움\n\n- 금융거래 암호화를 통해 개인의 프라이버시를 보호하려 시도\n- 익명성 가진 결제수단의 부작용 인지. 조건을 제시\n\n- 각 개인이 행한 결제에 대해 제 삼자는 알 수 없어야 한다\n- 예외적 상황 하에서는 신원에 대한 자료를 제공할 수 있어야 한다\n- 도난당한 것으로 보고된 결제 수단에 대해서는 사용을 중지할 수 있어야 한다\n\n#### 분산 대 탈중앙화\n\n분산\n\n- 여러가지 일을 나눠 처리\n- 일을 나눠서 하므로 속도 상승, 고가용성 확보\n  지배 개체가 있음\n\n탈중앙화\n\n- 여러가지 일을 반복해서 처리\n- 신뢰성 상승\n- 모든 개체가 동등\n\n하지만 실제 세계에서 개개인의 의견을 듣는다면 모든 사람의 의견이 모아질 수 없기 때문에\n여러 사람들의 의견을 모아 말해주는 의원을 뽑는 간접 민주주의 형식이\n나온 것 처럼 블록체인도 대표를 뽑을 수 밖에 없을 것 같다\n\n- 그렇다면 대표를 뽑는 방법은? 한국 의회를 보면 의회의 힘이 너무 강하다\n  - 스웨덴의 국회의원을 뽑는 방식과 국회의원의 마음가짐을 확인해보자\n\n[[Think#스웨덴 국회]]\n\n디지털화의 효용 대 블록체인의 효용 구분해야 한다\n\n블록체인의 오해\n\n- 거래 비용 절감 (중앙 기관 없이 거래 가능하기 때문에)\n  - 오히려 중개업자가 양산되어 수수료가 더 나오고 있는 실정이다\n  - 동일한 작업을 할 때 에너지가 더 소비된다 (중복 작업을 하기 때문에)\n- 데이터 활용 (위변조가 어렵기에 안전하고, 접근 권한 설정이 가능하다)\n  - 대신 모든 데이터가 노출된 상태다(암호화 되어있더라도)\n- 사용성이 떨어진다\n- 노드, 피어, 트랜잭션\n\n블록체인은 신뢰가 존재하지 않는 네트워크에서도 신뢰할 수 있는 기록을 작성할 수 있는 방법을 연구하는 분야\n\n#### 하이퍼레저 패브릭\n\n이더리움과 다른 프라이빗 블록체인\n오더링시스템 하에서\n네트워크를 설정하고 CA를 설정하여 시작하고\n그룹을 생성한다\n그룹간에는 컨소시움을 구성할 수 있고\n컨소시움간에 채널을 만들어 통신이 가능하며\n채널 내부에서 거래가 이루어진다\n채널 안에서 장부 생성이 가능하며\n피어라는 단일체를 만들어서 거래하게 된다\n피어는 체인코드를 입력하고 검증하는 역할을 하게 된다\n검증은 체인코드의 보증정책을 설정해서 따르게 한다\n이제 클라이언트 어플리케이션에서 입력을 받아 체인코드를 통해 검증하고 이 검증된 내용은 오더링 서비스를 통해 블록을 만들어 각 피어에 접속된다. 그 후 보증정책을 통과하면 장부에 기록되고 채널에 블록연결되게 된다\n\n#### 블록체인의 암호화폐는 익명이어야 하나?\n\n- 정보공개는 하지만 탈중앙화되어 자유롭게 거래하는 것에 의의가 있는게 아닌가?\n- p2p는 누군가는 내 것을 남에게 주어야 한다 그리고 그것은 거부감이 들 수 있다\n  ○ 이 것을 어떻게 다르게 생각 할 수 있을까\n  ○ 보상이 추가된다 나의 자원은 비워놓고 중앙에서 가져다 쓰기를 원할 수 있다 사용자는 그냥 중앙에서 내려받기를 원하지 내 자원이 사용되기를 원하지 않는다\n- p2p 특성상 노드들이 오프라인 상태일 경우가 발생하는데 이 때 공격에 대비하기 위해 비잔틴문제해결 알고리즘의 얘기가 나오게 되었군\n\n#### 블록체인을 회사 안의 플랫폼으로 사용하는 경우\n\n신뢰성은 다소 포기하는 것인가?\n블록체인에서 신뢰성은 서로 감시한다는 것에서 오는데 회사가 블록체인을 운영한다면\n감시할 주체가 없지 않은가?\n\n#### 블록체인과 공개 된 정보\n\n블록체인은 중앙 관리가 없고 각 노드들이 서로 감시하는 방식으로 보안이 유지되는\n컨셉인데 공개 돼있다고 해도 감지하는 시스템이 있어야 알 수 있지 아무리 노드가\n많아도 아무도 안 지켜볼 수도 있다. 인터넷에 수많은 데이터가 있어도 알려져야 그\n정보가 사람들에게 닿는거지 그냥 있다고 누가 알 수 있는 것이 아니다\n블록체인은 보안성이 있는 것인가?\n\n- 변조가 되면 자신의 해시와 변조된 해시가 다르기 때문에 감지가 된다\n- 위조 시 앞, 뒤의 노드를 같이 변조해야 한다. 그래서 51% 이상해야 탈취가 되는데 그\n  정도 자원을 얻으려면 필요한 비용이 훨씬 많이 들게 하여 51% 공격을 무의미하게\n  만든다.\n\n채굴과 똑같은 방식인 척 위장한 트랜잭션을 구분해낼 수 있나?\n\n- 머클 트리\n\n#### 코인 대신 nft?\n\nnft를 가진 사람들만 이용할 수 있는 것을 제공해서\nnft를 회원권의 개념으로 쓴다고 충섭님께 들었다\n일리있다. 전자적인 회원권\n기존의 회원권과 차이가 없고 오버 테크놀러지라 생각했는데 필요한 곳도 있을 수도...?\n\n#### Blockchain\n\n키워드\n\n- 공개키 개인키\n- 해시함수\n- 머클트리\n  - 자식 중 하나만 변경되어도 감지가능\n  - 최상위의 노드만 확인하면 됨\n- 비대칭 암호화 기법\n- ECDSA\n- 작업증명\n- 지분증명\n  - BFT 기반\n  - 체(간)기반\n  - 소수의 검증집단을 두게되면 익명성이 사라진다?\n- DPOS 위임지분증명\n- 비트코인은 18년말 난이도가 101배 정도 상승할 것으로 설계되었으나 실제로는\n  7조배 상승.\n- 탈중앙화는 목적이 아니라 수단이다.\n- 불록체인을 개발하고 유지하는 것에도 비용이 들고 관리도 필요하다.\n\n전산으로 데이터를 공유하는 곳 (은행, 민원센터) 에서는 익명성과 정보의 신뢰성이\n큰 효과를 볼거 같은데\n\n비트코인은 처음의 코인과 나중에 얻는 코인이 다른 에너지가 사용되었는데 처음에\n얻은 것의 가치가 힘들게 얻은 것과 동일하다는 것은 이상하지 않은가?\n\n- 시간이라는 가치가 밸런스를 맞춰주나?\n\n## Drone\n\n보조배터리\n드론 몸통\n모터 4개\n변속기\n클린플라이트 ( 자이로 센서 확인 가능 앱)\n자력계\n가속도계\n자이로\nGPS\n기압계\n연동\n\n관성측정장치(IMU)\n\n스마트폰과 연동해 기울임 인식 기능\n\n호버링\n\n저가 드론의 FC는 어떻게 자이로센서 모터 등을 값싸게 구성할 수 있는가\n\nFC의 제작 ? 방법은?\n\n참고 사이트\n\n- [부품 사이트](Hobbydirector.com)\n- [헤파이토스 - DIY 선구자](http://blog.naver.com/dkwltmdgus)\n- [상세구현자](http://sensibilityit.tistory.com/category/드론)\n- Multiwii < 드론 상태제어 프로그램\n- [스마트폰 자이로센서 확인 시험 소스 사이트](http://bbulog.tistory.com/18)\n- [드론 토탈](anadronestarting.com)\n- [졸업작품 만든사람](http://hs36.tistory.com/42)\n- [FC 종류](http://teamgds.tistory.com/78)\n- [드론 부품 구매](http://mechasolution.com)\n- [강의](http://opensource.kofac.re.kr/edu/detail_view.do?aIdx=100)\n- Blynk << 아두이노,라즈베리파이 연동 센서 조절 앱\n- [멀티위 가이드](https://www.openmakerlab.co.kr/single-post/2016/04/14/Open-Maker-Lab-Board%EB%A1%9C-250%EC%BF%BC%EB%93%9C%EC%BD%A5%ED%84%B0-%EB%A7%8C%EB%93%A4%EA%B8%B0)\n- [소스 배포자 Daniel Heo](http://blog.naver.com/PostView.nhn?blogId=peter_jinsoo&logNo=220327320784&parentCategoryNo=&categoryNo=&viewDate=&isShowPopularPosts=false&from=postView)\n- [소스](https://blog.naver.com/ejtkddl/220401728787)\n- [코코아팹](https://kocoafab.cc/tutorial/view/596)\n- [자동주행 성공자](http://blog.naver.com/lbiith/220915662242)\n- [카메라 프로그램 오픈 소스](http://zoneminder.readthedocs.io/en/latest/installationguide/index.html)\n- [안드로이드 센서 확인](http://bitsoul.tistory.com/121)\n\n#### 부품 구매\n\n연결 조립\n모터 구동 확인\n센서값을 받아와서 ESC에 값 전달 모터 구동 확인\n비행 테스트\n조종 테스트 - 라즈베리파이 <-> 휴대폰 직접 연결 가능 -> 통신 부분...\n호버링 기능\n안전 착륙 기능\nGPS 위치 인식\n\n#### 제어\n\nPID 제어 + 필터 > ESC\n필터 - DMP, Complementary Filtering, Kalman Filtering\nKalman Filter 는 복잡성에 비해 정확도가 떨어진다고 한다.\nPID 제어 주기\nPWM Update Rate 확인\nPwm 신호 출력\n스마트폰 제어\nWire < I2C 라이브러리\n기본적으로 모터들이 똑같은 입력을 받아도 출력값이 다를 수 있다\nESC 캘리브레이션 해줘야 되고\n사용자의 입력값\nXu xd\nYl yr\nZu zd\n센서의 출력값\nAcX,AcY,AcZ\nGyX,GyY,GyZ\nI2C 교환 값\n센서 값 초기화값\n(센서 값들을 시간별로 더한 후 평균값을 구한다)\nSumAcX\nbaseAcX\n센서 계산값\nAccel_x = AcX - baseAcX\nAccel_xz,accel_yz\nAccel_angle_y,accel_angle_x\nGyro_x\n센서 보정값\n\n- 1 필터 (칼만,DMP)\n- 가속도+자이로 값 전달 (안정적으로)\n  - -> 센서의 평균값을 구하고 필터 공식을 대입해 출력값 구한다.\n- 2 PID\n- 최종 출력값을 안정되게 보내주는 제어방법\n- K = 사용자가 임의의 값을 넣는 것 같다 (?)\n- P : K _ err -> P= Kp _ err\n- I : K * err의 적분값 -> I+=Ki*err\\*dt\n- D : K _ err의 미분값 -> D=-Kd_(dInput/dt)\n- P+I+D 값을 ESC에 보내준다.\n- Err = Setpoint - input ( setpoint ? )\n- dErr = err - prevErr -> dInput = input - prevInput\n- Roll,PitchmYaw 각각 PID 값을 구한다.\n\nRoll\nPitch\nYaw\n\n센서값 초기화 -> 센서 평균값 추출 -> 센서 계산값 -> 필터값 적용 -> PID 적용 -> 모터\n\n#### 부품 구매\n\n드론 제작 시작\n라즈베리파이로 똑똑한 드론 만들기 프로젝트\n\n모터\n변속기\n가속도/자이로 센서\nGPS 센서\n프레임\n전원 공급 배터리 ( 보조배터리 ) - ( 남는 배터리로 보조배터리 제작 )\n라즈베리파이\n공기계 휴대폰 ( 카메라 사용 )\n조종용 휴대폰 - 앱 제작 필요\n\n우려되는 점\n\n1. 라즈베리파이가 모터를 구동할 파워를 가질 수 있는가\n2. 보조배터리로 전원공급이 가능할까\n\n---\n\n구성\n라즈베리파이 - MPU-6500 (칼만 필터,PID 제어)\nㄴ 변속기 - 모터\nㄴ 배터리\n\n- 휴대폰 카메라 ( 그냥 장착 )\n  MPU-6500 으로 읽은 위치 값을 변속기에 출력값으로 넣어 컨트롤.\n\n---\n\n호버링 기능\n좌표위치 이동\n휴대폰 카메라 연동\n\n---\n\n모터 변속기 센서 프레임 구매 필요\n라즈베리파이의 전력 사용 한계값 구하고\n그에 맞는 모터와 변속기를 구매한다.\n모터는 전체 드론 무게를 고려해서 구매한다.\n450mm 급 드론 예상\n900g 이내\n휴대폰 150g\n모터 25g x 4\n변속기\n배터리\n라즈베리파이&센서&배선 100g 이내\n프레임\n변속기 20A,6A,12A\n모터 보다 허용 A 높은 걸로 (최소 5A 더)\nA(전류)는 모터가 회전하는데 필요한 전류량\n낮은 A로 도는 모터는 아마 힘이 약하겠지\n모터 속도, 토크, 무게, 전압, 전류,\n프로펠러 지름이 크면 속도를 높이거나 낮추기 어려워 좀 더 안정적이다.\n배터리는 모터4개의 전류를 모두 공급 해줄수 있는 배터리여야 하는데\n모터\n변속기\n배터리\n프로펠러\n센서\n몸체\n\nV 11 A 2/5 W 25\nV 11 A 20 W 28\n\n구상 중.. 킷도 괜찮겠다 싶다..\nhttp://daduino.co.kr/product/detail.html?product_no=1237&cate_no=78&display_group=1\n\n[motor reference](http://blog.naver.com/79k3le5ze/10110646393)\n\n"},{"headings":[{"value":"Internet"},{"value":"WWW"},{"value":"TCP, UDP"},{"value":"왜 1byte는 8bit 일까"},{"value":"TCP network"},{"value":"tcp 혼잡제어"},{"value":"Browser - Server"},{"value":"client - server in web"},{"value":"WWW"},{"value":"HTTP"},{"value":"keep alive"},{"value":"HTTP/1.1 REQUEST"},{"value":"HTTP/1.1 RESPONSE"},{"value":"HTTP/2 Frames"},{"value":"REST API"},{"value":"프록시 서버"},{"value":"웹서버에서 처리할 것"},{"value":"로드밸런서에서 처리할 것"},{"value":"인프라에서 처리 가능한 것"},{"value":"네트워크 과부하"},{"value":"API"},{"value":"gRPC"},{"value":"graphql"},{"value":"Network Machine"},{"value":"Load Balance"},{"value":"L4 L7"},{"value":"LB"},{"value":"CDN (Content Delivery Network)"},{"value":"ETC"},{"value":"nat 가 뭐야"},{"value":"1TB 의 트래픽이 어느 정도인가?"},{"value":"Information Theory"},{"value":"네트워크 대역폭 확인"},{"value":"Reference"}],"fields":{"slug":"/network/"},"rawMarkdownBody":"\n## Internet\n\n1990 World Wide Web\n\n#### WWW\n\n- data networks\n- hypertext = text displayed on a electronic devices (with hyperlinks)\n- X windows system? = X11\n- https://home.cern/science/computing/birth-web/short-history-web\n\n## TCP, UDP\n\n- TCP - 4계층, IP - 3계층\n- TCP: get Data, send serialize and check destination\n- IP: Make Data(packet)\n\n#### 왜 1byte는 8bit 일까\n\n처음에는 1byte를 6,7,8 정해진 것 없이 각 업체마다 다르게 사용했다\nASCII가 128개의 문자를 표현할 수 있어서 이게 기준이 된 것이라는 설이 유력하다 (2^7=128)\n\n#### TCP network\n\n대역폭은 BDP(Bandwidth Delay Product)라는 것과 관계있는데\nBDP = 대역폭 _ RTT(round-trip time)\nRTT는 이동 시간 정도로 생각하면 될 것 같다\n100Mbps 대역폭의 지연시간 2초인 곳에서 BDP는 25MB((100bit / 8)byte _ 2)이고, 이것이 네트워크 경로에\n전달중인 데이터의 양이다.\n\n즉 대역폭 = BDP / RTT 가 된다\n\n근데 인터넷 망에서 BDP는 충분히 크다고 한다\nBDP가 크다는게 무슨 뜻인지 잘 이해가 안된다\n\n#### tcp 혼잡제어\n\n송수신용 윈도우 크기(데이터 전달 크기) 정보는 tcp 헤더에 실려간다.\n하지만 네트워크 크기가 윈도우 크기보다 적을 경우를 대비해서 손실을\n최소화 하고자 혼잡제어를 하게 된다\n\n느린 시작과 혼잡 회피라는 과정을 거친다.\n느린 시작은 임계점이 설정되있고, 이 지점까지 혼잡 윈도우의 크기를\n2배씩 늘리면서 네트워크 대역을 확인하는 동작이고,\n혼잡 회피는 느린 시작에서 대역을 확인 못할 경우도 있기에 윈도우 크기를 1씩\n늘려가며 진행하는 동작이다.\n\n## Browser - Server\n\n- URI - DNS - IP - TCP - HTTP - RESPONSE\n\n#### client - server in web\n\n1. 주소 입력\n2. 주소값 DNS 검색\n3. DNS에서 IP 확인\n4. IP 주소로 TCP 연결 (HTTP/2까지)\n5. HTTPS 암호화 (TLS/SSL)\n6. HTTPS 패킷 전송\n7. 서버 패킷 획득\n8. HTTPS 암호화 해독\n9. 서버 응답\n10. HTTPS 암호화\n11. 클라이언트에 전송\n12. 브라우저에서 암호화 해제\n13. 페이지 로딩\n14. TCP 연결 해제\n\n## WWW\n\n- Tim Berners-Lee, his team wanted to share document to other physicist in internet\n- include URIs, HTTP, HTML\n\n## HTTP\n\n- HTTP/0.9 Only has GET, only accept hypertext content\n- HTTP/1\n  - HTTP 1.0 GET, HEAD, POST,\n  - Header ideas from MIME(email)\n  - session handled only one client request. So other requests wait.\n- HTTP/1.1\n  - HTTP 1.1 OPTIONS, GET, HEAD, POST, PUT, DELETE\n  - first version 1997. revised 1999.\n  - Add Authentication\n  - allows client send a single TCP session.\n  - can ask part of resource.\n- HTTP/2\n  - create encrypt key\n  - Multiplexed Streams\n  - Stream Prioritization\n  - Server Push\n  - Header Compression\n- HTTP/3\n\n#### keep alive\n\nhttp/1 은 기본으로 지속 커넥션이 설정되어 있다\nConnection: close 를 명시해줘서 빨리 소켓이 닫히는지 확인해보자\n\nkeep-alive는 1.1에서 빠졌다고 한다.\n대신 지속 커넥션이 고안되었다고 한다\n\n커넥션을 유지하기 위해서는 content length가 설정되있거나 청크 전송 인코딩으로 되있어야 한다\n\n#### HTTP/1.1 REQUEST\n\n- Request Line\n  - GET /index.html HTTP/1.1\n- Header\n  - General : Date, Connection(open/close/keep-alive), Upgrade-Insecure-Request\n  - Request : Host, From, Accept(text/html), User-Agent(Mozilla/4.0)\n  - Entity : Content-Type(application/json), Content-Length\n- Message Body\n\n#### HTTP/1.1 RESPONSE\n\n- Status\n  - HTTP/1.1 200 OK\n- Header\n  - General : Date, Connection(open/close), Keep-Alive\n  - Response : Server(Apache/1.3), Accept_ranges(bytes)\n  - Entity : Content-Type, Content-Length, Last-Modified\n- Message Body\n  - generally HTML document\n\n#### HTTP/2 Frames\n\n- Header divide and composed to frame\n- Frame has header, body.\n- header type divide by request. etc) Type=HEADERS, Type=DATA\n\n데이터 프레임이라는 틀 안에서 데이터가 이동하고\n이를 스트림으로 통신하도록 되어있고\n기존에는 안되던 서버에서 푸시하는 것도 가능해졌다\n바이너리로 전송된다고 한다\n\nHTTP/2 != HTTPS. but HTTP/2 include HTTPS\n\n#### REST API\n\n- Use HTTP GET, POST, PUT, DELETE\n- Use Response code to indicate status(200, 400, etc)\n\nHTTP에서 GET 뿐만 아니라 PUT, DELETE도 멱등하기를 기대한다\n\n그런데 서버에서 DELETE 처리를 할 때 내부에서 뭔가 계산 작업을 하게 되면 같은 값을 받아도 계산처리가 된 후에 동작해버릴 수 있다\n멱등하게 동작하도록 신경써야겠다\n\nx 를 누르면 DELETE /comment/1 로 되어야지\nDELETE /comment/(현재 문서의 첫번째) 가 되면 안된다\n\n## 프록시 서버\n\n사용자 필터링\n\nHTTP의 TRACE 메서드는 프록시에서 웹서버로 전송 시 일어나는 변화를 추적하는데 사용하기 좋다\n\n#### 웹서버에서 처리할 것\n\n내부 로직\n\n#### 로드밸런서에서 처리할 것\n\nSSL 적용\n배포 후 접속량 조절\n큐로 접속자 리스트 관리\n정적 호스팅\n캐싱\n정적 데이터, 응답 압축\n접속자 로그\n트래픽 제어\n\n접속 대기자 관리\n\n#### 인프라에서 처리 가능한 것\n방화벽\nCDN\n\n\n\n## 네트워크 과부하\n\nnic 이중화\n\n라우터의 한계\n30만 패킷/초\n패킷이 300바이트라면 1Gbps\n\n500호스트\n1서브넷 arp테이블\n브로드캐스팅 패킷 트래픽이 증가. cpu 소비. 패킷 손실\n\n## API\n\n- WebSocket\n- HTTP\n- JSON?\n\n#### gRPC\n\n- unary\n- server side stream\n- client side stream\n- bidirectional stream\n\n#### graphql\n\n- server-side cache?\n\n## Network Machine\n\n- L1: 장비간 근거리 묶어주는 전송로\n- Ethernet Cable\n- 이더넷 방식 구조중 CSMA/CD 가 좋더라\n- MAC - 48bit 8:8:8 8:8:8\n- L2: 1-3계층을 연결해주는 (Repeater, Switch)\n- L3: 최적의 경로를 선택한다 (Router)\n- L4: 세분화해서 트래픽 관리 L3와 비슷하지만 데이터 전송을 보장한다. (L/B)\n- L5 - 논리적인 연결 서비스\n\n## Load Balance\n\n#### L4 L7\n\nL4는 포트 기반 (aws에서는 NLB)\nL7은 포트 + 페이로드 기반, 즉 기능이 더 많은 기기 (aws에서 ALB)\n\n#### LB\n\n내부 서비스는 로드밸런스 포트만 열어두고 로드밸런서에서 필터링?\n그래도 똑같나;\n로드밸런서에서 커트하는 옵션을 넣어야 하네;\n\n로드밸런서에는 리스너, 타겟 그룹이라는게 항상 따라온다\n\n분명 ELB가 있고, NLB, ALB는 나중에 나온 것 같은데, 그런 얘기가 안나온다\n\nELB라 불리우는 Classic Load Balancer는 l4/L7을 같이 지원하는데 현재 ALB보다는\n기능이 적은 끔찍한 혼종이고,\nNLB가 17/09/07에 나왔다.\n\n## CDN (Content Delivery Network)\n\n네트워크를 여러 군데 둬서 접근을 빨리하는게 핵심인 것 같다.\n\n- 해외 접근 시 빠르게 하는 역할\n- 이미지처럼 큰 파일을 서버와 분리해서 호출하여 트래픽 및 스토리지 절약\n  - 근데 캐시 된 이미지가 본 서버의 이미지보다 빠르나? 똑같은 속도 아닌가?\n  - CPU 캐시를 생각하면 캐시가 빠른게 당연한데, 그건 CPU 캐시 자체가\n    디스크보다 빠르기 때문인데, 네트워크가 가까운 서버에서 가져와서 그런가?\n    - 맞다. 네트워크 트래픽을 절약해서 속도를 빠르게 하겠다는 것이다.\n- 디바이스를 인식해서 캐시된 이미지 중 하나만 선택해서 보낸다?\n  - 온디맨드 이미지 리사이징\n  - CDN의 기본 기능이라기보다는 내부 로직으로 계산해서 제공하는 방식\n  - S3에 있는 이미지를 Lambda로 계산해서 선택해주는 방식\n  - [개발 사례](https://blogs.akamai.com/kr/2018/12/qa-cdn-cdn.html)\n  - [개발 사례2](https://engineering.vcnc.co.kr/2016/05/ondemand-image-resizing/)\n  - [원리 및 예제](https://roka88.dev/102)\n- nginx를 이용해 CDN을 구현할 수 있나보다.\n- DNS를 CDN을 먼저 도착하도록 설정해서, CDN에서 본 서버로 트래픽을 전달할지,\n  자신이 처리할지 선택할 수 있다.\n- CDN을 거쳐서 본 서버에 들어오게 함으로써 필터링도 할 수 있다\n  - 메인 서버에 접근 못하게 하거나, DDoS 를 흡수하거나\n  - https://blogs.akamai.com/kr/2018/12/qa-cdn-cdn.html\n  - 이건 근데 로드밸런서와 비슷한 역할이 될 수 있다. 로드밸런서의 역할을 대신함\n- 본 서버를 파싱해 저장된 데이터를 부름으로써 본 서버의 부하를 줄이려는 것 같다\n  - 부하도 줄고, 트래픽도 줄고\n- 결국 서버를 여러 대 둬서 분산하는데 역할을 부여한 서버로, 스케일아웃과 조금\n  다른, 하지만 서버의 증설이 필요한 것인 것 같다.\n\n## ETC\n\nCSMA/CD\n세션계층이 뭐하는 계층이지\n캡슐레이션 디캡슐레이션\n프로토콜은 상대방의 주소를 알아야한다\nDNS - 53포트 1024 이상이면 TCP , 이하면 UDP 로 나간다 ?\n이더넷 프레임 구조 (전송되는 내용물의 구조)\n브로드캐스트 도메인\n콜리션 도메인\nICMP\nVLAN\n서브넷팅 : 네트워크영역을 나눠준다\nVLSM : 호스트 영역의 갯수를 나누는 기술 --- 서브넷 하고 더 나누는 기술\n슈퍼넷팅\n회사의 맨 바깥 라우터에는 ISP 에 디폴트 연결이 되도록 해줘야 된다.\n인터넷 연결쪽에 해줘야 인터넷 연결이 되기 때문에\n루핑 - 스패닝트리프로토콜\nVlan\nVlan 이 왜 필요하지? 라우터로 안되나?\nVlan의 우선순위 설정시 여러대면?\n\n시리얼은 오른쪽에서 왼쪽으로, 아래에서 위의 순서로 번호를 매긴다.\n루프백 했을 때 신호 안오면 내 랜카드 불량이다\n\n#### nat 가 뭐야\n제한된 ipv4 개수를 해결하기 위해 나왔다\n하나의 ipv4를 내부에서 여러 개로 논리적인 분산을 해주는 장치\nprivate로 만든 instance가 외부 네트워크에 접속할 수 있도록 해준다\n\n\n#### 1TB 의 트래픽이 어느 정도인가?\n한 페이지의 로딩에 1MB가 필요하다면\n1TB / 1MB = 1M 백만뷰\n\n하루의 트래픽을 어떻게 계산할 수 있을까\n분당 세션 수 x 페이지 사이즈 ?\n\n## Information Theory\n\n#### 네트워크 대역폭 확인\n\n- 내가 가입한 인터넷 속도\n- 랜카드 스펙\n\n#### Reference\n\n- http://www.tcpipguide.com/free/t_HTTPOverviewHistoryVersionsandStandards-2.htm\n- https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages\n"},{"headings":[{"value":"소프트웨어"},{"value":"소프트웨어는 현대의 도구다"},{"value":"소프트웨어는 변경을 위해서 있다"},{"value":"계속 관리해주지 않아도 유지되는 소프트웨어가 만들어질 수 있을까"},{"value":"컨셉을 가진 소프트웨어"},{"value":"Algorithm vs Program"},{"value":"소프트웨어, 서비스에서 무료로 제공되어야 하는 부분과 돈을 받아야 하는 부분"},{"value":"software to make money"},{"value":"맨투맨 서비스"},{"value":"개인 대상 맨투맨 프로젝트"},{"value":"개인 맞춤형 서비스"},{"value":"변화를 감지하는 시간 200ms"},{"value":"Agile"},{"value":"TL;DR"},{"value":"애자일의 완성도"},{"value":"Concurrency"},{"value":"동시성 병렬성 블록킹"},{"value":"비동기 프로그램의 실행 처리 사례"},{"value":"pointer vs reference"},{"value":"Design Pattern"},{"value":"abstraction and automation"},{"value":"procedure, declarative"},{"value":"변수에 get, set을 설정한다고 객체가 되는게 아니라"},{"value":"객체는 내부구조를 숨겨야 한다고 한다"},{"value":"사용자가 직접 호출하는 api는 최대한 추상적으로 하고"},{"value":"Plus"},{"value":"직렬화"},{"value":"json"},{"value":"람다 아키텍처"},{"value":"JPA"},{"value":"동적 컨텐츠 vs 정적 컨텐츠"},{"value":"Go micro를 보면 실행시키기 위해 몇줄이 필요한데"},{"value":"micro"},{"value":"스프링 빈"},{"value":"스프링 시큐리티"},{"value":"메소드 체이닝"},{"value":"지금의 메소드 체이닝과 디미터 법칙의 차이"},{"value":"go 에서 외부공개함수는 대문자로 시작하는데"},{"value":"Python HowDoI 라이브러리"},{"value":"플러그인 만드는 법"},{"value":"플러그인"},{"value":"특정한 값을 보고 분기해줄 때 어떻게하면 좋을까"},{"value":"개발 노하우"},{"value":"프로그래밍 언어 추상화 단계"},{"value":"iterator 함수 감싸기"},{"value":"iterable, iterator 차이?"},{"value":"iterator와 stream 비교"},{"value":"software"},{"value":"twelve factor app"},{"value":"서버리스"},{"value":"객체 지향은 어떤 요구로 나오게 되었는가"},{"value":"모놀리스도 정반합에서 합이었던 아키텍처"},{"value":"컴퓨터"},{"value":"컴퓨터"},{"value":"Digital"}],"fields":{"slug":"/software/"},"rawMarkdownBody":"\n## 소프트웨어\n\n- 사람 - 소프트웨어 - 사람\n- 제작자 - 소프트웨어 - 유저\n- 소프트웨어 - 유저\n- 물건 - 유저\n\n결국 사람이 기준이다. 소프트웨어는 개발자, 소프트웨어 자체, 유저에게 모두 영향을 받고 미친다\n\n#### 소프트웨어는 현대의 도구다\n\n소프트웨어는 망치 같은 도구가 될 수도 있고 하나의 작은 우주가 될 수도 있다.\n필요한 것을 공간, 시간의 제약 없이 쓸 수 있는 도구\n메타도구\n먹을 것이 필요하면 소프트웨어를 통해 먹을 것을 구하고\n공부를 하기 위해 소프트웨어를 통해 공부할 것을 구하고\n\n메타적이다는 것이 추상적이고 더 상위개념 같지만 실제 문제해결을 하는 것이\n아니라는 생각이 들기도 한다\n사용자에게 직관적인 사용이 되어야 한다\n\n#### 소프트웨어는 변경을 위해서 있다\n\n종이에 쓰면 수정이 힘든 것에 비해 소프트웨어의는 변경이 자유롭다\n\n선택 전에 기준을 세우는 것에 고민을 하고, 기준점에만 들어온다면 빠르게 선택한다\n기준은 목표점이 되고, 피드백을 만들어준다\n\n#### 계속 관리해주지 않아도 유지되는 소프트웨어가 만들어질 수 있을까\n\n#### 컨셉을 가진 소프트웨어\n\n풀속성 포켓몬만 모으는 사람처럼 컨셉을 가지면 재밌겠다\n근데 시야가 좁아지고, 특정한 영역에 고립되는 것은 조심해야겠다\n\n#### Algorithm vs Program\n- Algorithm: Mathematically complete composition.\n- Program: Combination of Algorithm.\n\n#### 소프트웨어, 서비스에서 무료로 제공되어야 하는 부분과 돈을 받아야 하는 부분\n\n기능의 90%는 무료로 제공하고 10%는 유료로 제공해야 한다는 의견이 있다.\n\n- 유튜브의 광고 정책과 컨텐츠 소비의 가치에 대해\n  - 유튜브가 동영상의 광고를 임의로 넣고 있다.\n    컨텐츠 제공자는 광고를 안넣고 싶다고 해도 유튜브에서 강제로 넣는 것이다.\n\n#### software to make money\n\n소프트웨어나 컨텐츠에 돈을 안쓰려고 하는 경향이 있다\n내가 소프트웨어로 돈을 벌어야 하는데 돈을 안쓰면 내 소프트웨어도 가치를 인정받기 어렵다\n소프트웨어에 돈을 쓰기 싫어하는 이 생각을 어떻게 바꿔야 할까\n\n앞으로는 개인 맞춤형 서비스가 인기를 끌 것 같다. 그치만 개인은 돈을 안쓰려고 한다\n\n#### 맨투맨 서비스\n\n##### 개인 대상 맨투맨 프로젝트\n- 기업 상대가 아니라 개인 프로젝트의 고객 지원을 기간 단위로 해주는 것 어떨까 \n- 개인 프로젝트는 만들어놓고 덮히는 경우가 많은데 주기적으로 유저의 피드백을 잘 정리해서 보내준다면 개인 프로젝트 성장에도 도움이 될 것\n\t- 팟캐스트에서 앱 만든 사람이 얘기한걸 듣고 떠올림  \n  - 처음에는 열성적으로 리뷰를 다 보곤 하지만 시간이 지나면 잠자는 앱들이 많다. 그 부분을 도와서 운영을 쉽게 할 수 있도록 피드백을 주면 좋겠다  \n- 잠자는 소프트웨어 주인에게 제안해도 좋을 듯\n- 고객지원 뿐 아니라 구매해서 운영해주는 것도 해볼 수 있을 듯\n\n#### 개인 맞춤형 서비스\n\n인구 감소 - 내수 시장 축소 - 개인 맞춤형 서비스 - 데이터 많으면 유리\n데이터를 많이 갖고 있는 회사는?\n네이버, 카카오,\n사용자가 많은 회사\n삼성, 애플, 통신사\n정보를 모으고 있는 회사\n\n#### 변화를 감지하는 시간 200ms\n지연됐다고 느끼는 시간은 이 시간 이후.\n애플은 의도적으로 버튼 동작 타이밍을 200ms에 맞췄다\n\n## Agile\n\nproduct build in one day. design to deploy\n\n#### TL;DR\n\n- **Individuals and interactions** over processes and tools\n- **Working software** over comprehensive documentation\n- **Customer collaboration** over contract negotiation\n- **Responding to change** over following a plan\n\n* https://www.agilealliance.org/agile101/the-agile-manifesto/\n\n#### 애자일의 완성도\n\n다 완성된 후에 보여주는 완성도보다 구현한 것을 계속 확인받으면서 수정해나가는\n완성도가 높다\n\n- 서비스를 기획하는 상황이라면 도메인 전문가가 고객의 역할을 할 수 있겠다.\n  기획자가 도메인 전문가가 될 수도 있고\n\n고객은 잘 되고 있는지는 알고 싶어하지만, 계속 물어보는 것은 원하지 않는다\n\n\n## Concurrency\n\n- Race conditions\n- Deadlocks\n- Testing Concurrency\n\n#### 동시성 병렬성 블록킹\n\n- 동시성 : 하나의 코어가 여러 작업을 조금씩 하는 것, = 비동기, 전체 동작시간은 같지만 효율성 증가됨\n- 병렬성 : 코어나 스레드를 여러개 두어 여러 작업을 한번에 하는 것, 시간은 줄어들지만 비용이 증가\n- 동기 : 하나의 코어가 하나의 작업만 하는 것\n  멀티스레드라도 동기적으로 할 수 있다\n- 블록킹 : 제어권을 계속 가지고 있는 것\n- 논블록킹 : 비동기와 비슷한데 제어권을 하나의 작업이 가지고 있지 않게 하여 여러 작업이 제어권을 가질 수 있게 하는 것으로 비동기가 되면 논블록킹이 따라오는게 일반적이다\n- 비동기인데 블록킹이면 작업이 여러개 진행되어 다른 작업이 먼저 완료되어도 제어권을 가지고 있는 작업이 늦게 끝나면 먼저 완료된 작업이 아무런 이득이 없다.\n\n이것들은 I/O에 대한 것으로 CPU나 memory에서 작업을 어떻게 할지에 대한 것이다.\n\n넌블록킹 알고리즘이라는게 있는데\n멀티쓰레딩에서 하나의 쓰레드가 오류가 나거나 멈췄을 때 다른 쓰레드에 영향을 주지 않게 하는 것을 말한다.\n\ngolang에서 goroutine은 비동기로 기본 동작하고, for 문으로 goroutine을 여러개\n만들면 병렬적으로 동작한다\n\n비동기라는 말이 동기화가 안된, 실시간이 아니라는 말로도 쓰인다\n비동기 통신으로 상대방을 신경 쓰지 않고 전달해놓는 것. 문자메시지.\n동기는 전화\n\n#### 비동기 프로그램의 실행 처리 사례\n\n사용자가 입력을 주는 부분 A\n반응 해야 하는 부분 B\nB는 A에다가 함수를 전달해놓고\nA가 특정한 상황이 되면 B를 실행시키도록 하면\nB는 루프를 돌면서 응답을 확인하지 않아도 A에 의해 실행 될 수 있다\n(SetTimeOut 이나 while 루프를 돌 필요가 없다)\n여기에 더해 중간에 메시지 큐를 이용하면\nA와 B가 서로 연결되어 있지 않아도 메시지 큐에서 데이터를 받아서\n응답을 할 수 있게 된다\nA - 메시지 큐 - B\n이렇게 되면 의존성도 떨어지고 속도가 빠른 메시지 큐로 인해 더 좋은 응답을 할 수 있게 된다\n\n## pointer vs reference\n\n- pointer is address of value\n- reference is refer to value, share the address. (shallow copied object)\n- pointer can re-assign, ref cannot. just same type, value, address.\n- pointer has its own memory address, ref shares the same address.\n- in python, it is shallow copy vs deep copy\n- in Golang,\n  - pointer is a variable which stores the address of another variable\n  - reference is a variable which refers to another variable\n\n```\na := 1\nb := 2\nap = &a\na = 3\n// ap value = 3\nap2 := ap\n*ap = 5\n// ap2 value = 5\nap = &b\n// ap value = 2\n// ap2 value = 5\n```\n\n- https://spf13.com/post/go-pointers-vs-references/\n\n\n## Design Pattern\n\nSingleton\n\n- 여러곳에서 하나의 객체만을 사용해야할 때 사용\n- ex) theme, globalconfig\n\nStrategy\n\n- 객체들을 모듈화해서 수정이나 추가 시 전체코드를 건드리기보다 각각의 모듈만 건드리게끔 유도. 모듈을 만든 후 모듈 셋팅용 함수를 만들어서 수정은 한 곳에서만 하도록 구현\n\nCommand\n\n- 모듈화를 하는 것은 strategy와 같으나 strategy는 하나의 기능을 여러방식으로 구현하는 것이라면 이것은 기능 자체를 여러개 만드는 개념\n\nAdapter\n\n- 추상화를 시켜서 형태가 다른(인자를 다르게 받는) 객체를 기존 객체를 부르듯이 부를 수 있게 하는 것\n- ex) 외부 라이브러리 사용 시\n\n두 클래스나 객체에서 맞지 않는 부분을 연결 시켜야 할 때 서로 호환되도록 할 때 사용한다\n랩핑해주는것과 비슷한 것 같다\n인터페이스 자체를 수정하지 않고 클래스를 추가하여 그 클래스를 사용하게 함으로써 기존의 코드를 그대로 사용할 수 있다\n대신 코드는 좀 더 지저분해질 것이다\n\nProxy\n\n- 호출하는 시점을 proxy가 실행된 후에만 실행되게하여 무거운 작업 시 가벼운 것들을 먼저 보여주게 할 수 있다\n- //코드는 의존성이 없지만 proxy라는 구조는 다른 객체를 포함하는 구조라서 그다지 매력적이지 않다. 다른 방법으로 무거운 작업을 딜레이할 방법은? Promis 콜백처럼\n\n#### abstraction and automation\n\ndesign -> implement -> test -> deploy -> update\n\n- If I am a backend engineer\n  Am I need test the kubernetes? or just local test and push? \\* how to divide development environment and production?\n  yes. developer should have test everything. no limit.\n\ncommit -> docker test -> confirm commit -> push -> lint and test\nconfirm PR -> deploy -> send report\n\n## procedure, declarative\n\nif else를 쓰는 절차적인 방식을, 어떤 인자가 필요하니 이게 없으면 만들어라 라는\n선언적 방식으로 바꿔 관리를 쉽게 한다\n\n함수가 한가지 일만 하는지 확인하는 방법은 추상화 수준이 일관된지 확인한다\n\n## 변수에 get, set을 설정한다고 객체가 되는게 아니라\n\n추상화를 통해 구현은 감추고 추상화 된 인터페이스를 보게 해야 클래스를 사용한다고 할 수 있다\n\n#### 객체는 내부구조를 숨겨야 한다고 한다\n\n변수를 프라이빗으로 하고 함수로 제어하는 것이 변수를 직접 조종하는 것보다 나은 이유\n\n- 변수에 특정한 속성을 넣어줘야 할 때 get 함수만 수정하면 변수 값을 쉽게 변경 할 수 있다\n- 다른 객체가 직접 값에 접근을 못하게 해서 원하는 동작을 지킬 수 있다.\n\n#### 사용자가 직접 호출하는 api는 최대한 추상적으로 하고\n\napi는 인터페이스를 호출하고 인터페이스는 유닛함수를 호출하고\n유닛함수는 외부라이브러리와 분리시킨다?\n\n#### Plus\n\n- 가벼워야 한다. 그래서 외부 API나 라이브러리를 안쓰고 싶었다\n  - no dependency, low coupling\n- 안전한 동작 - 회사일을 하면서\n- 하나하나의 시스템이 완성도 높은 시스템으로 구성할 수 있도록\n- 엘리베이터의 안정성이 보장되는 것처럼 (보장된다는 것이 100%는 아니다) 프로그램도 안정성이 보장되어야 한다.\n  - 엘리베이터는 하나의 제품 자체로만 구동한다. (자연 환경의 변수는 있다)\n    그런데 프로그램은 OS, Kernal, 사용자의 기존 작업 환경 등이 영향을 끼친다.\n  - 그저 동작하는 프로그램만으로는 부족하다 테스트코드를 만듬으로서 안정성을 높일 수 있다. 또 다른 방법은 무엇이 있을까\n- Transparent\n- 확장 시 확장하는 그 자체만 코드가 작성되어야 하고 기존의 코드를 건드리면 좀 별로다\n- 외부 모듈 사용 시에는 코드를 분리한다. 호출하는 함수와 실제 동작하는 함수로\n- 함수 인자는 최대한 적게 받는다\n- 함수 인자로 받지 않은 데이터는 수정하지 않는다 (순수 함수)\n- 객체를 먼저 정의하고, 그에 맞춰 코딩한다\n- 객체 변경이 필요할 때 큰 객체는 포인터로 넘기고 작은 값은 인자로 넘기는게 좋겠다\n- 변수,함수 앞에 접두어를 붙이는 것이 나쁜가? 직관적이고 그렇게 더럽히지 않는 것 같다\n  - int 형은 i를 붙이고 인터페이스는 I를 붙이고\n  - 변수에 접두어 붙이니 지저분해보임\n- 내부변수로 만들어서 내부에서 변경시키는 것\n  인자로 전달해서 변경 시키는 것\n  내부변수로 하고 겟, 셋으로 감싸는 것\n  어느것이 제일 좋을까\n- 추상화가 낮은 함수를 만들면 그 함수를 쓰는 곳과 구분이 되었으면 좋겠다\n  같은 클래스 안에 있어야 한다면 어떻게 구분할 수 있을까\n- 개인 프로젝트는 라이브러리를 쓰기 보다 구현을 하고 싶다\n- 소프트웨어 사용을 하다보면 데이터는 계속 쌓일텐데 그 때마다 디스크를 늘리는건 아쉽다\n- 원하는 개발을 위해 기준을 세워놓아 흔들림 없이 목표를 이루어 나가야한다\n- 내 개발을 위한 철학을 만들어 두고, 내 것 뿐만 아니라 회사일을 할 때도 쓰는\n  개발 최저 기준도 만들어놓는다\n- Clean code / low coupling / module / single responsible\n- safety / light weight / divide / api, test, log, error handling\n- high performance, optimization, multi-function\n- 라이브러리 재사용성이 좋도록 한다\n  라이브러리 사용 시 내부를 몰라도 되도록 해야한다\n- grpc로 또는 http로 다른 자원에 접근하고\n- 내부 코드는 바로바로 갖다 쓸 수 있으면 좋겠다(golang처럼)\n- 소프트웨어를 만들고나면 실패지점을 일부로 계속 찾아서 안정성을 높여야겠다\n- 모든 코드는 레거시가 된다. 레거시는 걷어내야 하는게 아니라 쌓이는 유산이다\n  그래서 코드를 재사용하기 좋게 만들어야 한다\n\n## 직렬화\n\n압축\nhttp header content type\n\nbase64\n바이너리 데이터를 아스키 데이터로 변환하는 것\n이미지 파일 같은 데이터를 json으로 옮긴 후 바로 실행하려면 utf8 호환 등 안맞는\n경우가 있는데\nbase64로 인코딩해놓으면 범용성 있게 사용 가능하다\n\n#### json\n\n- marshal: 논리적 구조를 바이트로\n- unmarshal: 바이트를 논리적 구조로\n- encode: 언어 내부 구조를 json 형태의 스트림으로\n- decode: json을 언어 내부 구조로\n\n표준 입출력은 encode/decode를 이용하면 마샬보다 빠르다\n(http response, file, stdout)\n\n## 람다 아키텍처\n\n1억건의 데이터가 매일 쌓인다면 이것을 조회할 때 오래 걸린다\n\n이를 해결하기 위해 매일 하루를 요약한 테이블을 만들면 1년의 데이터가 365줄로 요약된다\n근데 실시간 데이터는 반영이 안되므로 이를 위해 실시간 데이터를 계속 업데이트 해준다\n\n기존 테이블에 실시간 테이블이 붙는 방식\n\n하둡이 배치처리를 하는 방식이라 빅데이터에 쓰인다\n\n## JPA\n\nORM이 코드의 객체성과 DB의 관계성을 매꾸기 위해 나왔다고 한다.\n그래서 DB를 item.getName() 이런 식으로 호출할 수 있게 되었다.\n마이크로서비스에서 다른 서비스의 데이터를 item.getName() 처럼 가져오려고 했던게\nORM에서 이미 나온 생각이었다.\n\nAPI gateway가 이를 구현해서 호출하도록 하면 모놀리스 그대로 마이크로서비스화 되지\n않을까?\n\nC#의 Linq는 SQL문처럼 작성하고 선언형으로 작성함으로서 함수형 아키텍처의 이점을\n가져가려고 한다.\n\n## 동적 컨텐츠 vs 정적 컨텐츠\n\n동적\n\n- 채팅\n- 데이터 변경(주식)\n\n블로그 글도 정적이지만 변경 되긴 한다. 근데 새로 빌드하는 것보다 새로 띄우는게\n더 빨라서 주식 정보의 경우에는 동적으로 변경되는게 효율적이다.\n\n#### Go micro를 보면 실행시키기 위해 몇줄이 필요한데\n\n그러지말고 start만 하면 기본 실행 되고\n셋팅은 coc로 설정하면 설정되고 그냥 쓸 수 있게 하는게 좋을 것 같다\n\n개인적으로 쓰는 프로그램은 기본적으로 많은 기능이 있는 것은 안쓰고 싶다. 가볍고 단순하지만 추가적으로 기능을 추가하는 쪽이 좋을 것 같다\n그래서 웨일도 별로다\n웨일은 크롬과 똑같은 엔진을 쓰지만 기본 기능이 주렁주렁 달려있다.\n한번씩 기본 기능들이 좀 많아서 기능의 혜택을 받았으면 좋겠다는 생각이 들었는데, 그냥 가벼운 쪽이 더 컨트롤하기 좋아서 낫겠다 싶다\n\n플러그인의 단점이 일일이 찾아봐야 기능을 쓸 수 있다는 것인데, 이 부분을 개선할 필요가 있다\n\n#### micro\n\ngrpc는 내가 모르는 코드를 너무 많이 생성한다. micro도 마찬가지\n나는 오히려 cookiecutter처럼 내가 알지만 매번 만들기 귀찮은 것을 쉽게 만들어주는\n것을 원한다. create-react-app처럼.\nkubernetes는... 점차 속속들이 알아나가야지...\n\n내 만들어져있는 로직을 조금만 수정해서 마이크로서비스화 하는 것을 해봐야겠다\n입력과 출력을 받는 형태만 갖추면 바로 찾아서 연결해서 쓰도록\n\n#### 스프링 빈\n\n주요 속성\n\n- class (필수)\n- id: bean의 고유 식별자. 이름에 의미 없음!?\n- scope\n- constructor-arg: 생성 시 생성자에 전달할 인수\n- property: 생성 시 bean setter에 전달할 인수\n  - ref\n  - value\n- init method\n- destroy method\n\n<context:annotation-config/> 를 쓰면 빈 설정을 어노테이션을 검색해 반영한다\n\n#### 스프링 시큐리티\n\nsecurity:authentication-manager\n\n- 인자로 받은 Authentication 객체가 유효하다면 Principal을 담고있는 이것을\n  리턴한다.\n  - security:authentication-provider\n    manager가 직접 처리 안하고 provider에 위임한다.\n\n#### 메소드 체이닝\n\n기차 충돌\n빌더 패턴\n디미터의 법칙\n함수형 패러다임\n\n객체 자신 또는 내부의 정보로 이루어진 체이닝은 괜찮다?\n\n객체 간 상태 변경 필요 시 어떻게 하는것이 효과적인가?\n주인공이 적을 공격 했을 때\n역할과 하는 일(책임)을 분리한다\n주인공은 공격하는 일만 하고, 적은 이벤트에 대응하기만 하면 된다?\n공격이 제대로 되었는지는 어디서 판단? 또 다른 객체?\n\n흐름이 없는 코드, 상태가 없는 코드\n\n#### 지금의 메소드 체이닝과 디미터 법칙의 차이\n\n디미터 법칙은 호출한 객체의 함수가 다른 객체를 불러 처음 호출한 객체와 다른\n객체를 부르기 위한 것이 되어버린 메소드 체이닝이 복잡도를 높이는 점을 지적한다\n지금의 메소드 체이닝은 메소드가 기존에 호출했던 객체를 반환함으로써 가독성을\n높이는 효과를 위해 사용되고 있다\n\n#### go 에서 외부공개함수는 대문자로 시작하는데\n\n메인로직 외에는 공개하지 않도록 짜야겠다\n\n근데 인터페이스로 만들면 다 공개해야되는거 아닌가\n\n- 인터페이스로 쓰는건 공개하고, 인터페이스 함수 내에 있는 것은 감추면 되겠다\n\n#### Python HowDoI 라이브러리\n\n라이브러리 사용자가 쓰지 않는 함수는 함수명 앞에 언더바를 붙이고, 테스트 시\n사용자가 쓰는 함수만을 통해 테스트한다고 한다\n\n#### 플러그인 만드는 법\n\n비즈니스 로직이 바라보는 인터페이스가 있고,\n이 인터페이스를 구현하는게 플러그인이라면.\n\n플러그인의 예\n\n- 크롬 확장 프로그램\n  - 크롬의 정보를 불러와서 크롬에 표시하게 해준다.\n- 그놈 확장 프로그램\n  - 그놈 인터페이스의 값을 내 기능을 실행시키고 동작하게 한다.\n- 비주얼 스튜디오 코드의 확장 프로그램\n  - 원하는 기능을 실행하도록 해준다.\n\n플러그인을 설치하면 기존의 흐름을 낚아채서 조절한 후 다시 갖다 놓는 그림이다.\n그렇다면 플러그인을 실행하도록 하는 로직을 구현해놔야겠다\n\n#### 플러그인\n- 플러그인이 어디까지 접근 가능한가?\n\t- 코드에 직접 접근하지 않지만 내부의 동작을 수정한다\n\t- 짜여진 코드 중간중간에 삽입하는게 아니라 외부에서 붙여지는 방식이라 관리가 쉽다\n\t- 사용/비사용 관리가 쉽다\n\t- 오버로딩과 비슷한 느낌으로 구현하는건가?\n\t- 플러그인을 실행하는 함수만 구현하도록 하고, 플러그인이 내부의 함수를 호출할 수 있도록 만들면 되나? 그러면 겹치는 부분은 플러그인 함수가 실행되게 되나?\n\t- vscode 에서는 package.json에서 사용할 목록을 입력하고, extension.ts라는 하나의 파일 안에 activate라는 함수만 실행하게 해서 사용하려는 것을 사용하도록 하게 하고 있다\n\t\t- 여기에 vscode에서 제공하는 함수들을 이용할 수 있게 했다. 플러그인 아키텍처를 구현할 때 이 함수들을 어떻게 만들지가 포인트겠다.\n\t\t\t- vscode의 commands 클래스에는 execute, register, update 등 함수가 제공된다.\n\t\t\t- commands, window, workspace 등 조작할 수 있는 것들을 화이트리스트로 제공한다.\n\t\t\t- 즉 코어에서는 이 commands, window 들을 정의하는 것이 주요 역할이고 이를 익스텐션이 덮어쓰도록 한다.\n\t\t\t- 플러그인 구현하는쪽은 제공해준 함수 안에서만 뭔가를 할 수 있다.\n\t\t- 사용자는 물론 자신의 함수를 정의해서 activate 함수에서 쓸 수 있다.\n\t\t- 플러그인은 결국 인터페이스를 구현하는것이라 틀은 만들어놔야한다.\n\n#### 특정한 값을 보고 분기해줄 때 어떻게하면 좋을까\n\n어떤 알림인지 타입을 보고 결정하게 될텐데\n타입에 맞는 핸들러를 매칭해줄때\n스위치를 쓸까\n배열에 지정해놓고 호출하는식으로 할까\n클래스로 할 수 있을까?\n\n타입을 보고 결정?\n\n#### 개발 노하우\n\n삭제는 딜리트가 아니라 isDelete를 true로 바꾸고\n히스토리를 추가하는 작업\n\n진짜 삭제가 필요한 경우는?\n\n#### 프로그래밍 언어 추상화 단계\n\n- 기계어 0101010\n- 어셈블리어\n- 명령형 코드 for\n- 선언형 코드 filter()\n\n#### iterator 함수 감싸기\n\niterator를 쓰는 함수는 내부가 for문을 돌리고 원하는 처리를 하는 동일한 구조로 되어있다\n이걸 계속 반복해서 쓰기보다 감싼 함수에서 실행하게 하면 좋겠다\n\n#### iterable, iterator 차이?\n\nlist 같이 요소를 순회할 수 있는 것을 iterable이라 한다\niterator도 iterable한 객체인데 iterator는 한 개씩 꺼내 쓰기 위한 것이라 iterable이 iterator는 아니다\n\n#### iterator와 stream 비교\n\n- iterator를 간결하게 쓰게 해주는게 stream\n\nquery로 필터링하는 것과 stream filter 비교\n\n- 많은 양에서는 무조건 쿼리가 빠름\n- 그동안 db 최적화가 아주 많이 이뤄졌기 때문\n  iterator도 iterable하니까 map을 쓸 수 있지 않을까?\n\n\n## software\n\n#### twelve factor app\n\n웹앱처럼 서비스로 사용되는 소프트웨어에서 이 요구사항 12가지를 챙겨서 만들자는 방법론\n\n- https://12factor.net/ko/\n\n1. 버전 컨트롤을 사용하자\n2. 라이브러리 의존성을 명시적으로 선언하고 분리하자\n3. 인증 정보, DB 설정, 각종 배포 설정을 환경 변수로 관리하자\n4. 객체 저장소, DB, 캐시, 메시지 큐, 외부 API 서버 등을 구별 없이 서비스로 인식하자\n5. 애플리케이션 빌드, 출시, 실행 단계를 엄격하게 분리하고 관리하자\n6. 애플리케이션을 독립적인 무상태(stateless) 프로세스로 실행하자 (DB 사용. 로컬 Disk 사용 X)\n7. 독립적인 포트를 바인딩하여 서비스로 공개하고 포트로 들어오는 요청을 처리하자\n8. 이러한 프로세스 모델을 기반으로 수직적, 수평적 확장을 제공하자\n9. 빠른 시작과 그레이스풀 셧다운을 통한 안정성 극대화를 하자\n10. 개발, 테스트 및 정식 서비스 환경을 최대한 동일하게 유지하자\n11. 각종 로그는 파일로 다루지 않고 앱이 실행되는 도중에 실시간으로 포착하자\n12. 관리자 업무와 백 오피스 업무는 기존 애플리케이션 같은 환경에서 동일 형태로 취급하자\n\n그리고 추가로 3가지를 더 고려하면 좋겠다고 이야기했다고 한다\n텔레메트리(모니터링), 자동화, 보안\n\n#### 서버리스\n\n이벤트 소스 -> 함수 -> 서비스\n\n#### 객체 지향은 어떤 요구로 나오게 되었는가\n\n복잡한 구조에서는 객체지향의 상속, 추상이 도움이 되더라\n\n절차지향적이던 코드는 책을 쓰는 것과 비슷했다\n객체지향이 나오면서 책을 쓰는 것과는 달라졌지만\n작가가 퇴고하는 것과 리팩토링하는 부분은 비슷했다\n하지만 작가는 퇴고 후 출판된 책은 더 이상 수정하려 하지 않고 독자에게로 넘겨준다\n이 점은 코딩과의 차이점인데, 코딩도 이처럼 완료되는 시점을 만들 수 있을까.\n리눅스의 sed나 기본 명령어들은 자주 업데이트하지 않으며, 오랫동안 업데이트 되지 않았지만 여전히 쓰이는 코드들이 있다.\n그러나 프로그램 전반의 생태계는 빠르게 변하고 있어서 사용자가 원활하게 쓸 수 있도록 하기 위해서는 끝없는 수정이 불가피하다.\n\n#### 모놀리스도 정반합에서 합이었던 아키텍처\n- [ ] 어떤 것을 보완하기 위해 모놀리스라는 아키텍처가 달성되었을까\n3 layer 아키텍처를 만들다보니 모놀리스가 된 것인가\n\n\n## 컴퓨터\n\n#### 컴퓨터\n\n컴퓨터의 단점\n\n- 눈 앞에 있어야 한다. (컴퓨터 앞에서는 공간의 제약이 없어지지만)\n- 프로그램별 호환성, 종속성을 신경 써야한다. (에버노트의 데이터를 노션에\n  옮기려면 번거롭다)\n- 디스플레이에 따라 정보가 제한적이고, 답답하고, 한 눈에 보기 힘들어진다.\n\n장점\n\n- 변경이 가능하다. (종이는 새로운 종이가 필요한데)\n- 점진적 개발이 가능하다\n- 검색 기능\n\n기계는 그냥 해달라는 대로 해주는 것에 그칠 뿐이지만\n사람은 그 요구사항을 경험적, 직관적으로 판단해서 소비자와 같이 만들 수 있다\n\n이 부분이 사람의 장점일 것 같다\n이 점은 서로 존중하면 시너지가 될 것이고, 이익만 좇는다면 등쳐먹는 것이 되겠다\n\n#### Digital\n\n- 디지털의 역할\n- 불편함은 줄이고 원하는 것은 쉽게 얻을 수 있도록 하는 것?\n"},{"headings":[{"value":"Linux"},{"value":"Directory"},{"value":"bash script cheatsheet"},{"value":"linux environment script (startup files)"},{"value":"hammerspoon 파일을 dotfile에 추가"},{"value":"automatically run command when turn on the computer"},{"value":"ubuntu korean"},{"value":"kubuntu korean setting"},{"value":"Linux distro"},{"value":"distros"},{"value":"linux set environment problem"},{"value":"curl"},{"value":"sudo"},{"value":"search large file"},{"value":"한국 시간 맞추기"},{"value":"backup"},{"value":"iptables"},{"value":"서버 보안 설정"},{"value":"ssh"},{"value":"DB"},{"value":"db backup cronjob"},{"value":"Streaming"},{"value":"oracle DB"},{"value":"DNS"},{"value":"참고"},{"value":"Setting"},{"value":"storage"},{"value":"디스크 설정"},{"value":"quota"},{"value":"Virtual box Ubuntu HDD 추가"},{"value":"virtual box ubuntu hdd 용량 확장"},{"value":"How to expand VirtualBox's Virtual Hard Disk - N_CODER"},{"value":"NFS 서비스"},{"value":"FTP 서비스"},{"value":"video recording"},{"value":"WD Passport Unlock in linux"},{"value":"linux battery"},{"value":"i3"},{"value":"w3m"},{"value":"code-server"},{"value":"WSL"},{"value":"standard stream"},{"value":"SIGTERM"},{"value":"crontab not working"},{"value":"android mirroring app"},{"value":"replace all directory in linux using regex"},{"value":"vim visual mode selection"},{"value":"vim lag"},{"value":"external monitor"},{"value":"ipad as second monitor"},{"value":"numpad as mouse pointer"},{"value":"linux copy and paste in terminal with mouse"},{"value":"ubuntu backup, snapshot"},{"value":"linux settings"},{"value":"linux text to image"},{"value":"font broken"},{"value":"terminal app"},{"value":"vim window size"},{"value":"vim inoremap"},{"value":"ubuntu font"},{"value":"python in vim"},{"value":"linux keyboard delay"},{"value":"touchpad gesture"},{"value":"crontab 에 스크립트 에러 없이 등록하기"},{"value":"텍스트 분리"},{"value":"TLS"},{"value":"ssh key-gen"},{"value":"라즈베리파이 와이파이 등록"},{"value":"ubuntu theme 꾸미기"},{"value":"리눅스에서 fzf로 파일명을 찾아서 삭제하려면"},{"value":"github without password"},{"value":"쉘명령어 앞에 &붙이면 백그라운드 작업"},{"value":"albert"},{"value":"markdown 줄 수 검색"},{"value":"변경 사항만 가져와서 빌드하기"},{"value":"arm의 장점"},{"value":"GIT"},{"value":"ADD - COMMIT - PUSH"},{"value":"Branch 관리"},{"value":"push without login"},{"value":"git sensitive files delete"},{"value":"git hooks"},{"value":"git ignore"},{"value":"git show"},{"value":"git simulation"},{"value":"git cheatsheet"},{"value":"cleaning a big size file in all git commit"},{"value":"git 브랜치 바꿔서 현재 수정 가져가기"},{"value":"git ssh"},{"value":"git fatal: Not possible to fast-forward, aborting. 문제"},{"value":"git pull 했을 때 컨플릭트 나서 되돌리고 싶다면"},{"value":"ETC"},{"value":"prometheus"},{"value":"ELK vs TICK"},{"value":"grafana alert"},{"value":"TICK"},{"value":"Benchmark"},{"value":"nginx alternative"},{"value":"ansible"},{"value":"ansible command vs shell"},{"value":"ansible"},{"value":"Nginx letsencrypt"},{"value":"terraform vs serverless"},{"value":"테라폼만 쓸지 서버리스를 같이 쓸지 고민중"},{"value":"terraform"},{"value":"terraform ansible"},{"value":"use module. For different folders can use once."},{"value":"github action terraform"},{"value":"! change backend bucket"},{"value":"AWS Dynamodb terraform"},{"value":"serverless"},{"value":"serverless"},{"value":"serverless"},{"value":"vault"},{"value":"vault in gcp"},{"value":"개발환경, 커맨드라인, CI/CD 환경, IaC에서 모두 활용 가능한 키밸류 관리 시스템이 갖고싶다"},{"value":"google calendar api"},{"value":"nagios"},{"value":"for docker monitoring"},{"value":"nagios 비밀번호 변경"},{"value":"aws lambda cronjob"},{"value":"serverless aws sqs lambda"},{"value":"devdash"},{"value":"cloud"},{"value":"Current Used infra"},{"value":"카프카와 다른 메시지큐"},{"value":"gRPC"},{"value":"grpc"},{"value":"grpc"},{"value":"grpc"},{"value":"grpc"},{"value":"grpc 구현 시"},{"value":"grpc 통신 속도 확인"},{"value":"reference"},{"value":"text preprocessing"},{"value":"react table"},{"value":"api gateway"},{"value":"kong reference"},{"value":"kong grpc gateway"},{"value":"husky를 쓰면 git hooks를 github에서 공유할 수 있다"},{"value":"dynamodb"},{"value":"동영상 스트리밍"},{"value":"동영상 서버"}],"fields":{"slug":"/tool/"},"rawMarkdownBody":"\n좋은 소프트웨어는 기존의 흐름을 바꾸는게 아니라 길을 잡아주고 확장된 길을 열어준다\n- git\n- Kubernetes\n- Docker\n\n\n# Linux\n\n## Directory\n\n- `/`\n- `/bin` - 기본 명령어가 저장된 디렉토리\n- `/sbin` - ifconfig 등 시스템관리자용 명령어가 저장된 디렉토리\n- `/home` - 사용자의 홈 디렉토리\n  - `useradd` 명령어로 새 사용자를 생성하면 생성자와 같은 이름의 디렉토리 생성됨\n- `/tmp` - 공용디렉토리, 임시 작업 디렉토리\n- `/lib` - 커널 모듈 파일,라이브러리 파일 존재\n- 커널이 필요로 하는 파일들이 존재\n- `/usr` - 일반사용자들이 주로 사용하는 디렉토리\n  - 일반 사용자용 명령어는 /usr/bin 에 위치한다.\n- `/var` - 일시적으로 저장하기 위한 디렉토리\n  - 내용이 수시로 변경될 수 있는 파일\n- `/dev` - 디바이스 파일 ( CD-ROM 등 )\n- `/etc` - 시스템 설정 파일이 존재하는 디렉토리\n- `/boot`\n- `/proc`\n\n## bash script cheatsheet\n\n- echo with color: `GREEN='\\033[0;32m'`, `NOCOLOR='\\033[0m'`\n- check package installed: `if ! dpkg -s $PACKAGES >/dev/null 2>&1; then`\n- check command with argument: `x=''`, `if [ -z ${1+x} ] then` //$1 = first argument\n- check file exist: `if [ -e <file> ] then`\n- check root: `if [ \"$(whoami)\" != \"root\" ] then`\n- check input:\n\n```\necho -n \"please input\"\nread INPUT\nif [ -z $INPUT ] then\n```\n\n- break when error occurred: `set -u -e`\n- error occurred but prevent break: `<some command> || echo \"failed\"`\n- allow every question: `yes | <some command>`\n- write text to file: `echo <text> >> <file>`\n- date: `$(date '+%F=%H=%M')`\n- delete old file: `find <dir> -name \"*.png\" -type f -mtime +3 -delete`\n\n## linux environment script (startup files)\n\ninteractive shell - terminal console\n\n1. /etc/profile\n2. ~/.profile\n3. ~/.bash_profile\n4. ~/.bash_login\n\ninteractive non-login shell\n~/.bashrc\nzshrc\n\nnon-interactive shell - script\n\n#### hammerspoon 파일을 dotfile에 추가\n- 기존 파일을 dotfile로 옮기고\n- `ln -s 절대경로/file 옮길위치/파일명`\n\n## automatically run command when turn on the computer\n\n/etc/rc.local\n/etc/init.d/rc.local\n\n## ubuntu korean\n\nalt_r can't recognized.\nso, need change alt_r -> hangul\n`/usr/share/X11/xkb/keycodes/evdev`\n\n```\n//<\\RALT\\> = 108; \\ 는 빼고\n...\n//<\\HNGL\\> = 130;\n<\\HNGL\\> = 108;\n```\n\n#### kubuntu korean setting\n\n- kubuntu default korean failed\n  - this layout is not korean\n- fcfix failed\n- uim byeoru success\n  - `sudo apt-get install uim uim-byeoru`\n  - language settings -> uim\n  - execute uim > set default, remove global option, set byeoru on/off to hangul\n\n## Linux distro\n\n- base ubuntu, but it is no beauty -> kubuntu, but it is no light-weight -> mx-linux\n- mx linux is not user-friendly, back to the ubuntu\n\n#### distros\n\nmx linux\ndeepin\nchrome\nbackslash\n\n#### linux set environment problem\n\n- vim 8.1 >\n- vim doesn't support python. -python\n- zsh chsh\n- oh-my-zsh can't recognize\n- source\n- big size of workspace\n- touchpad behavior\n- windows key behavior\n- need set start bar\n\n## curl\n\n폴더 다운로드\n\n- wget -r http://download/images\n  특정 폴더에 다운로드\n- wget -P /home/user/Downloads 'http://image.url.png'\n\n## sudo\n\n/etc/group 에 root 에 사용자 추가\n/etc/sudoers 권한 수정 후 root ALL=(ALL:ALL) ALL 밑에 사용자 추가\n\n## search large file\n\ndu -h --max-depth=1 /\ndu -h / | sort -rh | head -n 10\n용량 큰 거 10개만 출력\n\n## 한국 시간 맞추기\n\n- ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime\n\n## backup\n\n- 전체 시스템 백업\n  - `tar -cvpzf backcup.tar.gz --exclude=/proc --exclude=/lost+found --exclude=/backup.tar.gz --exclude=/mnt --exclude=/sys /`\n- 홈 디렉토리만 백업\n  - `tar -cvpzf backuphome.tar.gz --one-file-system /home`\n  - `tar 옵션 압축한파일명 압축할경로`\n- 옵션\n  - c : tar로 묶음\n  - v : 압축과정 화면 추력\n  - p : 파일 권한 저장\n  - z : gzip으로 압축,해제\n  - f : 파일 이름 지정\n  - C : 경로 지정\n  - x : tar 압축 해제\n- 복구\n  - `tar -xvpfz backuphome.tar.gz`\n\nbackup.sh 스크립트 짜기\n\n- 압축\n\n```\n#!/bin/bash\n//tar -옵션 /백업할디렉토리/백업파일명 /백업할 대상\ntar -czpf /backup/backup.'date +%Y%m%d%H%M%S'.tgz\n```\n\n- 날짜 형식 쓰는 법\n  - `$(date +\"%Y-%d-%m\")`\n- 10일 지난 파일 삭제\n  - `find /backup/ -type f -mtime +10 | sort | xargs rm -f`\n\n자동화 설정\ncrontab 에 내용 입력\n\n- `-l` 현재 등록된 작업보기\n- `-e` 편집하기\n- minute hour day month week(0=Sunday, 1=Monday)\n- `sqldump` 후 백업 추가\n\n## iptables\n\n조건\n\n- --source(s) 출발지 IP주소\n- --destination(d) 도착지 IP주소\n- --protocol(p) 특정 프로토콜(tcp,udp)\n- --In-interface(i) 입력 인터페이스\n- --out-interface(o) 출력 인터페이스\n- --state 연결 상태와 매칭\n- --string 애플리케이션 계층 데이터 바이트 순서와 매칭\n- --comment 주석\n- --syn(y) syn패킷 허용 여부\n- --table(t) 처리될 테이블\n- --jump(j) 규칙에 맞는 패킷을 어떻게 처리할지\n- --match(m) 특정 모듈과의 매치\n- -A 새 규칙 추가\n- -D 규칙 삭제\n- -C 패킷 테스트\n- -R 새 규칙으로 교체\n- -I 새 규칙 삽입\n- -L 규칙 출력\n- -F 규칙 모두 삭제\n- -N 새 chain 을 만든다\n- -X chain 삭제\n- -P 기본정책을 변경한다\n\nKEYWORD\n\n- ACCEPT 받는다\n- DROP 버린다\n- REJECT\n- LOG\n- RETURN\n- NEW 새로운 연결을 요청하는 패킷\n- ESTABLISHED 기존 패킷\n- RELATED 기존 연결이고 새로 연결 요청하는 패킷\n- INVALID 어디에도 속하지 않은 패킷\n\n## 서버 보안 설정\n\nssh 보안\n\n- `/etc/ssh/sshd_config`\n- ip 제한\n- 포트 변경\n- root 접속 제한\n- Fail2ban 설치 ( 로그인 시도 아이피 차단 프로그램 )\n\n#### ssh\n\n- `sudo apt remove -y openssh-server`\n- `sudo apt-get install -y openssh-server`\n- `sudo su`\n- Port 수정\n- #PasswordAuthentication yes\n- `sudo service ssh --full-restart`\n\n> ssh에서는 인터넷 끊기면 세션 끊기는데 mosh에서는 세션 유지된다고 한다\n\n일반 사용자 su 명령어 제한\n\n- /bin/su 파일 접속 권한 설정\n- /etc/pam.d/su 파일 auth required 주석 해제\n- /etc/group 에 wheel(관리자 권한 대행 그룹) 에 원하는 유저 추가\n\n계정관리\n\n- Passwd 정책\n- /etc/login.defs\n- 그룹 권한\n- 계정 권한\n- 계정 에이징 설정\n- Default 계정 삭제\n- Umask 관리\n- /etc/profile\n\n파일 권한 관리\n\n방화벽 관리\n\n- /etc/sysconfig/iptables\n- 방화벽 설정\n  `-A INPUT -m state --state NEW -m udp -p udp --dport 53 -j ACCEPT`\n\n파티션 분리\n\n캐쉬 메모리 삭제\n\n- Free -m 확인\n- Sync && echo 3 > /proc/sys/vm/drop_caches 삭제\n- Crontab 에 추가\n\n## DB\n\nPostgresql 설치\n\n- `yum install -y postgresql-server`\n\n기본 디렉터리\n\n- /var/lib/pgsql/data\n- Or /var/lib/postgresql/9.5/main/\n- Data 저장 위치로 좋은 곳 -> /etc/stgresql/9.5/main/data\n\n시작\n\n- Postgres 계정으로 접속 후 진행\n- Initdb\n- Pg_ctl start\n- Psql\n\n2대 연동\n\n- Wal 이라는 마스터서버의 로그를 만들어 스탠바이서버로 복사 후 스탠바이 서버에서 로그를 복원하는 방식으로 연동이 된다\n- Wal 방식으로 log-shipping 방식과 streaming 방식이 있다.\n\n#### db backup cronjob\n\n`/etc/rc.local`\n\n- `docker start postgres && docker start tomcat` 추가\n\n```\ncrontab -e\n* * * * * docker exec postgres pg_dumpall > /PGSQL_all.dump\ndocker cp postgres:/PGSQL_all.dump /home/pi/docker/postgres-pi/\n```\n\n#### Streaming\n\nMaster\n\n- Replication 전용 유저 생성\n- CREATE ROLE repluser WITH REPLICATION PASSWORD 'password' LOGIN;\n- Pg_hba.conf 파일 편집(맨 밑에 추가)\n- Host replication repluser 허용할IP md5\n- Postgresql.conf 편집\n- Listen_addresses = '\\*'\n- Wal_level = hot_standby\n- Max_wal_senders = 2 wal 파일을 전송 할 수 있는 최대 서버 수\n- Wal_keep_segments = 32 마스터 서버 디렉토리에 보관할 wal 의 갯수\n\nStandby\n\n- `sudo -u postgres /usr/pgsql-9.5/bin/pg_basebackup -h MASTER IP -D /var/lib/pgsql-9.5/data -U repluser -v -P --xlog-method=stream`\n- `postgresql.conf`\n\n```\nListen_addresses = '*'\nHot_standby = on\n```\n\n- `recovery.conf` 생성\n\n```\nStandby_mode = on\nPrimary_conninfo = 'host=MASTER IP port=5432 user=repluser password=passwrd'\n```\n\n[설치](https://www.lesstif.com/pages/viewpage.action?pageId=31850584)\n[클러스터링](http://egloos.zum.com/histLinux/v/1227710)\n\n## oracle DB\n\n- lsnrctl start\n- sqlplus /nolog\n- connect sys/oracle as sysdba\n- startup\n- CREATE TABLE dept(deptno NUMBER(2),\n  dname VARCHAR2(14),\n  create_date date);\n- desc dept;\n- select \\* from dept; //확인\n- alter table dept\n  Add (job_id varchar2(9)); -- 테이블에 추가\n  -alter table dept\n  Modify (job_id Number(2)); -- 테이블 수정\n  -alter table dept\n  RENAME COLUMN deptno TO no; -- 칼럼 이름 변경\n  -alter table dept\n- DROP COLUMN job_id; --- 칼럼 삭제\n- DROP TABLE dept; -- 삭제\n  -show recyclebin; -- 삭제 되면 recyclebin 으로 가고 이걸 볼 수 있다.\n  -FLASHBACK TABLE dept TO BEFORE DROP; -- 되살리기\n  -INSERT INTO dept(deptno,dname,create_date)\n  VALUES(10,'maketing','15-feb-0'); --- 열 내용 추가\n- select \\* from dept where dname = 'it';\n- UPDATE dept SET dname='accounting' --- 내용 수정\n  WHERE deptno = 10 ; -- dept 의 deptno=10 인 쪽의 dname을 accounting 으로 변경\n- CREATE TABLE dept(\n  Deptno number(2) CONSTRAINT dept_deptno_pk PRIMARY KEY,\n  Dname VARCHAR2(14) CONSTRAINT dept_dname_nn NOT NULL,\n  Email VARCHAR2(30) CONSTRAINT dept_email_uk1 UNIQUE);\n  ---> primary key 조건을 건 deptno 생성;\n  not null 조건을 건 dname 생성;\n  unique 조건을 건 email 생성; ---> primary key 는 not null과 unique 조건 포함됨;\n  제약조건의 이름은 알아볼 수 있게 저렇게 해주는게 좋음\n\n## DNS\n\nname server 유형\n\n- Primary : 주 네임서버\n- Secondary : 백업 서버\n- Cache only server : 지사용\n\n설치 - `yum install -y bind*`\n\n셋팅\n\n- /etc/named.conf\n\n```\nOption\n- Allow-query\n- Zone\n- Zone 에 도메인 이름 입력\n- Type\n- Hint 루트 네임서버\n- Master 1차 네임서버\n- Slave 2차 네임서버\n- File 구체적인 dns 정보가 담긴 /var/named/domain.zone 파일의 위치를 넣는다.\n- 마스터 - Allow-transfer {슬레이브 주소;};\n- 슬레이브 - masters {마스터 주소;};\n```\n\n- /var/named/domain.zone\n\n레코드\n\n- SOA : zone파일의 시작. 도메인명을 적고 점을 꼭 찍는다. 도메인명과 관리자 이메일을 옆에 적는다. 네임서버가 인증 된 자료를 갖고 있음을 의미한다.\n- NS : 해당 도메인에 대한 네임서버를 나타낸다 (?)\n- A : 도메인에 IP를 부여한다.\n- CNAME : 도메인에 대한 또 다른 이름이 가능하도록 한다.\n- MX : 메일 라우팅 경로 조정\n- PTR : ip 주소에 대해 도메인명을 매핑 (역방향)\n\n#### 참고\n\n`/etc/host.conf`\n\n- DNS 주소값 찾을 때 어떤 DNS를 참조할지 정해놓는 파일\n- `/etc/hosts` 등을 먼저 찾게 할 수 있다\n\n`/etc/resolv.conf` - 호스트가 사용하려는 네임서버를 지정하는 파일\n\n상대방 네트워크 찾아가는 순서\n\n1. /etc/hosts\n2. Cached dns data (방문했던 적 있는 곳인지)\n3. DNS server query\n\n- http://www.naver.com query\n  - 10.0.2.200 -> 10.0.2.53:53 query -> root dns server query(힌트 정보만 알려준다)\n  - .com dns server ip\n  - .com dns server query\n  - .com dns server answer\n  - naver.com dns server ip\n  - naver.com dns server\n  - naver.com dns server\n  - http://www.naver.com ip\n  - to 10.0.2.200\n  - http://www.naver.com ip\n  - Browser -> ip address call\n\n#### Setting\n\n- `vi /etc/named.conf`\n\n```\n11 line: 10.0.2.53;\n17 line: Allow-query : any;\n36 line: name;[임의의 이름] 37 : type master; 38 : name.zone [임의의 이름.zonei]\n```\n\n- `service named start && chkconfig named on`\n- `cd /var/named`\n- `cp named.localhost [임의의 이름].zone -a`\n- `service named restart`\n\nAnd then,\n\n- `vi sana.twice.zone`\n\n```\nIN SOA 도메인 ; 주소\n//맨 밑에\nNS\nA 10.0.2.53\nWWW\nA 10.0.2.xx << 접속 할 주소 입력\n```\n\n```\n//참고\n$TTL 86400\n@ IN SOA ns.abc.net. root.abc.net. (\n    2007031500 ; 시리얼값 (년월일시간)으로 대부분 설정합니다.\n    3H ; 2차 네임서버가 1차 네임서버에 접속하는 시간\n    15M ; 접속 실패시 다시 시작할 시간 간격\n    1W ; 1차 네임서버에 데이터가 없다면 1주 이후에 지워진다.\n    1D ) ; 위에서 설정한 TTL값과 같은 의미\n;\n\nIN NS ns.abc.net. ; 도메인을 소유한 DNS의 도메인\nIN MX 10 mail.abc.net. ; 메일을 보낼 도메인 또는 주소\nIN A 123.123.123.123 ; 도메인이 찾아갈 IP주소\nwww IN A 123.123.123.123 ; [www.abc.net](http://www.abc.net) 도메인이 찾아갈 IP주소\nmail IN A 123.123.123.123\n* IN A 123.123.123.123 ; 모든 서브 도메인이 찾아갈 서버 IP\n```\n\n출처: (http://jobdahan.net/server_linux/895790)\n\n## storage\n\n기본 파티션 분할\n\n- `/boot` : 부팅 파일들 저장. 첫번째 파티션으로. 부팅 빨라짐. 100~500MB\n- `/`\n- `/tmp` : 웹파일들 저장됨. 보안문제로 분할 필요\n- `swap` : 가상메모리로 사용되는 부분 . 사용자의 메모리의 2배 정도로 설정\n\nLVM\n\n- 논리 볼륨 매니저\n- 기존 파티션으로 분할 해 놓으면 용량 부족이나 증설 시 복잡한데 이를 이용하면 바로 구현할 수 있다.\n\n설정\n\n- /boot 만 100MB로 분리 후 나머지 LVM 으로 만든 후 LVM에서 /(루트), /home, /tmp 로 나눈다.\n- fdisk /dev/sda\n- 디스크 분할\n\nnfs 설정\n\n- /etc/exports 접속 허용할 PC 설정\n- /공유폴더 허용IP(옵션) 허용IP(옵션) (복수 가능)\n- 옵션\n  - r w 읽기 쓰기\n  - no-root-squash 루트 자격으로 접근 가능하도록 마운트\n  - root-squash 루트 자격으로 접근해도 유저로 접근\n  - noaccess 디렉토리 접근 못하게 한다\n  - no_all_squash root를 제외하고 서버와 클라이언트의 사용자들을 하나의 권한을 가지도록 설정한다.\n  - storage에서 포트 열어주고 web 등에서 마운트 시킨다\n  - `mount -t nfs <storage IP>`: /디렉토리 /마운트 할 디렉토리\n\nStorage 2대 연동? vs Storage 확장?\n\nnfs 대신 glusterfs 를 쓰면 좋겠다\n\n#### 디스크 설정\n\n- 기본 설정에서 하드 추가\n- 설치 시\n  - 디스크 설정에서\n  - create Custom Layout\n  - create - standard - /boot -\n  - Sda만 선택\n  - 다시 Create\n  - 또 create - LVM Physical Volume -\n  - 전체 할당(Fill to maximum allowable size) - sdb만\n  - Create - LVM Volume Group - 완료\n\n#### quota\n\n`yum -y quota`\n\n- `vi /etc/fstab`\n  /home Defaults 뒤에\n\n```\nusrjquota=aquota.user,grpjquota=aquota.\ngroup,jqfmt=vfsv1\n```\n\n- `mount -o remount /home`\n- `quotacheck -cugmv /home`\n- `quotaon /home`\n- `repquota /home`\n\n```\nfdisk /dev/sdc\nN 새 설정\nP 프라이머리\n1 파티션 1\nT 타입\n8e LVM 으로 설정\nW 저장\n```\n\n`pvcreate /dev/sdc1` 피지컬볼륨 생성\n\n볼륨 그룹\n\n- `vgcreate 볼륨명 /dev/sdc1` 볼륨그룹 생성\n- `vgdisplay` 볼륨그룹 확인\n\n로컬 볼륨 LV ( 논리 볼륨 )\n\n- `lvcreate` `-l` (개수로 설정) `-L` (크기로 설정) `-n` (이름) 명령옵션\n- `lvcreate -l 11517 -n` 로컬볼륨이름 볼륨그룹 이름\n- `mkdir /volume`\n- `mkfs.ext4 /dev/볼륨그룹/로컬볼륨`\n- `mount /dev/볼륨그룹/로컬볼륨 /volume`\n\n## Virtual box Ubuntu HDD 추가\n\nvirtual box에서 추가\n\n- 파티션 잡아주기\n\n```\nfdisk -l\nsudo fdisk /dev/sdb\nn\n엔터 엔터\nw\n//포맷\nsudo mkfs.ext4 /dev/sdb1\n//마운트\nsudo mkdir /exthdd\nsudo mount -t ext4 /dev/sdb1 /exthdd\n//부팅 할 때 자동으로 마운트\nls -l /dev/disk/by-uuid > uuidtxt\n```\n\nuuid 내용을 `/etc/fstab` 에 저장\n\n`reboot`\n\n`df -h` 로 확인\n\n#### virtual box ubuntu hdd 용량 확장\n\n- `diskpart`로 vhd 용량 확장\n- gpartition iso 설치\n- gpartition으로 vhd 저장공간 설정\n- lvm 으로 잡혀있다면 lvm 확장\n\n확장\n\n- `lvextend /dev/mapper/ubuntu--vg-root -l +2048`\n- `resize2fs /dev/mapper/ubuntu--vg-root`\n\n`df -h` 로 확인\n\n#### How to expand VirtualBox's Virtual Hard Disk - N_CODER\n\nhttps://pradeepgali.blogspot.com/2014/01/how-to-expand-virtualboxs-virtual-hard.html\n\n## NFS 서비스\n\n`vi /etc/exports`\n\n- `/home/nfs-share 10.0.2.0/24(rw,sync,no_root_squash,no_all-squash)`\n\nAnd then,\n\n- `mkdir /home/nfs-share` //nfs-share 폴더에 디렉토리 생성\n- `chown itwill.itwill /home/nfs-share -R` //사용자 권한 설정\n- `service rpcbind start && chkconfig rpcbind on`\n- `service nfs start && chkconfig nfs on`\n- `yum install -y -q nfs*`\n- `df -hT` << 마운트 됐는지 확인\n- `ls -al /home` << 파일 확인;\n  - 아이디와 비밀번호 설정을 안해놔서 권한 설정이 안되있음\n- `useradd itwill`\n- `passwd itwill`\n- `umount 10.0.2.21:/home/nfs-share`\n- `mount -t nfs 10.0.2.21:/home/nfs-share` 연결할 당시 계정 따라감\n\n## FTP 서비스\n\n- `vi etc/vsftpd`\n\n```\n12 : No\n96 : 주석 제거 ( chroot <- 최상위디렉토리 한계설정 사용자가 접근 못하게 )\n116 : use_localtime=YES < 우리나라 시간으로 맞춰줌;;\n```\n\n- `service vsftpd start`\n- `chkconfig vsftpd on`\n\n[DNS]\n\n- `vi /etc/named.conf`\n\n```\n11 line: 10.0.2.53; 추가\n         Allow-query : any; 추가\n36 : name;\n37 : type master;\n38 : name.zone\n```\n\n- `service named start && chkconfig named on`\n- `cd /var/named`\n\n[WINDOW]\nDNS 주소 10.0.2.53 으로 바꿔준다.\n\n- `cp named.localhost name.zone -a`\n- `service named restart`\n\n## video recording\n\n[obs-studio](https://obsproject.com/wiki/install-instructions#linux)\n\n- `apt install ffmpeg`\n- `sudo add-apt-repository ppa:obsproject/obs-studio`\n- `sudo apt update`\n- `sudo apt install obs-studio`\n- filter setting\n  - noise suppression -60dB\n\n## WD Passport Unlock in linux\n\n- https://github.com/0-duke/wdpassport-utils\n- `sudo pip3 install git+https://github.com/0-duke/wdpassport-utils`\n- `sudo wdpassport-utils.py -u -d /dev/sdb`\n\n## linux battery\n\n- status check\n- `upower -i /org/freedesktop/UPower/devices/battery_BAT0`\n- or `sudo tlp-stat -b`\n- performance upgrade\n- TLP\n\n#### i3\n\n- config file `~/.config/i3/config`\n- network manager\n- `nmcli device wifi connect <wifi-name> password <password>`\n\n#### w3m\n\n- `apt-get install w3m-img`\n- need component\n- history of search list > `~/.w3m/history`\n- search shortcut\n\n#### code-server\n\n- code-server 설치하면 브라우저로 code 사용 가능\n- code-server로 실행하면 코드를 불러와야함\n- 볼륨 시키면 된다\n- 프로젝트 볼륨 따로 설정, 볼륨 따로 되있어서 도커 죽어도 유지가능\n\n#### WSL\n\n1. windows 에 wsl 설치 후\n2. vscode 설치 후 빌드환경 셋업\n3. 윈도우 업데이트 (빌드번호 18xxx 이상)\n4. 설정->업데이트 및 복구에서 개발자모드로 변경\n5. 윈도우 기능에서 [서브 터미널 사용] 체크, [가상화 사용] 체크\n6. 터미널에서 명령어 입력(아마도 위에 체크하는 부분과 동일한 듯)\n   - `Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux`\n   - `Enable-windowsOptionalFeature -Online -FeatureName VirtualMachinePlatform`\n7. store에서 우분투 설치\n   - or in terminal (ubuntu 1804) `Invoke-WebRequeset -Uri https://aka.ms/wsl-ubuntu-1804 -OutFile ~/Ubuntu1804.zip -UseBasicParsing`\n   - or in terminal (ubuntu 1604) `Invoke-WebRequest -Uri https://aka.ms/wsl-ubuntu-1604 -OutFile Ubuntu.appx -UseBasicParsing`\n   - `Add-AppxPackage .\\Ubuntu.appx`\n   - `Expand-Archive ~/Ubuntu.zip C:\\Distros\\Ubuntu`\n8. 확인\n   - `wsl -l -v`\n\n> 원래 wsl이 설치되고 2로 업그레이드 시켜줘야 하는데 win10 home이라서 그런지 최신버전으로 업데이트해서 그런지 2로 바로 적용됨\n\n#### standard stream\n\n- stdin\n- stdout\n- stderr\n\n#### SIGTERM\n\n- 종료 신호. 일반적으로 ctrl+z, ctrl+c 등을 눌렀을 때 신호가 발생하게 되있다\n- 각 프로그래밍 언어에서 시그널 호출이 가능하다\n- SIGINT, SIGKILL 등도 있는데, SIGKILL은 즉각 종료되지만\n  SIGTERM은 신호를 받아서 내부 처리가 가능하다. graceful shutdown을 구현하는\n  등으로 활용 가능하다\n\n#### crontab not working\n\n- `/etc/crontab` <-> `crontab -e`\n- `/etc/crontab` is system cron\n- `crontab -e` is user cron\n- `crontab <filename>`\n\n#### android mirroring app\n\n- scrcpy\n- `--bit-rate 2M --max-size 800` bitrate down\n- `-S` turn screen off\n- https://github.com/Genymobile/scrcpy\n- kde connect\n- `ufw allow 1714:1764/udp`\n- `ufw allow 1714:1764/tcp`\n\n#### replace all directory in linux using regex\n\n- `find ./ -type f | xargs sed -i 's/  / /g'`[^1]\n\n#### vim visual mode selection\n\n- `vnoremap // y:Ag <C-R>=fnameescape(@\")<CR><CR>`\n- https://stackoverflow.com/questions/28011155/using-ack-vim-on-visual-selection\n\n#### vim lag\n\n- `:syntime on` -> move around -> `:syntime report`\n- encode uri\n- highlight matching pair\n- lsp --> make on/off\n- airline - git get head\n- https://stackoverflow.com/questions/19030290/syntax-highlighting-causes-terrible-lag-in-vim\n\n## external monitor\n\n- `xrandr --newmode`\n- `xrandr --addmode`\n- `xrandr --output`\n- `x11vnc -clip`\n\n! xrandr: cannot find output 'VIRTUAL1'\n\n- write to `/usr/share/X11/xorg.conf.d/20-intel.conf`\n\n```\nSection \"Device\"\n    Identifier \"intelgpu0\"\n    Driver \"intel\"\n    Option \"VirtualHeads\" \"1\"\nEndSection\n```\n\n! but 20-intel file make some problem\nwhen entering full screen whatever. it is freezing.\n\n## ipad as second monitor\n\n1. create intel config file\n2. reboot\n3. `./ipad.sh -b -h`\n\n## numpad as mouse pointer\n\nsetting -> assistive -> mouse keys\nset mouse pointer speed - `sudo apt-get install xkbset` - `xkbset ma 60 10 10 5 10`\n\n## linux copy and paste in terminal with mouse\n\ndrag copy area -> mouse center button click in terminal window\n\n## ubuntu backup, snapshot\n\ntimeshift\n\n## linux settings\n\nshortcut - pomodoro alt+space\nbluetooth with my phone\n\n## linux text to image\n\n```\necho \"Hello world\" | convert -size 360x360 xc:white -font \"FreeMono\" \\\n  -pointsize 12 -fill black -annotate +15+30 \"@-\" -trim \\\n  -bordercolor \"#FFF\" -border 10 +repage hello.gif\n```\n\n## font broken\n\n- every font to square\n- `sudo fc-cache --force --verbose`\n- and reboot\n\n## terminal app\n\n- [terminal browser](https://www.brow.sh/docs/extensions/)\n\n## vim window size\n\n- `ctrl-w 10 +` window 10 line size up\n\n## vim inoremap\n\n- `imap <key> <C-O><complex-key>`\n- `<C-O>` means insert mode to revert to normal mode momentarily\n- https://vi.stackexchange.com/questions/13162/inoremap-nnoremap\n\n## ubuntu font\n\n- mv ttf file to `~/.fonts`\n- terminal font list update `fc-cache -f -v`\n- inconsolata\n\n## python in vim\n\n- `autocmd FileType python map <buffer> <F9> :w<CR>:exec '!python3' shellescape(@%, 1)<CR>`\n- https://stackoverflow.com/questions/18948491/running-python-code-in-vim\n\n## linux keyboard delay\n\n- `xset r rate 200 30`\n- https://wiki.archlinux.org/index.php/Xorg/Keyboard_configuration#Adjusting_typematic_delay_and_rate\n\n## touchpad gesture\n\n- browser tab close\n- alt tab\n- back, forward\n- notification center\n\n## crontab 에 스크립트 에러 없이 등록하기\n\n`echo \"0 */1   * * *   root    /home/sh/dotfiles/rclone.sh >/dev/null 2>&1\" >> /etc/crontab`\n\n#### 텍스트 분리\nawk\nsed\ncut\ngrep은 가로에 텍스트가 있을 때\nawk 는 컬럼 선택하기 쉬움\n특정 줄만 뽑고 싶으면 awk 'NR\\==1'\n파이프라인 끝 명령어로 나온 출력값을 인자로 쓰고 싶으면 xargs\n\n특정 컬럼만 뽑기\nawk '{print $2}'\n\n`lsof | grep tomcat | grep 'wrapper-m' | tail -n 1 | awk '{print $2}' | xargs kill -9`\n\n## TLS\n\n```\nopenssl req -X509 -nodes -days 365 -newkey rsa:2048 \\\n    -out ingress-tls.crt \\\n    -keyout ingress-tls.key \\\n    -subj \"/CN=example.com/O=ingress-tls\"\n```\n\n#### ssh key-gen\n\n`ssh-keygen -t rsa`\n\nmac에서는 ssh-keygen 으로 키 만들고 pbcopy로 복사 할 수 있다.\n\nubuntu에서는 xclip 이용\n\n- `alias clipboard='xclip -selection clipboard'`\n\n#### 라즈베리파이 와이파이 등록\n\n- `/etc/network/interfaces`\n- `/etc/wpa_supplicant/wpa_supplicant.conf`\n  - 먼저 wpa_passphrase wifi명 wifi비밀번호\n    입력해서 psk 값 얻은 후 복사해서\n    conf 파일에 저장\n\n#### ubuntu theme 꾸미기\n\n- ~/.themes 또는 /usr/share/.themes 폴더 생성\n- gnome look 사이트 들어가서 gnome-shell 또는 gtk3에서 원하는 테마 찾기\n- 다운로드하여 압축 풀어서 폴더째로 .themes에 넣는다\n- tweak에서 폴더이름 찾을 수 있다.\n\n#### 리눅스에서 fzf로 파일명을 찾아서 삭제하려면\n\nfzf | xargs rm 이런 식으로 쓴다\n\n#### github without password\n\n- 처음 클론할 때 설정하던지\n  - `git clone `\n- 이미 갖고 있는 프로젝트에서는 리모트 설정\n  - `git remote set-url origin git@github.com/<username>/<repo>.git`\n- https://zzpanqing.github.io/2017/02/28/github-push-without-username-and-password.html\n\n#### 쉘명령어 앞에 &붙이면 백그라운드 작업\n\n#### albert\n\nmac의 alfred를 ubuntu에서 비슷하게 구현.\n이걸로 문서와 북마크를 한 곳에서 검색할 수 있다.\n근데 북마크를 한번씩 들여다보면서 뭐가 있는지 알때도 있는데 그것은 따로\n구현해야한다\n파일 내부 단어 검색이 안되는데 구현되면 좋겠다 > 근데 그러면 검색이 오래걸리겠다\n\n#### markdown 줄 수 검색\n\nwc -l \\*.md | sort -rh | head -n 16\n\n#### 변경 사항만 가져와서 빌드하기\n\n```\ngit diff --name-only | grep 'packages' | sed 's,^\\(.*\\)/\\(.*\\)/\\([^/]*\\),\\2,'\n\nfor o in $OUTPUT;\ndo\necho $o;\ndone;\n\n---\n\nFROM node:14.17.1 as build\nARG BUILD_CONTEXT\n\nWORKDIR /app\nCOPY package.json .\nCOPY yarn.lock .\nCOPY ./packages/$BUILD_CONTEXT/package.json packages/$BUILD_CONTEXT/\nRUN yarn install\n\nCOPY ./packages/$BUILD_CONTEXT packages/$BUILD_CONTEXT\nRUN yarn build:$BUILD_CONTEXT\n\nFROM nginx:stable-alpine\nARG BUILD_CONTEXT\nCOPY --from=build /app/packages/$BUILD_CONTEXT/build /usr/share/nginx/html\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n---\n\n\nFROM node:14.17.1 as build\nARG BUILD_CONTEXT\nARG BUILD\n\nWORKDIR /app\nCOPY package.json .\nCOPY yarn.lock .\nCOPY ./packages/banadio-common packages/banadio-common\nCOPY ./packages/$BUILD_CONTEXT/package.json packages/$BUILD_CONTEXT/\nCOPY ./packages/$BUILD_CONTEXT packages/$BUILD_CONTEXT\nRUN yarn install --production\nRUN yarn build:$BUILD\n---\n\nFROM node:14.17.1-alpine\nARG BUILD_CONTEXT\nARG BUILD\n\nRUN addgroup -g 1001 -S next\nRUN adduser -S nextjs -u 1001\n\nWORKDIR /app\n\nCOPY ./packages/banadio-common packages/banadio-common\nCOPY --from=build /[app/package.json](http://app/package.json) ./package.json\nCOPY --from=build --chown=nextjs:next /[app/packages/$BUILD_CONTEXT/.next](http://app/packages/$BUILD_CONTEXT/.next) packages/$BUILD_CONTEXT/.next\nCOPY --from=build /app/packages/$BUILD_CONTEXT/public packages/$BUILD_CONTEXT/public\nCOPY --from=build /[app/packages/$BUILD_CONTEXT/package.json](http://app/packages/$BUILD_CONTEXT/package.json) packages/$BUILD_CONTEXT/package.json\nCOPY --from=build /app/packages/$BUILD_CONTEXT/node_modules packages/$BUILD_CONTEXT/node_modules\nRUN yarn workspace $BUILD_CONTEXT add next\n\nUSER nextjs\n\nEXPOSE 3000\n# CMD [\"yarn\", \"start:BUILD\"]\n```\n\n## arm의 장점\n\n저전력, 저소음\n\n단점\n호환성, 저성능\n\n인텔도 저전력을 위해 뭔가 시도 중\n하이브리드 코어로\n4개의 저사양 코어와 1개의 고사양 코어를 같이 구성.\n\nApple does this strategy too.\nlittle core, big core\n\n- Arm 아키텍처가 저전력에 무조건 유리하다?\n  코어당 클럭 수를 다르게 할 수 있어서?\n  태블릿에 자주 쓰이는 AP는 arm\n  PC에 자주 쓰이는 CPU는 인텔식 x64\n  arm 아키텍처는 쿨러가 아예 필요 없다?\n\n애플 실리콘은 인텔 cpu보다 더 성능이 좋은 arm cpu를 구현했다\n\n\n# GIT\n\n사용자 정보 등록\n\n- `git config --global user.name \"shdkej\"`\n- `git config --global user.email shdkej@naver.com`\n- `--global` : 절대적으로 설정된다. 프로젝트마다 다른 이름과 메일을 쓰려면 이 옵션을 뺀다\n- commit 할 때마다 이 정보를 사용한다\n\ngit bash 홈 디렉토리 변경법\n\n- `.bashrc` 파일을 만들어 원하는 위치를 입력한다\n- bash 실행 - `vi ~/.bashrc`\n- `$HOME` 환경변수를 바꾼다\n- 바로가기 아이콘의 시작 위치를 바꾼다.\n\n#### ADD - COMMIT - PUSH\n\n- `git add {filename}`\n- `git commit -m \"comment\"`\n- `git remote add origin <원격 서버 주소>`\n- `git push origin <branch-name>`\n- `git pull` - 원격 저장소 내용 가져오기\n\n#### Branch 관리\n\n- 생성 : `git branch <branch-name>`\n- 삭제 : `-d`\n- Branch간 이동 : `git checkout <branch-name>`\n- 목록\n  - `git branch`\n  - `-r` : 원격저장소의 branch 리스트를 보여준다\n  - `-a` : 모든저장소를 보여준다.\n\n[ ] 원격 저장소 branch 가져오기\n\n#### push without login\n\n- `ssh-keygen -t rsa -C \"<git email>\" -f $HOME/.ssh/<ssh name>`\n- github web page -> settings -> SSH and GPG keys -> New SSH keys.\n- `ssh -T git@github.com` # test to git\n- `.git/config` > `url = git@github.com:<user>/<repository>.git`\n\n#### git sensitive files delete\n\n- https://stackoverflow.com/questions/872565/remove-sensitive-files-and-their-commits-from-git-history\n- it also deleted file...\n\n#### git hooks\n\n- `cp .git/hooks/pre-commit.sample .git/hooks/pre-commit`\n- need permission\n- `chmod +x .git/hooks/pre-commit`\n\n#### git ignore\n\n- `git rm --cache (folder -r) <filename>`\n\n#### git show\n\n커밋 메시지, 수정된 파일 목록, 변경 내용 확인용\n\n#### git simulation\n\nhttps://learngitbranching.js.org/?locale=ko\n\n#### git cheatsheet\n\n상황별 스크립트를 만든다.\n반복적으로 쓴다\n\n지금 상황\n\n- github flow로 진행\n- master에 운영 소스\n- 기능 브랜치 여러 개 진행 중\n- 1. 기능 브랜치에 접근해서 내 작업을 진행\n  - 기능 브랜치에 머지?\n- 2. 내 브랜치를 만들어서 기능 브랜치를 땡겨오기?\n\n꼬인 상황\n\n- 기능 브랜치에 들어가서 작업 중\n- 기능 브랜치의 최신 버전을 받기 위해 내 작업은 커밋을 만들어놓고 풀을 했다\n- 가져온 최신 버전이 충돌을 일으켜서 HEAD^로 되돌아갔다.\n- 충돌버전은 없어졌지만, 내 커밋도 없어졌다\n- 다시 내가 작업하던 상태로 돌리고, 최신 커밋도 받고 싶다.\n- 어떻게 하면 될까\n\n  - 새 브랜치에서 기능 브랜치를 머지한다.\n  - git fetch를 하고, rebase로 내 커밋을 마지막 커밋과 합치고, 작업한다.\n  - 또는 rebase 대신 merge를 해서 분기를 보여줄 수 있다.\n  - pull을 바로 해도 똑같이 동작한다. --rebase를 넣으면 merge 대신 rebase한다.\n  - 내 문제는 pull을 하고 reset HEAD^ 한 부분에서 꼬임이 있었던 것 같다\n  - 게다가 stash도 pop 했으니 뭔가 변화가 생겼을 것 같다.\n\n- 리베이스는 어떻게 써야 효과적일까\n  - 내가 기능 브랜치에서 빠져나와서 작업하고 리베이스 해서 합치면 되나!?\n  - 그러면 마찬가지로 마스터만 남고 개발하던 흔적들은 합쳐지게 할 수 있겠다?\n- 이전 커밋으로 갔다가 원래 위치로 돌아오는 법은?\n  - log에서 돌아간 상태가 맨 위에 있게 되지 않나?\n- 작업하다가 버그 픽스할 게 생기면 커밋해놓고 리베이스 -i 해서 쓸데없는 커밋은\n  빼고 다른 라인으로 만들 수 있다. 그래도 그 커밋은 남아있어서 따로 올릴 수\n  있겠지?\n  - 그러면 그 커밋을 어떻게 조회하지? 브랜치 달라고 커밋 조회 가능한가?\n\ngit pull = git fetch(원격 저장소의 상태를 다운받고) + git merge(내 커밋을 원격저장소와 합친다)\n\n#### cleaning a big size file in all git commit\n\nbfg\n\n```\ndocker run -it --rm \\\n    --volume \"$PWD:/home/bfg/workspace\" \\\n    koenrh/bfg \\\n    <COMMAND> //ex: --delete-files <filename>\n              //    --strip-blobs-bigger-than 50M\n\n\ngit reflog expire --expire=now --all && git gc --prune=now --aggressive\n```\n\nother way - git filter-branch\n\n#### git 브랜치 바꿔서 현재 수정 가져가기\n\n수정을 했는데 브랜치를 바꿔서 커밋하고 싶은 경우가 있다\n\n```\ngit stash\ngit stash branch <new-branch> stash@{0}\n```\n\n#### git ssh\n\n`~/.ssh/config`에 특정 ssh key를 등록하면 id_rsa 대신 다른 키를 인식 시킬 수 있다\n\n```\nHost github.com\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/github\n```\n\n#### git fatal: Not possible to fast-forward, aborting. 문제\n- git config --unset 으로 잘 안됐음\n- pull.ff 가 2개 설정돼있음\n- git config --edit 으로 지워주니까 됨\n- pull.rebase false가 default\n\n#### git pull 했을 때 컨플릭트 나서 되돌리고 싶다면\n`git merge --abort`\n\n\n# ETC\n\n## prometheus\n\n- node-exporter\n  - collect system metrics\n- alert-manager\n\n#### ELK vs TICK\n\n- ELK -- log metrics\n- TICK -- system metrics\n- what is prometheus, loki,\n\n#### grafana alert\n\nmonitoring 서버도 테스트 서버용과 프로덕션 서버용을 따로 두나?\n\nalert를 만드려면 graph여야하고, $variable 로 되있는 템플릿을 쓸 수 없다.\nalert를 만들고 싶은 graph를 복사해서 variable을 고치고 사용하면 된다.\n\nsensu는 어떤 기능들을 제공해주고 있지?\n\ngrafana daily report\n\n- enterprise 기능이었다. 오픈소스로 구현된 것도 있을 것이다\n\n## TICK\n\n- too heavy\n- I want to find lightweight visualistic monitoring service\n- go to prometheus\n\n## Benchmark\n\n1. 구글개발자도구 audits\n\n[[Architecture]]\n\n#### nginx alternative\n\n- [openlitespeed](https://openlitespeed.org/)\n\n## ansible\n\n- https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-ansible-on-ubuntu-18-04\n- setting /etc/ansible/hosts\n- terraform provision execute only during create\n\n#### ansible command vs shell\n\ncommand isn't running in $HOME, shell is\ncommand can't use operations like <,>,|,&\ncommand is more secure.\nhttps://blog.confirm.ch/ansible-modules-shell-vs-command/\n\n#### ansible\n\n- ansible-galaxy\n- setting `/etc/ansible/hosts` file or make hosts file with `-i`\n  - it need `,`\n\n```\n[webserver]\nserver_ip\n# <work_directory>/hosts\n```\n\n- hosts test `ansible webserver -m ping -i hosts --private-key <private-key> -u <user>`\n- https://alex.dzyoba.com/blog/terraform-ansible/\n- how to connect with pub file\n\n## Nginx letsencrypt\n\n- DNS setting\n- install letsencrypt\n- `letsencrypt certonly --standalone`\n- setting Nginx\n- run Nginx\n\n## terraform vs serverless\n\n- note-reminder has terraform trigger option.\n- it's not good..\n\n#### 테라폼만 쓸지 서버리스를 같이 쓸지 고민중\n\n서버리스는 개별적인 앱을 빠르게 빌드하고 다시 만들 때 가볍게 사용하기 좋고\n테라폼은 좀 더 넓게 공유되는 자원을 관리할 때 쓰기 좋다\n\n서버리스는 앱을 빠르게 띄우기 좋고 테라폼은 인프라 셋팅하기에 좋다\nhttps://www.serverless.com/blog/definitive-guide-terraform-serverless/\n\n## terraform\n\n- Need update when changing a provisioner\n- ! resource \"null_resource\" -> null\n\n  - Do `terraform init`\n\n- terraform taint aws_instance.example-server\n  - aws_instance recreate when terraform apply\n  - terraform null_resource is better then an instance make to a taint\n    - https://github.com/gruntwork-io/terratest/blob/master/examples/terraform-remote-exec-example/main.tf\n  - null resource need `terraform init`\n- recreate instance with same eip\n- !WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!\n  - clear `~/.ssh/known_hosts` or recreate ssh key `ssh-keygen -R <host IP>`\n  - https://www.ssh.com/ssh/keygen/\n- ! aws_instance remote-exec ssh connection not working\n  - user = \"root\" -> user = \"ubuntu\"\n- `letsencrypt -d <domain> -m <email> -n(all agree) --agree-tos`\n\n  - https://github.com/ployst/docker-letsencrypt/issues/18\n\n- gcp metadata need ${}\n- `ssh-keys = \"username:${file(\"<PATH>\")}\"`\n- Event Handling with sns, sqs\n- https://dev.to/frosnerd/event-handling-in-aws-using-sns-sqs-and-lambda-2ng\n- lambda function to python\n- save s3\n\n- ! s3 access-denied problem\n  - bucket name not allow var. I have just input text\n  - var allow. but name is global. it is really name exist problem.\n- ! s3_bucket_notification invalid argument\n  - 1. create SNS 2.create S3 bucket 3. Policy 4. notification\n  - sns - aws_iam_policy - condition - values - (bucket arn -> bucket name...)\n- every apply update s3, using `etag`\n\n#### terraform ansible\n\n- for provision `sleep 120;` is good to waiting ec2 instance creation\n- ansible-playbook to make with ip, ip + `,`\n- terraform has `depends_on`\n\n#### use module. For different folders can use once.\n\n#### github action terraform\n\n- how to hide secret file\n  - gcp credential file\n\n#### ! change backend bucket\n\nneed delete `.terraform` dir, and `terraform init`\n\n#### AWS Dynamodb terraform\n\n- attribute need index\n- any key can write, if exist with attribute\n\n## serverless\n\n- install `curl -o- -L https://slss.io/install | bash`\n- !Error: spawn /home/sh/.serverless/bin/xdg-open ENOENT\n  - no install xdg-open. manual install and copy to serverless/bin directory\n- !\"service\" property is missing in serverless.yml\n  - get started is sucks\n  - run `serverless` for first setting\n\n#### serverless\n\n- python requirements\n  - need install plugin serverless-python-requirements\n\n#### serverless\n\n- json으로 invoke 안됨\n- nltk 다운로드 후 파일 못읽음\n- konlpy 사용 시 java환경 필요한데 안됨\n\n## vault\n\n- install file\n- move bin directory\n\n#### vault in gcp\n\n1. run docker ``\n   - what is different with server-mode and another\n2. add ssh\n3. save file\n4. read file\n\nVault가 강력한 암호화와 중앙화는 쓸모있지만 환경변수나 키를 다 관리하기에는 좀 불편한 것 같다\n환경변수는 눈으로 확인해야 하는 값이기도 하고\n\n#### 개발환경, 커맨드라인, CI/CD 환경, IaC에서 모두 활용 가능한 키밸류 관리 시스템이 갖고싶다\n- Doppler - 상용서비스\n- Infisical - 자체 호스팅 서비스\n- Vault - 처음엔 이걸로 생각했지만 암호화 최적이고 좀 다루기 무겁다\n\t- 이게 근데 로그인 정보 관리 도구로 쓰기엔 편의성이 안되어있다\n\n## google calendar api\n\n1. credential.json 생성\n2. `pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib`\n3. 코드 실행\n4. 인증\n5. token.pickle 생성되고 코드 실행됨\n\n- https://developers.google.com/calendar/quickstart/python\n\n## nagios\n\nDocker로 설치 후\n`/opt/nagios/etc/` 설정파일 설정\n\n- `/etc/resource` : 환경변수 설정파일\n- object/Commend\n- object/contacts\n- object/template\n- object/windows\n- nagios\n\nwindow 는 nsclient 설치\n\n- 서버에서 command.cfg 파일에서 check_nt 부분 비밀번호 명시\n- Telegram 연동 소스 받아서 설정\n\n#### for docker monitoring\n\n`chown nagios /var/run/docker.sock`\n\n#### nagios 비밀번호 변경\n\n- `htpasswd -c /opt/nagios/etc/htpasswd.users nagiosadmin`\n- 콘솔로 비밀번호 입력\n\n## aws lambda cronjob\n\n- using cloudwatch event rule, event target, lambda permission\n- more option cloudwatch log group, cloudwatch log subscription filter\n- https://www.thedevcoach.co.uk/terraform-lambda-scheduled-event/\n\n#### serverless aws sqs lambda\n\n- sqs to lambda message parsing\n- event['Records'][0]['body']\n- lambda python requests\n- cannot version 3.8, can 3.6\n\n## devdash\n\n- google analytic settings\n- enable google report api\n- export project json\n\n#### cloud\n\n- L/B free cloud\n  - nothing\n- GCP app engine 28/d free\n  - it can be scaling\n\n#### Current Used infra\n\n- telegrambot(serverless)\n- monitoring\n- content based recommend(need s3 csv file)(terraform)\n- s3 hosting(terraform)\n- netlify(wiki homepage)\n- github pages\n- cloudflare\n- empty\n- ec2\n- gce\n- gcp app engine\n- heroku\n- oracle 2대\n\n## 카프카와 다른 메시지큐\n\n카프카는 분산, 고가용성, 고속에 특화\n근데 무겁다\n\n가벼운데 고가용성만 지원되면 좋겠다\n\n## gRPC\n\n(Remote Procedure Call)\n\ngRPC 4가지 스트리밍 방식\n\n- 단일\n- 서버 스트리밍\n- 클라이언트 스트리밍\n- 양방향 스트리밍\n\n3가지 stub\n\n- Blocking stub\n- (Async) stub\n- Future stub\n\ngRPC가 필요한 이유\n\n- CORBA 등 과거의 RPC는 높은 복잡도, 높은 학습곡선, 낮은 개발생산성이 문제였다\n- RESTful이 낮은 복잡도, 낮은 학습곡선 등으로 잘 사용하게 됨\n- 그러나 게임 등에서는 성능상의 이유로 위의 CORBA 등이 사용되고 있었음.\n- 구글에서 Stubby를 만들고 gRPC는 오픈소스 버전\n\nBinary Protocol - Text Protocol(REST)\nHTTP/2 base\n\n- Connection Multiplexing\n- Header Compression\n- 양방향 Streamming\n\nBrowser에서 지원해야 함\n데이터가 Binary라 바로 읽기 힘듬\n\n#### grpc\n\n- protoc 설치: `apt install -y protobuf-comiler`\n- buf 설치: https://docs.buf.build/installation/\n- `buf.yaml`로 디펜던시 설치\n  - `buf beta mod update`\n- `buf.gne.yaml`로 proto 파일 변환\n- 생성된 swagger.json 을 브라우저에서 보려면 swagger-ui를 설치해야 한다\n\n#### grpc\n\ngateway에 grpc를 어떻게 등록시키나를 놓쳤는데\n알고보니 grpc서버를 따로 실행하고 gateway에 포트를 알려줘서 접근하게 하는\n방식이었다.\n\ngrpc gateway에서 루트 url은 지원을 안한다. 따로 http server에서 작업을 해줘야\n한다.\n\n#### grpc\n\n데이터 아웃풋을 배열로 출력할 때 배열만으로 출력이 안되고 메시지 형태로 된다\nname: [arr1,arr2]\n그래서 받는 쪽에서 name을 골라서 받아야 되는데 이러면 안된다\n\n람다는 reponse body 안에 다 넣어놓는 방식을 쓴다\n\narray 안에서 이름 말고 다른 방식으로 값을 가져오는 방법은?\n각 값마다 일일이 찾는 방법 밖에 없나...\n\n- marshal, unmarshal\n\ngrpc message에 담는 방법 외에 google http body를 이용해서 담을 수 있다.\n`import \"google/api/httpbody.proto\";`\n`returns (google.api.HttpBody)`\n\n#### grpc\n\n1. object.proto 파일 생성\n2. buf.gen.yaml 파일 생성 // proto-gen-go로 할 수 있지만 설정 일일이 하기 번거롭다\n   ```\n   version: v1beta1\n   plugins:\n     - name: go\n       out: ./pb\n       opt:\n         - paths=source_relative\n     - name: go-grpc\n       out: ./pb\n       opt:\n         - paths=source_relative\n   ```\n3. buf generate\n4. server.go 로 proto에서 정의한 함수 구현\n\n#### grpc 구현 시\n\nclient도 같이 구현해야하나??\n그러면 메인 로직에서 CRUD 만들고, server에서 CRUD 만들고, client에서 또 만들어야\n한다. ㄷㄷㄷ\n\n서버는 자신의 마이크로서비스에서 실행하도록 하고, 클라이언트는 임포트해서 가져다\n쓰도록 되어있다.\n\n#### grpc 통신 속도 확인\n\ngrpc가 아니어도 되지만 grpc로 하면 속도를 확보할 수 있다.\n\n- [ ] grpc호출하려면 grpc호출 로직을 짜야하나? 간단하게 호출할 수 있는 방법은?\n\n#### reference\n\n- https://devjin-blog.com/golang-grpc-server-4/\n- https://deepbaksu.github.io/2021/05/01/how-to-REST-from-gRPC/\n- https://tech.buzzvil.com/handbook/grpc/\n\n## text preprocessing\n\n- 단어 빈도 수 체크\n- 조사 제거\n- 불용어 제거\n\n## react table\n\nreact-table (검색, 정렬)\nreact-table-filter (각 열별로 겹치는 이름 필터 가능)\n\n- https://blog.logrocket.com/complete-guide-building-smart-data-table-react/\n\n#### api gateway\n\napi gateway를 쓰게되면 운영서버에서 띄운 것을 이용해서 테스트를 해도 되나?\n로컬에서 개발자마다 띄워야되면 너무 귀찮을 것 같은데 그렇다고 아예 안쓸 수도 없고.\n\n운영 환경의 docker container를 개발할 때 가져와서 쓰고\n새로운 옵션이 필요하면 운영 환경에 풀 리퀘스트를 하도록 하면 점진적 개선이\n되겠다\nkubernetes nginx ingress 확인 해보기\nistio와 비교\n\n- [x] nginx도 api gateway라고 할 수 있나?\n  - 있겠다. kong도 nginx기반으로 만들어진 것 같다.\n\napi gateway or istio\n\n- 응답이 body 안에 담긴다. body를 읽어서 판단한다\n\n#### kong reference\n\nkong을 yaml로 관리하는게 있는데, decK\n이 yml이 인식하는 것들이 어떤게 있는지 api가 어딧는지 모르겠다\n\ndecK를 쓰는게 아니라 kong 자체 declarative 설정이 있다.\n\nadmin api 페이지에 나열되있긴 한데, 보기 힘들다\n\n#### kong grpc gateway\n\nkong으로 grpc 서버에 접속해서 grpc gateway를 만들 수 있다.\n\n## husky를 쓰면 git hooks를 github에서 공유할 수 있다\n\n근데 이것을 쓰면 써야하는 도구가 늘어남을 의미한다\n\n#### dynamodb\n\n\"dynamodb의 프로비져닝된 용량(?) 부족에 따른 쓰로틀링 이슈를 겪으면서 dynamodb에 대한 회의\"\n[https://blog.rewuio.com/entry/%EA%B0%9C%EB%B0%9C%EC%9D%BC%EA%B8%B0-aurora-serverless#:~:text=dynamodb%EC%9D%98%20%ED%94%84%EB%A1%9C%EB%B9%84%EC%A0%B8%EB%8B%9D%EB%90%9C,dynamodb%EC%97%90%20%EB%8C%80%ED%95%9C%20%ED%9A%8C%EC%9D%98%EA%B0%80](https://blog.rewuio.com/entry/%EA%B0%9C%EB%B0%9C%EC%9D%BC%EA%B8%B0-aurora-serverless#:~:text=dynamodb%EC%9D%98%20%ED%94%84%EB%A1%9C%EB%B9%84%EC%A0%B8%EB%8B%9D%EB%90%9C,dynamodb%EC%97%90%20%EB%8C%80%ED%95%9C%20%ED%9A%8C%EC%9D%98%EA%B0%80)\n\n\n## 동영상 스트리밍\nffmpeg: 서버의 동영상을 읽어들인다\n영상 - 인코딩 - 미디어 서버 - 전송 서버 - 동영상 플레이어 - 시청자\n영상 - ffmpeg - rstp 서버 - 브라우저(http) - 시청자\n인코딩 시 압축 H.264/AAC H.265 코덱 사용\n인코딩 - 압축 - 송출 - 미디어서버에서 트랜스코딩(받은 영상의 화질 등을 변환 가능하게 하는 것) - HLS 변환\nHLS: HTTP Live Streaming. M3U8을 이용해 작게 영상을 쪼개 시청자에게 전달\n\n전송 서버(CDN) 을 활용해서 캐싱하여 서버의 부하를 줄인다\n스트리밍 서버에서 인코딩 및 트랜스코딩은 굉장히 부하가 많이 들어가는 작업이라 서버 나눠주는게 좋겠다\n업로드 대역폭이 출력 비트레이트의 두 배 정도는 되야 안정적이겠다\n버벅거린다면 출력 해상도와 비트레이트를 낮춰야 한다.\n\n#### 동영상 서버\n스트리밍 서버 구축\nRTSP\nwebRTC\nffmpeg\nSRT\n\ngRPC로 할 수 있나?\n\n카카오\n네이버\n유튜브\n폰헙\n축구불법중계\n스포티비\n\n동영상 플레이와 스트리밍은 다르네\n\nhttps://butteryoon.github.io/dev/2020/11/11/ffplay_restream.html\nhttps://webnautes.tistory.com/m/1427\nhttps://jeffrey-oh.tistory.com/346\nhttps://eine.tistory.com/entry/HLS%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%9D%BC%EC%9D%B4%EB%B8%8C-%EB%9D%BC%EB%94%94%EC%98%A4-%EB%B0%A9%EC%86%A1-%EC%9B%B9-%EC%95%B1-%EA%B0%9C%EB%B0%9C%EA%B8%B0-1\nhttps://m.blog.naver.com/woliver/221833439445\n\nhttps://medium.com/naver-cloud-platform/%EC%9D%B8%ED%84%B0%EB%84%B7-%EB%9D%BC%EC%9D%B4%EB%B8%8C-%EB%B0%A9%EC%86%A1%EC%9D%80-%EC%96%B4%EB%96%A4-%EA%B8%B0%EC%88%A0%EB%A1%9C-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%A7%88%EA%B9%8C%EC%9A%94-98423dc7fcd4\n\nhttps://www.popit.kr/%EB%9D%BC%EC%9D%B4%EB%B8%8C-%EB%B9%84%EB%94%94%EC%98%A4-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%EC%B6%95%EC%9D%84-%EC%9C%84%ED%95%9C-%EB%85%B8%ED%95%98%EC%9A%B0-1%ED%9A%8C/\n\nhttps://www.youtube.com/watch?v=aiGIlxV7WIE\n\n\n서버\n- https://github.com/ossrs/srs-docker\n- https://github.com/aler9/rtsp-simple-server#docker\n- 서버를 구동시키고 ffmpeg로 동영상을 서버에 제공하면 서버가 스트리밍한다\n\n\nHLS - http live streaming 애플이 개발한 http 기반 스트리밍 프로토콜\n`.m3u8` 확장자의 파일에 `.ts` 확장자의 파일이 저장되어 있고, ts 하나에 10초 정도\n분량의 영상이 저장되어 있고, 이를 하나씩 받아서 연속적으로 재생하여 동영상을\n재생하는 방식\n\n[wavve 사태로 보는 m3u8](https://jybaek.tistory.com/894)\n- wavve는 HLS를 사용 중\n\nHLS로 스트리밍 하기 위해 먼저 동영상 파일을 m3u8로 변환한다\n- ffmpeg 를 이용해 변환한다\n- 스트리밍 영상을 변환할 수 있나?\n"},{"headings":[{"value":"선택, 고민"},{"value":"요약"},{"value":"결정"},{"value":"종류"},{"value":"check point make reduce only 8 point."},{"value":"선택지는 3 + 1 (소 중 대 + 옵션)"},{"value":"선택지는 3개로 줄이고 조건은 최대한 늘려서 고르기"},{"value":"최악의 선택은 피한다"},{"value":"one tool vs many tools"},{"value":"tradeoff"},{"value":"서비스를 사용할 때 3개 정도의 서비스를 써보면서 비교하면 좋겠다"},{"value":"정착과 탐험"},{"value":"물건을 살 때 고려사항"},{"value":"선택할 때 고려하는 것"},{"value":"비서 문제"},{"value":"잠정 수락 알고리즘"},{"value":"다음 혁신을 위해 총알을 아껴둔다"},{"value":"결정 미루기"},{"value":"새로운 기술이 나왔을 때 기존의 기술을 쉽게 전환하려면 기존의 아키텍처가 간단하거나 잘 알고 있어야 한다"},{"value":"새로운 도구"},{"value":"제약이 없으면 좋겠기 때문에 적은 외부 프로그램을 쓰고 싶었다"},{"value":"베스킨라빈스 31"},{"value":"소유욕은 있는데 소프트웨어는 쌓아두고 싶지 않고 필요한 것만 딱 있으면 좋겠다"},{"value":"what I need"},{"value":"vim 반플러그인파"},{"value":"여러 서비스를 쓰는 것보다 하나의 서비스에서 모든 것을 처리하는 것을 좋아하면서 애플은 하나에 다 제공해주는데 안가려고 한다"},{"value":"삼성 언팩행사"},{"value":"내가 갖고 있는 물건중에 꼭 필요하지 않지만 갖고 있는 것은 어떤 영향력으로 나에게 필요해지게 되었는가"},{"value":"효율"},{"value":"효율화의 안좋은 사례"},{"value":"모든 효율 최적화를 이룬 나는 무엇을 원할까"},{"value":"삶의 질 증진"},{"value":"고려 요소 관리"},{"value":"스위스 군용 나이프"},{"value":"선택과 집중"},{"value":"2 in 1"},{"value":"trade off"},{"value":"Notebook"},{"value":"노트북 vs 태블릿 | notebook vs tablet"},{"value":"노트북"},{"value":"노트북 비교"},{"value":"phone"},{"value":"아이폰 vs 안드로이드"},{"value":"Note"},{"value":"물건"},{"value":"돈을 더 내면 더 가치 있는 물건이 나오는 것"},{"value":"가방"},{"value":"옷"},{"value":"경량 패딩"},{"value":"키보드"},{"value":"키보드는 안쓸 때도 있고 쓸 때도 있을거니까 사는게 낫겠다"},{"value":"마우스"},{"value":"충전"},{"value":"Notebook charger"},{"value":"케이블"},{"value":"빔 프로젝터"},{"value":"해상도"},{"value":"폼클렌징"},{"value":"desk"},{"value":"가구"},{"value":"생활팁"},{"value":"신발 냄세"},{"value":"빈 캐리어 활용법"},{"value":"toothbrush"},{"value":"신용카드"},{"value":"earphone"},{"value":"펜"},{"value":"볼펜"},{"value":"옷 쇼핑몰"},{"value":"노트"},{"value":"향수세트"},{"value":"로션"},{"value":"아주 갖고 싶어서 샀는데 사고 보니 별로였던 것이 있나"},{"value":"HOME"},{"value":"공간분리"},{"value":"환경 분리"},{"value":"버팀목 전세대출"},{"value":"집 구하기"},{"value":"이사 히스토리"},{"value":"2021"},{"value":"2022 집구하기"},{"value":"2024 집구하기"},{"value":"부동산"}],"fields":{"slug":"/decision/"},"rawMarkdownBody":"\n## 선택, 고민\n![decision](../img/Fo7bVw0aAAACI4F.png)\n## 요약\n- 선택지를 3개로 줄인다\n- 선택이 힘들면 조건을 늘린다\n- 트레이드 오프는 있을 수 밖에 없다. 그것을 염두에 둔다\n- 제약은 없을수록 좋다\n- 범용적일수록 좋다\n- 사람 중심의 디자인. 사람이 쓰기 편한 것.\n\n## 결정\n\n#### 종류\n- 여러 개 중에 고르는데 사고 나면 바꾸기 싫을 때. e.g. [[#Notebook]]\n- 여러 개 중에 고르는데 여러 개를 써보고 판단. e.g. [[#Note]]\n- 진행 방향을 고르기 (선택지가 추상적). e.g.\n- 할지 안할지 둘 중 하나를 고르기. e.g. [[#연금저축 할지 말지]]\n\n#### check point make reduce only 8 point.\n\n#### 선택지는 3 + 1 (소 중 대 + 옵션)\n- 이 개수가 합리적인 선택을 할 수 있고 과하지 않은 것 같다. 신경을 적게 써도 되는 부분은 하나로 줄이고, 신경 쓸 부분을 3개로 하고 3개에 대해서 다시 3개의 분류로 나눠서 생각하면 구조화되어 쉽게 컨트롤 가능할 것 같다\n- 백개보다 3개. 3개보다 1개\n- 모든 일을 단 하나의 시각으로 보자고 하는 게 아니라, 중요한 것에 집중하기 위해 주변을 정리하자는 취지다\n\n#### 선택지는 3개로 줄이고 조건은 최대한 늘려서 고르기\n중요 키포인트도 3개 정도의 최소요건을 만들어 놓되 특징들을 필터로 많이 두면 선택지가 좁혀진다. 선택이 어려우면 (조건이 다 2개씩 만족한다던지) 조건을 많이 모아서 비교. 경험해보면서 필터링을 더 늘릴 수도 있다\n\n- 조건을 8개만 만들어놓되, 후보군들도 다 적어놔야겠다\n- 살까 말까 고민하는게 있다면 목표를 설정하고 달성했을때 보상으로 사기?\n- 여러개를 띄워놓고 하나를 골라서 쭉 파다가 안 좋으면 다른 걸로 옮겨가기\n- 외부요인에 영향을 안받게 하기 vs 가지고 있는 개수를 줄이기\n    - 노트북스탠드를 쓸지, 책 같은 걸로 그냥 거치할지\n\n#### 최악의 선택은 피한다\n항상 최선의 선택을 할 수는 없지만 최악의 선택은 피해야 하지 않을까\n선택지를 여러 개 만들어 놓아야 선택에 휘둘리지 않을까\n\n최악의 상황을 가정해서 그것을 피하게 하는 식으로 일할때도 생각하는 걸 보는 것 같다\n\n#### one tool vs many tools\n- focusing only one tool is good to deep usage.\n- the other hands, there's some special specification. I just want to know.\n- using other tools, that's good to know there's specification.\n- Don’t use one thing, have a multiple experience and comparison\n\n#### tradeoff\n선택에는 그것이 가져오는 좋은 효과와 안좋은 효과가 있는데 그걸 고려하지 않고 선택하면 안좋은 효과가 나오면 마음이 흔들리게 되는데 선택 전 안좋은 효과를 염두에 두고 선택을 하면 안좋은 점을 커버할 생각을 할 수 있다\n\n#### 서비스를 사용할 때 3개 정도의 서비스를 써보면서 비교하면 좋겠다\n어느 한 환경에 종속적이게 되면 편협해지고, 더 나은 기술에 대한 정보도 얻지 못하고 시야가 좁아진다. 여러 방식으로 복잡하게 만들어진 프로세스를 단순화하는 작업은 계속 하되, 하나의 기술에만 종속되어서는 안되고, 새로운 방식을 계속 찾아나가야 한다. 계속해서 더 나은 길을 찾아야 한다. 윈도우만 사용하거나 리눅스만 사용하는 것이 아니라, 하나에 집중하더라도 다른 영역을 확인해야 한다. 실제로 사용해보면 더 경험치가 쌓일 것이다. 하나를 쓸 때 간결하게 해놓으면 다른걸 시도하기도 편하지 않을까\n\n#### 정착과 탐험\n한 제품에 정착하더라도 새로운 것을 경험해볼 필요가 있다. 정착 후 탐험을 어떻게 하면 좋을까\n\n#### 물건을 살 때 고려사항\n- 몸이 편해야 한다\n- 허리를 안숙이게 해주는 제품을 고른다\n\t- 바닥걸레질은 무릎이 고통받으니 마대걸레를 사야한다\n- 물건은 건강이 우선이고, 이동성은 그 다음, 디자인도 중요\n- 쌓으면 안좋음\n- 땅에 닿고있으면 안좋음\n- 다루기 편해야 한다\n- 자주 쓰는 것일수록 쓰고싶어져야 한다\n- 가볍거나 예쁘거나\n- 불편한 기능이 있으면 안 쓰는게 낫다\n\t- 쓰면서 계속 불편한 것이 걸려서 새로운 것을 원하게 될 것이다. 사용성이 중요하다.\n\n#### 선택할 때 고려하는 것\n나중에 써먹을 수 있을지\n- 어떤 경험이든 다 도움이 된다고 생각했지만, 그럼에도 선택에는 다른 결과가 따른다\n- MFC는 그 때만 쓰고 말 것이라 차라리 그 시간에 다른 언어를 썼다면 더 많은 배움이 있었을 수도 있다. 선택하기 전에는 고민하고, 선택 후에는 후회하지 않아야 한다는 말이 맞는 것 같다.\n\n#### 비서 문제\nhttps://johngrib.github.io/wiki/secretary-problem/\n37%는 지나보내고 그 다음 지원자부터 이전 지원자들과 비교하여 선택.\n최선을 뽑을 때 보다는 상위그룹 내에서 뽑기 원할 때 쓰기 좋겠다.\n\n#### 잠정 수락 알고리즘\n남여 4쌍이 서로의 짝을 찾을 때, 남자가 자신의 선호대로 선택하면 여자가 잠정적으로 받아들였다가 다른 사람이 더 마음에 들면 바꿀 수 있는 식으로 하면 성공하는 짝이 많이 나온다. 일단 선택해놓고 그것과 비교한다는 것이 귀류법과 비슷한 느낌이다. 이런식으로 경제학에서도 쓰였다고 한다\n\n#### 다음 혁신을 위해 총알을 아껴둔다\n- 폴더블 노트북이 상용화될 때까지 기다린다\n- vs\n- 지금 작업의 효율이 늘 수 있다면 지금 투자하는 것이 더 좋다\n\n작업의 효율이 는다면 투자를 아낄 필요는 없다. 하지만 실제적 효율이 늘지 않는다면 아껴둬도 괜찮겠다\n\n#### 결정 미루기\n과학은 절대적인 진리를 찾는게 아니라 안된다는걸 증명하지 못한 것을 잠시 기준으로 삼는 학문. 그래서 반대의견과 문제제기에 열려있다.\n\n기업이 자신의 이익을 위해 학계와 미디어를 이용할 수 있다\n\ncia의 집단 내부를 와해시키는 방법 중 하나를 보면 결정된 내용에 의문을 제기해 다시 토론하게 하라는 전술이 있었다\n\n구글은 바텀업의 문화로 오랜기간 문화가 조성되어 지금도 이런 문화을 유지하려 하고, 그래서 새로운 관계자가 팀에 합류하면 다시 밑에서부터 의논을 하는 경우가 있다고 한다\n\n결정, 결단이 필요한 순간이 있다.\n아키텍처에서 결정의 순간을 미룰 수 있는 구조가 좋은 구조라고 하는데 결정의 순간은 찾아온다.\n아키텍처는 결정을 되돌릴 수 있게 해볼 수는 있겠다\n\n과학적 발전에서는 이렇게 발전을 막으려는 방해세력을 막고 앞으로 나가는 결단이 잘 되나?\n\n결정을 미루는 것이 도태가 되지 않으려면 어떻게 해야할까\n\n결정을 미루지 않을 수 있을까. 서두를 필요는 없지만.\n\n#### 새로운 기술이 나왔을 때 기존의 기술을 쉽게 전환하려면 기존의 아키텍처가 간단하거나 잘 알고 있어야 한다\n내가 모르는 매직 코드들이 많으면 곤란하다\n\n조대협님의 블로그는 오래된 스타일인데 이것을 깔끔하게 바꾸려면 꽤나 귀찮은 일이 될 것이다. 블로그에서 제공하는 방식으로 글과 카테고리가 만들어져 있어서 일일이 옮겨야 할 것 같다.\n\n툴은 그저 도구일 뿐이고, 내 컨텐츠는 독립적으로 유지 관리 되야 한다\n\n갯츠비에서 넥스트js로 옮긴다면 플러그인들만 찾아서 바꿔주면 될 것이다\n- graphql 문법도 내장되어있어서 이 부분도 따로 수정해줘야 한다.\n- gatsby 플러그인을 쓰는 동작을 메인로직에서 분리해야 한다.\n- 이런 점으로 봤을때는 nextjs를 쓰는 쪽이 낫지 않았을까 싶다. gatsby는 gatsby에 종속적인 코드를 쓰게 한다.\n- 25년 현재 돌아봤을 때 gatsby의 코드는 그것의 컨벤션에 너무 맞춰져있어서 파악하기가 힘들다. 그리고 플러그인들이 버전 종속성 관리가 힘들다.\n\n정리하는 것을 좋아하면서 라이브러리는 도입을 안하려고 한다. 깔끔하게 유지되는 것을 더 좋아하는 것일까... 외부 툴을 도입하려고 할 때 내가 원하는 기능이 A와 B에 나눠져있으면 그냥 내가 만들어버리고 말지라는 생각이 든다.\n\n#### 새로운 도구\n하나의 프로젝트를 하게 되면 그 때마다 새로운 도구들을 도입하게 되고 점점 더 많아진다. 레거시는 남게된다. 이 레거시는 현재와 약간 다른 레거시라 나중에 들여다보면 새로 배우는 느낌이 들 것이다. 그래서 새로운 도구를 도입하는 기준이 동일해야 할 것 같다. 그리고 도구를 도입하는 것은 프로세스에 따라서 되어야 할 것이다. 프로세스는 어떻게 구성되는가. 현재는 인프라, 백엔드, 프론트엔드가 있고 프론트엔드와 백엔드를 연동하는 기술, 백엔드의 정보를 확인하는 어드민 페이지, 또는 CMS 페이지가 부수적으로 딸려온다. 여기에 더해 그 개발 자체를 도와주는 도구들도 있고. 내가 만드는 라이브러리라 하더라도 어떤 식으로 돌아가는지 가이드가 필요하다. 그렇게 각자의 가이드가 다 있으면 새로운 것을 도입할 때 매번 배워야 한다. 원하는 목적이 있다면 그것을 코드로 적어놓고 실제 구현은 라이브러리가 알아서 하는 방식을 따라가야 할 것 같다. 예를 들어 테스트도구를 골라야 한다면, 테스트도구에 종속된 것을 쓰는게 아니라 테스트 코드는 그대로 있고 라이브러리가 이것을 내가 원하는 대로 실행해야 한다. 이게 DIP와 비슷해 보인다. 근데 또 테스트 도구가 내가 생각지 못한 좋은 기술을 갖고 있을 수 있다. 그렇다면 이 때는 도구를 써야하나... 내 원천 요구사항을 업데이트하는 방식이 장기적으로 봤을 때는 유리할 것 같다.\n\n- hasura를 쓰면서 얼마나 hasura에 종속된 코드를 만들어야 하는지 확인해본다.\n    - hasura는 웹에서 postresql에 데이터를 넣고 graphql로 호출가능하도록 할\n      뿐이기 때문에 데이터도 그대로 다른곳에서 쓸 수 있고, graphql 클라이언트도\n      바꿀 수 있다... 좋다\n    - 하지만 역시 UI로 하는 것은 한계가 있다. 기존 코드를 임포트할 수 있어야\n      한다.\n    - DB에 데이터는 저장되어있지만 데이터 모델은 따로 뺄 수 있나? 어떤 언어든?\n- feature flag + hasura = done\n\nsubicura님이 도입할 때 고려한 것들을 확인해보자면\n- 장점들을 뽑고\n- 도입시 고려할 점을 확인하고\n- 단점이 있는 것도 있고, 안적은 것도 있다.\n- 어떤 문제가 있었는지 확인하고\n- 특징을 적었다. = 장점\n\n#### 제약이 없으면 좋겠기 때문에 적은 외부 프로그램을 쓰고 싶었다\n근데 제약이라고 하고 보니 제약을 둠으로써 기존보다 더 나은 것을 만들려고하는 마음과 상충되는 것 같다?\n\n1. 컴퓨터를 새로 샀을때 원래 쓰던대로 복구하는게 귀찮아서 적은 외부 프로그램을 쓰고 싶었다\n2. 쓰고 있던게 있어서 새로운것을 못하게 되는 제약이 싫었다\n3. 필요한게 생기면 새로운 프로그램을 까는게 일반적인데 적은 프로그램을 쓰고 싶다.\n\n- when I bought new computer. my environment need moving to easy.\n\n기존의 작업을 설치없이 편하게 이용하게 해줄 방법이 있을까\n나는 뭔가를 설치하고 사용하는 것을 좋아하지 않는데 그럼에도 불구하고 웹에서도 사용가능하지만 설치한 것들이 있다\n\n뭐가 깔렸는지 쉽게 알고 다른 환경으로 이동했을 때 제약없이 옮길 수 있는 프로그램을 원해서\n하나의 프로그램에 종속되는 프로그램이 있으면 안쓰고 있었는데\n돌아봤을 때 적게 깐다고 다 기억할 수 있는 것도 아니고\n많이 깐다고 필요한 프로그램을 아예 안쓴것도 아니다\n적은 종속성은 좋지만 마음대로 까는 것도 필요하겠다 싶다\n초기화 후 원래 상태로 복구하는 것을 쉽게 하기 위해 설치를 많이 안했다\n\nIoT를 위해 기기를 많이 필요로 하거나 앱이 각 기기마다 있는 것은 별로다.\n뭔가 작업을 위해 계속 앱을 새로 깔아야 하는 것도 별로다\n\n관리하는 물건의 개수를 줄이기 위해 노트북과 키보드와 모니터를 사는 것을 망설이고 있다\n개수를 줄이는 것에 너무 집중하다가 아무 선택도 못한다\n\n\n#### 베스킨라빈스 31\n베스킨라빈스는 정말로 매장에 32가지의 맛만 놔두는 것 같다.\n20개의 메인 플레이버가 있고 시즌별 메뉴를 계속 바꿔가며 두는 방식에\n한달에 1개씩 새로운 메뉴를 만들어서 테스트한다.\n굉장히 마음에 든다.\n\n#### 소유욕은 있는데 소프트웨어는 쌓아두고 싶지 않고 필요한 것만 딱 있으면 좋겠다\n\n#### what I need\n- Just do famous thing\n- I consider fast, light, multiple using way, sync, price,\n- 하나를 교체하려고 할때 다른 것에 영향이 없는 것 (범용적인 것)\n- 기능이 빠릿빠릿하고 강력한 것\n    - 일렉트론은 범용적이지만 느리고 리소스를 많이 잡아먹어서 별로다\n\n#### vim 반플러그인파\nvim의 반플러그인파가 있는데 이들은 플러그인 없이 기존에 있는 기능만 쓰는 것을 좋아하는 것이다.\n그리고 기존에 있는 것들로 대부분의 플러그인의 역할을 할 수 있다는 것도 보여준다. vim 자체의 기능을 더 잘 사용하자는 취지지, 기능을 제한적으로 조금만 쓰려고 하는 것은 아니다.\n\n#### 여러 서비스를 쓰는 것보다 하나의 서비스에서 모든 것을 처리하는 것을 좋아하면서 애플은 하나에 다 제공해주는데 안가려고 한다\n왜 그럴까\n- everybody use a mac\n- appleholic\n- dictator\n[[Think#서울은 애플 같다]]\n\n#### 삼성 언팩행사\n갤럭시 디바이스끼리 동기화 기능을 강화하고 윈도우와도 제휴하여 동기화가 잘되게 했다\n이것은 원래 애플 기기끼리 제공하던 기능인데 이것이 애플의 최대강점이었고 삼성은 이를 따라하는 느낌이다\n\n#### 내가 갖고 있는 물건중에 꼭 필요하지 않지만 갖고 있는 것은 어떤 영향력으로 나에게 필요해지게 되었는가\n\n\n\n## 효율\n1시간 할 것을 30분 만에 하는 것\n2단계 걸칠 것을 1단계로 줄이는 것\n2명이 필요한 것을 1명이 할 수 있게 하는 것\n2개가 필요한 것을 1개로 줄이는 것\n1000원이 필요한 것을 500원으로 줄이는 것\n신경을 안써도 필요할 때 알게해주는 것\n2번할 것을 1번에 하는 것\n\n줄이는 대신 사이드 이펙트가 없는 것\n본질을 위해 껍데기를 정리\n\n편해지는 것을 찾는 것 vs 불편을 감수하는 것\n\n#### 효율화의 안좋은 사례\n닭을 사육할 때 효율화를 늘리기 위해 닭을 괴롭게 한다\n\n#### 모든 효율 최적화를 이룬 나는 무엇을 원할까\n사고싶은것을 다 사다보면 공간이 필요해진다\n시간을 아낀다고 도구를 이용해도 아껴진 시간이 항상 효율적으로 쓰이기 힘들다\n\n성능을 늘리는데 집중하는 작업이 끝나고 나면 비용최적화 하는 작업에 들어가고 안정화 작업이 된다\n\n#### 삶의 질 증진\n개발을 위해 개발자가 작업하는데 필요한 도구를 개발하는 것이\n내가 데일리트래킹, 효율화를 원하는 이유\n새로 나오는 기술들이 계속 생기는데 그것을 계속 습득하기 위해\n받아들일 준비를 해놓는 것\n\n데일리 트래킹을 통해 하루를 측정하고\n하루의 효율을 높임을 통해 삶의 질을 높이려고 한다\n하지만 어떤 작업의 시간을 줄인다고 해서 남은 시간을 효율적으로 쓸 수 있는\n것은 아니다.\n\n#### 고려 요소 관리\n최소 기준만 충족하면 된다면 기준을 딱 제한해서 그것에만 집중하면 되겠지만\n현실의 문제는 고려 해야 될 요소가 계속해서 늘어난다\n계속해서 늘어가는 고려요소를 어떻게 관리할 수 있을까\n\n#### 스위스 군용 나이프\n잘 만든 칼에 비하면 스위스 군용 나이프는 형편 없지만 칼을 긴급할 때 외에는\n사용하지 않고, 긴급할 때 필요한 만큼의 성능이 된다면 칼을 갖고 다니는 것보다\n들고 다니기도 쉬워 편하다\n\n#### 선택과 집중\n궁금한 분야에 관련된 책이 한국에 딱 한권만 있다면 아마도 그 책에 의존해서 깊이 팔 것이다\n근데 요즘엔 너무 많은 책이 있어서 한권도 제대로 안보게된다\n어떻게 하면 선택과 집중을 잘 할 수 있을까\n\n더 좋은 신박템이 없을까 하고 계속 상점을 뒤진다\n이걸 정보에도 이런식으로 접근하면 좋을텐데\n\n## 2 in 1\n두개의 도구를 써서 하던 것을 하나만 써서 할 수 있게 만들면 희열이 느껴진다\n- 휴대폰에 삼성페이가 들어가서 지갑이 필요없어진 경우\n- 충전기 하나로 모든 기기를 충전할 수 있는 경우\n- 충전기에 선이 있는 타입은 변동성이 적은데, USB A를 꼽을 수 있게 되있는 충전기는 분리되어서 다른 것을 끼울 수 있는 장점이 있다.\n- Charge is better to change separate cable, But notebook is not good to change separate. Why?\n- 큰 판때기가 있으면 뭔가 적을 수 있게 해두면 공간 사용이 된다. 이런 것을 원한다\n    - 책상이 높이가 조절 된다든지\n    - 책상이 접히는 것, 서랍이 딸려있는 것, 높이 조절\n- 파우치에도 거치대도 되는 걸 사면 기능의 손실 없이 하나를 알차게 사용할 수 있다\n- 가방에 이것 저것 주머니를 만드는 것은 좋다\n- 키보드 usb unifying, 블루투스 둘 다 지원하는 것은 좋다\n- 케이블 usb c, micro usb 같이 있는 것은 좋다\n- 무선이어폰 무선충전 여부\n- 보조배터리 무선충전 여부\n- 스마트폰: best example\n- 노트북: desktop + monitor + keyboard + touchpad + stand\n- 태블릿: desktop + monitor\n- cable: usb c + hdmi + LAN\n- charger: multi port charger, (notebook + smartphone)\n- backpack: lots of pack, usb port, notebook pouch, quick acccess pocket,\n- clothes: office, daily, training\n- lotion: skin, essence\n- hotspot + router(화웨이 E5885). 라우터(랜선꼽아서 와이파이 켜주기) + 유심 네트워크 + 보조 배터리(6000)\n- 2인1이 좋은것도 있지만 안쓰는 것이 없는게 좋은 것 같다\n\t- 노트북을 세워만 놓고 키보드를 안쓰면 키보드가 놀고있는게 아깝다\n\n#### trade off\n적은 기능을 하는 것이 안정성이 높다\nusb 허브는 그 자체로도 안정성이 낮고 발열도 있다고 한다\n근데 요즘에 m.2소켓이 있는 허브도 나오고 있다\n기능은 많아지지만 안정성이 걱정된다\n\n- usb 충전기에 포트가 여러개 있는 것은 좋다\n    - 근데 무선충전이나 보조배터리 기능을 추가하면 불안하다\n- 2 in 1 노트북을 태블릿으로 쓰기에는 너무 무겁고 신경 쓰일 것 같다\n    - 두꺼움\n    - 무거움\n    - 모니터 흔들거림\n- 올인원은 좋은데 집은 원룸이면 별로다\n- 쇼파와 침대 - 매일 폈다 접었다 하는 건 비효율적\n- 보조배터리에 케이블 일체형이면\n  케이블이 약한 부분인데 케이블이 고장나면 멀쩡한 보조배터리를 교체해야 한다\n\n\n\n---\n\n## Notebook\n- size\n- weight\n- upgradable\n\n+ 논글레어 패널\n+ IPS 패널\n+ 고해상도\n+ Wifi module\n+ Bluetooth module\n+ Port\n+ 발열 배터리 드라이버 호환\n+ 4k 재생이 되야한다\n\n#### 노트북 vs 태블릿 | notebook vs tablet\n- 하나의 뭉치로 묶여있는 것 vs 원할때 떨어뜨려 놓을 수 있지만 같이 쓰려고 하면 주렁주렁 달고 가야 하는\n  것(허브,키보드), 꺼내 쓸 때 여러개를 꺼내야 한다.\n- 노트북을 포터블용에 집중할 것인가\n\t- 메인으로 쓰는 것을 위해 포터블을 조금 양보할 것인가 포터블로 쓰는 것은 미래에 모니터를 메인으로 둔다는 것이고, 메인으로 쓴다는 것은 들고 작업할 때는 조금 다루기 힘든 것을 받아들인다는 것. 근데 넣고 꺼낼 때, 들고 작업할 때(회의하러 가져갈 때, 컨퍼런스에서 볼 때, 도서관 갈 때, 차 안에서) 노트북이 크면 불편한가?\n- 프로그램을 돌리기에는 노트북이 승\n- 가볍게 들고다니기는 태블릿이 승\n- I gotta buy both.\n- *two machine has different role.*\n- tablet isn't fit for programming\n- [[Decision_Monitor_Size]]\n\n#### 노트북\n- NVMe SSD\n- 360도 모니터\n- 메모리 확장 슬롯\n- 14인치 이하\n- 1kg ~1.09\n- 최근 3년 이내\n\n#### 노트북 비교\n맥북프로\n- 2023 14인치 1.6\n- 2022 13인치 m2 1.4\n- 2021 14인치 m2 1.6\n- 2020 13인치 m1 1.4\n\n맥북에어\n- 2022 13.6 m2 1.24\n- 2020 13.3 m1 1.29\n- 2019 13.3 intel 1.24\n- 2015 11 1.08\n\nthinkpad x1 carbon 180도\n- 2022 G10 1.12\n- 2021 G09 1.14\n- 2020 G08 1.09\n\nthinkpad x1 yoga\n\n#### phone\n1. 무게\n2. 카메라\n3. 편의성(삼성페이)\n\n아이폰 5 사이즈의 장점\n- 손에 착 들어와서 아이링이 필요없다\n- 가볍다\n- low battery\n  small screen is problem\n\n갤럭시노트 필요한가\n- 펜 꺼내서 쓰는 경우\n- 펜 쓴 것을 노트로 옮겨야 함\n- 삼성노트를 백업해야 함\n- 크다\n\n#### 아이폰 vs 안드로이드\n아이폰으로 바꿀까? 연결성이 스무스한게 탐난다\n\n근데 애플쪽은 폼팩터가 한정적이라 애플이 만드는데로 따라가야하는 점이 아쉽다.\n대신 만들어진 제품 내에서는 굉장히 좋은 사용성 경험을 준다.\n아이패드가 맥북처럼 사용되어지거나, 360도 폼팩터가 되면 몰라도 아직 안되는 것은\n분명 있다.\n\n폐쇄적인 대신 성능을 확실히 한 것 vs 자유로운 대신 무난한 제품\n\n경제성까지 고려하면 안드로이드 쪽이 더 선택폭이 많아서 좋긴 하다.\n\n\n## Note\n[[Journal#How to write Journal]]\n\n## 물건\n\n#### 돈을 더 내면 더 가치 있는 물건이 나오는 것\n노트북은 성능과 이동성이 양립할 수 없다. 천만원을 줘도 1kg의 17인치 풀성능의\n노트북을 살 수가 없다\n집은 비쌀수록 좋은가? 더 좋은 소재를 쓰고, 좋은 위치에 있을 수는 있다\n소프트웨어에서도 상충하는 가치들이 있다.\n가벼우면서 많은 기능을 넣고, 안정성이 높을 수는 없다\n많은 기능은 필연적으로 안정성을 떨어뜨린다.\n#trade-off #balance #think\n\n#### 가방\n- usb 단자\n- 여행용\n    - 방수\n    - 노트북 부분\n    - 가로로 열리는 방식\n\t- 짐 들어가려면 30L는 되야함\n- 손잡이\n- 가방끈\n- 가방끈 주머니\n- 등받이\n- 등판 주머니\n- 자체 무게\n\n사용처\n- 여행\n- 일상\n- 포멀한 여행\n\n무게 기준\n- **몽벨 버사라이트 20L 200g**  - 몽벨로 샀음\n- 마지언타이틀 롬팩 260g\n- 로우로우 20l 610g 10만원\n- 샘소 약간 너무 딱딱한 느낌\n- 코스 남녀공용 엔듀로라이트 백팩 18L 630g\n- 아크테릭스 헬리오드 15l 200g\n- 파타고니아 24l 420g\n\n#### 옷\n- 내구성\n- 활용성\n- 좋은 가죽제품\n- 좋은 면제품\n    - 바버자켓\n    - Scheck\n    - 밝은 베이지 옷\n    - 검은 맨투맨\n- 다크 아카데미아에 채도 낮은 걸로 포근한 느낌을 선호\n- 빤딱빤딱한 쌔거 느낌\n\n뭐가 묻거나 손상을 입어도 상관없이 편한 옷\n소중해서 잘 관리하는 옷\n소중하게 아끼는 마음도 중요하고\n다른사람에 의해 얼룩이 생겨도 편하게 넘어갈 수 있는 것도 중요한데\n옷을 아끼는 것은 싫다\n적당한 옷을 소중히 다루면 되겠다\n손상되도 사람을 원망하지 않으면서 관리하면 좋아지는 옷\n\n지금 가지고 있는 옷 중에 부족한 부분이 있다.\n겨울에는 더 좋은 코트를 장만하고 싶고, 바버자켓을 사고싶고\n봄,가을에는 트렌치코트, 자켓이 있으면 좋겠다\n\n계절별, 종류별, 상황별 요구사항이 추가되었다.\n\n#### 경량 패딩\n- 아크테릭스 300g - 60만원\n- Rab 277g - 60만원\n- 몽벨 플리즈마 1000 다운자켓 - 50만원 안예쁨\n- 케일 - 43만원 안예쁨\n- 노스페이스 서밋 히트라인 - 20만원\n- 노스페이스 마티에 다운자켓 - \n- 유니클로 다운패딩\n\n#### 키보드\n- bluetooth / unifying\n- + touchpad\n    - thinkpad bluetooth keyboard 2\n    - 모키보 터치패드 키보드\n\n#### 키보드는 안쓸 때도 있고 쓸 때도 있을거니까 사는게 낫겠다\n없으면 제한이 가해지고 불편함이 온다\n제한을 거는 것을 언제는 받아들이고 언제는 놓아야할까\n\n#### 마우스\n- bluetooth / unifying\n    - logitech m590, bluetooth change easy,\n    - logitech m720, low sound, bluetooth change easy,\n\n#### 충전\n- lightweight. under 200g\n- over 45w\n- no noise\n- usb c and a\n\n#### Notebook charger\n- 무선충전\n- 고속충전\n- 갤럭시워치\n- 세워지는 단독 무선충전기를 사느냐\n- 보조배터리와 무선충전기 같이 되있는 것을 사느냐\n\n#### 케이블\n- usb a, usb c, lan, hdmi, composing\n- 멀티충전케이블\n- 미니케이블\n- 고속충전케이블\n\n#### 빔 프로젝터\n- 화질에 영향 - 명암비 해상도 HDR\n- 밝기 - 안시 1500 이상이면 ok (적당히 어두울 때 사용할것임)\n- 소음, 크기\n\n#### 해상도\n고해상도로 브라우저를 써도 그 안의 내용은 잘 안보여서 확대를 해야 한다.\n약간 이상한 얘기같아 보이지만, 툴바나 쓸데없는 것들이 작아지는 효과가 있어서 좋다.\n\n화면이 크면 멀리서 화면을 봐도 되고, 자세를 마음대로 해도 된다는 장점이 있다.\n\n#### 폼클렌징\n알갱이 있으면 눈에 들어감\n\n#### desk\n책상 높이 65 ~ 70\n\n#### 가구\n- E0 등급으로 하면 좋다 (친환경)\n- IKEA Billy 책장 괜찮은 것 같다\n- Desk with cabinet - IKEA alex drawer\n- trolly that height size - for standing work\n- 한쪽벽은 책으로 가득\n- 방 한쪽면을 하고싶은것들 적어놓기 (뭘로?)\n- 주방에는 걸이를 많게(3M으로 붙여도 될 듯)\n- 현관문에 걸이 장착, 가방 걸기\n- 화장실 문에 걸이 장착, 수건 수납\n- 수온계 사서 샤워기호스에 연결\n- 의자는 몸 사이즈에 맞게 지금 샀던거보다는 작은것으로\n- 모니터에서 전원충전 뽑을 수 있는 모니터 나중에 살 수 있으면 좋을 듯 - 맥북 충전을 모니터로 할 수 있음\n- 책상은 모션데스크에 앞뒤폭이 커야 모니터가 눈에서 좀 멀어질 수 있다\n\n#### 생활팁\n플라스틱 HDPE\n\n#### 신발 냄세\n구연산 뿌리고 신문 넣고 하루 말리기\n\n#### 빈 캐리어 활용법\n소모품 보관 트레이\n\n#### toothbrush\n- turning version\n- sonic care version\n  - I choose this.\n\n#### 신용카드\n- 신용카드 비교 - 카드고릴라\n- 적립\n- 전월실적\n- 교통\n- 통신\n- 쇼핑\n\n#### earphone\n1. 노이즈캔슬링\n2. 크기\n3. 음질\n4. 편의성\n5. 내구도\n\n노이즈 캔슬링 멀미 생길 수 있음. 무조건 잘되는 것을 찾을 필요는 없을 듯\n\n#### 펜\n까렌디쉬\n쥬스업\n연필(블랙윙?)\n미도리\n파커\n\n#### 볼펜\n- 클립형\n- 멀티컬러\n- 가벼움\n- 감촉\n\n#### 옷 쇼핑몰\n- https://postarchivefaction.com/ko/collections/all?page=1\n- https://etcseoul.com/product/list.html\n\n#### 노트\n\n아날로그 노트의 장점\n- 기억하기 좋을 것 같아서\n- 다시보기 좋을 것 같아서\n\n#### 향수세트\n딥디크 향수 세트 디스커버리 세트\n조말론\n바이레도\n르라보\n크리드\n마르지엘라\n\n#### 로션\n비오템옴므  - 별로임, 얼굴이 트고, 냄세가 올드하고, 얼굴에 작은 알갱이가 나는거 같음\n이니스프리 포레스트 - 좋음, 피부가 부드러워진듯?\nck 모이스처\n\n#### 아주 갖고 싶어서 샀는데 사고 보니 별로였던 것이 있나\n- ipad - 아직 좋다\n- notebook - 좋다. 빠지는 구석이 없다\n- 옷 - 한 번 마음에 들면 계속 좋다\n- thinkpad bluetooth keyboard - 너무 마음에 든다\n- earbud - 아주 좋다\n\n-----------------------------------------------------------------------\n\n## HOME\n\n- 집 기본 조건\n\t- 수압\n\t- 온수\n\t- 통풍\n\t- 풍경\n\t- 이 4가지는 어떻게 할 수가 없다 그래서 중요함\n\n추가조건\n* 벌레 X 여름에 확인\n* 물 콸콸\n* 소음\n* Metro, bus\n* internet speed\n* 주변에 도서관, 공원, 운동시설, 마트\n* 공간의 분리(책방,침실,컴퓨터방)\n\t- 각자의 공간이 있으면 좋겠다\n\t- 거실은 주방과 같이 있어도 상관 없다\n* 담배냄세 - 문 열어도 담배냄세 안나는 아파트\n* 빨래 말릴 공간 따로. 방은 하나라도.\n* 양쪽 창문 환기\n- 온도조절\n- 남향의 창문큰집\n- [checklist](http://t.ly/5ogq)\n\n> 곰팡이생겨서 리모델링했다→ 그방에 절대 들어가면안됨 리모델링해도 또생김\n> 집만보고 주변을 안보고옴→ 주변에 가게나 술집있으면 밤에 노래를쳐틈, 공사하는곳이 있나 살펴봐야함(소음)\n> 집볼때 벽지에 얼룩져있으면 200% 결로생기는집 벽지에 누런 물쏟은자국이있다 하면 피해제발!!!!!!\n> 화장실에 창문없는 원룸→환기안하면 곰팡이랑 행복한삶을 살게될거임(잘 지은 원룸은 없어도 안생기긴 하는데 오래된곳은 생긴다고 보면됨)\n> \"나는 창문없는 집에서도 살수있어^^\" → 빨래에서 냄새나고 여름에 덥고 사람미쳐버림\n> 집볼때 창틀에 벌레가 있나 없나 확인하기→ 벌레시체가 있으면 바로 그집은 손절해야함.+ 주방싱크대아래 공간거기도 벌레가죽어있다? 그집은 벌레가 계속나오는집임\n> 집구경갔는데 작은개미시체가있다→ 집주인이 괜찮다고 자기는 방역한다고 해도 무조건 도망가기 안도망간다? 계약기간내내 개미시체나 치우면서 살아야함\n> 엘리베이터 탈 때, 공고문에 이 아파트의 단점이 써져 있습니다. \"층간소음, 금연등, 지상주차장에 매연등\"\n> 꼭 지하주차장에 들릅니다. 거기서 보게 되는 것 중에 통로에 이중주차 된 것을 보면 주차난을 짐작할 수 있습니다.\n> - 유튜브 댓글 펌\n\n\n#### 공간분리\n\n분류1\n- 재택\n- 작업 (스탠딩, 싯다운)\n- 취침\n- 식사\n\n재택 환경과 개인 작업환경을 분리하고 싶다\niot 연결되는 색 조절되는 조명. 간접등처럼\n작은방이라도 조명으로 분위기를 바꿔 볼 수 있다 -> 조명 구매함\n러그로 공간 분리?\n러그 + 조명으로 최소한의 감성만이라도 채우면 좋겠다\n\n잠, 식사, 개인작업, 재택업무\n4가지를 한 공간에서 다 해결하려고 하니 2개의 방을 원했다\n근데 원룸에서도 할 수 있도록 구상을 해볼 수 있겠다\n잠과 개인작업은 공존할 수 없다\n식사와 개인작업은 가능하다\n개인작업과 재택업무는 가능하지만 분리하는게 좋겠다\n\n#### 환경 분리\n- 오락용 환경과 업무 환경과 공부 환경을 분리하고 싶다\n- 아이패드로 유튜브나 웹서핑을 하고 노트북으로는 그런것들을 일절 안하게 하고\n\n#### 버팀목 전세대출\n80% 이내, 최대 7천만원\n8000 집이면 6400 대출, 1600 본인 부담\n9000 집이면 7000 대출, 2000 본인 부담\n이자 6400 * 2.1 = 130만원 한달 10만원 남짓\n\n- 대출 확인\n- 집 확인\n- 계약\n- 대출\n\n## 집 구하기\n\n#### 이사 히스토리\n24/07/07\n전세 1억 7천 관리비 3만원\n\n22/07/08\n8일 후불 20 + 6\n\n21/08/01 입주\n1일 선불 40만원 + 7만원\n\n집 옮기면 할 일\n- 전입신고\n- 휴대폰 루틴 장소 설정\n- 카카오맵 집 설정\n- 네이버 배송지 수정\n- 코몰 배송지 수정\n\n#### 2021\n- [중기청 전세대출 후기](https://m.blog.naver.com/keobee/222085754938)\n- [서울 집구하기 꿀팁](https://m.fmkorea.com/best/3766221113)\n- [전세계약과정](https://myhappy30s.tistory.com/6)\n- [마이홈-주택 거래 방법](https://m.myhome.go.kr/hws/portal/bbs/selectHouseTransType1View.do#guide=2_1)\n- https://www.suwonoffice.com/post/법인소유-부동산-임대차-계약할-때-주의할-점\n- [임대차 계약 체결 방법](http://www.himchanlaw.com/20/369071)\n\n- 갓 나온 매물을 노리자\n\n1억 대출 원룸 vs 1000 40원룸\n1억시 2퍼센트 200만원 월 16만원\n\n1년 200, 480\n대출 대기, 즉시 입주\n관리비\n\n출퇴근 대중교통\n- 불광 응암 새절 미성동 낙성대\n- 경기도 복정\n- 사당, 낙성대\n- 회기역 경의중앙역\n- 성수\n- 낙성대\n- 수유\n- 천호\n- 신림\n- 군자\n- 장승배기역  동작도서관\n- 구로역 구로도서관\n- 송파구 삼전동, 구로구, 동대문구\n- 경기도 성남\n- 수진역\n- 태평역\n\n풀옵션\n카뱅 대출 1억\n반지하x\n분리형 이상\n역 10분\n\n카뱅 대출 1억\n세탁기, 냉장고\n반지하x\n넓은 원룸 또는 분리형\n역 10분 (강남 삼성역 출퇴근 환승 1번 이내)\n한달 내 입주\n\n1000 40 7 낙성대\n10분거리\n채광 없음\n화장실 큼\n화장실 창문 없음\n분리형\n방 작음\n1층\n벌레유입?\n습하지 않을까\n\n보증금을 지킬 수 있느냐\n- 소액임차인(2천) 먼저보호됨. 경매가 등기에 올라오기 전이라면.\n\n계약을 지킬 수 있느냐\n법인임대인\n\n#### 2022 집구하기\n이번 집 구하는 조건\n- 원래 고층에 바깥이 잘 보이는 조건을 꿈꿨으나, 과감히 포기한다\n- 샤시가 좋은 집이어야 한다\n- 군자쪽 위치이고 7~10평에 반지하만 아니라면 좋겠다\n- 가격은 2천에 30까지. 대출로 한다면 1억 2천에 10만원\n- 06/18 위치나 가격 중 하나는 포기해야 한다...\n\t- 6/18 위치와 가격 모두 만족하는 집을 찾을 수 있었다. 바깥도 보이기도 한다. 만족\n\n\n가계약했다\n\n2년 괜찮을까\n6평 활용 어케 잘할까\n상봉 풋살팀\n\n용산 40분\n강남 40분\n중랑천까지 걸으면 20분\n\n#### 2024 집구하기\n- 밖이 보이는가\n- 방이 있는가\n- 화장실이 넓은가\n- 이중샷시\n- 벌레나 곰팡이만 없었으면\n\n물어볼거\n- 대출\n- 입주일 7월 8일\n\n첫집은 크기가 좀 작지않을까 - 작긴 한데 괜찮음 컨디션 좋음 퀸침대는 힘들듯 옵션있음\n송정 1억 3천 공간이 크다 장판이 낡음 무옵션 밖이 건물뷰\n두번째는 남향 장점 말고 다른 장점 있을까 방은 괜찮음 근데 전체적 노후화 작은방은 트인뷰\n세번째는 너무 낡지 않으면 괜찮을거 같은데\n샷시가 좀 구식이긴 함 서향북향창 건물뷰\n\n\n침대 50\n선풍기 10\n책장 15\n냉장고 15\n세탁기 15\n조명 4 + 1\n전구 6\n의자 8\n러그 커튼 10\n헹거 5\n전자렌지 6\n드라이기 8\n다이소 10\n책상 책장 스툴\n에어컨 70\n\n\n집 꾸미기 관련 캡쳐도 문서에 넣어야겠다\n![거실-쇼파-뒤에-식탁-좋다](house_20250809180545.png)\n\n\n## 부동산 \n\n- 부동산 매매를 위한 현실적인 고려사항 알려줘. 임장을 갈 때 어떤 것을 봐야 하는지 명확하고 실무적인 테크닉으로 알려줘.\n\t- 실거래 확인\n\t- 매물상태 확인(증축, 확장)\n\t- 주차대수 확인\n- 조건\n\t- 5억 언저리\n\t- 20대평형\n\t- 세대수 (400 이상이면..)\n\t- 나무뷰이지만 언덕이 그리 높지 않았으면\n\t- 밝은 채광\n- 성북구 정릉동, 길음동\n- 동대문구 동서울한양\n- 서대문구\n- 노원구 중계,상계동\n- 중랑구\n- 도봉구 창동\n- 금천구 독산동 가산동\n- 구로구 개봉1동\n- 염창동 신동아, 등촌동 라인, 개봉동 현대, 염창동 동아1차, 구로동 한신휴플러스\n"},{"headings":[{"value":"장보기목록"},{"value":"I need 2200~2400 kcal"},{"value":"생활정보"},{"value":"식습관"},{"value":"장보기후보"},{"value":"주방 식재료"},{"value":"식단"},{"value":"Easy Food"},{"value":"Well Food"},{"value":"Favorite Food"},{"value":"Sauce"},{"value":"Snack"},{"value":"아침"},{"value":"Defeats"},{"value":"Medicine"},{"value":"ETC"},{"value":"냉동식품"},{"value":"Tip"},{"value":"물"}],"fields":{"slug":"/food/"},"rawMarkdownBody":"#### 장보기목록\n우유\n반찬\n계란\n닭가슴살\n통밀빵\n요거트\n시리얼\n블루베리\n도시락\n단백질음료\n단백질바\n물\n견과류\n\n\n#### I need 2200~2400 kcal\n(If I want bulk up, 2500~2800)\n\n\n#### 생활정보\n고형물의 음식을 먹어야하는 이유\n물로만 된건 위를 트레이닝 시키지 못해서 많이 먹게 해주지는 못하기 때문\n\n\n#### 식습관\n물 자주 마시기\n우유 하루에 하나\n계란 6개\n\n\n#### 장보기후보\n계란 2개인거\n고구마말랭이\n꼭고칩\n바이오 요거트\n프로틴음료\n햇반솥반\n땅콩버터와 모닝빵\n통밀빵과 계란샐러드\n바나나\n떡\n도시락\n후보 : 죽, 편의점 빵\n시리얼\n삼각김밥\n덴마크 우유\n삶은달걀\n우유 1리터\n빅맥\n\n아침\n- 단백질바 미니\n- 미숫가루 프로틴 쉐이크\n- 견과류\n- (계란 2개)\n- 또는 통밀빵\n\n점심\n- 회사근처식당\n- 또는 도시락 + a\n\n간식\n- 300~400 칼로리 간식\n- 컵반 또는 솥반\n- 고구마말랭이\n- 우유에 시리얼\n- 간식으로 3분짜장카레 사놓으면 밥 사이에 먹기 좋겠다\n\n저녁\n- 닭가슴살\n- 밥\n- 반찬\n\n\n\n#### 주방 식재료\n기본식재료\n- 양파\n- 마늘\n- 파\n- 두부\n- 고기\n- 무\n- 계란\n소스\n- 간장\n- 소금\n- 설탕\n- 올리브유\n- 버터\n맛있는거\n- 고등어\n- 닭가슴살\n좋아하는 메뉴\n\n\n## 식단\n- 닭가슴살, 계란, 고구마 5일치\n  - 닭가슴살 한 개에 2천원, 100G -> 2개 먹어야 차더라 200G x 5 1KG -> 2만원 --> 1만원으로 가능?  1,500원으로 대량 구매 가능\n  - 2,000 * 5\n  - 닭가슴살 줄이고 계란 사면? -- 계란 30개 6천원 하루에 많아야 3개\n    - 2주간 6천원 1주에 3천원 -- + 닭 1만 = 13,000\n- 반찬가게 반찬들 5일치 - 4팩 8,000\n- 햇반 5개 -> 한 개 천원 -> 5천원\n- 13,000 + 8,000 + 5,000 = 26,000 => 1일로 나누면 5,200원\n- 아침 시리얼 + 우유 + 견과류\n- 점심 닭가슴살 도시락 5,000원\n- 간식\n\n## Easy Food\n- 고추된장 무침\n- 파프리카 브로콜리 무침\n- 감자,계란 조림/샐러드\n- 두부 조림\n- 양파 버섯 볶음\n\n## Well Food\n- mushroom\n- broccoli\n- cabbage\n- onion\n- garlic\n- nuts\n- banana\n- tofu\n- 어묵은 어육 함량 70% 이상으로\n- 닭가슴살\n\n## Favorite Food\n- 라볶이\n- 돼지고기김치찌개\n- Chicken\n\n## Sauce\n- 고추장\n- 간장\n- 설탕\n- 소금\n\n## Snack\n- Dosirak\n- Tea\n- Smoothie 과일 스무디\n- Fruit\n- 채소 음료\n- 닭가슴살\n- 건강즙 (배도라지즙, 양배추즙 등)\n\n## 아침\n- 고구마\n- 바나나\n- 에너지바\n- 요거트\n- 땅콩잼 식빵 계란 채소음료\n- 삶은계란\n- 브로콜리 버섯 삶아먹기\n- 오트밀\n\n## Defeats\n당\n나트륨\n트랜스지방\n\n## Medicine\n수면에 좋은 약\n- 가바, 트립토판. 둘 다 아미노산 성분?\n\n## ETC\nBig mushroom is so tasty\nBut sasongi is not tasty. i need take care\n\n마시는 간편식(랩노쉬, 디스이즈푸드)를 하루 종일 먹어도 영양소만 채워진다면 먹어도 되는 것인가?\n- 소화불량\n- 장건강\n- 위건강\n- 간\n- 콩팥\n\n채소섭취를 음료수로 대체해도 효과는 똑같은가?\n- 섬유질이 제거된 제품이다\n- 영양속 파괴?\n\n미네랄\n\n#### 냉동식품\n냉동을 하면 더 좋은 식품이 있습니다. 대표적인 것이 '블루베리', '두부', '시금치' 입니다.\n\n브로콜리도 냉동을 하면 수분은 빠져나가고 영양소는 응축돼 생 브로콜리보다 식이섬유, 비타민, 미네랄 등 영양소 섭취에 효과적입니다. 브로콜리는 색깔이 노랗게 변하기 전에 뜨거운 물에 살짝 데쳐서 먹기 좋은 크기로 조각 낸 후 냉동 보관하는 것이 좋습니다.\n\n그 외에도 마늘, 팽이버섯 등도 냉동하면 성분 변화 없이 섭취할 수 있습니다.\nhttp://www.foodtoday.or.kr/news/article.html?no=151146\n\n#### Tip\n- 마늘 반 잘라서 전자렌지 20초\n- 대파 손질해놓으면 사용하기 좋다\n- 생선구울때 신문지를 덮고 뚜껑을 덮으면 기름이 뚜껑에 안묻어 좋음\n\n#### 물\n물을 많이 마시라고 하는데 식사 전 중 후로는 안마시는게 좋다고 하는데\n결석은 음식물이 안내려가서 그런거 아닌가?\n1시간마다 물마시는게 효과가 있나?\n\n식 전 물은\n식 중 물은 소화가 안되는 사람에게 안좋다고 한다\n식 후 물은 30분 정도 있다가 먹는게 좋다고 한다\n"},{"headings":[],"fields":{"slug":"/music/"},"rawMarkdownBody":""},{"headings":[{"value":"Health 건강 위생"},{"value":"손 소독제와 휴대폰 소독, 스크린 닦기"},{"value":"폴리에스터 옷이 신체에 미치는 영향"},{"value":"일반 내시경 비수면 힘들다"},{"value":"base workout"},{"value":"method"},{"value":"Stretching"},{"value":"관절"},{"value":"손목"},{"value":"오른쪽 시프트키를 안쓰는 방법을 찾아봐야겠다. 방향키도 쓰지말고"},{"value":"헬스"},{"value":"데드리프트"},{"value":"러닝"},{"value":"테니스"},{"value":"스트레칭 원리"},{"value":"베이스"},{"value":"Football"},{"value":"Liverpool"},{"value":"축구"},{"value":"발성"},{"value":"발성법"},{"value":"진짜 목소리"},{"value":"발성법"}],"fields":{"slug":"/physical/"},"rawMarkdownBody":"\n![health_house](../img/health_house.png)\n\n\n## Health 건강 위생\n\n[[Food]]\n\n#### 손 소독제와 휴대폰 소독, 스크린 닦기\n알코올\n에탄올\n살균, 향균\n손 세정제를 바른 후 핸드크림으로 보습을 해주는 것이 좋다\n손 소독제는 오염보다는 세균을 없애는 목적이다.\n음식을 먹기 전에 잘 안말리면 에탄올을 섭취하는게 되어서 위험할 수 있다\n스크린은 극세사 천으로만\n\n블루라이트 차단은 효과가 있다고 보기 힘든 것 같다.\n\n\n#### 폴리에스터 옷이 신체에 미치는 영향\n\n- 천연섬유 - 면, 모, 레이온\n- 합성섬유 - 석유를 가공해 플라스틱이 된 것을 이용한 것\n- 흡습성이 안좋다고 한다. 피부가 숨을 못쉰다는 것\n- 땀 흡수를 잘 못한다고 한다\n- 그러면 폴리에스터는 왜 운동할 때 입지? 빠른 흡수와 배출을 한다고 하는데?\n- 내구도가 좋다고 한다. 땀이 빨리 마른다고 한다\n- http://www.newstof.com/news/articleView.html?idxno=1640\n- 면이 몸에 알레르기는 덜 일으킨다고 한다. 안좋은 폴리에스터 옷은 미세 플라스틱을 많이 떨어뜨린다고 한다\n- 울이 냄세에 좋다고 한다 땀 흡수도 잘한다고 한다\n- 폴리프로필렌이라는 비슷한 소재는 부드럽고, 통기성이 좋다고 한다\n\n\n#### 일반 내시경 비수면 힘들다\n목구멍에서 계속 느껴지고 목이 아프다\n며칠동안 목이 아프다\n\n건강검진 3시간 걸렸다\n\n\n---\n\n## base workout\n- push up\n- pull up\n- squat\n- dips\n- plank\n- bicycle crunch\n\n## method\n- warm-up 5 time\n- keep going when you don't do again\n\n## Stretching\n\n[https://m.blog.naver.com/jss0163/220633824750](https://m.blog.naver.com/jss0163/220633824750)\n목에 담 걸렸을 때 푸는 법\n\n## 관절\n\n#### 손목\n같은 문제를 겪을 직업들\n- 피아니스트\n- 만화가\n\n분리형 키보드, 인체공학 키보드\n- https://www.youtube.com/watch?v=cOmEzt9n-mw\n\n#### 오른쪽 시프트키를 안쓰는 방법을 찾아봐야겠다. 방향키도 쓰지말고\n:, ㅆ, insert 모드에서 방향키를 컨트롤 hjkl로 맵핑해야겠다.\n; -> :\n[ 스니펫으로 {}\n9 스니펫으로 ()\n\n\n## 헬스\n\n상체근력\n골반유연성 부족\n\n식단\n110g단백질\n탄수화물도\n일단 최소 4끼\n아침에 계란 2 3개\n점심 후 참치김밥 등 단백질 든 김밥\n\n1일 하체\n\n개구리자세\n한다리 뒤로 하고 한다리 양반다리로 스트레칭\n양반다리로 스트레칭\n스쿼트\n런지\n레그레이즈\n다리 벌리는 운동\n폼롤러로 풀어주기\n유산소 15분\n\n고관절\n견착\n스쿼트\n\n목 숙이면 튀어나온 뼈 위에 얹고 어깨를 뒤로 접어 날개뼈를 모은다 생각하면 날개뼈위에 바가 걸린다\n걸어놓으면 상체는 힘을 받을게 없고 하체에만 신경쓸 수 있다\n하체만으로 운동하기 위함이다\n고관절을 뒤로 빼면 허리를 굳이 안펴도 되는데 현재 고관절을 전혀 느낄 수 없어서 스트레칭 필요하다\n\n\n2일 등\n\n폼롤러로 등과 겨드랑이 밑 풀어주기\n외회전으로 팔꿈치 붙이고 손 직각으로 움직이기\n어깨뼈 상후하전 움직이면서 풀기\n골반 후방경사하고 앉아서 노 땡기기(견갑골 모으고 넓히기 신경쓰기)\n턱걸이(팔에 힘들어가는게 아님)\n팔앞으로 뻗었다가 벌리기(견갑골 신경쓰기를 위해)\n\n\n3일 가슴\n\n외회전 팔꿈치 붙이고\n대각선 벤치프레스 - 자세 안나오고 빈바도 못들겠음\n벤치프레스 - 마찬가지\n팔굽혀펴기(팔꿈치 바깥으로)\n내로우 푸시업(팔 좁혀서)\n레그레이즈(다리를 드는게 아니라 복부를 접는 느낌)\n사이드 크런치(명치가 배꼽에 닿듯이 접는다)\n\n\n6일 등 이두\n등 - 팔 들기 (날개뼈옆에 등이 자극받는 느낌)\n이두 덤벨1 (허리 숙이고 팔꿈치를 등으로 땡긴다)\n덤벨2 (어깨를 살짝 위로 앞으로 움직여서 이두를 일자로 만들고 이두를 이용해 땡기고 마지막에 살짝 팔꿈치 들면서 쥐어짜기)\n덤벨3 (벤치에 팔 붙이고 명치 살짝 윗부분 기대고 이두만 움직여서 이두 아랫부분 자극)\n\n8일 등\n벤치에 앉아서 가슴펴고 팔꿈치를 등 뒤로 보내며 한손으로 당기기 (허리 돌리지 말고 등 접히는 느낌으로)\n데드리프트 (전방경사 만들고 상체전체를 숙이는 느낌으로 천천히 내려갔다가 엉덩이를 앞으로 확 앞으로 보내면서 일어나기. 이 때 팔을 허벅지 옆으로 붙이는 넓이 정도로 두고 가슴 쭉펴고 팔꿈치를 등뒤로 확 접은 상태 유지하면서 내려갔다 올라오기)\n\n#### 데드리프트\n- 바벨이 발 중앙에 오도록 선다\n- ==척추중립== - 목 등 허리 엉덩이 일직선으로\n- 숙이기 전 광배와 복부와 엉덩이 긴장시키기\n- 들기 전 정강이를 바벨에 갖다 대면 엉덩이의 높이가 적당해짐\n- 가슴을 편다\u001e\n- 든다. 바벨은 몸에 잔뜩 붙여야 한다. 엉덩이는 낮추지 않는다\n\n\n## 러닝\n운동시 심박수 체크\n\n중강도 60% 5일\n고강도 70% 3일이 적당\n\n중강도 142\n고강도 155\n\n주당 천칼로리면 심폐지구력을 건강히 기루기 좋은 수준\n\n하루 30분 꼴 주 5일\n\n10키로 1시간 600페이스 목표\n\n#### 테니스\n\n포핸드\n그립법\n백스윙으로 준비자세 아직 수직으로 시작하는건 안하고 면이 바닥을 보게 하고 손목을 완전히 젖혀서 준비하고\n스윙할때는 몸에 가깝게 붙이고 공에 임팩트 맞출때 손목을 편다는 느낌이고 그 후 팔로우 스윙은 와이퍼 움직이듯이 한다고 생각하면 손목도 자동으로 펴지는 듯\n치면서 뒷발 저절로 들리고 골반 돌리고 다 돌리면 반대손은 라켓 목을 잡아주기\n\n수직으로 시작하는 자세는 팔꿈치는 살짝 굽히고 몸을 일직선으로 하고\n\n손 힘은 50프로 정도만 주다가 임팩트할때 쎄게 잡기\n\n\n\n#### 스트레칭 원리\n돌리는 스트레칭 괜찮은가\n\n준비운동 후 스트레칭?\n\n몸의 가동범위를 늘리는 정적 스트레칭\n근육을 준비시키는 동적 스트레칭\n프로 선수들은 정적 스트레칭을 해서 몸의 가동범위를 늘리는게 오히려 운동능력을 떨어뜨리는 경우도 있다고 하나, 일반인 수준에서는 부상 방지를 위해 필요한 부분인 것 같다\n\n기상 직후 운동해도 괜찮을까\n\n- [ ] 20분 낮잠을 잘 때 20분짜리 명상코스 들으면서 하면 딱 맞겠다\n\n#### 베이스\n타브 보는 법\n지판 연습\n\n기타 치는법\n지판 위치가 다른가?\n\n왼손 오른손 어떤걸 해야할까\n\n\n## Football\n#### Liverpool\n\n#### 축구\n효율적인 축구\n성공률이 높은 축구\n짧은 패스\n정확한 패스\n이길 수 있는 경기\n안정적인 수비\n좁은 라인,선수 간격\n상대 대응 전략\n공 1,2,3\n미 3.2\n수 3,4\n포백일 때 미드필드의 움직임\n스리백일 때의 움직임\n\n\n## 발성\n#### 발성법\n압력이 중요\n숨연습\n릴트립연습\n연구개발성\n\n숨연습\n숨 다 뱉고 10초 버티고 숨 쭉 마시고 10초 버티고 스 하면서 숨 뱉고 10초 버티고 다시 마시고 10초\n이런식으로 10회씩 아침 점심 저녁 30회\n\n릴트립 비행기 부르면서 몸으로 소리낸다는 느낌으로\n\n입앞으로 말하는게 아니라 입안에서 말한다는 느낌\n\n뱉으면서 말하는건지 안에 가둔다는 느낌으로 말하는건지 미궁\n복식호흡할때 마시면서 하는건지 몰겠음\n\n말할때 목 안아프게 말하는 방법\n호흡을 마실 때 배를 당기나 미나 -> 마실때 미는게 맞는거 같은데 볼록해지게\n근데 말할때는 수축하도록 힘을 줘야한다??\n\n호흡은 배로 마시고 압력을 줄때는 배를 당긴다는 느낌으로 해서 횡경막이 올라가는 느낌\n\n#### 진짜 목소리\n몸의 어디서 나오는 목소리가 내가 가장 편하게 낼 수 있는 진짜 목소리일까\n그냥 목이 안아프면 상관없는걸까\n\n\n#### 발성법\n- 배를 민다 -> 사방으로 압력을 준다\n\t- 뱉을수록 쪼그라든다~\n- 머리를 울린다 (공명)\n- 성대 접지력을 강화한다\n- 전신을 이완시킨다"},{"headings":[{"value":"루틴에 대해서"},{"value":"측정과 개선"},{"value":"트리거를 이용해 행동 일으키기"},{"value":"아침에 일어나기"},{"value":"아침에 부담없이 일어나는 방법이 있을까"},{"value":"수면법"},{"value":"명상법"},{"value":"루틴"},{"value":"2025.08"},{"value":"아침과 밤의 특성 파악하기"},{"value":"인스턴트 컨텐츠를 어떻게 소비할 것인가"},{"value":"시간관리"},{"value":"시간관리방법"}],"fields":{"slug":"/routine/"},"rawMarkdownBody":"\n깨\n\n\n## 루틴에 대해서\n\n#### 측정과 개선\n측정할 수 있는 지표를 만드는 것을 안하고 있었다.\n문제되는 부분을 명시적으로 구체적으로 마주하고 개선하기 위해 노력해야겠다\n꾸준히 성장가능할 수 있는 파이프라인\n매일, 매주, 매달\n측정가능한 지표\n- 개수\n- 시간\n\n생산적인 일을 할 의지가 안생긴다\n할 일이 있음에도 다른 일을 하려 한다\n\n주기적으로 뭔가 만들어낼 수 있으면 좋겠다\n팟캐스트 월별로 업로드 되는것처럼\n이걸주말에 시간을어떻게 써서 할 수 있을까\n시간이 많으니까 당장 안하려고 하다가 결국 시간이 모자르게 됨\n\n\n아침에 일어날 때 몸을 깨우는 루틴과 자기 전에 잠에 편하게 드는 루틴을 만들면 좋겠다\n출근 시간에 맞춰 출근은 잘 하면서 집에 있을 때는 왜 이렇게 몸이 늘어지는 걸까\n자기 전에 디지털을 멀리하고 하루를 글쓰기로 회고하면 참 좋겠지만 쉽지 않다\n정해진 시간에 자고 일어나는 건 중요한 것 같다\n12-7\n그러면 11시 반에는 정리하고 7시에 깨서 7시 반에 씻으면 좋겠다\n\n\n퇴근 후 식사는 무조건 밖에서\n출근할때는 싸다김밥\n재택시에는 다른곳\n밥먹고 도서관\n갔다와서 약먹고 푸시업\n\n일어나서 출근하기까지 해야할 일을 줄이는게 현실적이고 효과적이겠다\n저녁에 씻고, 아침에는 머리만 감자\n에너지바 먹고 머리감고 출근. 퇴근 후 운동\n\n일어나는시간과 자는시간 맞추기\n주말과 평일의 일과를 동일하게 맞추고 싶었다\n주말의 늦잠을 자고 싶다\n아침 시간을 뭔가 더 많은 것을 하는 시간으로 쓰고 싶었다\n- 아침에 의욕이 안난다\n- 아침 식사 후 운동시간이 애매하다\n\n재택할때도 아침에 산책하면서 하루를 계획하면 좋겠다\n\n#### 트리거를 이용해 행동 일으키기\n자기 전\n밥 먹기 전\n컴퓨터 키기\n\n- 해가 뜨면 일어나고 해가 지면 쉬기\n- 컴퓨터를 키면 먼저 노트 정리하여 할 일을 없앤다\n- 출근시간에 투두목록을 보고 그 날 할일을 정하고 그 일에 대해 생각하는 시간을 가지면 좋겠다\n- 자기 전 영어블로그글 보기, 생각안나는 영어 바로 적기, 모르는 단어 들으면 바로 기록하고 찾아보기\n\n#### 아침에 일어나기\n따뜻한 물?\n씻기?\n휴대폰을 멀리?\n에너지바 먹기?\n\n독일에서는 빠짝일어났는데..\n\n정해진 시간에 자고 일어나기\n\n시간 계산하지말고 그냥 일어나기\n\n스트레칭하면서 일어나기(군대식)\n\n저녁에 샤워하고 아침에 머리만 감기\n\n#### 아침에 부담없이 일어나는 방법이 있을까\n\n방의 기온을 높여서 포근하게 하고\n7시 30분 기상 목표면 7시부터 작게 잔잔한 노래를 틀어서 잠에서 서서히 깨운다\n몸을 뒤집고, 천천히 일어난다\n\n몸을 뒤집고 천천히 일어나는 단계에서 몸이 너무 무겁고 자고 싶어서 일어나지 않고 있다.\n운동을 통해 몸을 가볍게 할 수 있을까\n\n작은 초콜릿 같은걸 깨자마자 먹는다?\n\n\n아침에 먹을 계란 고구마 밤에 준비해서 냉장고\n눈뜨면 에너지바 먹고 산책가기\n견과류 회사가서 섭취\n점심시간 편의점에서 단백질음료?\n9to6가 저녁을 일찍먹기위해 필요함\n8시 20분 출발을 위해 7시 20분 기상\n최종목표는 6시 20분 기상\n눈뜨면 고관절스트레칭, 슈퍼맨자세 해버리기 , 코어 운동\n\n\n#### 수면법\n특수부대 수면법\n- 얼굴부터 심장을 중심으로 온몸을 이완시키고 10초간 명상\n\n#### 명상법\n종이에 손을 그리고 손 안에 선을 최대한 그리는 것\n그릴때는 최대한 다른 생각은 안하고 집중하고\n\n#### 루틴\n- 오전에는 혼자 상상하고 연구하는 시간을 가지면 좋겠다\n- 아침에 모닝루틴\n\t- 따듯한 물\n\t- 혈당을 천천히 오르게 할 음식 간단히 먹고\n\t- 달리기\n\t- 씻고\n\t- 명상\n- 아침에 일어나면 즐겁기를 원하는데 휴대폰을 보면 그게 잘 안됨\n\t- 자기 전 루틴으로 세팅을 해야할듯\n\t- 자기 전에 명상을 하고 자야할까\n\t- 밤에 자기 전에 유튜브를 보고 자니까 자기도 아쉽고 일어나서도 즐거움을 찾으려고 했다 근데 침착맨 라이브는 보고싶은데..\n- 아침\n\t- 고구마는 안좋음\n\t- 우유는?\n\t- 잡곡빵은 좋음\n\t- 요거트\n\t- 삶은 계란\n- 자려고 할 때 침대 옆에 nfc 스티커를 붙여서 인식시키면 팟캐스트 재생\n\t- 마지막으로 재생한 날부터 오늘까지 새로운 것이 있으면 그것을 재생하고 아니면 옛날것 재생. 한 편 재생 후 정지\n\n루틴의 끝은 아웃풋을 만드는걸로 하면 좋겠다\n필사를 할거기 때문에 필사를 찍어서 남겨서 의미있게 묶어서 보여줄 수 있으면 좋겠고 몸도 지속적으로 탄탄하게 만들어지면 좋겠고 개발적인 임펙트도 아웃풋으로 만들어낼 수 있으면 좋겠다\n\n하루 한문장\n\n불릿저널처럼 처음에 쫙짜놓고 하는건 시작하는것도 벽이 있고 틀에서 깨지면 괴로워서 지속하기 쉽지않다 그래서 막 쓰되 형태가 유지되는 식이 되면 좋다 아침 루틴도 딱 잡고 하려고 하기보다 흐름만 만들자\n양치\n필사\n\n퇴근 후 정적인 시간 90분 확보\n그 후 할 일 처리 90분\n8시부터 11시\n11시 책 보면서 취침 준비\n\n잠\n잠들기 2-3시간 전에는 운동이나 식사를 안하는게 좋다\n10시 전에 생활을 다 끝내놓는게 좋겠다\n10시 이후에는 책을 읽거나 하루를 정리하면 좋을듯\n10시가 되면 독서등만 켜놓고 다 꺼지게 세팅하면 좋을듯\n\n컴퓨터로 영상 보지 않기\n빔프 살때까지 아이패드로\n아침에 인터넷 안보기\n\n- 오늘 좋았던 기억\n- 나는 하루를 어떻게 기억하는가\n\n아침에 잠 깨는법\n단어 하나를 생각해서 거기 연상되는 단어를 나열하기\n생각 글쓰기\n\n#### 2025.08\n5시에 일어나는거 고정\n8시에 출근하는거 고정\n5시 퇴근 고정\n11시 취침 고정\n\n출근날은 7시 20분까지 나간다\n재택일때는 번 시간을 어떻게 활용하면 좋을까\n온전한 나만의 시간. 노트정리.\n\n몸 - 스트레칭, 근력운동, 유산소 중\n정신 - 독서, 개발 중\n\n둘다 아웃풋을 내는 식으로 해야한다\n\n일단 30분짜리 포모도로 1개라도 하면 패스\n\n\n#### 아침과 밤의 특성 파악하기\n- 아침에 일하고 밤에 쉰다\n- 밤에 쓰는건 안좋은가\n- 아침에 쓰면 자면서 있었던 무의식이 살아난다?\n- 아침에는 계산적인거 밤에는 감성적인거\n- 밤에는 휴식을 취하는 게 현실적이다\n\n#### 인스턴트 컨텐츠를 어떻게 소비할 것인가\n기분이 우울한 날은 스트레스 해소를 위해 접근한다\n\n그렇다면 접근 전에 우울한 상황을 적고 본다\n일기처럼 남기기도 할 수 있어서 좋을 것 같다\n그 외 유튜브 검색이나 할 때도\n무엇을 찾기 위해 하는 것인지 구글킵에 먼저 적어놓고 그 답을 찾을때까지만 본다\n구글킵으로 시작해서 구글킵으로 끝낸다\n\n집에서 밥 먹을 때 뭔가를 안보면서 먹으면 너무 허전하다\n이걸 어떻게 메울 수 있을까\n\n침착맨을 뭘 먹을때만 본다?\n근데 침착맨을 보고 나면 끊을 수가 없다..\n\n이것도 뭐 먹는지 적는 용도로 먹을걸 적고 침착맨을 보고 마무리를 할까\n보고 난 뒤에 마무리를 어떻게 하면 좋을까\n- 1주일동안 적은걸 보면 점심시간에 먹는게 거의 똑같고 보는것도 추상적이다\n- 저녁에도 적도록 생각을 가져야하고\n- 보는 영상도 적어놓으면 좋겠다\n\n\n## 시간관리\n- 시간을 벌고 있는데 왜 시간이 모자라지\n- 퇴근 후에 시간을 잘 쓰기 어렵다\n- 아낀 출퇴근 시간을 잘 쓰기 어렵다\n\n#### 시간관리방법\n우선순위 3개를 잡고 그것만 하는거\n중요한 일이 생기면 다른 일을 안할 수도 있다는 편한 마음가짐\n독서 운동 악기를 디폴트로 가지고 있다가\n뭔가 처리해야할게 생기면 그거를 하게 되면 독서를 좀 빼놓는다던가\n"},{"headings":[{"value":"Balance"},{"value":"잃을 것을 걱정하게 되면 내가 할 수 있는 종류가 제한된다."},{"value":"권위, 소유욕"},{"value":"모르는 것을 알아야 더 많은 것을 알 수 있다."},{"value":"모르는 걸 모른다고 말하는 용기 vs 모른다고 하고 떠넘기는 것"},{"value":"아직 어느쪽이 더 나은 가치인지 모르겠는 것들. 딜레마"},{"value":"일단 시작하는 것 vs 가볍게 밑그림을 그리고 하는 것"},{"value":"한번 허용하면 계속 반복된다 vs 한번의 예외는 있을 수 있다"},{"value":"쉬운단어"},{"value":"쉽게 하는 것"},{"value":"솔직하지 않은 것과 방어적인 것"},{"value":"2in1이 좋을때가 있고 미니멀하게 하나의 기능만 집중되있는게 좋을 때가 있다"},{"value":"모두가 쓰는 것에 대해 뻔한 것과 표준으로 퍼져있는 것"},{"value":"형식을 안지킬 때 가치관의 차이"},{"value":"반목 무관심?"},{"value":"확장 vs 개선"},{"value":"공개하는 것이 더 좋은결과가 나올까, 숨기는게 더 좋은결과가 나올까?"},{"value":"섣불리 판단하지 않는 것과 상대방의 마음을 읽어주는 것의 사이"},{"value":"익숙해지는 것과 지겨워지는 것"},{"value":"써도써도 적응이 안되는 경우 vs 적응이 되는 경우"},{"value":"적응 vs 능률 상승"},{"value":"칭찬"},{"value":"칭찬은 사람을 그에 맞는 행동을 하게 해준다"},{"value":"통제 vs 유도(?)"},{"value":"신입에게 페어 프로그래밍을 시켜야 한다 vs 시키면 안된다,"},{"value":"스탭바이스탭이 적용되는 곳과 아닌 곳"},{"value":"조심스러운 생성 vs 무작정 생성 후 정리"},{"value":"건축과 애자일"},{"value":"다음 단계로 가는 시기"},{"value":"주먹구구와 점진적 개선의 차이"},{"value":"눈에 보이는 것이 주류를 대표하는 것 vs 눈에 안보이는 것이 주류인 것"},{"value":"적극적으로 들이대는 사람을 싫어할 사람"},{"value":"문제를 회피하는것"},{"value":"상투적인 것과 의례 하던 것 vs 관성있는 것, 표준적인 것, 익숙한 것"},{"value":"창작물에서 느껴지는 사람과 만났을 때 느껴지는 사람이 다른 느낌이 있다"},{"value":"작은 것을 확인하느라 전체를 봐야하는 상황은 막으면 좋겠다"},{"value":"용두사미"},{"value":"우뇌형, 좌뇌형"},{"value":"관조와 선형적"},{"value":"분류를 하는 것이 좋은가 안하는 것이 좋은가"},{"value":"언제봐도 좋은것과 보다 보면 질리는 것의 차이"},{"value":"치밀하게 짜여진 영화, 책"},{"value":"효율과 욕심 사이에서 잘 서야겠다"},{"value":"새로운 것이 일반화 되는 것"},{"value":"전문화 고도화 vs 통합, 융합"},{"value":"고도화"},{"value":"주먹구구와 애자일의 차이는?"},{"value":"간단 vs 복잡"},{"value":"적당히 가져야 한다. 무소유와 소유욕 사이"},{"value":"융통성과 기회주의, 철새, 이럴때는 이랬다가 저럴때는 저랬다가"},{"value":"온고지신과 꼰대"},{"value":"일관성과 규율의 경계"},{"value":"함축적으로 담는 것과, 구체적으로 뚜렷하게 표현하는 것"},{"value":"a to b to a again"},{"value":"인터넷 실명제"},{"value":"피고를 활자로만 보는 판사, 그러자 않기 위해 싸우는 판사가 있을 때"},{"value":"한 사건을 보고 뒤에 일어날 일에 대해 염려하는 것"},{"value":"치우쳐진 가치들. 내가 한쪽을 좋아하는 건들"},{"value":"다른 사람의 말과 나의 생각"},{"value":"simple vs neat"},{"value":"차례차례 vs 덧칠"},{"value":"점진적 vs 긁어부스럼"},{"value":"긁어부스럼을 두려워한다"},{"value":"공략법을 보는 것과 경험을 통해 하는 것에 대한 결과의 차이"},{"value":"게임 공략"},{"value":"둘 중에 하나를 포기하고 하나라도 확실한 것을 선택하느냐 vs 조금 양보하고 두 가치를 적당히 버무린 것을 선택하느냐"},{"value":"다양성"},{"value":"다양성이 중요한 이유"},{"value":"개인으로서 생계를 유지하는 것은 가능하다. 하지만 내가 하지 못하는 것을 할 수 있는 다른 사람과 공유를 한다면 더 나은, 더 편한 삶을 살 수 있다."},{"value":"과도한 우려"},{"value":"룰의 빈틈"},{"value":"Think of my own that write in the note is just own me. it can be wrong."},{"value":"3단계 중첩"},{"value":"모으기보다 나누기"},{"value":"조잡함 vs 조화로움"},{"value":"한옥에 스틸 식탁"},{"value":"깊이 넓이"},{"value":"글로벌 스탠다드와 자가구축"},{"value":"자기 안에 갇혀있는 사람을 꺼내야 할 때가 있고"},{"value":"훈련과 혹사의 차이는?"},{"value":"기타"},{"value":"공개해야하는 정보가 있고 공개하지 말아야할 정보가 있다"},{"value":"긍정"},{"value":"논리적으로 일일이 설명하기 vs 믿음을 주기"},{"value":"함부로 해야하는것(아끼지말고해야하는것)과 함부로 하지 말아야 하는것"},{"value":"자극으로만 낸 자극"}],"fields":{"slug":"/balance/"},"rawMarkdownBody":"\n## Balance\n\n**균형을 잘 잡는 삶을 인생 철학으로 삼고 가면 되겠다**\n\n#### 잃을 것을 걱정하게 되면 내가 할 수 있는 종류가 제한된다.\n\n나를 낮춰서 내가 어디로든 움직일 수 있게 하면 좋겠다\n\n권위의식을 가지고 있으면 내가 체면을 구기는 상황이 생기게 되면 이성적으로 판단 하지 못하고 시야가 좁아진다.\n일본장교가 부하의 작전지적을 받아들이지 못해서 그 지적이 타당했음에도 그에 대한 대비를 하지 않아서 전투에서 지게 된다.\n\n묶이면 고인다. 언제라도 털어낼 수 있도록 한다.\n\n#### 권위, 소유욕\n가진 것이 있으면 잃지 않기 위해 자유가 제한된다\n정보를 가지고 싶은 것은 소유욕인가? 지적 호기심인가?\n현실적으로 돈이 어느정도 있어야 생각할 자유가 생긴다\n무소유가 진리가 아니라 적당히 가지는게 삶의 자유를 더 갖는 것이다\n잃어도 되고, 나를 옭아매지 않는 정도로 가지면 되겠다\n\n#### 모르는 것을 알아야 더 많은 것을 알 수 있다.\n경제학에서 고전주의에서는 세상을 확실성이 있는 것이라 봤는데 그 이후 만들어진 이론인 케인즈학파 등에서는 세상을 불확실성이 높고 복잡하다고 한다.\n과거에는 다 안다고 생각했던 것들이 더 많은 것을 알고 난 다음에는 몰랐었음을 알게 된다.\n\n모르는 것을 들키지 않으려고 멍청해보일까봐 가만히 있는 것은 권위를 잃지 않으려고 생각의 폭을 제한하는 것과 마찬가지다\n\n#### 모르는 걸 모른다고 말하는 용기 vs 모른다고 하고 떠넘기는 것\n모르는 걸 같이 알아가자고 항상 얘기할 수는 없을 것 같은데\n물어봤을 때 떠넘기려는 것처럼 안느껴졌으면 좋겠다\n\n\n## 아직 어느쪽이 더 나은 가치인지 모르겠는 것들. 딜레마\n\n다 케이스 바이 케이스겠지만 어떤 관점으로 아래의 양쪽 사항을 고려했을 때 현명하게 판단할 수 있을까\n\n아래의 내용은 나열식으로 쭉 적혀있어서 알아보기는 힘들지만 이렇게 적은 이유는 나중에 그 두가지 고민의 사례를 계속 모았을 때 사례가 쌓이면서 그것에 대한 판단이 잘 되지 않을까 해서 모아본다.\n\n#### 일단 시작하는 것 vs 가볍게 밑그림을 그리고 하는 것\n- 처음할 때 확실히 봐두고 하면 일을 두번 안해도 된다\n- 한번에 끝내는게 좋은 일이 있고 계속 보면서 살을 붙이는게 좋은 일이 있다\n- 똑같은 일을 반복하면 안된다\n- vs\n- 같은 일을 반복하면 상기시킬 수 있다(책읽기)\n- 작업전에 1분만 준비하던가 이전상황을 기억해내본다\n- 처음에 완벽할 수 없으니 빠르게 한번 하고 다시 돌아보는 게 더 좋다\n\n두가지를 어떻게 동시에 할 수 있을까\n\n일단 시작하는 것, 작은 것부터 시작하는 것, 5분 안에 할 수 있는 것으로 시작하는 것\nvs\n가볍게 밑그림을 그리고 하는 것. 전체적인 부분을 한 번 그리고 하는 것\n\n#### 한번 허용하면 계속 반복된다 vs 한번의 예외는 있을 수 있다\n- 다이어트할 때 잘 참다가 한 번 거하게 먹으면?\n\n#### 쉬운단어\n- 교육의 가치 vs 몰라도 괜찮아\n\n#### 쉽게 하는 것\n쉬운 것으로 현혹하는 우민정책과 쉽게 접근 가능하게 하는게 한끗차이같다\n\n#### 솔직하지 않은 것과 방어적인 것\n\n#### 2in1이 좋을때가 있고 미니멀하게 하나의 기능만 집중되있는게 좋을 때가 있다\n\n#### 모두가 쓰는 것에 대해 뻔한 것과 표준으로 퍼져있는 것\n\n#### 형식을 안지킬 때 가치관의 차이\n- 어 독특하네? vs 아니 왜 기본을 안지켜?\n\n#### 반목 무관심?\n\n#### 확장 vs 개선\n- 작게,제한적으로 만들고 확장하는 방법\n- 널널하게 만들고 개선하는 방법\n\n#### 공개하는 것이 더 좋은결과가 나올까, 숨기는게 더 좋은결과가 나올까?\n\n#### 섣불리 판단하지 않는 것과 상대방의 마음을 읽어주는 것의 사이\n- 합리적 의심\n- 상대방이 나의 고통을 알면 힘들까봐 내 고통을 숨기는 것\n\n#### 익숙해지는 것과 지겨워지는 것\n- 20년 동안 계속 한 일을 그만뒀다가 다시 할 때\n\t- 지겨워서 하기 싫은 경우가 있고\n\t- 눈 감고 해도 잘하는 경우가 있다\n- 훈련이 되는 경우와 계속 닳아서 못쓰게 되는 경우가 있다\n#### 써도써도 적응이 안되는 경우 vs 적응이 되는 경우\n#### 적응 vs 능률 상승\n- 노트북 마우스, 터치패드 불편?\n- 없는 것에 적응 vs 있으면 능률 상승\n- 그림을 타블렛이 아닌 마우스로 그리는 것은 적응의 영역이 아니다. 사용하는 도구가 달라져서 새로 입문하는 것이다\n\t- 쓰다보면 좋아지겠지가 안될 것 같다\n\n#### 칭찬\n칭찬하면 실망시키지 않기 위해 열심히 하는 타입\nvs\n칭찬하면 으쓱해져서 마음을 놓는 타입\n\n피그말리온 효과\n\n#### 칭찬은 사람을 그에 맞는 행동을 하게 해준다\n근데 우쭈쭈 해주면 버르장머리가 없어진다\n\n#### 통제 vs 유도(?)\n강력한 법과 처벌을 통해 사건이 일어나는 것을 막는 방법과\n의식적으로 사회적 규범을 따르게 하는 방법에 대해\n어느 방법으로 유도하는 것이 더 좋은 효과를 만들어 낼 수 있을까\n아이에게 휴대폰 사용을 하게 하는 대신 부모가 모든 것을 감시하는 앱을 설치하는 방법과\n휴대폰 사용은 무엇이든 할 수 있게 하고 안좋은 것에 대한 주의를 주고 자율적으로 맡기는 방법 중.\n감시를 당하게 되면 악영향을 미칠 것이다\nvs\n너무 자유롭게 두면 정서적으로 악영향을 주는 매체에 노출되게 된다\n통제에는 닿지 않는 영역이 있게 되고\n교육을 통한(안좋은 경험을 통해서든) 깨달음에는 지속되는 행동이 생긴다\n부정청탁방지법으로 ３만원 이상의 선물을 못하게 되었다\n이 법이 있기 전에 사과박스로 대표되는 뇌물들이 있었다\n부정청탁방지법이 생긴다고 해서 뇌물을 막기보다\n뒤로 흐르는 돈을 공개적으로 쓰도록 하는 것이 좋을 수도 있겠다\n뇌물은 어떻게든 들어간다고 생각되는데\n뇌물을 안 주고 받는 사회문화가 되는 것이 좋겠지만 생각에서나 가능한 얘기인 것 같다\n규칙을 강하게 하면 지키던 사람들은 더 강한 규칙을 따르게 되고\n안지키던 사람은 어디라도 안지키려고 하는 경향이 있었다\n라고 한 프로그래머가 코딩 프로세스를 얘기하면서 얘기하였다\n\n#### 신입에게 페어 프로그래밍을 시켜야 한다 vs 시키면 안된다,\n- 코드와 친숙해지는 시간이 단축될 것이다.\n\t- 맞춰가는 게 실력이다.\n\t- 잘 맞는 페어를 맞춰줄 수 있다\n\t- 페어프로그래밍이 그것을 할 수 있다.\n- 시키면 안된다, 같이 하는 사람에 맞추려다 아무것도 못한다.\n\t- 기존에 아는 범위다 다르고 맞춰주는 것에도 한계가 있다. 시간 낭비다.\n\t- 회사 자원 낭비다\n\t- 교육과 적응기간이면 충분하다\n\n\n#### 스탭바이스탭이 적용되는 곳과 아닌 곳\n- 전쟁 게임을 하다가 실제 총질한다? 비현실적\n- 취미로 토토를 하다가 크게 건다?\n- 바늘 도둑이 소 도둑된다?\n- 일기 쓰다가 소설가된다?\n\n\n#### 조심스러운 생성 vs 무작정 생성 후 정리\n이것 저것 따져보고 도입하는 것은 속도가 늦고 동력이 딸릴 수 있다.\n무작정 생성 후 정리하는 것은 정리하는 리소스가 필요하다.\n고르고 골라서 최소한의 것만 유지하려고 할 때도 있고, 일단 리소스를 모아두고\n정리하는 방식을 선호할 때도 있다.\n\n#### 건축과 애자일\n건축에서 지형을 파악하고 환경을 파악하고 난 후에야 설계가 되는 방식이 떠오르는데 애자일하게 한다고 일단 뼈대를 만들어놓고 상황에 맞춰 변화를 주는 방식은 주먹구구의 느낌이 난다.\n\n설계의 분산이라면, 초기설계는 길어질 수 있을 것 같은데\n\n눈앞에 닥친것에 급급한 것과 눈앞에 닥친것에 집중하는 것은 차이가 있다\n\n주먹구구와 애자일의 차이는?\n\n#### 다음 단계로 가는 시기\n현재 단계에서 버거운데 다음 단계를 가긴 힘들다. 완전 숙달을 하고 다음 단계를 가면 늦다. 적당한 숙련도에서 다음 단계로 가서 적당히 고생하면 빨리 는다. 목표를 세우고, 중간 중간 평가지표를 세우고, 빠른 평가를 받아야 한다\n\n#### 주먹구구와 점진적 개선의 차이\n깊은 고민, 다시 돌아왔을 때 내 집, 계속 정리정돈\n\n현상 처리 급급, 더 복잡하게 만든다,\n\n#### 눈에 보이는 것이 주류를 대표하는 것 vs 눈에 안보이는 것이 주류인 것\n주변에 일어나는 일이 주류인 것\n주변에 일어나는 일이 특이 케이스인 것\n\n#### 적극적으로 들이대는 사람을 싫어할 사람\n귀찮게 하는 것 vs 잘 챙겨주는 것\n\n#### 문제를 회피하는것\n- 문제를 일으키지 않고 넘기는 것\n- 문제를 일으키고 모르는 척 하는 것\n- 문제를 일으키고 잘 넘어가는 것\n\n#### 상투적인 것과 의례 하던 것 vs 관성있는 것, 표준적인 것, 익숙한 것\n매너와 과거의 관행의 차이\n\n#### 창작물에서 느껴지는 사람과 만났을 때 느껴지는 사람이 다른 느낌이 있다\n나만 알기 아까운 vs 나만 알고 싶은\n\n#### 작은 것을 확인하느라 전체를 봐야하는 상황은 막으면 좋겠다\n약을 주문대로 포장하는 과정에서 다 포장을 했는데 원래 딱 비워져야할 약 1상자가 남아있다면 그 남은 1상자 때문에 전체를 확인해야 한다\n\n#### 용두사미\n처음에 크게 준비했다가 점점 뒤로 갈수록 정성이 떨어지는게 있고\n처음에 조잡했다가(정성을 들였지만) 갈수록 다듬어지는게 있다\n\n#### 우뇌형, 좌뇌형\nhttps://see-wind.tistory.com/m/577\n\n우뇌는 전체적인 그림을 보고\n좌뇌는 세부적인 것을 본다는 의견\n\n우뇌, 좌뇌의 구분이 꼭 맞지 않더라도 이렇게 명확하게 구분지어서 스위칭을\n해야한다는 의견은 명료해서 받아들이기 좋은 것 같다\n\n#### 관조와 선형적\n- 좌뇌 우뇌\n- 전체적 구체적\n\n#### 분류를 하는 것이 좋은가 안하는 것이 좋은가\n축구에서 공격수, 수비수, 미드필더를 나누었었고,\n그 후 토탈사커가 유행하며 역할은 나눠져있지만 활동범위가 늘어났고\n그 후 미드필더 안에서도 선수별로 세부적으로 역할을 나눴었다가,\n그 역할마저 선수가 고정된 역할이 아니라 경기마다 역할을 왔다갔다 하기에 이른다\n\n확장과 축소가 반복되고, 크게 보면 오히려 자연스럽게까지 보인다\n\n#### 언제봐도 좋은것과 보다 보면 질리는 것의 차이\n\n#### 치밀하게 짜여진 영화, 책\n- 틀을 딱 짜놓고 맞춰서 만드는 작품과 상황에 맞추는 작품\n\t- 틀을 딱 짜놓고 맞춰서 만드는 작품\n\t\t- 마블 시리즈?\n\t- 큰 흐름만 정해놓고 맞춰가며 찍기\n\t\t- 고레에다 히로카즈\n\t\t- 홍상수\n\n#### 효율과 욕심 사이에서 잘 서야겠다\n소유하려고 하면 욕심이 생기고 묶이게 되고 시야가 좁아지고 속이 좁아진다\n\n#### 새로운 것이 일반화 되는 것\n새로 나온 것 중에는 사라지는 것도 있고, 일반화가 되는 경우도 있다\n일반화가 될 새 것을 기존 사람들이 저게 될리가 있나 이럴 때도 있고\n사라지게 될 새 것을 기존 사람들이 저건 완전 최고야 이럴 때도 있다\n\n#### 전문화 고도화 vs 통합, 융합\n세상이 복잡해짐으로써 전문화되고 고도화 된 분리가 필요한가?\n분리는 자연스러운가?\n\n분리 이후 융합하는 사이클이 자연스러운가\n[[Think#문과 이과]]\n\n#### 고도화\n세분화돼서 한 분야에 집중할 수 있으면\n그 분야에 대한 컨텍스트가 많이 쌓여서 고도화가 된다\n\n#### 주먹구구와 애자일의 차이는?\n\n#### 간단 vs 복잡\n한 눈에 보기 편하게 하는 것\n주변을 필요한 것만 딱 놔두는 것\n간단하게 요약하는 것\n주변에 자주쓰는걸 놔둬서 바로 쓰는 것\n어디에 뭐가 있는지 정리해놔서 바로 쓰는 것\n\n복잡함은 현실에 존재하니까 복잡한 구조에 익숙해 지는 것\n계층적 구조를 이해하는 것\n깊은 단계를 생각하는 것\n두 수 앞을 내다보는 것\n\n물건의 개수를 줄여서 찾기 쉽게 하는 것\n많은 개수 중에서 쉽게 찾는 것\n\n자주 쓰는 것들은 접근 단계를 줄여야 한다\n메뉴 - 선택 - 선택\n이런식이면 안된다\n주머니 안에 지갑 안에 뭔가를 넣으면 접근성이 떨어진다\n\n#### 적당히 가져야 한다. 무소유와 소유욕 사이\n\n#### 융통성과 기회주의, 철새, 이럴때는 이랬다가 저럴때는 저랬다가\n\n#### 온고지신과 꼰대\n옛 것의 좋은 것을 잘 받아들이는 것과 옛 것에 생각이 갇혀 변화하지 못하는 것\n\n#### 일관성과 규율의 경계\n\n#### 함축적으로 담는 것과, 구체적으로 뚜렷하게 표현하는 것\n둘 다 가치있다\n\n한자나 시처럼 함축적으로 담을 수 있는 것이 매력적일 때가 있고, 소설처럼 뚜렷한 그림이 그려지는 것이 매력적일 때도 있다\n\n#### a to b to a again\na에 있다가 a가 너무 싫고 b가 하고 싶어서 고민끝에 b를 갔는데 b에 가보니 별로여서 a로 다시 돌아가고 싶어하는 경우가 있다. a가 싫었음에도 불구하고\n\n여기서 a가 사실 좋은곳이었는데 다른 곳이 더 좋아보여서 갔다가 돌아오는 경우가 있고\na가 안좋은 곳이지만 b가 더 안좋아서 차악을 선택하는 경우도 있는데\n\n후자의 경우 b를 원했던 이유를 다시 생각해봐도 a로 돌아가게 되겠지?\na의 안좋았던 점을 다시 생각하고 b를 원했던 이유를 생각해도 a로 돌아가게 된다면 a는 좋은 곳인가?\n#balance #human\n\n#### 인터넷 실명제\n개인정보 유출\n표현의 자유 침해\n가입 시 일일이 인증해야 하는 번거로움\n동명이인, 도용 문제\n실명 내놓는 기자들 중에도 무분별한 쓰레기 기사를 내놓는 등 실명화의 실효성 없음\nvs\n악플의 책임\n건전한 인터넷 문화\n\n인터넷과 실제 세상은 구별되는 것인가\n실제 세상에서는 익명화가 가능한가\n\n포털사이트의 댓글창 폐지. 이것이 진정한 표현의 자유 침해가 아닌가?\n\n#### 피고를 활자로만 보는 판사, 그러자 않기 위해 싸우는 판사가 있을 때\n나를 활자로만 보지 말라고 하면?\n나를 활자로 안보기 위해 노력해줘서 고맙다고 하면?\n\n#### 한 사건을 보고 뒤에 일어날 일에 대해 염려하는 것\nvs 딱 그 상황만 고려하는 것\n\n다음에 비슷한 사건이 일어났을 때 이전의 상황에 비추어 보는 것\nvs\n각각의 상황을 새로운 시각으로 보는 것\n\n한 사건을 보고 앞으로도 이런 일이 일어나면 어떻게 하냐고 초기에 싹을 잘라야 한다고 하는 상황이 있고\n\n비슷한 상황이 나올 수 있지만 그 사건은 그 때 가서 다시 평가하면 되는 상황이 있다\n\n법은 판례를 잘 참고한다\nvs\n각각의 상황은 여러 변수가 있어서 일반화 하면 안되는 경우\n\n바늘도둑이 소도둑된다\nvs\n사람은 반면교사, 절치부심, 타산지석을 할 수 있다\n\n구멍 뚫린 항아리에 물 담기\nvs\n점진적 개선\n\n\n## 치우쳐진 가치들. 내가 한쪽을 좋아하는 건들\n\n#### 다른 사람의 말과 나의 생각\n아래 내용에 대해 헷갈려 했지만 이제는 결론이 났다.\n자기의 중심을 잘 잡고 자신의 에고를 살린 상태로 다른 사람의 의견을 경청하고 나에게 맞게 받아들이면 된다.\n내가 맘에 들면 받아들이고 내가 아니다싶으면 아닌거라는게 성숙한 사람에게서는 유효한 것 같다. 나 다워지라는 말이 요즘 시대에 나오는 이유가 있는 것 같다. 이것에 대해 다른 사람들도 많이 고민 하는 듯.\n\n- 창작의 자유, 표현의 자유 vs 독자와의 커뮤니케이션, Feedback의 범위\n- 다른 사람의 말을 듣는 유연 vs 다른 사람의 말에 영향 받지 않는 강한 에고\n- 줏대가 없는 것과 다른 사람의 조언을 받아들이는 것의 차이\n- 오픈 마인드\n- 다른 의견을 듣는 것, 이상한 글을 안보는 것\n- 한 책에서 마치 이 책의 나온 것이 진리라고 으스대며 말한다고 해도 그것을 거부할 필요는 없다\n- 시어머니질\n- 불편러와 불편함을 제기하는 것의 선\n- 불편함과 검열\n- [자기중심적과 중심이 없는 것](Collection.md#자기중심적과%20중심이%20없는%20것)\n\n#### simple vs neat\n- If there all white, but you have that need yourself it’s white, it’s neat\n- 심플함과 휑함의 차이는 어떻게 만들어 내는가\n- **가득 찬 곳에서 필요한 것만 남기면 심플함.** 아무것도 없는 곳에서 적게 두는 것은 휑함\n\n#### 차례차례 vs 덧칠\n하나씩 끝내면 다음으로 넘어가는 방법보다 덧칠하는 방법이 좋다\n근데 밑의 단계가 안되면 그 다음 단계로 못 가는 경우도 있다\n\n#### 점진적 vs 긁어부스럼\n긁어부스럼을 두려워해서 시도 안하는 것은 멍청한 짓이다. 앞으로 나아가려면 시도해야한다.\n실패가 아니라 안되는 방법을 알게 된거다.\n\n- 당근메일 - 직관력은 기억 하는게 많으면 는다.\n- 강유원 인문 강의 - 잘 알아야 할 수 있다\n- 성급하다\n- 긁어부스럼\n- 누울 자리를 보고 어쩌고\n- 내 행동을 망설이게 하는 안좋은 말들. 행동하고 고치는 것이 더 낫다. 하지만 그 행동이 선을 지켜야한다.\n\n##### 긁어부스럼을 두려워한다\n어떻게하면 이를 막고 적극적일 수 있을까\n\n가만히 있으면 중간은 간다는 말은 싫어했는데\n사실 같은 의미였다. 어떻게 극복할 수 있을까\n\n기준을 세우고 행동을 하면 실패했을 때 조정을 통해 개선할 수 있는데 커뮤니케이션에서는 사람마다 다르고 컨텍스트도 너무 다양해서 기준이 항상 달라질 수 있다\n#balance\n\n#### 공략법을 보는 것과 경험을 통해 하는 것에 대한 결과의 차이\n- 레퍼런스를 따르는 쪽이 나쁜게 아니었다.\n- 공략법이라 하면 수학 문제집에서 답지를 보고 안푸는 것을 생각했는데, 수파리에서 수에 해당하는 것이 될 수 있겠다. 답지를 보는 것은 답만 보고 어떻게 된 건지 생각을 안하는 것이 문제이고, 다음에 조금 변형된 문제를 만났을 때 대응하지 못하는 문제가 있는데, 공략법을 보는 것은 그 전반을 빠르게 이해하고 더 나은 방법을 찾게 해주는 지름길이 될 수 있겠다.\n\n#### 게임 공략\n공략이라는게 있어서 처음하는 방식과 공략을 보고 하는 게임은 플레이가 전혀 달라진다\n게임을 반복하면서 공략이 생기게 되는 건데 게임이라는게 반복적인 작업이 많은데 반복을 재밌게 할 수 있게 되기도 한다\n- 참고: 풍훤, 임기응변,\n\n#### 둘 중에 하나를 포기하고 하나라도 확실한 것을 선택하느냐 vs 조금 양보하고 두 가치를 적당히 버무린 것을 선택하느냐\n상황에 따라 다르겠다\n- 양보한 가치가 두고두고 아쉬울 수도\n- 두 가치가 적당히 괜찮은 조건인 것이 있을 수도\n\n\n-----------------------------------------------------------------------\n\n## 다양성\nVariety\nif somewhere has many choices of the store, people want to go there.\nif the store has many choices of contents, I want to go there.\n\n#### 다양성이 중요한 이유\n규칙과 충성심의 시대에서 자율과 능력, 다양성, 창의성의 시대로 변하고 있는 것 같다.\n\n완벽한 이론은 없기에 다른 의견이 생기고, 그 의견으로 인해 기존의 이론도 개선된다.\n다른 의견을 마음에 안든다고 배척하면 그 이론은 발전할 수 없고, 빈틈은 메워질 수 없다. 그래서 의견은 수용되어야 하고 그것이 자연스러워야 한다.\n제약 없이 다른 의견을 제시할 수 있는 분위기가 더 좋은 아이디어를 만드는 것이다.\n\n경직돼있는 회사에서는 생각도 갇힌다는 것의 반례이기 때문\n\n#### 개인으로서 생계를 유지하는 것은 가능하다. 하지만 내가 하지 못하는 것을 할 수 있는 다른 사람과 공유를 한다면 더 나은, 더 편한 삶을 살 수 있다.\n인간은 사회와 더불어 살면서 내가 굳이 요리, 과학, 생산을 하지 않더라도 그것의 혜택을 누릴 수 있다.\n그래서  인간은 사회적으로 살게 되고, 사회적으로 살아 가는데 있어서 개개인은 모두 생각이 다르기 때문에 서로를 지킬 수 있는 규칙을 만들게 되었고, 이는 법 뿐만 아니라 관습, 도덕이라는 추상적인 가치가 나타났다.\n그러나 모든 사람은 각자의 내면, 가치가 다르기 때문에 예외 상황이 생기게 되고, 각자의 인생에 비추어 세상을 바라보기도 하고 인간은 모든 정보를 그대로 기억할만큼 똑똑하지 않아서 자신에게 맞춰 효율적으로 기억하며, 때로는 직관적 사고를 하게 되어 비합리적인 선택을 하는 경우도 많다. 객관적으로 한 걸음 떨어져서 세상을 보는 것은 어려운 것이고, 꼭 그렇게 해야 하는 것도 아니다.\n하지만 반 사회적 인간은 어떻게 대해야 할까\n\n내로남불은 자연스럽다\n현재의 감정에 휩쓸리면 머리로는 불륜은 나쁘다라고 생각하지만 마음은 이미 끌림에 넘어가있기 때문에 그 끌림을 떨쳐내기는 힘들다\n현재의 감정보다 이성을 택하는 것은 매우 고통스러울 것이고 떨쳐내기에는 너무 매력적일 것이다\n그렇기에 더욱 조심해야한다\n지금 끌리는 것만 좇기보다 기존의 삶을 더 소중히 여기고 살면 좋겠다\n\n#### 과도한 우려\n실제로 일어날 가능성은 적지만 일어날 수도 있는 것을 걱정하며 불안해 하는 것\n조심하고 비상상황을 대비하는 것은 좋지만 불안 속에서 사는 것은 좋지 않다\n그런데 주변에서는 자주 일어나는 일이라면 불안할 수 밖에 없다\n불안을 없애려면 어떻게 해야 할까\n과도한지 안 과도한지는 어떻게 판단할까\n\n#### 룰의 빈틈\n룰의 빈틈을 파고드는 사람은 영리한 것인가 비겁한 것인가\n편법을 쓰는 사람은 비겁하다고 하지만 그 사람은 아무런 책임을 물지 않는다\n그래서 이용할 수 있는 것은 이용해야 한다는 생각들이 깔려있다\n편법과 법이 허용하는 부분의 차이가 명확하지 않다\n\n#### Think of my own that write in the note is just own me. it can be wrong.\nso, I need to communicate with people and check my think.\n\n[[Exploration#쉬운 것부터 해야한다]]\n\n#### 3단계 중첩\n노트를 2단계 중첩으로 쓰고 소스코드 폴더 구조도 2단계로 하려고 했다.\n근데 고 스탠다드 레이아웃이 3단계로 되있는 것을 보고 확장할 필요가 있겠다 싶다\n생각의 깊이도 2단계로 제한하던 것을 3단계로 해야 더 깊은 생각이 되지 않을까 하는\n걱정과 기대가 있고, 고려해봐야겠다.\n\n#### 모으기보다 나누기\n수집하고 아끼는 것도 좋지만 나눠주고 적게 가지는 것도 가치있다. 내 것을 아끼려고 하면 옹졸해진다. 베푸려고 하면 내가 커진다.\n\n---\n\n## 조잡함 vs 조화로움\n중복은 싫은데 노트에서는 같은 내용이 여러 곳에 분포해야 리마인드가 된다.\n어떻게 하면 조잡하지 않고 조화로울 수 있을까. 연출력의 차이. 영화의 조잡함과 조화로움은 연출가의 능력에 달렸다.\n\nGPT에 물어보니 조잡함은 '무계획의 복잡함'이고, 조화로움은 '의도된 다양성'이다.\n\n\n- 조잡한 것\n\t-\n- 조화로운 것\n\n\n불균형 - 비구조적이거나\n의도적이지 않은 것\n주제가 일관적이지 않고 튄다\n리듬이 없다\n\n\n#### 한옥에 스틸 식탁\n전혀 다른 성질인데 이질감이 드는게 아니라 조화롭게 또는 지루하지 않게 만드는 것\n한옥에 스틸재질에 식탁 엄청 큰걸 뒀는데 조화로워보이는게 엄청 어려울거 같은데 대단하다\n\n\n## 깊이 넓이\n\n데브옵스는 개발팀들 간의 통합과 협업을 잘하자는 의미로 나왔다.\n넓이를 넓히자는 것으로 받아들일 수 있는데 백엔드 엔지니어에게 운영도 하라고\n맡기는 업무의 확장으로 느껴지면 거부감이 드는 것이 당연하다. 넓이를 넓히는\n것도 힘들다는 것인데, 넓이와 깊이를 어느 정도로 조절해야 효과적일까\n\n도구를 쓰기 위해서는 사용 방법을 알아야 한다\n사용방법은 메뉴얼을 통해 순간 순간 필요한 것을 알아낼 수 있는 경우도 있지만\n\n복잡한 도구는 전체적인 그림이 그려져야 하고 공부도 해야한다\n복잡한 도구를 직관적으로 익히려면 어떻게 해야 할까\n\n자료는 인터넷에 다 있으니까 누구나 전문가가 되기 쉽겠다 생각했는데,\n프로그래밍 언어 하나도 전부 파악하기 힘든데 프로그래밍 분야를 문서 몇 개만 읽고 알기는 더 힘들다는걸 깨달았다\n자료를 잘 정리하고 세부적으로 파고들면 되겠다 생각했는데 장고 프레임워크 하나조차 제대로 정리하려니 규모가 너무 커서 압도된다.\n하물며 한 분야는 더욱 막막하지 않을까\n\n깊은 지식, 깊은 이해는\n복잡성이 아니라 명백함이다\n복잡하게 마무리되는게 깊은 지식이 아니라 명료하고 직관적이게 마무리 되는 것이\n깊은 지식이다\n\n초보자적 단순함과 전문가의 단순함의 차이가 무엇일까\n\n프로그래밍의 구루들조차 좋은 코드는 복잡한 코드가 아니라고 한다\n\n전문적인 분야를 파는게 더 나은 능력과 결과가 만들어진다\n관심도를 좁혀 그곳에만 집중할 수 있고, 넓은 곳을 모두 채우는 것보다 좁은 곳을 채우는 게 쉽다.\n근데 넓은 분야를 파고 싶은 마음도 놓지 않고 관심을 가져야겠다\n\n석사 박사영역에서는 아주 세부적인 분야를 깊게 공부한다\n국과수는 각 장비 및 인력이 특정 전문가로 분리되어있다\n\n폴리글랏 프로그래밍\n누군가는 한 언어에 대해서도 제대로 모르면서 다른 언어를 얕게 안다고 별로라고 한다\n\n세분화되어야 더 자세히 들여다 볼 수 있고 그 속에서 다시 넓게 연결된다\n깊이가 없으면 넓어지지 않는다\n어떤 사람도 세상의 모든 부분을 알 수 없다\n\n데브옵스는 다시 개발자들이 서로 협업하고 통합하는 환경을 조성하려는 문화다\n\n차근차근 해야하는게 있고\n여러 단계를 왔다갔다해야 하는 경우가 있다\n\n기능 개발은 커밋 시에 알아보기 쉽게하기 위해 한 기능씩 개발하고\n전체 소프트웨어는 설계, 구현, 평가를 계속 왔다갔다 하며 해야 한다\n예전에는 소프트웨어도 단계별로 하려고 했으나(워터풀) 짧은 주기로 전체를 반복하는(애자일) 방식이 더 나은 소프트웨어를 만들 수 있는 방법이 된 것 같다\n\n\n#### 글로벌 스탠다드와 자가구축\n조선시대 때 상평통보를 안쓰고 중국화폐를 안 쓴 지혜\n한글을 만든 세종대왕의 확신\n갈라파고스화\n일본의 독특한 pc와 휴대폰\n\n휴대폰 충전 케이블이 usb c로 통일된 것\n웹이 http 통신으로 계속 쓰이는 것\n\n#### 자기 안에 갇혀있는 사람을 꺼내야 할 때가 있고\n자기가 원하는 것을 자유롭게 해주게 해야할 때가 있는데\n\n친구가 내가 봤을 때 이상해보이는 상황에 놓여있을 때\n그냥 지켜봐줘야할 때와 얘기를 해줘야할 때를 잘 판단할 수 있을까\n\n#### 훈련과 혹사의 차이는?\n철은 사용하지 않으면 녹슨다\n위장은 죽만 먹으면 약해진다\n근육은 자극을 주어 강화시킬 수 있다\n관절은 닳는다\n\n\n## 기타\n\n#### 공개해야하는 정보가 있고 공개하지 말아야할 정보가 있다\n대부분 공개하는 것이 좋지만\n공군에서 있었던 성폭력 연관 사실을 다른 부대에서 알고 있는 문제처럼 공개되면 안되는 정보도 있다\n학교 성적도 공개하다가 반발이 많았다\n\n#### 긍정\n긍정의 주의할 점\n- 긍정이 낙관이 될 수 있음\n- 자신에게 가혹해질 수 있음\n- 현실적으로 바라보지 못할 수 있음\n\n20세기는 타인을 착취했다면 21세기는 자기자신을 착취한다. 그래서 고갈시키고 우울증으로 자주 나타난다\n\n> 빨간책방 2화 낙관에 대한 비관\n\n#### 논리적으로 일일이 설명하기 vs 믿음을 주기\n인간관계에서는, 논리적으로 설명해야만 납득하는 것도 답답한 부분이 있고 그냥 다른 이유 있으니까 이렇게 해줘라고 하는 걸 듣는 것도 답답한 부분이 있다. 다른 이유 있다고 말하면 그 이유를 설명하지 못하는 경우가 있지만, 그렇다고 안들어줄 것은 없다. 같이 어떻게 그렇게 생각하게 됐는지 천천히 찾아나가도 되고. 이게 근데 업무에서는 뭔가 그런 이유가 있겠지 하고 넘어가면 문제가 생긴다. 애매한 부분은 짚고 넘어가야하고 궁금한 부분을 해소해야 한다. 그렇다면 감정적 소통의 상황과 논리적 소통의 상황을 구분해서 논리적 소통이 필요할 때 감정적 호소를 하지 않도록 상황을 잘 이해하는 게 중요하겠다. 근데 이게 질문에 대한 본질적 대답이 아니다. 믿음을 준다는 건 또 다른 영역이다.\n\n#### 함부로 해야하는것(아끼지말고해야하는것)과 함부로 하지 말아야 하는것\n\n#### 자극으로만 낸 자극\n김은 자극이 엄청나서 조미료를 다 때려넣어서 맛있는건 의미가 없다고 생각했는데\n최근에는 맛집에 가서 맛을 내는 것이 괜찮다고 생각했던 거 같다\n-> 김은 자극이 엄청나서 조미료를 많이 쳐서 맛있는거라 생각했고 다른 음식도 이처럼 조미료맛으로 맛있는 건 인위적이라서 맛이 있어도 진짜 맛이 아니라 생각했었는데 최근에 맛집에 가면서 느낀 건 조미료가 어떻든 맛을 잘 내면 괜찮다고 생각했다.\n"},{"headings":[{"value":"점진적"},{"value":"전통, 존중, 점진적. 모두 폐쇄적이고 보수적인 편인 단어다"},{"value":"점진적 개선의 단점"},{"value":"점진적 변화와 반대되는 패러다임 변환"},{"value":"점진적 개선이 모든 경우에 맞는 건 아니지만"},{"value":"환원주의"},{"value":"빼는 것"},{"value":"0 -> 1, 10 -> 1000"},{"value":"복잡계"},{"value":"조금씩 꾸준히"},{"value":"헤겔의 변증법의 한계"},{"value":"그럼에도 변증법"},{"value":"변증법과 피드백"},{"value":"계속 가는 길이 맞는지 확인해야 한다"},{"value":"절대적인 것은 없다"},{"value":"경험이 편견이 되고, 얼룩이 될 수 있다"},{"value":"가치관의 변화는 받아들여지는 것이 아니라"},{"value":"좋아지는 방향으로만 나아가지는 않는다"},{"value":"지속적 진보"},{"value":"변화"},{"value":"사람은 변한다"},{"value":"본성"},{"value":"사람은 분명 변한다."},{"value":"환경이 사람을 변화시킨다"},{"value":"한국에 있을때는 독일에 대한 걱정을 하느라 한국일을 소홀히 했고 독일에서는 다시 한국 생각을 하고 있다"},{"value":"세상의 모든 문제에 다양한 시각과 의견이 있을 수 있다는 것이 항상 들어맞지는 않는다"},{"value":"중국의 모방과 배움의 모방"},{"value":"디자인 시스템 통일"},{"value":"상향식, 하향식"},{"value":"측정 가능한 기준을 세워두고 선택을 하고 선택을 측정하고 점진적으로 개선하는 것"},{"value":"혼잡성 정리"},{"value":"혼잡성 제어"},{"value":"복잡성 이론(complexity theory)"},{"value":"새로운 아키텍처"},{"value":"kubernetes"},{"value":"내용이 너무 많으면 핵심이 가려진다"},{"value":"양이 많아지면 뭐가 있는지 어떻게 알 수 있을까"},{"value":"resoucre"},{"value":"한 눈에 보는 페이지"},{"value":"많은 양을 잘 관리하는 방법"},{"value":"이력서를 받는 담당자 입장에서는 이력서들이 분류가 안된 상태로 많은 양이 들어와서 하나 하나에 집중하기 힘들다"},{"value":"책은 이력서 100개보다 내용이 많다"},{"value":"문제점 리포트를 받을 때"},{"value":"회사 블로그 모은 사이트는"},{"value":"단순 나열된 정보는 의미가 없다고 생각해서 노트의 태그를 한정했다."},{"value":"단순 나열"},{"value":"방대한 양의 정보를 어떻게 효율적으로 알릴 것인가"},{"value":"연상을 통해 기억을 쉽게 할 수 있는 점을"},{"value":"과거를 배우는 작업을 해야 하는가"},{"value":"방대한 양에도 컨트롤이 되는 것"},{"value":"인덱스를 만드는 것은 방대한 양을 관리하는데 도움된다."},{"value":"신뢰할 수 없는 부품들이 모여 신뢰할 수 있는 시스템을 만드는 것이 가능하다"},{"value":"줄다리기"},{"value":"큐레이션"},{"value":"딘 인스타그램"},{"value":"작게 쪼개다가 전체가 막막해질 수 있음"}],"fields":{"slug":"/evolve/"},"rawMarkdownBody":"\n## 점진적\n\n- 세상은 점진적으로 좋아지고 있다. 소통 속에 발전이 생긴다. 서로 싸우면서 몰랐던 부분에 대해 조금씩 영향을 받고 개선되어진다\n- 의견을 내면 반드시 반대하는 사람이 있을 것이고 그 의견을 통해 자신의 의견은 더 견고해질 수 있다\n  이전의 잘못된 것을 보고 다음번에 그것을 신경쓰게 되고 그러면 새로운 문제가 생길 것이고 그것을 점진적으로 고쳐나가면 된다\n- 점진적으로 발전되고있고 그것은 서로의 상호작용으로 이루어진다 아인슈타인도 그 지식의 기반이 그동안의 다른 사람들의 경험이 있었기에 가능했다\n- 작은것부터 시작. 틀에 끼워넣지 말고 틀을 만들어 광활한 공간에 넣기\n\n## 전통, 존중, 점진적. 모두 폐쇄적이고 보수적인 편인 단어다\n\n내가 가치있게 두는 단어들이었는데 진보적이고 변화를 추구한다고 생각했는데 한방 맞은 느낌이다\n\n#### 점진적 개선의 단점\n초기에 안좋은 경험이 개선 후에도 부정적 감정을 줄 수 있다\n\n인터넷으로 자료를 제출하는 것은 종이를 스캔해서 올려야해서 번거로운 작업이라는\n인식이 있고, 하기 싫은 느낌이 든다\n\n#### 점진적 변화와 반대되는 패러다임 변환\n과학계는 패러다임의 변화로 큰 변화가 왔었다\n\n토마스 쿤 - 과학혁명의 구조\n점진적이 아니라 패러다임\n\n#### 점진적 개선이 모든 경우에 맞는 건 아니지만\n무언가를 할 때 가장 좋은 행동방식인 것 같다.\n유연함을 더한다면 더 좋아진다\n\n#### 환원주의\n\n철학에서 복잡하고 높은 단계의 사상이나 개념을 하위 단계의 요소로 세분화하여\n명확하게 정의할 수 있다고 주장하는 견해이다. 물체는 원자들의 집합이고 사상은\n감각 인상들의 결합이라는 관념은 환원주의의 한 형태이다\n\n작은 것들이 모여 큰 것을 이룬다는 견해.\n내가 쿠버네티스를 좋아하는 이유.\n\n복잡성. 복잡계는 그렇게 이루어지지 않고, 단순한 시작이 위험한 재앙을 일으킬 수도 있다.\n\n#### 빼는 것\n\n> 과학은 지도를 만드는 것이다. 과학은 복잡한 세상을 지도 위에 드문드문한 점으로 환원시킨다. --- 지도, 그러니까 과학은 어떤 것을 집어넣는 것에 관한 것이라기보다는 대체로 어떤 것을 뺄 것인가에 관한 것이다.\n> - 전체를 보는 방법. 존 H 밀러. 에이도스\n\n과학도 빼는 것, 예술도 빼는 것, 기술도 빼는 것, 삶도 물건도\n\n#### 0 -> 1, 10 -> 1000\n- 입법은 어렵고, 법을 만들고 나면 법이 강화되기 쉽다고 한다\n- 최초의 발상은 어렵다고 하고, 그것을 발전시키는 것은 그것보다는 쉽다고 한다\n- 창의성을 말하던 이유, 현대의 창의성은 기존의 것을 비트는 창의성으로 발현된다.\n\n#### 복잡계\n예측할 수 없어서 실수가 발견을 만들어 낸다.\n\n복잡성은 행위자의 상호작용이 있는 시스템에서 생긴다.\n\n#### 조금씩 꾸준히\n한 분야의 전문가가 되기 위해서는 많은 공부와 끊임없는 연구, 새로운 것을 찾는 탐험이 필요하다\n하지만 좋아하지 않는 것에 그렇게 파고드는 것은 매우 어렵다\n시작은 관심과 호기심으로, 흥미를 가지고 하나씩 찾아보다가 서서히 그 분야의 지식을 쌓아가면서\n어느 순간 전문적인 지식이 필요할 때. 그 때 비로소 깊이 있는 공부가 필요하다\n그렇기 때문에 시작하는 단계에서는 흥미가 매우 중요하다\n궁금한 것을 찾아보면서 조금씩 알아가도 된다.\n그것이 훌륭한 기초가 되고, 기억 속에 오래 남을테니.\n조급해 하지 말자\n\n#### 헤겔의 변증법의 한계\n근대 철학자들은 세상의 진보의 법칙을 찾으려했고\n변증법으로 세상을 설명하려 했지만 그럴 수 없었다.\n모든 일이 변증법적으로 흘러간다면 2차 세계대전 등의 오점도 다 흘러가야하는 흐름이고 그 속의 희생자들은 희미해진다.\n그래서 현대의 철학은 세상을 설명하려는 것을 포기하고 세상을 진보시키는 방법을 찾으려한다\n\n세상이 변증법적으로 흘러가야한다면 반드시 합치는 과정이 생겨야 한다는 것이므로 어떤 특정한 한 점을 향하게 되는데, 다양성을 무시하고 강제로 합친다는 느낌이 들게 된다\n\n정반합에서 합이 중요하다 생각하면 반을 극복해야할 대상으로 보게 되는데 그것이 아니다. 합은 나아가야할 과정이 아니라 그런 유형도 일어날 수 있는 것이다\n\n- https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=a_lord&logNo=222465185462&proxyReferer=\n\n#### 그럼에도 변증법\n\n\"변증법은 비록 동일자의 의지를 품고 있으나, 현실세계의 상당 부분에 유용하게 적용\n되기 때문이다.\n변증법을 모조리 잡아 없애버릴수는 없는 노릇이니, 우리가 예술을 대하며 가져야 할\n자세는 변증법이 가지는 엄청난 힘, 아무런 문제가 없는 평화로운 합의로 보이는 억압\n을 항상 감시하고 제고하는 태도이다.\n\n- https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=a_lord&logNo=220974919450\n\n#### 변증법과 피드백\n\n#### 계속 가는 길이 맞는지 확인해야 한다\n\n계속해서 다른 사람에게 피드백을 받고,\n동기부여가 될 사람을 곁에 두어 자연스럽게 열정을 일으키게 하면 좋겠다\n\n#### 절대적인 것은 없다\n\n#### 경험이 편견이 되고, 얼룩이 될 수 있다\n\n#### 가치관의 변화는 받아들여지는 것이 아니라\n\n받아들이지 못하는 이전 세대는 시간이 지남에 따라 없어지고\n당연하게도 그렇게 살아온 미래 세대에 의해 자연스럽게 바뀐다\n\n아인슈타인은 양자역학을 받아들이기 힘들어했지만 현대 과학은 양자역학을 자연스럽게 받아들인다.\n\n태어날 때부터 스마트폰을 쓰는 세대는 그 전 세대와 스마트폰에 대한 생각이 다를 수 있다\n현대의 윤리의식이 미래 세대의 윤리의식과 차원이 다르게 달라질 수 있다.\n\n#### 좋아지는 방향으로만 나아가지는 않는다\n\n모든 생물이 좋아지는 방향으로만 진화했다면 인간의 몸도 더 효율적으로 바뀌었어야\n한다. 기도와 식도가 엇갈려 있는 등.\n\n#### 지속적 진보\n\n산업혁명 이후\n지속적 진보라는 낙관론이 있었다고 한다\n인간 이성에 대한 믿음이 있었고\n\n인간 이성에 대한 믿음은 세계대전 이후 돌아보게 되었는데\n\n지속적 진보는 낙관론일 뿐일까\n\n최은영의 애쓰지않아도 책 머리말에 세상이 조금씩 나아지고 있지만 그것을 위해서 목숨을 바친 사람들이 있음을 잊지 않겠다고 다짐하는 내용을 나도 잊지 말아야겠다\n\n#### 변화\n- 어떤 변화가 이루어질때 변화의 안좋은 점을 확인하고 염두에 두면 그 안좋은 점도 커버할 수 있는 결과를 낼 수 있다\n- Trade off\n\n[[Coding#Refactoring]]\n\n## 사람은 변한다\n\n변한척 하는 사람이 다시 예전의 행동을 할 때 우리는 본성이 있다고 한다\n하지만 사람은 변할 수 있다\n구분을 어떻게 하는지 알아볼 필요가 있다\n\n- 사람은 고쳐쓰는거 아니다?\n- 습관이 무섭다?\n- 사람은 변한다?\n- 열길 물속은 알아도 한길 사람 속은 모른다?\n\n#### 본성\n나의 삶이 안정되면 내 삶과 연관되거나 나에게 동감을 일으키는 것에 관심이 생긴다.\n\n#### 사람은 분명 변한다.\n사람은 외부에서 바꾸려고 하면 안바뀌고, 스스로 바뀌려고 해야 바뀌는 것 같다.\n근데 스스로 바꾸고 싶다고만 해도 바뀌는 게 아니고, 외부의 어떤 변화가 같이\n있어야 바뀌는 것 같다.\n\n#### 환경이 사람을 변화시킨다\nBut, Need deep dive to an environment\nDon't make just place change\n\n#### 한국에 있을때는 독일에 대한 걱정을 하느라 한국일을 소홀히 했고 독일에서는 다시 한국 생각을 하고 있다\n\n목표를 세워놓고 거기에 대비하는 것은 좋지만 현재를 더 충실히 보내야 한다\n자소서에는 tdd, refactoring 중요하게 생각한다 해놓고\ntdd를 써본적도 없고 바로 쓸 수 있지도 않더라\n\n#### 세상의 모든 문제에 다양한 시각과 의견이 있을 수 있다는 것이 항상 들어맞지는 않는다\n\n수학에 대해 그렇게 이야기하면 모든 과학적, 철학적 토대가 사라진다\n사실을 사실로 보는 것도 중요하고\n사회적 합의에 따라 살아가는 것도 좋은 가치가 될 수 있다\n사실이라는 것은 어떻게 보느냐에 따라 달라진다고 수학을 매도할 수 없다\n\n#### 중국의 모방과 배움의 모방\n\n새로운 것은 없다. 근데 중국은 너무 배낀다\n\n#### 디자인 시스템 통일\n\n여러 정보를 쌓고 난 뒤에야 정리를 하고 쓸데없는 것을 걷어낼 수 있다.\n이 작업을 효율적이고 비용이 적게 들게 하려면 어떻게 해야 할까.\n수파리에서 수를 하지 않고 파를 하는 것은 갈라파고스화 되는 것이다. 아이디어를\n모으고 자료를 모으는 작업은 중요한 작업이다.\n어느 정도 자료가 모인 뒤에 정리하는 작업은 불필요한 낭비를 줄일 수 있다. 공통된\n부분을 따로 관리하고 새로움을 더해야 한다.\n\n#### 상향식, 하향식\n\n디자인 규칙, 부서별 사용 프로그램 통일, 부서별 공유 라이브러리, 댓글 기능 공유\n등은 모두 위에서 정의한 것을 아래에서 가져다 쓰는 식이다.\n부서에서 각자 다른 방식으로 쓰고 있던 것을 회사 차원에서 통합하는 작업인데, 톱\n다운식으로 이루어진다는 느낌이다. 바텀 업으로도 이런 동작이 가능할까?\n\n#### 측정 가능한 기준을 세워두고 선택을 하고 선택을 측정하고 점진적으로 개선하는 것\n\n[[Standard]] [[Feedback]] [[Evolve]] [[Decision]]\n\n목표, 결정, 업무진행방식, 공부방식, 기준설정 하는 방식, 창작, 새로운 것에 입문,\n예술, 레퍼런스를 찾아 그 분야를 학습하는 것. 모두 같은 방식인 것 같다\n\n업무도 측정 기준 만들고 수행하고 많은 레퍼런스를 모아 거기서 핵심만 추출하는 것.\n글쓰기, 미니멀도 일맥상통이다\n새로운 것을 알아가는 과정, 새로운 기술을 익히는 것, 새로운 분야를 파악하는 것도 같다\n새로운 분야는 무엇을 측정해야 할지 알 수 없는데 측정할 요소를 찾는 것부터 할 수 있겠다\n\n측정가능해야한다. 귀류법으로 검증한다. 수파리, 변증법\n\n---\n\n## 혼잡성 정리\n\n- 정보의 정리를 어떻게 하고 어떻게 바로 찾아보고 (논문?) 혼잡성을 어떻게 관리해야 효율적인지\n\n복잡성을 관리하거나 얘기하는 책을 보고싶다\n어떻게 찾을 수 있을까\n알고싶은 정보를 책에서 찾고 싶은데 어떤 책을 봐야할지 모른다\n\n잘 아는 사람에게 물어보고 싶은데\n이런 사이트가 있으면 좋겠다\n\n카오스?\n\n혼돈을 효과적으로 관리한 역사\n\n이동진의 파이아키아\n모든 책의 위치를 파악하는 방법은 체계적인 정리다\n\n전체를 파악할 수 없다\n\n하향식 접근을 했을 때 쉽게 접근이 되도록 해야한다\n\n어차피 모든 방대한 지식은 공부를 통해서 습득해야한다\n시간이 필요하다\n\n시작점이 주어지면 거기서 넓혀나가서 파악해야한다\n그렇다면 이 접근을 빨리 할 수 있는 구조를 만들면 좋겠다\n\n체계는 이 접근을 빠르게 할 수 있다\n\n전체라는 것이 고정된 것이 아니라 계속해서 늘어나는 것이라서 새로운 사람 뿐\n아니라 기존에 있는 사람도 전체를 알지 못한다\n기존 사람들도 계속 공부해서 알아야 한다면 피로감이 들 것이다\n기존에 있는 사람들은 체계는 숙지되있지만, 지금 하는 일에 집중하고 있다.\n새로운 것을 계속 받아들이기 힘들다\n\n#### 혼잡성 제어\n\n수많은 것들을 다 커버할 수 없음을 받아들이고, 중요한 것을 꼽아서 집중한다\n\n회사가 커짐에 따른 인원의 증가\n업무가 많아지면서 코드의 증가\n자료가 많아지면서 자료의 증가\n\n복잡성을 관리하는 방법은?\n\n넷플릭스는 좋은 인재를 뽑고 규칙을 줄이는 방식으로 관리한다\n예술가들은 많이 모아서 정리하는 방식으로 작품을 만든다\n그래프\n간접 민주주의\n쿠버네티스\n서재\n논문들\n\n일반화가 아니라 다른 곳에서의 해결법에 대한 아이디어를 얻자\n\n넷플릭스는 마이크로 서비스의 레파지토리를 어떻게 관리하나\n\n마이크로서비스는 종속성이 문제다\n참조하던 다른 서비스의 버전에 따라 영향을 받는다\n그래서 최대한 동일한 api를 만들어서 유지해야될 것 같다\n\n마이크로서비스는 데이터소스를 분리하고, 작은 관리지점으로 유지해서 관리하기\n쉽게하는 장점을 잘 살려야한다\n이것을 모노레포에서 구현할 수 있으면 되지 않을까\n\n단일고장점을 없애는 것이 모노레포에서 구현하기 어려운 부분이려나\n\n마이크로서비스를 전부 람다로 구현할 수 있을까\n\n문제가 발생하면\n어떤 지표가 이 문제를 예측 할 수 있는지를 생각해서 그에 대한 알람을 설정한다\n\n문제를 많이 겪을수록 노하우가 증가할텐데\n이런 노하우는 잘 공개가 안되있다\n\n근데 예측은 항상 틀리는데 이 방식이 과연 제대로 동작할까?\n\nmono repo\nmulti repo\n\n마이크로서비스로 프로젝트가 구성되면 너무 많은 디렉토리가 생성된다\n이걸 뿔뿔이 흩여놓으면 전체적인 파악이 안된다\n그래서 모노레포 안에다가 넣어야겠다고 생각했는데\n실제로도 넷플릭스도 모노레포를 쓴다고 한다\n근데 모노레포로 관리하게되면 전체 소스를 한번에 받아야하고\n배포 시에도 전체적으로 영향을 주게 되고\n개발자가 수많은 폴더 속에서 헷갈릴 수도 있겠다 싶다\n이슈나 풀리퀘스트도 같은 곳에서 관리되고,\n같은 레포에 여러 요청이 들어와서 문제 생길 수도\n\n차라리 멀티레포를 편하게 관리하는 툴을 이용하는게 낫지 않을까\nhttp://fabioz.github.io/mu-repo/\n여러 툴이 있다\n\n대신 모노레포를 쓰면 장점이\n다른 마이크로서비스가 한곳에서 관리되고\n\n모두 템플릿으로 만드는게 뭔가 과대포장하는 느낌이 안나려면?\n\n마이크로서비스면 엔드포인트로 api가 필요하고\napi 서버라면 로그나 아웃풋이 미들웨어로 있어야되는 공통점이 있고\n이것들을 템플릿으로 만들어놓으면 좋을 것 같은데\n\n그러면 이미 만들어진 것들이 있을 것인데.\n서버리스를 쓸 수도 있을거고\n\n상향식 개발의 문제점\n중구난방, 제각각인 형태로 개발된 것들이 억지로 맞춰진다\n\n하향식 개발의 문제점\n현실적인 문제를 무시하고 억지로 틀에 맞춰야 한다\n\n족쇄가 되지 않는, 변화에 적응하기 좋은 템플릿이 필요하겠다\n\n각자 마이크로서비스를 개발하다보면\n다른사람이 개발해놓은 것을 중복으로 개발할 수도 있다\n과잉데이터 속에서는 데이터를 찾기 어렵기 때문에\n\n개발자는 배포를 위한 시그널만 주고 서버에서 다 처리해야겠다\n\n쿠버네티스 짱\n\n어떤 서비스던지 컨테이너화해서 쿠버네티스에 올리는게 가능하다\n멀티 레포든 상관 없이 쿠버네티스만 파악하면 된다\n어떻게 서비스를 개발하든 쿠버네티스에 올리고 쿠버네티스만 잘 확인한다\n\n이제 필요한 것은 이미 있는지 확인하는 검색인데\n비슷한 단어로 검색해도 결과를 알려주도록 태그를 쉽게할 수 있도록 하면 좋겠다\n\n쿠버네티스를 좋은 노트 앱처럼 구조화해서 볼 수 있도록 하면 되겠다\n태그, 카테고리, 문서 등등 다 확인되도록\n\n노트와 쿠버네티스의 접목.\n\n노트나 북마크, 파일도 태그로 여기저기 엮이면 좋겠다 싶은게 있고, 카테고리처럼 딱\n분류되면 좋겠다 싶은게 있다\n\n코드에서도 그렇다\n\n러시아 사교계\n운동계의 신인\n\n매년 새로운 사람들이 들어오지만 팬들은 신인들을 잘 파악한다\n\n레고에서 막 섞인 블록들을 분류해놓은 뒤 조립하면 더 빨리 할 수 있다\n머신러닝에서 데이터에 라벨을 붙여 분류해서 작업을 한다\n인터넷 커뮤니티에서 새로운 글\n\n#### 복잡성 이론(complexity theory)\n\n기상학자 로렌츠 나비효과\n카오스 이론\n\nIT(와 관련 사회 변화를 다룬) 온라인 교육 웹사이트 ‘컴플렉시티랩스(Complexity\nLabs)’는 △바닷속을 헤엄치는 물고기 떼의 움직임 △교통 체계 △소셜 네트워크 △금융\n시장 등을 ‘복잡한 동시에 계속 바뀌는’ 시스템의 예로 꼽는다.\n\n- https://news.samsung.com/kr/요즘-제일-핫하다는-이벤트-드리븐-누구냐-넌\n\n#### 새로운 아키텍처\n\n서버가 확장됨에 따라 새로운 아키텍처를 만들게 된다\n지금은 여러 회사의 경험으로 각 상황별 확장 사례들이 있는데\n이를 이용해서 좋은 아키텍처를 만들어 놓을 수 있을까\n\n#### kubernetes\n\n쿠버네티스라는 거인의 어깨에 올라타지만\n그 구현을 이해하고, 블랙박스 상태로 놔두지 않고\n문제가 발생하면 해결가능해야 한다\n\n#### 내용이 너무 많으면 핵심이 가려진다\n\n기계는 자료가 많아지면 더욱 좋아진다\n시스템은 풍부해지되, 각 컴포넌트들은 쉽게 구성되도록 하면 좋겠다\n장고 대신 플라스크를 쓰는 이유가 있듯이, 시스템은 계속 발달하게 하고, 내부에서는\n자유로우면 좋겠다.\n시스템이 너무 비대해지면 시스템에 관심이 안갈수도 있는데, 이 점을 조심해야겠다\n\n#### 양이 많아지면 뭐가 있는지 어떻게 알 수 있을까\n\n다 기억할 수도 없고\n\n테스트 케이스가 늘어나면 있는지 까먹지 않을까? 그냥 계속 쌓으면 그만인가\n회사의 자원이 쌓이면 까먹기 마련\n사람도 많으면 당장 기억하기보다 도구를 이용해서 기억한다\n\n그냥 다 기억할 필요없이 생각나면 쓰면 될까\n\n[[Architecture#대규모 서버에서 겪는 문제]]\n\n#### resoucre\n\n경험으로 쌓은 리소스가 자산이 되어야 한다\n\n- qa팀이 퀄리티를 유지하도록 해주는 역할을 한다\n\n[[Business#새 프로젝트]]\n\n#### 한 눈에 보는 페이지\n\n한 눈에 볼 수 있게 정리한 페이지는 좁은 영역에 많은 정보가 들어있어서\n\n1. 어디서부터 봐야할지\n2. 어떤 정보들이 있는지\n\n파악하기가 힘들고, 오히려 거부감이 들 수 있다.\n자주 사용하는 정보들은 가까이 있으면 업무의 효율이 늘지만, 너무 많은 정보는\n피로감을 준다.\n\n자산어보 동의보감 등 지식을 남겨서 후대의 사람이 정보를 다시 처음부터 얻지\n않아도 되게 했다\n\n#### 많은 양을 잘 관리하는 방법\n\n혼잡성\n대용량\n복잡성\n시계열 데이터\n빅데이터\n\n데이터가 많아지면 컴퓨터로 데이터를 관리하는 방법이 사용되었다.\n그러나 컴퓨터가 정리할 수 없는 데이터들도 많았고, 사람이 억지로 해야했다.\n\n#### 이력서를 받는 담당자 입장에서는 이력서들이 분류가 안된 상태로 많은 양이 들어와서 하나 하나에 집중하기 힘들다\n\n자동 분류가 되거나, 제목이 분류의 느낌이 나야 한다\n\n이런식으로 분류 없이 쏟아지는 정보를 받아들이려면 분류를 하는 것이 필요한데 자동 분류는 한계가 있다\n\n책은 방대한 양이라도 그룹화가 잘 되어있어서 접근도 쉽고 끝까지 볼 동력이 있다.\n이런식으로 비슷한 유형의 방대한 양을 조직화 하는 것이 필요하다\n\n#### 책은 이력서 100개보다 내용이 많다\n\n근데 이력서는 많아지면 일일이 보기 힘들다고 하고, 책은 길어도 읽고자 한다.\n사람 뽑는 일이 중요하다는 것은 알면서, 이력서는 훑어본다. 모순?\n\n#### 문제점 리포트를 받을 때\n\n한두 건은 수작업으로 확인 가능한데 백만 건 정도 되면 일일이 파악하기 힘들다\n국가 민원을 받을 때도 민원이 쏟아지면 각 민원을 다 파악하기보다 주요 이슈만\n뽑아서 처리한다는 인식이 있다\n\n#### 회사 블로그 모은 사이트는\n\n회사 블로그라는 기준이 있어서 무작위 등록을 필터를 하기 쉽겠다\n근데 등록된게 많아지면 필터링을 추가하긴 해야겠다\n\n#### 단순 나열된 정보는 의미가 없다고 생각해서 노트의 태그를 한정했다.\n\n여러 사이트에서 수많은 태그가 토막난 상태로 나열되있지만 무의미한 경우를 많이\n봐서, 그런 경우를 방지하기 위해 오타니의 9x9 레이아웃을 이용했다.\n\n#### 단순 나열\n\n단순 나열되있는 글이라도 그 안에는 인사이트가 있을 수 있다.\n그렇다면 그것을 어떻게 보느냐를 잘 관리해야한다.\n그래서 데이터를 잘 정리해주는 도구가 필요하다.\n\n#### 방대한 양의 정보를 어떻게 효율적으로 알릴 것인가\n\n알고싶은 정보 뿐 아니라 새로 입법된 법안의 내용과 새로운 과학 연구 결과도\n사람들이 알 수 있으면 좋겠다\n\n#### 연상을 통해 기억을 쉽게 할 수 있는 점을\n\n이용해 많은 데이터를 받아들이는 방법을 생각해볼 수 있겠다\n\n#### 과거를 배우는 작업을 해야 하는가\n\n이전의 작업이 어떻든 거기서 배울점이 생기고 거기서 개선시키는 방식으로 세상이 발전해 나간다\n세계대전에서 이성주의의 한계를 느끼고 포스트 모더니즘이 생긴 것이 그렇고, 현재의 코로나 대응 방식이 점점 나아지는 것에서 그렇다.\n초기에는 시행착오가 있지만 점점 안정화된다.\n비슷한 상황이 있어도 다른 부분이 있어서 안정화 시기가 존재하게 된다.\n그래서 빨리 실패하자는 얘기가 나온 것인데,\n산을 올라갈때 이전에 시행착오한 사람들이 배운 것을 미리 알고가는 것은 과거를 배워서 현재를 잘 보내는 것인데, 과거를 배우는 작업이 길어지면 빨리 실패하는게 안된다.\n\n#### 방대한 양에도 컨트롤이 되는 것\n\n정부에서 대기업 지정\n대학 인원 몇만명인데 수강신청 정보가 잘 공유됨\n국가 선거\n\n#### 인덱스를 만드는 것은 방대한 양을 관리하는데 도움된다.\n\n제텔카스텐, RDBMS\n\n#### 신뢰할 수 없는 부품들이 모여 신뢰할 수 있는 시스템을 만드는 것이 가능하다\n\n불완전한 인간이 모여 서로 상호공생하는 시스템이 구성된다\n\n불완전한 것들이 신뢰할 수 있는 시스템 안에서 서로를 보완한다\n\ntcp의 통신방식도 오류를 염두에 둔 신뢰성 높은 통신방식\n\n오류 수정 코드는 무선 네트워크에서 발생하는 전파 장애 등의 이유로 가끔 일부 비트가 잘못되는 통신 채널을 통해 디지털 데이터를 정확히 전송할 수 있게 해준다.\nIP는 신뢰성이 없는데, TCP는 신뢰성을 보장해준다.\n\n- 데이터 중심 어플리케이션 설계 - 마틴 클레프만\n\n노이즈 필터링\n\n#### 줄다리기\n\n2명이 힘을 합쳐도 100 + 100의 평균인 100이 아니라 95 정도가 나온다는 이론이 있다.\n\n- 사람의 불완전함\n\n#### 큐레이션\n\nMD가 직종으로도 활발히 구인하는 등\n큐레이션의 중요성은 이미 사회에 퍼져있었다\n\n#### 딘 인스타그램\n\n노래에 이미 정보화시대에 정보과잉에 대해서 이상하다고 지적하고 있었다\n인용하면 재밌을듯\n\n#### 작게 쪼개다가 전체가 막막해질 수 있음\n\nWTF python 번역하려고 했던 것처럼 작은 것들이 너무 많으면 작은 것을 한 두개\n하다가 너무 많이 남아서 지쳐버리게된다.\n"},{"headings":[{"value":"목표, 계획, 시간, 다음 세대"},{"value":"Todo"},{"value":"Future"},{"value":"생택쥐베리"},{"value":"왜 사는가? 삶의 목표"},{"value":"서머셋 몸의 『달과 육펜스』"},{"value":"계획"},{"value":"실행되는 계획과 막막한 계획"},{"value":"생활계획표"},{"value":"100장의 메모를 모아서 그것을 기반으로 책을 만든다고 가정하자."},{"value":"독일에서의 경험"},{"value":"구직하면서의 경험"},{"value":"시간"},{"value":"시간 관리"},{"value":"시간"},{"value":"일과 삶을 분리하면서도 쫓기지 않을 수 있을까"},{"value":"삶과 일의 블렌딩"},{"value":"아빠가 되면?"},{"value":"아이의 상상력과 거짓말을 어떻게 구분해줘야 할까"},{"value":"저작권에 대한 교육 필요"},{"value":"가르치는 것"},{"value":"집"},{"value":"전자책 vs 독서환경"},{"value":"기타"},{"value":"나는 기술발전 월드컵이라는 대회에 관중 같다"},{"value":"유토피아란 무엇인가"},{"value":"Plan"},{"value":"소풍을 갈 땐 준비를 잘 해가면 소풍이 즐거워진다"},{"value":"미래 예측"},{"value":"미래"},{"value":"소프트웨어 목표"},{"value":"유연"},{"value":"finish at once is impossible."},{"value":"자꾸 결과와 답을 찾으려 한다"},{"value":"목표"},{"value":"퀄리티 있는 결과물을 뽑고 싶다"},{"value":"너무 일찍 성공하면 남은 인생 동안 그것에 대해 생각하며 끌려가는 삶을 살 수도 있다"},{"value":"현재에 충실해야 한다. 미루지 말자"},{"value":"과거의 일을 바탕으로 미래를 대비하는 작업이 잘 실행되는 곳이 있는가? 어떻게 되고있는가?"},{"value":"개발자의 미래 생각하기"},{"value":"죽음"},{"value":"정리를 하면 미래 대응이 된다"}],"fields":{"slug":"/future/"},"rawMarkdownBody":"\n# 목표, 계획, 시간, 다음 세대\n\n## Todo\n\n- 작은 것부터 한다\n- 변증법적으로 문제를 해결한다\n- 정리하면서 퀄리티를 높인다\n- 전체를 차례대로 하기보다 조금씩 전체를 훑는 것을 반복한다\n\n## Future\n\n미래를 준비하는. 다음 세대를 위해 자신을 희생하는 독립운동가가 멋지게 보이는 것처럼\n현재를 위해 살지 않고 미래를 위해 사는 것이 멋져 보인다\n\n## 생택쥐베리\n미래를 위해서는 예측하지 말고 가능하게 해야 한다.\n더 이상 더할 게 없을 때가 아니라 더 이상 뺄 것이 없을 때, 완벽함에 도달한다.\n\n#### 왜 사는가? 삶의 목표\n\n은퇴 이후의 삶\n노년은 죽음을 기다리는 삶이 되면 안된다\n어릴때는 무엇을 향해 자라고 중년은 무엇을 향해 노년이 되어야 하는가\n아이들은 크고 싶어서 죽기 싫어한다\n\n100살까지 건강하게 살기\n왜? 왜 오래 살아야 하는가\n60세 이후의 삶을 윤택하게 보내기 위해\n세상의 변화를 보는 것이 즐거워서\n소중한 순간을 많이 만들기 위해\n소중한 사람들의 행복을 위해\n재밌는 것이 있으니까\n오래 살면 더 많은 것을 겪고 느낄 수 있다\n\n60세 이후엔 무엇을 할 것인가\n노년에는 무슨 재미로 사는가\n지금 하는 여가생활을 그 나이때도 즐기면 된다\n책, 자기계발, 개발, 축구\n은퇴한 교수님들은 뭘할까. 후학양성? 책쓰기? 이어령 작가님은 돌아가실때까지 책을 쓰셨다\n가족과의 시간? 악기 연주, 글쓰기, 연구\n\n노후를 위해 젊음을 포기하는 것은 별로다\n젊을 때 고생하면 노후가 편해진다\n삶에서 즐거움과 고생의 비중을 어떻게 가져가면 좋을까\n나이가 들어도 생산 수단을 가지고 있으면 외부에 끌려다니지 않고 살아갈 수 있다\n젊을 때 이것 저것 경험하면서 생산 수단을 만들고 발전시킨다\n\n사는 이유가 재미를 추구하기 위해서라면 지금의 재미를 놓치고 미래의 재미를 준비하는 것이 합리적인가?\n\n집을 사고 여윳돈을 가지고 삶의 효율성을 최대로 높인 나는 이제 무엇을 할까\n\n사업을 하면 거기에 모든 신경을 쏟고 다른 재밌는 것을 찾으려 하지 않는다. 사업 자체가 재미있어서\n출판을 해내는 것을 목표로 해도 될까? 세상의 변화를 이끌어내는 것은? 나 스스로 좋아하는걸 계속하는거? 하고싶다고 생각한 걸 할 수 있는 삶\n\n50대 이후의 삶에서 일이 빠지면 뭐가 남을까\n지금도 퇴근 이후에 뭔가 하는게 없어서 내 삶을 채울 뭔가가 필요하다\n은퇴후에도 돈이 들어오는 파이프라인이 하나 있었으면 좋겠는데 그걸 지금부터 만들어야겠다고 계속 생각만 하고 실행한 것은 없다. 이런 식으로 하고 싶어하는건 있으니까 생각난 것들을 적어놓고 해나가면 노년이 되어도 하고 싶은게 생기고 하게 되지 않을까\n\n쾌락만 좇으면 생산적인 일을 하기 힘들다\n\n#### 서머셋 몸의 『달과 육펜스』\n\n이 책에 은퇴 이후의 삶에 대한 얘기가 있다고 한다\n\n## 계획\n\n목표를 좇아 사는 사람이 목표를 달성하고 더 이상 목표를 찾을 수 없다면 사는 재미가 있을까\n\n목표를 왜 세우는가\n성취감\n방향 제시\n동기 부여\n\n계획이 이끄는 삶\n\n- 오타니의 만다라트\n\n목표를 정하지 않는 삶\n\n- 강박을 갖지 않고 변화를 받아들이는 것\n- 목표 달성 이후의 삶의 공허\n\n목표는 계속 바뀐다. 목표에 다다르면 새로운 목표가 생기기 마련이다. 끝은 없다. 마일스톤이라는 개념을 잊고 있었다. 달성하려는 것을 계속 쫓으면 된다.\n예측은 늘 빗나간다 측정하고 조치해야한다. 관찰가능성보다 포스트모템에 힘을 쓴다\n\n막 휘두르면 다음 번에 나아지지 않는다. 적당히 준비는 하고 나아가야 한다.\n후속조치는 나에게 경험이 되어 누적되어야 한다. 측정가능하도록 휘둘러야 한다\n실패를 통해 무엇이라도 배우고 밑거름으로 삼아야한다.\n\n#### 실행되는 계획과 막막한 계획\n\n계획을 세우고 실행하는데 어려움을 겪고있다\n\n먼 계획은 달성되지 않는다. 추상적인 계획은 달성되지 않는다 vs 꿈은 이루어진다\n\n계획이 추상적이면 행동을 안한다\n계획이 너무 구체적이고 빡빡하면 할 의욕을 잃는다\n투두리스트에 목록은 올라가있지만 막상 하려고하면 너무 하기 싫다\n데드라인을 지정하면 좋다고 하는데 어떻게 해야 내가 위기를 느낄 데드라인이 만들어질까\n한국에 돌아가기 전에 포트폴리오를 채우고 싶다\n근데 막상 하려고 하면 뭔가 막힌다\n다른 것을 하고 싶다\n작은 계획을 만들어야겠다\n\n#### 생활계획표\n\n생활계획표를 짜도 그 계획은 시간은 세부적으로 나눠져 있지만 구체적이지 않고 명확한 목표도 없다\n계획에는 구체적이고, 세부적이고, 목표가있고, 쉬운 트리거가 있고, 데드라인이 있고, 호기심이 있어야 한다\n#example\n\n#### 100장의 메모를 모아서 그것을 기반으로 책을 만든다고 가정하자.\n\n100장의 메모를 모으는 것은 1장씩 단독으로 모으는 작업이 가능해 틈틈이 모아서\n100장이 되면 잘 정리하는 식으로 해서 목표점이 생기고, 한 번에 하지 않아도 된다는\n심적 여유가 있어서 압박감 없이 목표를 달성할 수 있다. 하지만 기약 없이 놔두다가\n아예 흥미를 잃을 수도 있겠다.\n\n조금씩 쌓는 방식이 아니라 여러 겹으로 만드는 방식이 시작하기도 좋고, 좋은\n결과물을 만드는데에도 효율적일 것 같다. 애자일처럼. 쌓아야 하는 순간도 있겠지만.\n#example\n\n#### 독일에서의 경험\n\n지금 가장 큰 실패는 독일에 와서 일을 못 구한 것\n큰 꿈을 가지고 왔지만 작은 실행을 생각하지 못했다\n빠르고 간단한 실행단위로 조금씩 전진해 나갔으면 좋았겠다\n작은 계획을 진행하면서 실패하면 빨리 대응하고 했어야 하는데 너무 추상적으로만 생각했다\n\n일을 구한다 - 영어로 일을 해야 한다 - 영어 공부를 한다 - 영어로 생활한다 - 쉐도잉을 한다\n그래서 쉐도잉을 초반에 하곤 했으나 어느 정도 늘기는 했지만 말을 할 수 없다는 것에 한계를 느끼고 나가서 외국인들과 얘기를 해야한다고 생각. 이상한 글을 안보는 것이 불편한 것을 피하려는 것이 아니길하면서 슬럼프가 왔다\n코로나로 더 움츠려들긴 했지만 코로나가 아니었더라 하더라도 내가 나가서 외국인들과 얘기를 할 수 있었을까?\n#example\n\n#### 구직하면서의 경험\n\n일을 구한다 - 이력서를 본다 - 경험이 회사에 어필이 되야한다 - 어필이 될만한 기술로 개발해서 포트폴리오에 올려야 한다 - 개발을 해야한다\n쿠버네티스로 서버구축하는 작업을 시도했는데 계속 막히면서 결국 마무리를 짓지 못하고 질질 끌고 있다\n기존 레포지토리의 파이프라인을 만드는 작업도 다른 일을 찾는다고 놔두고 있다\n머신러닝으로 파이프라인 만드는 것도 하다가 멈추었다\n포트폴리오에 올릴 프로젝트들이 막히니까 회사지원도 멈추게 되었다\n1차면접에서 한번 떨어진 후로 지원을 아예 안하는 상태가 되었다\n영어에 부족함을 느끼고, 포트폴리오에도 부족함을 느끼고 있다\n이 부분을 채워야 한국에서도 지원을 할 수 있을 것이다\n#example\n\n## 시간\n\n#### 시간 관리\n\n시간을 밀도 있게 생산성 있게만 살면 삶이 피폐해진다\n\n여유를 가지고 선택과 집중을 하면 된다.\n\n낭비한 시간이 없길 바라던 적이 있었지만, 현실적이지 않다. 인간은 쉼이 필요하다.\n\n생산성을 높이는 건 자연스럽게 인풋이 들어오게 하고, 하고싶은 것이 있을 때 바로\n할 수 있게 할 수 있을 정도만 높이면 된다.\n\n포모도로를 계속 켜놓고 있지만 제대로 실행하지는 못했다. 집중을 오래 유지하기\n쉽지 않다. 처음 1~2 포모도로는 할 수 있어도 4~5개쯤 가면 이제 지친다.\n\n#### 시간\n\n프로그래밍을 처음 배울 때는 그동안 이걸 안하고 게임만 했던 시간이 너무 아깝고 빨리 배워야 한다는 생각에 초조했다\n하지만 그로부터 4년이 지난 지금은 프로그래밍 공부를 열심히 하지 않는다\n과거의 시간을 아까워 할 필요도 없을 뿐더러 그 시간에 무엇이 필요한지 알지 못해서\n과거로 돌아간다고 해도 똑같이 행동 할 것이다. 시간을 매번 아껴 사용하는 것은\n에너지 소모가 크고, 지속 가능하지 않다. 해야할 것은 현재에 최선을 다하는 것…\n과거를 아까워 하지 않아도 된다.\n\n#### 일과 삶을 분리하면서도 쫓기지 않을 수 있을까\n\n공부를 저녁까지 한 후에 집에서 마음껏 놀면 논 것에 대해 죄책감이 들고 다른 사람보다 뒤쳐진다는 생각이 든다\n\n개발자들은 특히 취미도 개발인 경우가 많아서 더 뒤쳐지는 느낌이 드는데,\n일이 끝난 뒤에는 마음대로 사는 것이 좋은 삶이 아닐까 싶다\n하지만 일이 아닌 개발을 하는 것은 재밌기 때문에 완충작용으로 동아리같은데에서 사이드프로젝트를 하는 시간을 가짐으로써 완충작용을 하면 어떨까\n\n뒤쳐지는게 두렵다기보다는 실력이 녹슬 것 같아 두려운 것 같다\n일은 아주 좁은 영역이고, 관심사는 넓다\n일을 하고 부족한 부분이 느껴지면 집에서 채우지 말고 일을 통해 채워야 좋겠다\n\n자기개발을 계속 해야하는 것에는 동의하지만 삶의 여유도 가졌으면 좋겠다\n\n가정이 있으면 가족과 보내는 시간을 늘리고 싶을 것이다\n그러면 몸은 가족과 있으면서 일을 위해 자기개발하는 것이 좋은 상황인가?\n\n나이가 들어도 일을 하면서 살아있는 보람을 느낄 수 있다는 것에 동의한다\n은퇴 후에 집에서 쉬는게 지겨워 일거리를 찾는 것도 이해가 된다\n은퇴 후 새로운 배움을 통해 새로운 길을 찾는 것도 좋아보인다\n하지만 4시간만 일을 하고 나머지 시간은 일과는 다른 생활을 하는 사람들도 있다\n유럽에서는 일요일에 거의 모든 자영업 가게가 닫는다\n그런식으로 사회적 합의가 있다면 일과 삶은 분리가 되는게 맞을 수 있겠다 싶다\n\n일이라는게 삶의 반 이상을 차지하니까 자신이 좋아하는 것을 일로 하면 일을 하면서 성장을 하고 보람을 느낄 수 있다\n일하다가 막히던게 쉬면서 해결법이 생각나서 일에 도움되는 경우도 있다\n\n개인 프로젝트를 하면서 배운 것이 업무에 도움이 되는 경우가 많다\n\n삶에서 쌓은 경험이 일에 적용이 많이 되면 좋겠어서 잘 안쓰이는 기술은 안쓰려고 하는 경향이 있었다 (PHP, ruby 등)\n\n일과 관련 없지만 일과 연관시킬 수 있는 것은 많다(예술, 영화 등등)\n\n생활을 하면서 일과 연관시키면 되지, 일과 분리하려고 할 필요는 없겠다\n\n근데 연관이 없다고 죄책감을 안느꼈으면 좋겠다는 것인데. 이런 죄책감이 느껴지면 일과 삶을 섞으라는 이야기도 있다.\n#think #balance\n\n#### 삶과 일의 블렌딩\n\n개발을 하려고 했던게 삶이 일과 영향이 적어서 손해를 보는 거 같아서라는 것도 큰 이유 중 하나였다.\n근데 지금도 업무 시간 외에 일에 대해 생각하는 것을 하지 않으려고 한다. 물론 의도적으로 일에 관련된 것을 생각하지 않아도 개발하는 것에 도움되는 것을 배울 수 있는 점에서는 나아졌다고 볼 수 있지만 일요일 저녁에 월요일에 일 할 것에 대해 정리해보는 것이 도움이 될 거라고 생각되지만 하기에는 거부감이 든다. 일은 업무시간에만 하고 싶은데 계획도 업무인 것 같다. 업무 시간 외에는 일에 관련되기 보다는 개발적으로 도움되는 것에 신경 쓰는 현재의 상황. 괜찮을까? 일단 괜찮은거 같다는게 이 글을 쓰면서 든 생각.\n\n## 아빠가 되면?\n\n부모가 엄하면 자식은 실수를 숨기게 된다\n다 터놓을 수 있는 사이가 더 좋다\n자식이 고등학생이 되면 자신이 원하는 곳으로 갈 수 있도록 삶을 살아감에 있어서 스스로 생각하고 선택할 수 있도록 키우면 좋겠다\n아이에게 선택을 하도록 하자\n아이의 생각을 물어봐야 한다\n하지만 간혹 그냥 이끌리는대로 하고 싶은 경우도 있을 것이다.\n자식에게 흔히 말하기를\n아프리카에서는 밥 못먹고 굶는 사람이 많으니 그걸 생각해서 밥 남기지 말고 잘 먹으라고 하는데 부자들과 비교하지는 않는다\n아이들이 그것에 대해 왜 그러냐고 물어보면 어떻게 대답을 해줘야 될까\n\n#### 아이의 상상력과 거짓말을 어떻게 구분해줘야 할까\n\n- 이야기를 맞장구 쳐주면서 실제로 가능한지 생각해보게 한다 (실제로 저렇게 하면\n  어떻게 될까?)\n- 거짓말 관련 우화를 읽고 이야기를 나눈다\n- 거짓말을 안해도 문제가 없음을 알려준다\n\n#### 저작권에 대한 교육 필요\n\n#### 가르치는 것\n\n선생님이나 선배들 또는 다른 사람에게 가르침을 얻는 경우\n부모님이 아이에게 뭔가를 알려주는 경우\n훌륭한 선생님을 만나서 내가 생각하던 방식이 넓어지거나 바뀌는 경우\n\n아이에게 뭔가를 바라지 않고 스스로 생각하게 하는 것이 좋다고 생각했는데 사람에게서 뭔가 배움을 얻는 경우는 분명히 있다\n부모가 아이에게 가르쳐 주는 것이 부모의 통제가 아니라 아이의 영감이 되게 하면 좋겠다\n어렵다\n\n#### 집\n\n부모가 되면 아이가 좋은 환경에서 자라게 하고 싶은게 당연\n갓난아기 때부터 유치원까지는 마음껏 뛰놀 수 있는 곳\n학교 다닐 때는 좋은 학군에 보내고 싶을텐데\n집을 옮기는게 쉽게 되지 않을 것이다\n\n#### 전자책 vs 독서환경\n\n아이가 생기면 책을 읽는 환경을 만들어주는게 중요하다 생각해서 집에 책을 많이 두고 책 읽는 모습을 보여주고 싶은데 지금은 책을 다 전자책으로 본다.\n\n혼자 있을 때는 전자책으로 다 봐도 상관 없지만 책을 읽는 분위기를 전달해주지는 못 할 것 같다.\n\n그러면 책을 모아야하는데, 지금 집을 1년마다 옮겨야하는 상황에서는 책을 가지고 다니고 싶지 않다.\n\n그렇다면 결혼 후에 책을 모으기 시작하면 될까?\n#todo #collection\n\n## 기타\n\n#### 나는 기술발전 월드컵이라는 대회에 관중 같다\n\n관중이지만 선수들과의 뜻깊은 추억을 쌓는 기분 좋은 관중이 되고 싶다\n기술발전을 최대한 오래 보고 싶다\n기술발전을 지켜보는 것도 재밌는 것 같다\n1990년대 인터넷의 대중화 이후 재밌는 경험을 많이 했다\n\n#### 유토피아란 무엇인가\n\n모두가 싸우지 않는 사회\n행복만이 가득한 사회\n모두의 소망이 이루어지는 사회\n고통을 느끼지 않는 사회\n원하는 것을 할 수 있는 사회\n\n사람마다 원하는 것이 달라 모두의 소망이 이루어질 수 없다\n누군가의 행복이 누군가의 불행이 될 수 있다\n내가 원하는 것이 무엇인지를 사회가 정할 수 있게 되면 그 세상은 썩은 사회다\n그래서 내 생각과 맞지 않는 사람이 있다는 것은 사회가 사람을 조종할 수 없다는 이야기가 되고, 아직 살만한 세상이라는 것이다\n중국 공산당은 썩은물이다\n\n멋진 신세계의 세계는 왜 유토피아가 아닌가\n\n개인적 유토피아를 이룬다면 삶이 즐거울까\n\n[[Information#인간의 평균 지적 수준이 괴테와 실러에 이를 것이라는 유토피아]]\n\n> 모든 사람이 거룩하게 되고 서로 사랑하게 될 것이며, 부자도 빈자도 높은 사람도 낮은 사람도 없어져 모두가 하느님의 아이들처럼 될 테니\n\n카라마조프가의 형제들 - 도스토예프스키\n알리샤의 유토피아\n\n#### Plan\n\nplan without precision\nplan with guide\n\n#### 소풍을 갈 땐 준비를 잘 해가면 소풍이 즐거워진다\n\n여행을 할 때는 준비를 잘 해가도 계획대로 안된다\n\n#### 미래 예측\n\n예측은 될 수 없다\n경험으로 만들게 되는데 일반화가 되면 안되겠다\n많은 사람들의 경험을 모으는게 좋겠다\n\n[[Evolve#경험이 편견이 되고, 얼룩이 될 수 있다]]\n\n#### 미래\n\n미래에 대한 비전을 갖고 그것을 달성하기 위해 노력한다\n\n- 비전은 사람에 대한 것이 좋겠다\n\n#### 소프트웨어 목표\n\n사용자의 요구를 더 잘 충족하는 방향으로 하는 것이 맞겠다\n기술은 점점 발전할 것인데 이 기술의 발전 방향은 사람이고, 사람의 생활을\n개선하거나 사람이 살기 좋은 세상을 만들거나 하는 것이 되겠다.\n하지만 매트릭스나 멋진 신세계의 세상처럼은 안되면 좋겠다\n어떤 세상이 다가올까\n\n#### 유연\n\n유연하면 새로운 것을 받아들이기 쉽고 확장되기 좋다.\n다양한 배경의 사람들이 얘기를 나누면서 나의 문제가 해결되기도 하고 새로운 발견을\n하기도 하면서 발전한다. (학회, 컨소시움)\n근데 발전을 하면 그 끝에는 무엇이 있을까\n\n#### finish at once is impossible.\n\nbut when started, you need keep mind to finish on day.\nfocus work and find more detail.\nit is possible, nevertheless, it makes start quickly.\nand afterward, add more detail.\nif started day don't build skeleton. it is too slow.\n\n#### 자꾸 결과와 답을 찾으려 한다\n\n목표를 정하는 것은 좋은데 거기서 머물러 있으면 안된다\n계속 변한다는 것을 답 설정의 바탕에 두고 답이 답이 아닌 것을 잘 의식했으면 좋겠다\n변화를 생각한다고 계속 생각했지만 답을 찾으려 하는 마음이 있는데, 답에서 벗어나 생각하는 방법을 갖고 싶다\n\n#### 목표\n\n인생의 목표 설정은 하지 않고 마일스톤만 세우지만\n일에는 목표를 잡고 계획을 해야한다싶다\n\n#### 퀄리티 있는 결과물을 뽑고 싶다\n\n밸런스\n\n어느 가치도 절대적으로 우수한 것은 없다\n적절한 지점을 찾는 것이 사람의 능력이다\n\n좋은 퀄리티를 만드는 것\n적절한 지점을 찾는 것.\n그것이 목표가 될 수 있겠다. 메타적인 목표\n\n#### 너무 일찍 성공하면 남은 인생 동안 그것에 대해 생각하며 끌려가는 삶을 살 수도 있다\n\n#### 현재에 충실해야 한다. 미루지 말자\n\n늦었다 생각했을 때, 그때라도 하면 후회한 날 중 가장 빠른 날이 된다\n\n#### 과거의 일을 바탕으로 미래를 대비하는 작업이 잘 실행되는 곳이 있는가? 어떻게 되고있는가?\n\n살인사건의 동기를 파악해서 다음 사건을 막는데 연구하는 등\n-> Profiling\n모든 연구분야?\n\n#### 개발자의 미래 생각하기\n\n리누스 토발즈처럼 되는게 인생의 목표는 아니다.\n무병장수도 목표가 될 수 없다.\n오래 사는 것에는 의미가 없다.\n치매에 걸리거나 아무것도 씹을 수 없으면 사는 의미가 줄어든다\n\n#### 죽음\n\n죽음은 살아있는 사람에게 고통이다\n죽음을 생각하면 삶이 소중해진다\n1년 시한부를 살아간다고 생각하면 1년을 낭비하지 않고 알차게 살고 싶다고 생각할텐데 그럼에도 낭비하는 시간은 생길 것이다.\n낭비라 생각했던 것에서 다른 경험이 나올 수도 있다\n\n죽음은 살아있는 동안 소중했던 사람들에게 고통을 준다. 그렇다고 고통을 안주기 위해 소중한 사람을 안만들 수 없다.\n\n#### 정리를 하면 미래 대응이 된다\n\n정리를 함으로써 나중에 일어날 일을 더 잘 받아들일 수 있게 된다\n원하는 방향이 있고 그 길로 가더러도 앞으로 무슨 일이 일어날지는 모른다.\n그 때 생각 정리와 마음 정리가 잘 되있다면 일어난 일을 더 잘 받아들이고 더 나은 결과를 낼 수 있다\n"},{"headings":[{"value":"사람 사이에 사랑이 있으면 티끌을 감싸준다"}],"fields":{"slug":"/love/"},"rawMarkdownBody":"\n\nLove wins all\n\n질문과 궁금증은 이어져있다 사랑과관심\n\n처음 보고싶을때의 감정만이 사랑이 아니고\n익숙해지고 안맞는 부분이 있고 권태롭게 느껴질 때도 그 사람을 소중히 할 수 있는게 사랑이다\n\n> 처음의 설렘보다 이 익숙함을 소중해 할 수 있는 것\n로이킴 - 내게 사랑이 뭐냐고 물어본다면\n\n\n\n소중함을 잊지 말자\n당연한 사랑은 없다\n\n좋아하는 이유를 백가지도 말할 수 있지만 그것 때문에 좋아하는 건 아니다\n\n#### 사람 사이에 사랑이 있으면 티끌을 감싸준다\n사랑하는 사람이 떠나가면 죽고 싶을 정도로 힘들다.\n근데 사랑이 떠나가도 삶은 계속된다\n"},{"headings":[{"value":"Navigator"},{"value":"가독성"},{"value":"가독성은 독자에 따른 상대적 개념"},{"value":"word, language"},{"value":"단어의 의미"},{"value":"단어를 쉽게 풀어내는 것, 기존의 단어를 사용하는 것"},{"value":"쉬운 문장은 무엇인가"},{"value":"쉽게 풀어 쓰는 것과 아이가 말하는 듯한 단순한 말의 차이"},{"value":"쉽게 익히기의 오해"},{"value":"사람의 재해석의 한계"},{"value":"박문성, 설민석이 전문성이 떨어진다는 얘기가 많이 나온다"},{"value":"아는 만큼 보인다 라는 간단한 말로 요약할 수 있는 말이지만"},{"value":"쉽게 풀어 쓴 글"},{"value":"쉬운 것만 하려고 하면 안되고, 쉬운 길을 찾아야 한다."},{"value":"어려운 문제를 쉽게 만들 수 있을까"},{"value":"쉬운 글"}],"fields":{"slug":"/readability/"},"rawMarkdownBody":"\n## Navigator\n\n- [[Coding#code communication이 되도록 보기 좋은 코드 (Readability with code communication)]]\n- [[Journal#Writing technique]]\n- [[Balance#simple vs neat]]\n- [[Decision#Minimal]]\n- [[Decision#portable]]\n- [[Decision#범용의 한계 universal]]\n- [[About_Development#module]]\n- [[Think#Why money is worth]]\n\n#### 가독성\n\n- 읽기 편한것? 직관적인 것? 철학서적은 가독성이 떨어진다고 할 수 있나? 전공서적도?\n- 쉽게 읽히는 것? 시는 가독성이 떨어지나? 가독성이 필요한 경우가 있지만 절대적 가치는 아닌가\n- 전문서적을 읽다보면 글이 길고 어려운데 그것을 가독성이 좋지 않다고 하지는 않는다\n- 근데 교양서적을 보면 쉽게 풀어서 설명한 글을 보기도 한다\n- <-> 가독성이 안좋은 글, 어려운 글\n- 신문에서 2-3 줄 정도가 사람이 문맥을 파악하기 좋다고 한다. A4에서는 한 줄 정도.\n- 코드는 서로 수정을 하고 파악을 해야하기에 가독성이 필요하다. 그러면 코드에서 가독성은 쉽고 직관적이고 읽기 편한 것을 말하는 것이 맞는 것 같다\n\n#### 가독성은 독자에 따른 상대적 개념\n\n> 함께자라기 - 김창준\n\n## word, language\n\n#### 단어의 의미\n\n- 글자가 적혀있는데 읽을 수 없고 뜻도 모르게 되는 한자\n- 읽을 수는 있지만 뜻을 모르는 한글\n- 뜻을 모르면 읽는 것이 의미가 있는가\n- 읽을 수 있으면 말할 수 있고 말할 수 있으면 전달이 가능해진다\n- 전달되는 것이 좋은가. 안되야하는 것이 맞는가\n- 뜻을 포함한 글자는 문자 안에 소리와 뜻이 같이 들어있다\n- 한자는 한 글자 안에 여러 의미를 담을 수 있어 효과적이다고 생각했는데 이는 처음 보았을 때 바로 알아차리기 힘들다는 의미고 같은 단어도 다르게 해석할 수 있다는 의미가 될 수도 있다\n\n#### 단어를 쉽게 풀어내는 것, 기존의 단어를 사용하는 것\n\n- 전문적인 분야에서는 특정한 것을 설명하기 위해 새로운 단어를 만들기 마련인데 그 단어들은 관련없는 분야에서는 굉장히 낮설게 들리고 관련 분야라고 하더라도 헷갈리게 사용될 수 있다. 어려운 내용도 쉽게 설명할 수가 있는데, 이 때 단어 자체를 쉽게 풀어서 설명하는 것이 좋을까? 기존 단어를 사용하는 것이 좋을까?\n\n#### 쉬운 문장은 무엇인가\n쉽다는 것도 모두 기준이 다르다. 그럼에도 잘 읽히는 문장과 그렇지 않은 문장은 분명히 있다. 어떤 차이가 있을까\n\n- 짧은 문장\n- 직관적으로 그림이 그려지는 단어\n- 자주 사용되는 어휘\n\n조사와 같은 글자로 끝나는 말은 조사인지 명사인지 혼동되기 쉽다\n‘행복도도 척도가 된다’ 라고 조사를 같이 쓰는 게 좋을까\n아니면 아예 그 문단에서는 ‘도’ 조사를 아예 안쓰는게 좋을까\n처음에 조사와 함께 용어제시를 하더라도 다음 문장에서 헷갈릴 수도 있다\n\n만화책에서도 교육용 만화책은 재미가 없다\n\n## 쉽게 풀어 쓰는 것과 아이가 말하는 듯한 단순한 말의 차이\n\n영어를 배우다보니 아주 단순한 문장만 말할 수 있는데\n이 단순한 문장으로 글을 쓰면 쉽긴 하지만 읽는 맛이 안 날 것 같다\n소설처럼 맛있는 문장은 아니더라도\n너무 단순하면 뭔가 부족하게 느껴지지 않을까? 모르겠다.\n단순함과 쉽게 풀어 쓰는 것이 같을 수 있을까?\n\n## 쉽게 익히기의 오해\n\n같은 정보라도 쉽게 이해할 수도 있고 어렵게 이해할 수도 있는데\n쉽게 설명해주는 영상들과 글들을 보고 쉬운 것으로 공부하면 좋겠다고 생각했는데\n그래서 나도 글 쓸때는 쉽게 이해되도록 쓰려고 했는데\n\n그것이 이상하게 적용되어 쉬운 일만 하려고 하는 정신상태가 되었다\n쉬운 것만 하려고 하면 안되고, 쉬운 길을 찾아야 한다.\n\n#### 사람의 재해석의 한계\n\n쉽게, 간단히 풀어 쓴 글은 원본의 정보에 작성자의 의견이 더해지거나 원본의 내용이\n빠질 수 있다.\n공식 문서나 히스토리를 알아야 그것에 대해 정말로 알게 되는 경우도 있다\n\n#### 박문성, 설민석이 전문성이 떨어진다는 얘기가 많이 나온다\n\n대중성이 높고 재밌게 정보를 전달해주는 것에 강점을 보이는데\n그 분야에 잘 모르는 사람은 저 사람들을 통해 입문하기에는 도움이 되는데 전문가들에게는 안좋게 보이나보다\n재밌게 정보를 전달해주는 사람들이 좋았는데 잘못된 정보를 가려 받을 식견을 가지고 나도 잘못된 정보를 안주도록 주의해야겠다\n\n## 아는 만큼 보인다 라는 간단한 말로 요약할 수 있는 말이지만\n\n같은 이야기를 감정을 넣고 와닿게 표현하는 것이 더 오래 남고 기억도 잘 된다\n잘 정제된 글이 단순히 한 줄로 요약하는 말이 아니다\n\n> 공부란 '머리속에 지식을 쑤셔넣는 행위' 가 아니라\n> '세상의 해상도를 올리는 행위' 라고 생각한다.\n> 뉴스의 배경음악에 불과했던 닛케이 평균 주가가 의미를 지닌 숫자가 되거나\n> 외국인 관광객의 대화를 알아들을 수 있게 되거나\n> 단순한 가로수가 '개화 시기를 맞이한 배롱나무'가 되기도 한다.\n\n#### 쉽게 풀어 쓴 글\n\n청소년을 위한 고전문학은 읽기 쉽게 적혀있다. 근데 아무래도 문학적 맛이나 내용이\n생략되었을 것 같다. 쉽게 풀어쓰더라도 원래의 맛과 내용을 잃지 않도록 해야겠다.\n\n#### 쉬운 것만 하려고 하면 안되고, 쉬운 길을 찾아야 한다.\n\n같은 정보라도 쉽게 이해할 수도 있고 어렵게 이해할 수도 있는데\n쉽게 설명해주는 영상들과 글들을 보고 쉬운 것으로 공부하면 좋겠다고 생각했는데\n그래서 나도 글 쓸때는 쉽게 이해되도록 쓰려고 했는데\n\n그것이 이상하게 적용되어 쉬운 일만 하려고 하는 정신상태가 되었다\n\n[[Reality#현실적인 문제는 무엇인가]]\n\n#### 어려운 문제를 쉽게 만들 수 있을까\n\n- 레거시 코드 파악도 정리하듯이 하면 될까\n- 알고리즘 풀이 같은 직관적이지 않고 고민이 필요한 것은?\n\t- 어려운 수학문제\n\t- 여러 사람의 이해관계가 얽힌 사건?\n\t- 전공서적\n- 안다고 다 해결할 수 없고 대화로 모든 문제가 해결되지 않는다. 말과 행동이 따른다고 일이 잘 풀리지 않는다.어렵다\n- 자료를 모으고 정리하는게 공부하는데는 적절하지만 모든 일이 자료를 모을 시간을 기다려주지 않는다\n- 변화에 맞추는게 필요하고 변화에 잘 맞추는 것이 역경을 이겨내는 방법이다\n- 난이도가 높은 것은 그냥 정리한다고 익힐 수 없다. 어려운 문제도 쉬운 것부터 풀어나가야 한다\n- 근데 알고리즘 문제를 풀려고 하니 풀기가 어렵다\n- 하기 싫은 것도 해야 살아나갈 수 있다는 것을 아이들에게 말하지만 나는 하기 싫은 것을 안하고 있었다. 쉬운 것만 찾고 있었는데 삶은 어려운 것이 항상 있다\n- 의존성, 종속성을 없애야 한다고 생각했는데 세상의 모든 것은 연결되있지 않은게 없다\n- 종속성이 나쁜 가치인게 아니라, 종속성을 어떻게 다루느냐를 생각해야 한다. 개별적인게 없는 세상인데 소프트웨어라고 연결을 없앨 수 없다. 종속성을 없애면서 고가용성을 얻는다는 게 말이 안되는 것 같다. 서버를 두 개 만드려면 그 두 서버간에도 종속성이 생긴다\n- 변화하는 세상 위에서 원하는 것을 이루기 위해서는 변화를 잘 받아들여야 한다. 준비를 어디까지 하는지에 대해 목적이 아니라 과정을 준비해야 한다고 생각해놓고 볼펜에 대해 생각하던것을 대입했더니 전혀 적용되지 않았다. 볼펜이 없어졌을 때를 대비하면 볼펜 하나가 추가로 필요한 것이지 볼펜 살 돈을 준비한다고 대비할 수 있는게 아니었다. 볼펜을 안 잃어버리도록 대비를 하는 것은 더 힘들다\n- 난이도가 높은 것도 그 분야를 잘 아는 사람이 쉽게 설명해주는 경우도 있다. 쉽게 설명을 듣고 다시 어려운 것을 보면 훨씬 받아들이기 편해진다. 어려운 것을 쉽게 설명하는 것을 해야겠다\n\n#### 쉬운 글\n\n청소년을 위한 고전을 읽고 다시 고전을 읽는 것보다 바로 고전을 읽는 것이 동작 자체는 더 간소화되있지만, 실제 머리 들어가는 것은 전자가 많으므로 전자가 더 효율적이다고 할 수 있겠다. 이건 두 가지 물건 대신 하나를 쓰는 것과는 기준이 다르다. 입문용을 쓰고 고급 제품을 쓰는 것이 고급 제품을 바로 쓰는 것보다 만족도가 더 높을 수 있다.\n\n---\n"},{"headings":[{"value":"이상과 현실"},{"value":"이성적으로 판단했을 때는 맞지만 현실적으로는 안되는 것"},{"value":"이성 감성"},{"value":"현실적인 문제를 해결하지 못하는 이상은 너무도 무력하고 무의미하다"},{"value":"현실과 이상"},{"value":"마음 먹는 것과 직접 하는 것은 다르다"},{"value":"현실적인 문제는 무엇인가"},{"value":"이론과 실제는 다르다"},{"value":"출근시간에 쫓기다보면"},{"value":"자취의 로망은 실현되지 않는다"},{"value":"입맛 없을 때"},{"value":"de facto"},{"value":"실제, 상상"},{"value":"현실과 이상의 괴리가 크면 이상이 아무리 훌륭해도 현재를 못 넘길 수 있다"},{"value":"이상과 현실"},{"value":"예술이 존재하는 이유"},{"value":"이상주의와 자연주의"},{"value":"이성없는 감성으로 마약에 중독되는 현상을 꼽는다"},{"value":"이상, 현실"},{"value":"미켈란젤로가 조각을 위한 대리석을 보며 돌 속에 갇혀있는 형상을 꺼내기 위해 쓸데없는 부분을 제거하는게 조각이라는 말이 조금 이해가 간다."},{"value":"추상"},{"value":"관객은 추상이다"},{"value":"예술은 사회상황과 관계가 있다"},{"value":"적당한 추상화가 필요하다"},{"value":"카테고리"},{"value":"추상의 함정"},{"value":"수학에서도 추상화가 중요한 요소이다"},{"value":"나열되있는 것은 사람이 받아들일 때 한계가 있다"},{"value":"러셀과 화이트헤드"},{"value":"개발에서의 [[추상화]]"},{"value":"어려운 작업을 추상화해서 사용하기 좋도록 해야한다"},{"value":"추상화"},{"value":"추상화 좋은 예"},{"value":"어디까지 추상화할지"},{"value":"직관적으로 알아 볼 수 있는 추상"},{"value":"추상이 우리를 죽이기 시작할 때"}],"fields":{"slug":"/reality/"},"rawMarkdownBody":"\n## 이상과 현실\n\n이론과 현실\n이성과 현실\n이성과 감성\n\n#### 이성적으로 판단했을 때는 맞지만 현실적으로는 안되는 것\n\n합리주의 이성중시 과학\n[[Exploration#작은 배를 오래 타다보면 고칠 곳이 생기고 부족한 부분이 보이고 결국에는 그 부분을 고려한 새로운 배를 만들게 된다]]\n\n[[Information#이통기국은 이상이 현실 속에 존재함을 의미한다.]]\n\n#### 이성 감성\n\n이성이 위대하다고 생각하여 모더니즘이라는 한 시대의 문화가 생겼다.\n그러나 이 시기에 히틀러가 이성을 이용해 전쟁을 일으키는 등\n이성의 한계에 봉착했다. 그 뒤 나온 것이 포스트 모더니즘. 다양성 문화다.\n\n게다가 인공지능의 발전으로 이성의 영역은 컴퓨터가 더 잘할 수 있게 되었다.\n오히려 인간에게 감성과 정서, 관계성이 중요해졌다.\n\n#### 현실적인 문제를 해결하지 못하는 이상은 너무도 무력하고 무의미하다\n\n#### 현실과 이상\n\n- 자취 나가 살면 집 잘 꾸미고 밥 잘 차려먹을 줄 알았는데 귀찮아서 안하게 된다\n- 수납함에 다 집어넣고 꺼내서 쓰면 깔끔하지만 집기 편한 위치에 그냥 갖다 놓는다\n\n#### 마음 먹는 것과 직접 하는 것은 다르다\n\n마음만 먹는 것도 쉽고 생각 없이 무작정 하는 것도 쉽지만 마음 먹고 실제로 하기는 힘들다\n방향을 제시한 이황도 대단하고 실제 상황에 맞추는 것의 중요성을 깨달은 이이도 대단하다\n개발에서 이상을 갖고 작업 하더라도 실제 구현 시 계획대로 안되는 경우가 많지만 이상을 현실에 맞출 필요도 있다\n\n#### 현실적인 문제는 무엇인가\n\n- 시간적 제한\n- 복잡도에 따른 혼란\n- 귀찮음?\n  **귀찮아서 못하는 것과 현실적인 문제를 헷갈리면 안되겠다**\n\n#### 이론과 실제는 다르다\n\n의지박약을 가진 사람에게 누군가 어떻게 의지박약을 해결해야 할까요라는 고민상담을 하려고 하면 상담은 잘 해준다\n머릿속으로는 잘 알지만 실제로 하기는 힘들다\n\n#### 출근시간에 쫓기다보면\n\n머리로는 아침에 더 일찍 일어나면 된다는 것을 알지만 정작 일찍 일어나기는 힘들다\n\n#### 자취의 로망은 실현되지 않는다\n\n결혼 후의 로망도 마찬가지 일텐가?\n출산 후에도 커리어를 계속 이어나갈 수 없다면 임신을 하지 않겠다는 다짐을 가지고 커리어를 이어나갈 계획을 세웠을 때, 그 계획은 이루어질 수 있을까?\n막상 임신과 출산 후에는 전혀 다른 세상이 펼쳐질텐데.\n\n어떻게 원하는 대로 방향을 맞춰갈 수 있을까\n\n부작용을 걱정해서 어떤 추가적인 시도를 한다고 해도 그것이 제대로 작동하는지 어떻게 알 수 있을까\n\n프로그램을 만들 때의 의도와 유저들의 실제 사용 방식은 정말 다르다. 유저들의 진행 방식은 너무나도 다양해서 항상 예측을 벗어난다.\n의도대로 실행하도록 유도하는 것 대신 더 나은 사용법은 무엇이 있을까\n[[#고백을 보고]]\n\n#### 입맛 없을 때\n\n입맛 없을 때 운동과 다이어트를 시도하면 운동을 하면서 입맛이 돋구어 진다\n맞는 말 같다 근데 입맛도 없는데 다이어트를 하려고 하면 힘듬이 가중되서 삶이 너무\n힘들 거 같다는 얘기를 들으니 그 얘기가 더 맞는 것 같다\n\n[[#쉬운 것부터 해야한다]]\n\n## de facto\n\nstandard is good to people who generally read a content person in internet.\n\n## 실제, 상상\n\n실제하지만 알지 못했던 것(0, 전자기력)\n상상하지만 실제하지 못하는 것(도라에몽)\n\n상상을 현실로 만들어내기도 하고\n현실에서 새로운 세계를 상상해 만들기도 하고\n\n아이디어는 있는데 구현을 못하는 경우\n기술은 있는데 혁신적인 상상을 못하는 경우\n\n구현할 수 있는 상상을 하는 방법\n상상 속 세상을 구현하는 방법\n\n#### 현실과 이상의 괴리가 크면 이상이 아무리 훌륭해도 현재를 못 넘길 수 있다\n\n---\n\n## 이상과 현실\n\n관념적 존재론적\n이상 자연\n이데아 현실\n이데아는 위대한데 현실은 한계가 있기 때문에 이데아를 좇는 것이 훌륭한 것이다\nvs 현실은 이데아를 반영한 것이기에 현실을 잘 아는 것이 이데아를 잘 아는 것이다\n\n플라톤과 아리스토텔레스\n플라톤은 이데아, 아리스토텔레스는 자연\n\n다빈치와 미켈란젤로\n다빈치는 자연모방, 미켈란젤로는 내면에 따른 창조\n\n베토벤과 모차르트\n베토벤은 전체적인 구조, 모차르트는 즉흥적\n\n톨스토이와 도스토예프스키\n톨스토이는 귀족적, 신학적,\n도스토예프스키는 빈민, 현실적\n\n상반된 이야기를 하는것 같지만 둘 모두 위대하고 두 위인들은 공존한다.\n\n#### 예술이 존재하는 이유\n\n선사시대, 아는대로 그린다\n주술의 목적으로 예술한다\n(겨울 다음 봄이 오는 현상을 보고, 이 현상을 다시보고 싶어 무엇인가라도 해야한다고 생각한다.)\n사람을 신으로 뽑고 늙고 병들면 죽이는 것으로 은유했다.\n죽음 때문에 관습이 완화되고 다른 사람이 대신 죽거나 동물이 죽는 방식으로 완화되었다.\n이런 일련의 행위가 예술적 주술의 사례다.\n\n그러다가 행위적 주술을 넘어 그 너머에 있는 것을 보고자하는 마음에 철학, 예술, 종교로 나뉘어진다.\n\n주술의 행위가 '실제'와 '가상'으로 나뉘고, 그 중 '가상'은 연극처럼 예술이 된다.\n현실에서 연극을 해봤자 그것은 원래 목적인 신에게 얘기하는 것을 흉내내는 것이라 '가상'이라 여겨진다.\n\n플라톤은 예술은 이데아에 닿지 못하는 가짜라 생각했다.\n아리스토텔레스는 현실을 통해 이상을 볼 수 있다고 했다.\n이 논쟁은 르네상스 다빈치, 미켈란젤로까지 이어진다.\n눈에 보이는 것을 모방하는 것과, 내면에서 발견하는 것이 대립한다.\n\n중세는 모방보다 내면에 가까운 시대(종교적)\n르네상스는 다시 모방에 가치를 두려는 시대(다시 고대로)\n중세의 예술은 신을 표현하기 위해 이용되었다.\n\n여기까지의 예술은 현실의 모방도 근원을 찾는 것이다.\n아름다움의 추구도 근원을 추구하는 방향이었다.\n\n나에게 예술은 현실을 다시 표현한 것이라 생각했지 근원에 대해서는 생각 안했다.\n\n#### 이상주의와 자연주의\n\n중세 초기에는 영적인 것, 본질적인 것을 최고로 보고 기하학적인, 빛에 대한 것을\n가치 있게 생각했다.\n중세 후기에는 현실의 것도 영적인 것의 확장이라 보고 현실의 세계를 예술에 더했다.\n아키텍처에서도 본질만 있으면 세부적인 구현은 다 의미없다고 생각하기보다, 그래서\n어떤 프레임워크를 쓰든 그것이 본질에 맞춰야한다고 하기보다, 쿠버네티스나 각\n프레임워크 자체를 의미있게 설계에 포함시켜야 할 것 같다.\n\n#### 이성없는 감성으로 마약에 중독되는 현상을 꼽는다\n\n#### 이상, 현실\n\n현실을 보는 눈이 다시 이성적 감성적으로 나뉘는 건가\n\n미켈란젤로는 이성적으로 이상을 생각했다\n\n이성이 이상인가?\n현대의 이성은 이상을 증명되지 않은 허구라 생각한다.\n\n합리적이다는 말은 증명 가능하다는 말일 것인데\n\n자연의 모방을 플라톤은 비난했는데 자연을 모방한 것은 감성적이다고 할 수 있다\n감성적인게 뭐지\n\n지금 감성이라는 말은 추상적인 느낌이다. 정확한 설명은 안되지만 좋게 느껴지는 느낌\n\n르네상스 이후 바로크 시대는 명료한 것에서 불명료한 것으로 그림을 표현하는 방식이 달라졌다.\n\n르네상스 - 데카르트 기하학적이고 뚜렷한 것, 이성을 추구\n바로크는 감정의 예술 추구\n\n르네상스의 미는 질서, 비례, 척도 - 자연을 모델로 함\n바로크는 오히려 본질적인 것을 표현하려고 하여 디테일을 중요하게 생각하지 않았다.\n\n영혼과 몸을 두고\n영혼은 고귀하고(이성) 몸은 천박한 것(감성)으로 볼 수 있고\n영혼은 감성적인 것이고 몸은 현실적인 것으로 볼 수 있다\n\n#### 미켈란젤로가 조각을 위한 대리석을 보며 돌 속에 갇혀있는 형상을 꺼내기 위해 쓸데없는 부분을 제거하는게 조각이라는 말이 조금 이해가 간다.\n\n이건 미니멀리즘의 관점이 아니라 신에게로 가고싶어하는 관념적 가치관의 표현이라 내가 이해한 것과 다르긴 하다.\n\n---\n\n## 추상\n\n#### 관객은 추상이다\n- 관계의 과학에서 한 단어를 제시하고 그에 대한 이야기를 하는 방식이 내가 생각하던 어려운 단어를 쉽게 풀어내는 것과 상통한다\n\n#### 예술은 사회상황과 관계가 있다\n작가가 생각하는바를 표현하는 작업인데\n생각이 단순히 표현되는 것이 아니라 생각의 결과가 표현이 되다보니 결과물로는 작가의 생각을 바로 알아차리기 힘들고\n그래서 해설이 필요하게 되고\n그러다보니 오히려 해설이 작품을 표현하게 되어 표현물 자체에 의미가 없어도 해설이 작품을 꾸미게 되는 상황역전이 일어난다\n결국 표현물을 대충그리는 비꼼으로 현대미술을 비하하는 일이 생기게 되는데\n아이러니하다고 할 수 있다\n\n#### 적당한 추상화가 필요하다\n추상화는 ‘구체적이지 않은’이 아니고 ‘다른 모든 종류의 객체로부터 식별될 수 있는 객체의 본질적인 특징 이라고 할 수 있다’\n\n#### 카테고리\nthink에서 주제가 있는 항목들은 그 항목으로 이동하려고 하는데\nthink 카테고리에 다 넣던 것을 software 카테고리에 think를 넣는 것으로 바꾸는 것이 맞는지 잘 모르겠다\nthink의 추상은 더 깊은 추상인 것인가?\nReading 카테고리에 think의 하위분류인 review가 들어가는 것도 예\n\n카테고리의 추상화를 어떻게 설정해야 하나\n\n추상화에도 단계가 있나?\n\n큐일이론\n사고의 시각화\n\n일반화와 추상은 다르다?\n\n#### 추상의 함정\n추상적으로 자신의 의견을 표현하는 사람들이 실제로 그 추상성과 맞는 조건이 있어도\n그것을 받아들이지 않는 경우가 있다\n추상은 전체 길이는 늘리지만 그 안에 모두 포함되게 되는 것이 아니라 단지 몇 개의\n조건만 더 받아들일 뿐이다\n생각이 구체적인 현실을 만나면 무너지는 경우가 있다\n\n#### 수학에서도 추상화가 중요한 요소이다\n\n#### 나열되있는 것은 사람이 받아들일 때 한계가 있다\n이미지는 이를 압축해서 나타낼 수 있다(그래프)\n추상화도 이런 느낌으로 이용할 수 있겠다\n\n[[Reading#미학 오디세이]]\n\n#### 러셀과 화이트헤드\n수학원리에서 고민하던 것을 괴델이 불완전성 정리로 불가능함을 증명했다\n최고로 추상된 상태로 프로그래밍을 하는 것도 불가능하다고 증명되었다는 것으로 들린다.\n추상에도 한계가 있고, 실제에 의존적일 수 밖에 없다.\n\n그럼에도 유닉스 입출력 장치의 추상화는 입출력 기기에 상관없이 똑같은 동작을 할 수 있도록 추상화되있다.\n고랭의 덕 타이핑이 이를 잘 구현할 수 있게 도와준다.\n사용자는 필요한 함수만 가지고 있으면 똑같은 동작을 할 수 있게 된다. 대표적으로 http 패키지의 handler가 있다.\n\n#### 개발에서의 [[추상화]]\n\n현실 세계를 컴퓨터 세계의 언어로 바꾸는 것\n\n#### 어려운 작업을 추상화해서 사용하기 좋도록 해야한다\n\n내가 어렵게 배웠어도 그것을 누군가는 다시 사용해야하고, 유지보수 해야한다.\n그러면 그 전에 배운 작업을 추상화해서 쉽게 사용할 수 있도록 해야한다.\n\n#### 추상화\n\n바이트 코드로 프로그램을 작성할 필요가 없다.\n추상화가 가능한데 시간 낭비다. 근데 접근은 할 수 있어야 한다.\n\n- 아예 접근을 못하게 강제할 때의 장점도 있다\n\n#### 추상화 좋은 예\n\n문자열 라이브러리\n\n문자열도 0과 1로 구성되지만 사용할 때는 이를 의식할 필요 없이 문자로 사용할 수 있다\n\n물론 이런 라이브러리에 구멍이 있기에 버그를 일으키는 경우도 있지만\n처음 시작할 때 hello world를 입력하기 위해 문자열을 이진법으로 바꾸는 식의 내용은 생각 안해도 되어서 쉽게 사용할 수 있다\n\nhttps://www.sciencetimes.co.kr/news/현대-추상화에-숨은-뇌과학의-원리/\nhttps://hri997.tistory.com/m/101 - 1913년 초기 추상 정의와 논쟁\n\n#### 어디까지 추상화할지\nhttps://devocean.sk.com/blog/techBoardDetail.do?ID=163365\n> 첫번째 workflow 의 문제점은 우선 정확히 어떤 명령어가 실행되는지 알기 어렵고, endpoint url 을 변경하는 등의 추가 옵션을 설정할 경우 aws cli 문서가 아니라 다른 곳에서는 아무짝에도 쓸모없는 jakejarvist/s3-sync-action 의 문서를 봐야 한다는 것이다\n\n#### 직관적으로 알아 볼 수 있는 추상\n\n#### 추상이 우리를 죽이기 시작할 때\n> 빠른 초기대응이 중요하지만, 자주 일어나지 않는 사건에 대해서는 읽고 즉각 실행에 옮길 수 있는 완벽한 메뉴얼이 필요하다\n> - 김상욱의 과학공부\n"},{"headings":[{"value":"Rule / Prepare / Limit"},{"value":"변증법, 수파리"},{"value":"efficient, limit"},{"value":"제한을 둠으로써 새로운 것을 만들어 낼 수 있다"},{"value":"block vs break"},{"value":"어떤 단어 용어에 대한 설명을 쉽게 한줄로 풀려고 하는 것"},{"value":"제한"},{"value":"제한을 두되 강박을 만들어서는 안된다"},{"value":"제한"},{"value":"limit"},{"value":"제한이 억압이 되면 그것을 깨부수고 대안을 찾으려 한다"},{"value":"김영하의 쓰지 않을 것에 대한 노트"},{"value":"Manual"},{"value":"룰"},{"value":"메뉴얼 vs 장인"},{"value":"manual"},{"value":"개발 프로세스가 있어서 개발자가 누구냐에 큰 영향을 받지 않게 할 수 있다?"},{"value":"정립된 아키텍처를 깨는 것"},{"value":"형식을 갖춤으로써 오는 장점도 있다"},{"value":"manual"},{"value":"하향식, 상향식"},{"value":"defeat"},{"value":"메뉴얼의 한계"},{"value":"프로세스와 매너리즘"},{"value":"기타"},{"value":"큰 것에서 작은 것으로 이야기를 진행하려는 것"},{"value":"합리적인 제한을 만드려면 어떻게 해야 할까"},{"value":"고민의 시간을 줄이기 위해 미리 정의해 놓은 조건들이 있다"},{"value":"이전 사람들의 특히 한국 작가들을 열거해놓은 표를 보면"},{"value":"자유학기제"},{"value":"룰 브레이커"},{"value":"조절할 수 있는 기준을 세운다"},{"value":"측정 가능한 지표"},{"value":"정부의 4단계 거리두기 지침은 기준점을 제시해주는 측면에서 구체적인 기준을 제시했지만,"},{"value":"표준과 전자정부프레임워크"},{"value":"다이어리 템플릿"},{"value":"템플릿의 단점 (화면상의 템플릿)"},{"value":"잡음과 형식"}],"fields":{"slug":"/standard/"},"rawMarkdownBody":"\n## Rule / Prepare / Limit\n\n변증법, 수파리, 피드백, 메뉴얼, 제한\n\n\n## 변증법, 수파리\n템플릿은 수파리에서 수를 하기 위한 것.\n변증법에서 정에 해당하는 것.\n\n수가 되고 나서 비로소 파가 가능해진다 라고 하면 또 뭔가 걸리는 부분이 있다\n수에서도 자유로운 생각이 가능해야 한다\n\n정반합은 순차적일 필요가 없어야 한다\n\n## efficient, limit\n- development factory in one building.\n\nit is efficient to make something.\ngood to see in one place.\nbut it makes close the other things.\nso close is make less creativity, communication, fusion.\nthen, it makes freeze growth.\n\n- book store management. if the book doesn’t sell many things, need a book container.\nbook containers can make don’t annoying about the rest of the books.\nbut on the other hand, the solution is to prevent make doesn’t sell books.\n\n- what is a good limit?\n\n#### 제한을 둠으로써 새로운 것을 만들어 낼 수 있다\n제한이 틀이 되어 갇히면 안된다\n-- 조르주 페렉의 생애를 보고\n\n#### block vs break\nlimit can make deep and different content.\nmanual is one of limit.\nbut manual can make stiff and limit.\n\n#### 어떤 단어 용어에 대한 설명을 쉽게 한줄로 풀려고 하는 것\n한 주제에 관한 핵심요소를 뽑는 것은\n딱 그정도로만 생각하고 끝내려고 하는 것이 아니고\n그 기준을 토대로 깊게 확장하면 더 넓고 깊게 하나를 꿰뚫을 수 있기를 기대하기 때문이다\n사진의 삼요소를 뽑아놓고 각각에 대해 생각하면 또다른 통찰이 나올 수 있듯이\n\n#### 제한\n틀에 가두는 것이 아니어야 한다\n일관되게 하려는 것이 틀에 맞추는 것이 될 수 있다\n\n#### 제한을 두되 강박을 만들어서는 안된다\n미니멀리즘을 위해 바깥에 내놓지 않고 모두 수납하도록 만드는 방향성은 좋으나\n아이가 있다면 아이가 노는 환경에서 놀고 나서 무조건 다 집어넣게 하는 것은 강제적이고 자연스럽지 못하다\n자연스럽게 노는 공간을 구성하되 어지럽지 않도록 유도가 되게끔 하면 좋겠다(물론 이게 어려운 것이지만)\n\n모든 공간을 하얗게 꾸미고 한 공간만 갈색으로 꾸미면\n신경을 안쓰고 통일감이 없다고 볼 수도 있고\n포인트를 줬다고 볼 수도 있겠다\n두 사람이 사는 집에 한 명은 모두 하얗게 하고 싶어하고 다른 한 사람은 자신의 공간만큼은 갈색으로 하고 싶다고 해서 갈색의 공간이 생기면 갈색의 공간은 불안정한 공간으로 느껴질 수 있겠다. 반대로 좋게 느껴질 수도 있겠지만. 조화를 이루게 하면 좋게 느껴지려나\n\n모든 공간을 미니멀하게 해놓고 한 공간만 짐을 많이 놔두면\n짐을 그 곳에 다 쳐박아 넣은 회피 장소로 보일 수도 있고\n여유 있는 예외 공간으로 보일 수도 있겠다\n\n#balance \n\n#### 제한\n기존의 것을 억지로 틀에 꾸겨넣는게 아니고\n범위를 조절해 전체를 파악할 수 있게 하는 것\n\n내 물건을 모두 담을 수 있는 파우치를 하나 가지고 그 파우치에 들어갈 수 있게끔만 물건을 사서 과도한 물건을 제한하고, 기존의 것을 계속 업그레이드 할 수 있다\n- 나는 파우치의 크기를 작게 잡았다\n\n게임에서 컨셉을 잡아 팀을 만드는 것과도 비슷하다\n\n#### limit\n내가 모든 사람의 인적사항을 알 수 없다\n데이터가 많아지면 한계가 있다.\n회사의 데이터도 넘쳐나게 되면 다 알 수 없다.\n하지만 회사의 리소스 중 필요한 것이 있을 때 확실하게 찾을 수 있어야 한다.\n\n사람은 sns를 한다면 찾고 싶을 때 그 사람의 정보를 찾을 수 있고, 아니면\n흔적이라도 찾을 수 있다\n\n#### 제한이 억압이 되면 그것을 깨부수고 대안을 찾으려 한다\n\n[[Reading#미학 오디세이]]\n\n#### 김영하의 쓰지 않을 것에 대한 노트\n제한을 두지 않기 위해, 상상에 제약을 받지 않기 위해 쓴다고 한다\n <-> [[Standard]]\n\n\n-----------------------------------------------------------------------\n\n## Manual\n변화하기 쉬운 메뉴얼을 만들어서 메뉴얼에 갇히는게 아니라 일에 날개를 달아줘야 한다\n\n장점\n- 짜임새\n- 새로 온 사람이 흐름을 파악할 수 있다\n- 사람이 바뀌어도 똑같은 작업을 할 수도 있다 (이건 말처럼 쉽지 않다)\n- 과거를 바탕으로 그 다음 단계로 이어갈 수 있다.\n\n단점\n- 규칙을 정해서(메뉴얼을 만들어서) 규모 확장 시 대응하는 전략은 많이 실패했다고 한다.\n- 가이드 메뉴얼이 관례 악습 폐습이 될 수 있다\n- 늘어나기만 하고 줄어들지 않는다\n- 족쇄가 된다. 제약이 된다\n\n체계를 만들 때 구구절절 일일이 정하는게 아니라\n시작점을 제시하고 흥미를 돋구어서 파악을 할 수 있게 하면 좋겠다\n\n#### 룰\n룰이 중요한게 아니라 일관성이 중요하다\n\n#### 메뉴얼 vs 장인\n장인의 작품을 누가 만들어도 똑같게 메뉴얼화 한다면 똑같은 결과가 나올까?\n장인의 작품은 메뉴얼화 되어도 그 작업이 고단하기에 높은 가치를 보이는 것일까\n\n#### manual\n>사람을 측정하고 평가하려고 하면 조직의 신뢰가 무너지고 무의미한 성과 주의의\n>조직이 될 수 있다. 제품 데이터를 측정해야 한다. 라는 의견이 있다.\n> - https://murianwind.blogspot.com/2015/01/blog-post_28.html\n\n#### 개발 프로세스가 있어서 개발자가 누구냐에 큰 영향을 받지 않게 할 수 있다?\n개발자는 그럼 누가 와도 상관 없다는 것인가?\n\n#### 정립된 아키텍처를 깨는 것\n아키텍처를 정립하기 까지는 여러 의견에 열려있다가 정립되었다고 생각되면 변화에 소극적이고 폐쇄적이게 된다\n정립된 것을 깨기 위해서는 새로운 규칙이 만들어지고 그 규칙을 지켜야만 하며, 변화에 저항하게 된다\n\n다수가 만족한 정립된 아키텍처가 되면 변화에 소극적이어도 되는 것인가?\n많은 토의와 의견 공유를 통해 정립되었기 때문에 쉽게 바뀌면 안되는 것이 맞는가?\n새로운 논의에는 열려있어서 다시 토의와 의견 공유를 하면 된다. 정립하면서 했던 것을 다시 하면 된다.\n\n결정 하기까지 깐깐하게 확인했다면 결정된 것을 지키는 것이 맞는가\n모두가 ok 한 것을 뒤집기 위해서는 어떤 조건이 필요할까\n\n계속 검증하는 것이 맞을까\n고민을 믿는 것이 맞을까\n\n고민해서 세운 기준을 과학적 근거가 없는한 바꾸지 않는 것은 기준을 일관성 있게 세운 것일까\n\n#### 형식을 갖춤으로써 오는 장점도 있다\n출근시간을 정해놓음으로써 그 사람이 항상 그 시간에 있다는 것을 앎으로써 서로 시간을 맞추는 수고를 덜 수 있다\n\n비대해진 조직은 종종 룰을 정당화한다\n넷플릭스는 어떻게 노 룰을 선언한거지?\n\n룰과 기준은 다른가?\n\n룰은 족쇄가 되고 기준은 좋은 출발점이 되줄까?\n\n검증은 기준을 검증하면 되는가\n검증을 위해서는 룰이 또 필요하게 될텐데\n\n넷플릭스의 노 룰은 진짜 룰을 모두 없앤 것은 아니고,\n룰이 없어도 되는 인재를 만드는 것에 힘을 쓰는 방향으로 가려는 것 같다\n점차적으로 통제를 제거하는 방향으로 간다고 한다\n\n효율적이라는 말은 폭발적인 장점이 없다는 것이 될 수가 있나\n효율은 경직성과 복잡성을 만드나\n\n넷플릭스에서는 회사가 성장하면 조직이 커지고\n조직이 커지면 복잡해지고, 뛰어난 인재들의 비율이 줄어들고,\n그래서 혼돈이 생기고, 혼돈을 피하기 위해 규칙이 생긴다고 본다\n그래서 효율성이 높아진다고 하고, 효율성은 유연성을 떨어뜨린다고 한다\n시장이 급변하면 거기에 맞출 수 없다고 한다\n\n자유도가 높은 산업군이라 그에 맞게 간다\n트렌드가 빨리 바뀌고 끊임없이 배워야 하는 직종이라 얽매는 것보다는 풀어놓는 것이 더 효과적이다\n\n메뉴얼은 이전에 그 일을 하던 사람들의 고생과 고민을 담아놓아 후배들이 그 고민 없이 그 다음을 생각할 수 있게 해주는 도구가 될 수 있다\n\n#### manual\n허술한 메뉴얼로 메뉴얼을 따랐지만 보안에 구멍이 생기는 경우가 있다.\n원칙은 있지만 사람이 지키지 않고 마음대로 생각할 때가 있다.\n\n템플릿이 있으면 다른 프로젝트에 접근할 때 어디에 무엇이 있을지 대충 알고 접근할\n수 있다.\n\n템플릿 밖의 내용을 담아야 할 때 자유도가 떨어질 수 있다\n낡은 템플릿이 될 수 있다\n\n체계를 중심으로 하면 사람이 부품이 되고\n사람을 중심으로 하면 사람에 의존하게 된다\n\n#### 하향식, 상향식\n내부에서 자주 쓰이던 것을 메뉴얼화하면 회사에 전파도 쉽고, 따르기도 쉬울 것 같다\n갑자기 윗선에서 메뉴얼을 만들어서 지켜라고 하면 갑갑해질 것 같다.\n\n#### defeat\n템플릿 사이트가 디자인 패턴을 모아놓은 사이트가 되는 것 같다\n\n디자인 패턴을 굳이 알기 싫어했는데, 템플릿 사이트에 올라와있는 코드들도 그렇게 보일 수 있다\n\n디자인 패턴이 좋긴한데 그걸 외워서 써먹어야한다는 생각에 거부감이 들었는데 구체적인 코드를 다시 쓰려고 한다는 점에서 차이가 있을까\n\n깃헙에도 그런 코드들은 이미 있는 것처럼 템플릿 사이트에 올라온 것들이 너무 많아지면 못 찾는것도 마찬가지다\n\n결국 핵심은 어떻게 필요한걸 얻게하냐인데..\n\n건축가 알렉산더가 건축에서 지금하는 고민이 과거 중세시대에도 있었던 고민이라는걸 깨닫고 다시 고민하는 비효율을 해결하기 위해 패턴을 제시했다고 한다\n\n디자인패턴에 대한 거부감과 내 템플릿의 거리를 어떻게 봐야 할까\n\nvscode를 쓰면 회사의 유산을 쉽게 쓰는 효과가 있겠다\n\n템플릿도 모듈화해서 제공하면 좀 더 편한 마음으로 쓰겠다\n근데 못챶는게 생길 수 있다\n\n세상에는 소수의 사람이 아는 사람들끼리 아는 도구도 있을 것이다\n\n#### 메뉴얼의 한계\n1. 재능이 있어야만 잘 할 수 있는 일이 있습니다\n2. 재능을 확장하기는 어렵습니다(물리적으로)\n3. 재능을 확장하려는 시도로 평범한 사람이 따라할 수 있게 비범한 자가 규칙을 미리 세워둡니다\n4. 결과로 얻어지는 제품은 품질이 매우 낮습니다\n\n제이미 올리버가 분점을 내도 성공하기 어려운 이유\n\n상황을 무시하고 방법론을 무작정 따르게 하면 망한다\n\n규칙서는 새 규칙에 적용할 수 없다\n\n하지만 맥도날드는 메뉴얼만 따라하면 저품질의 같은 제품이 나올 수 있게 하여 품질을 유지하여 성업 중이다\n상황이 변하지 않도록 감자농사 같은 단계부터 관리해서 변화를 최대한 없앤다\n- 조엘 온 소프트웨어\n\n#### 프로세스와 매너리즘\n22년 6월, 김겨울 콘서트를 갔다와서 느낀 것 중 하나인데\n\n리듬 반복 변화\n- 글쓰기를 계속 하다보면 리듬을 찾았다 싶은 때가 오는거 같지만 그 리듬대로 계속하다보면 같은 것을 계속 반복한다는 느낌이 오고, 변화가 필요하다고 생각하게 된다. 리듬을 가지는 건 좋지만 리듬은 과정일 뿐인 것 같다\n\n그리고 23년 2월, 매너리즘에 대해 검색하다가 매너리즘의 정의를 보게 됐는데\n예술 쪽에서 기존의 방식대로 하다보니 창의성이나 새로움 없이 비슷한 것을 계속 만들어내는 상태라고 봤던 것 같다. 그것이 프로세스를 만든 후에 나올 후유증이 될 것 같다고 연상되었다.\n\n1. 작품을 만들다\n2. 작업이 프로세스화 된다\n3. 매너리즘에 빠진다\n4. 새로운 것을 하려한다\n\n보통 이렇게 한번씩 하던것과 다른 뭔가를 하려는 예술가들도 있고\n이 루프에 빠지지 않고 한길만 파는 예술가들도 있다\n\n프로세스화 시키고 나면 그 작업은 지루해지는데\n그래도 그 프로세스도 계속 관리해줘야하는 것이긴 하다\n개발할때는 모든 자동화도 관리대상이다.\n\n근데  다시 또 매너리즘 자체를 검색해보니 하나의 예술 사조가 나온다.\n\n\n## 기타\n\n#### 큰 것에서 작은 것으로 이야기를 진행하려는 것\n처음 봤을 때는 구조적인 생각을 하기 좋은 방식이고 마음에 들었다.\n근데 이렇게 구조를 하나씩 가지게 되면서 나도 기성 세대의 인간이 되간다 생각하니 거부감이 든다\n\n#### 합리적인 제한을 만드려면 어떻게 해야 할까\n게임에서 팀컬러를 맞추는 것은 목표의식이 생기고 달성 시 뿌듯하다.\n근데 소프트웨어 라이브러리를 10개로 제한하면서 더 많아지면 분리하는 방식은 왠지\n작업효율을 떨어뜨릴 것 같다.\n어떻게 하면 전체 구조는 작게 유지하고, 거부감 없는 제한을 만들 수 있을까\n\n#### 고민의 시간을 줄이기 위해 미리 정의해 놓은 조건들이 있다\n\n#### 이전 사람들의 특히 한국 작가들을 열거해놓은 표를 보면\n그 사람을 특정 형식, 특정 사상에 자리해놓는다\n\n하지만 사실 그 자리에 딱 맞는 사람보다 여기저기 있어야 할 사람들이 더 많을 것이다.\n편의를 위해 나눠놓은 것인데,\n\n업무에서는 편의를 위해 정리하는 것이 필요하다\n근데 여러 형식으로 분류가 되고 그 상태를 관리하는 것이 더 현실에 맞고, 그렇게 관리하는 것을 쉽게 할 수 있도록 하면 좋겠다\n\n#### 자유학기제\n고교 수업시간이라는 틀 안에 변화의 자유를 준 것.\n좋다\n\n#### 룰 브레이커\n룰은 깨야하고, 과거의 유산은 습득해야 하는데\n무엇이 룰이고 무엇이 유산인가\n체계(system)\n민주주의도 시스템\n\n가문의 유산을 받지만 정해진 행동을 해야 하면 유산과 룰이 동시에 온다\n\n#### 조절할 수 있는 기준을 세운다\n턱걸이를 5개하고 그게 되면 개수를 늘릴 수 있다\n어떤 물건을 살 때 기준을 세워두면 업그레이드나 새로운 제품 도입 시 고민이 준다.\n\n#### 측정 가능한 지표\n측정 가능한 지표가 꼭 수치가 아니더라도 어떤 것의 단점이 이거여서 이 부분을\n개선한 무엇이 필요하다는 식도 괜찮을 것 같다\n\n#### 정부의 4단계 거리두기 지침은 기준점을 제시해주는 측면에서 구체적인 기준을 제시했지만,\n가게에서 일일이 그 기준을 따르는데에 불편함이 있고, 또 적절하지 않은 과도한 기준으로 느껴지는 사례도 있어서 비판받고 있다.\n위에서 아래로 내려오는 기준점은 좋기 힘든것일까\n\n#### 표준과 전자정부프레임워크\n정부시스템의 표준화를 위해 자바 스프링을 이용한다\n회사에서도 표준을 따르기 위해 스프링을 이용한다\n여기에 인재풀도 많아져서 사람 구하기 쉬워지는 장점까지 따라온다.\n\n표준을 맞추려다가 종속되버린다\n\n많은 개발자들이 전자정부프레임워크를 구식이라고 안좋아한다.\n액티브 x라는 안좋은 것을 남발해서 그런 것도 있다.\n프레임워크가 족쇄가 되어서 원하는 기능을 프레임워크에 맞추려고 애를 써야한다.\n프레임워크 안의 기능을 갖다 쓰고 그것이 성능이 안좋더라도 프레임워크 탓을 하며\n넘어간다.\n\n#### 다이어리 템플릿\n다이소에서 파는 플래너와 다이어리는 모니터보다 작은데 쓰고 싶게 디자인 되어있다.\n노트 프로그램에서도 이런 템플릿을 이용하면 쓰고 싶은 마음이 생길 수 있겠다.\n\n#### 템플릿의 단점 (화면상의 템플릿)\n- 신경 안쓴거 같음\n\t- 그래서 안예뻐보임\n\t- 눈에 익어서 질림\n\n#### 잡음과 형식\n지나친 혼돈은 대중에게 인기가 없다. 우리는 이를 소음, 추함, 형식이 없는 이라고 표현한다\n\n음악은 소리와 침묵이 정돈된 것\n\n> 잡음에서 패턴을 알아채지 못하면 우리는 좌절하고 포기한다\n> 하지만 패턴을 알아채고 난 뒤에는 패턴을 추적하고 패턴이 발생하는 것을 보면서 큰 즐거움을 얻는다.\n> 우리는 이것을 연습이라고 부르며, 우리가 연습을 더 많이 할수록 우리가 하는 일에 대해 생각할 것이 더 적어진다.\n  - 라프 코스터의 재미이론 - 책 재밌음\n#book #standard\n\n\n"},{"headings":[{"value":"북마크"},{"value":"인터넷에서 본 것들에 대한 감상"},{"value":"2025"},{"value":"Bookmark"},{"value":"북마크"},{"value":"북마크"},{"value":"북마크"},{"value":"문서와 북마크"},{"value":"북마크"},{"value":"북마크 유의어"},{"value":"link"},{"value":"영상매체를 보고 난 감상"},{"value":"world war"},{"value":"두오모"},{"value":"바다"},{"value":"델포이 신탁"},{"value":"education"},{"value":"어떤 것을 바꿔야 할지 모르는 벽에 부딪혔을 때"},{"value":"직업에 귀천이 없다"},{"value":"사례 모음집"},{"value":"더 커뮤니티 후기를 보고"},{"value":"허위의식"}],"fields":{"slug":"/article/"},"rawMarkdownBody":"\n#### 북마크\n- [https://slashpage.com/haebom/psychology101](https://slashpage.com/haebom/psychology101)\n- https://neal.fun/internet-artifacts/\n- [https://www.consumer.go.kr/user/ftc/consumer/cnsmrBBS/79/selectInfoRptList.do](https://www.consumer.go.kr/user/ftc/consumer/cnsmrBBS/79/selectInfoRptList.do)\n- https://tech.kakaoenterprise.com/154\n- https://brunch.co.kr/@goodgdg/68\n- https://dokdo2013.tistory.com/m/13?utm_campaign=asb&utm_medium=blog&utm_source=awesome-blogs.petabytes.org\n- https://wiki.webnori.com/display/devbegin/DevBegin\n\n\n\n## 인터넷에서 본 것들에 대한 감상\n\n유튜브 링크만 보면 뭔지 모르니까 제목달린 링크로 적어야겠다\n#### 2025\n\n[적게 일하고 성과 내는 법](https://www.youtube.com/watch?v=OHpYh10gphc)\n- 몰입\n- 시스템 만큼만 운영된다\n- 100명의 팔로워를 먼저 모으고 작업을 만든다 (집중 고객 10명을 모은다)\n- 나의 시급 이하의 작업은 위임한다. 먼저 나의 시급을 측정한다.\n\n[천재들의 노트 습관](https://www.youtube.com/watch?v=KbleIwApqu4)\n- 뉴턴\n\t- 용도에 따라 세 종류의 노트 사용\n\t- 책을 읽고 메모하며 **저자에게 질문을 던지는 노트**\n\t- 문제를 분석하고 가설을 세워 이를 증명하는 노트\n\t- **자신만의 해법을 구체적으로 풀어쓴 노트** - 이건 그냥 책이 되네\n\t- 자신이 얻은 정보에 대해 끝까지 검증한다\n- 아인슈타인\n\t- 대부분의 정보를 영상으로 기억함..\n\t- 머리로 기억한 것을 재해석하여 노트로 기록\n- 에디슨\n\t- 자신이 얻은 정보 모두를 기록한다\n\t- 손에 잡히는 대로 노트 기록하고 이후에 특정 크기의 노트에 정리한다\n\t- 특허에 유리하도록 고려해서 내용을 정리한다\n- 다빈치\n\t- 수첩 크기의 노트를 옷에 달고 다니며 다양한 관심사를 순서 없이 기록\n\t- 떠오르는 개념들을 스케치한 뒤 그 주변에 객관적인 정보와 직접 관찰한 정보 기록\n\t- 이후에 이어서 작업할 수 있도록 과감하게 여백을 남긴다\n\t- 이미 알고 있던 개념 + 새로 알게 된 개념의 연결\n- 정약용\n\t- 수사차록법\n\t- 중요한 문장을 베껴쓰되 자신의 생각을 덧붙인다\n- 뉴턴의 노트법은 기가 막힌다. 정말 좋은 아웃풋이 나올 수 있을 듯. 내가 원하는 방식임\n\n[유튜브 - 노트법](https://www.youtube.com/watch?v=EYJ3Lk28DZE)\n- 하나의 질문을 파기 위해 사이클을 돌리고 공부한다. 결과는 행동\n\t- 공부하고 루틴하고 하는 것이 다 이것을 위한 것\n- 실천을 통해 따르게 한다. 용인술\n- 손으로 노트 쓰고 마지막으로 정리하는걸 컴퓨터로 한다. 요리할 때 재료 준비를 다 해놓고 불에 올리는 것처럼\n\n[유튜브 - 일본노령사회](https://www.youtube.com/watch?v=jplpL75kvlg)\n- 뭔가를 만드는 사람이 되고싶다\n- 내 의견을 원하는 사람이 있으면 좋겠다고 처음은 생각했지만 이건 인정욕구인거 같고 이건 내가 어떻게 할 수 없는 부분이다 내 것이 아니다\n\n[유튜브 - 디자이너 리처드 사퍼](https://www.youtube.com/watch?v=tT4jAvo0slo)\n- 오뚜기 같은 시계\n- 가격에 놀랐지만 갖고 싶다\n![](sappersclock.png)\n\n\n\n\n## Bookmark\n\n- 웹에서 가져온 내용에 대한 태그를 무엇으로 해야할까\n    - webpage? scrap? bookmark? -> article\n\n\n3 X 3\n- inbox read remind\n- inbox -- inbox, pending\n- read -- good(keep), re-read, source\n- remind -- comment, need some situation, subscribe\n\njust want keep for someday find\n- after want view\n    1. timeline in bookmark\n    2. save document and someday want view\n    3. inbox\n- save local? browser? keep note? pocket?\n- 북마크는 아이패드 읽기파일로 저장 -> X\n- 링크 구해서 한번에 읽기파일로 저장 -> X\n- 블로그 subject 분리 -> X\n- 트러블슈팅은 일주일마다 공유 -> X\n- 웹사이트는 킵에 저장 후 mhtml로 변환 -> X\n- 인박스도 원드라이브로? -> X\n- 크롬 모바일 앱으로 관리 -> X\n  - Notion, chrome bookmark --> only chrome bookmark\n\n클립은 북마크의 Inbox 개념이다. 그렇다면 읽고 난 후에는 어떻게 관리할까. 남겨놔야 하면 해당 카테고리에 넣을까\n- 읽고 난 후에 이해한게 있고 이해 못한게 있다\n- 보긴 봤는데 나중에 다시 봐야겠다\n- 코멘트를 단게 있다\n- 나중에 참고가 필요하다\n- 나중에 특정 상황에서 필요하다\n- 다음에 다시 상기시키고 싶다\n- 출처로서 필요하다\n- 계속 보고 싶다\n- awesome post\n\nremind 중요도가 차이가 있다\n- 그냥 보여도 되고 안보여도 되는게 있고\n- 꼭 다시 봤으면 좋겠는 것도 있고\n- 보이면 더 좋겠다 싶은 것도 있다.\n- 다시 보기할 문서들이 있다 - 다시 볼 문서를 어떻게 정하면 좋을지\n\n1. 웹에서 좋은 글을 찾는다\n2. 인박스에 넣는다\n3. 정리한다\n4. 다시 본다\n\n//inbox는 keep에 저장 후 내용을 정리해서 keep에 남긴다\n//북마크로 남아있을 필요는 없다\n\nTop mentioned books on stackoverflow.com\n깨진 사이트들이 너무 많다.\n\n#### 북마크\n정보가 있는 글은 노트에 정리하고\n글로써 좋은 글은 저장하고\n애매한 것은 아카이브에 넣는다\n북마크에 남기는 것은 system, inbox, blog, archive만 남게된다\n\n- md file doesn't import image in file. only can link.\n- I want to separate by tag in md file.\n\n#### 북마크\n북마크를 어떻게 관리하면 좋을까\n크롬에만 해놓기에는 휴대폰으로는 크롬이 안좋아서 접근이 안된다\n\n#### 북마크\n인터넷 사이트로 계속 들어가서 이용해야 하는 사이트가 있고,\n자료로서 보관할 수 있는 사이트가 있다.\n문서파일을 좀 더 자주 들여다 보기 위해서는 자료로 보관되는 북마크는 문서파일에 넣고, 문서파일 쪽을 쉽게 볼 수 있도록 해야겠다\n\n툴 레퍼런스가 있는 사이트도 따로 있다\n\n#### 문서와 북마크\n문서는 공유하면 안되는 것도 있다(학교, 회사자료)\n그러면 노트에 넣으면 공개되지 않도록 관리해야 한다\n사진 중에도 출처를 모르는 사진은 함부로 쓸 수 없다\n\n노트에 담아서 검색을 한 곳에 하고 싶다\n\n#### 북마크\n구글 드라이브\n북마크\n사진\n- 이 세개를 노션, 원노트에 모은다?\n노트\n\n검색에 걸려야하고 한번씩 들여다보고 리마인드 되야한다\n\n검색은 일원화가 되었고, albert에서 파일검색과 북마크 검색이 된다\n\n카테고리화가 필요한데\n북마크에 여러 폴더 두는것보다 노션에서 카테고리를 입력해서 정리하는게 더 보는데\n좋을까?\n\n웬만한 자료는 다 인터넷에서 얻으므로 인터넷 자료를 관리하는 것은 굉장히 중요하다\n\n페이지가 날라가서 못보는 일을 없애야하고\n\n북마크는 링크만 가지고 있어서 가볍지만\n못보게 되는 페이지가 있다\n\n못보게 되는 페이지를 보는 방법은 이전 링크 아카이브한 곳에서 찾거나\n포켓, 노션에 저장하거나,\n문서화 하는 방법 등이 있는데\n\n포켓에 저장하면 검색할 때 포함 시킬 수 있을까?\n\n- [ ] 막힌 사이트 포켓에서 확인할 수 있는지 확인\n    - 포켓에서 어떤건 링크로 연결되고 어떤건 포켓 안에서 볼 수 있다. 뭐가 다르지\n\n읽은 글 중에는\n아 이런게 있구나 싶은게있고\n영감을 주는게 있고\n나중에 필요할때 읽어보고싶은게 있고\n두고두고 보고싶은게 있다\n\n#### 북마크 유의어\n클립\n스크랩\n\n#### link\n이전의 글들은 사라진 글들이 많다. 블로그 호스팅 서비스가 사라지기도 할 것이고,\n관리를 안해서 사라질 수도 있겠다.\ngithub pages를 쓰고 있지만 백업으로 하나 더 구축해놔야 하려나...\n직접 구축하는게 제일 불안정할 것이고\n클라우드에 스태틱으로 올려놓는 방법이 있을 것이고,\ngithub pages도 있다.\n지금 현재로서는 github이 충분히 안정적인데...\n\n## 영상매체를 보고 난 감상\n\n#### world war\n1차 세계 대전 이후 패전국가에게 배상금을 물리게 하는 처벌을 내렸는데\n돈을 낼 수 없어서 그 나라의 기계 등 가치 있는 것들을 가져가게 되었고\n그럼에도 돈을 내야 하는데 기계들을 다 가져가서 생산도 할 수 없고\n돈을 벌 수가 없어서 화폐를 찍어내게 되고, 인플레이션이 오게 된다\n그렇게 살기 힘들어진 독일은 분노가 폭발해 전쟁을 일으키게 된다\n처벌 이후 회생을 가능하게 해야 하는데 길이 보이지 않은 독일은\n오히려 큰 반동이 생기게 되었다.\n처벌의 의미가 없어지게 된다\n이를 케인즈는 '고의로 빈곤하게 만든다면 빠른 시기에 복수를 할 것이다' 라고 경고를 했다\n\n#### 두오모\n두오모 등 피렌체의 건물은 공모를 통해 건축이 되었다\n공모의 주최측인 위원회는 건물을 위해 만들어지고 건물을 위해 일했다\n그래서 공모에 당선되어도 도움을 계속 주고 잘 만들어지도록 이끌었다\n협회의 목적은 협회안에서 권력을 누리는게 아니라 협회 생성 목적에\n잘 맞도록 일하는 것이다\n\n#### 바다\n20세기 이전의 문학 작품들을 보면 바다는 공포의 대상이었다고 한다\n그렇다면 그동안 이런 지배적인 생각이 있었는데\n관광산업이 발달하면서 바다를 아름답게 보기 시작했다는 것이다\n지배적인 생각이 깨진 것이다\n지배적인 생각을 바꾼 원인 중 하나는 바다에 대한 이미지를 바꾼 것인데, 근대에 이르러 이미지가 중요해져서 이미지에 집중을 해서 이미지를 바꿨더니 생각이 바뀌게 되었다\n물론 이미지 뿐만 아니라 바다에 대한 정보도 많이 추가가 되고,\n바다를 이용해 무역 및 이동을 계속 하면서\n이용을 해야하는 수단으로 계속 사용되어 지다보니 자연스럽게 변화한 것도 영향이 있을 것이다\n지배적인 생각이라도 변할 수 있다\n그 변화의 계기는\n지식이 생기는 것\n이미지가 변화하는 것\n가까이 두는 것\n이용하는 것\n비판적 사고.\n안좋은 이미지를 갖고 있는 것이 있다면 그것에 대한 지식을 갖고, 경험을 갖다 보면\n바뀔 수도 있는 것이다\n\n#### 델포이 신탁\n신탁은 바로 해석할 수 없는 애매한 결과로 나왔다고 한다\n그래서 신탁을 받고 해석을 해야 하는데 이를 정치가가 원하는 대로 해석 할 여지가 있다\n근데 오히려 그 전에\n신탁 자체를 정치가가 미리 정해놓고\n신탁을 받고 그것을 해석한다면 정치가가 원하는대로 될 것이다\n신탁이 애매한 결과로 나온다는 것 자체가 정치가들의 기술이 아니었을까\n'(1)신탁 -> (2)해석 -> (3)결정'이 아니라\n'(0)결정 -> (1)신탁 -> (2)해석(설득)' 이었을 수 있다\n1을 이용할 수 있다면 0이 만들어질 수 있다\n\n#### education\n독일에서 10살때 김나지움을 갈지 레알슐레를 갈지 정해지고 그 길을 따라 대학을 갈지도 정해지는데 계급을 나누기 위해서가 아니라\n노동자를 우대하는 환경 속에서 기술을 배울 사람은 좀 더 전문적이 될 수 있고\n공부를 더 하고 싶은 사람이 계속 공부해나가는 코스로 가도록 만들어진 구조이다\n물론 10살때 결정된 것이 미래를 결정한다는 부분이 문제점으로 인식이 되며, 독일에서는 원래 변경이 불가능했던 것을 변경 가능한 길을 만드는 것으로 변화하고 있다\n\n노동자를 우대하는 환경이 있기에 레알슐레를 가는 것이 김나지움을 가지 못해서 가는 것이 아니라 배우고 싶은 것을 찾아가는 것으로 보여진다\n\n#### 어떤 것을 바꿔야 할지 모르는 벽에 부딪혔을 때\n표창원이 수사를 맡은 후 미제사건 제조기라는 오명을 썼고 그것에 대해 누구도 개선할 방법이나 개선해야되는 부분을 말해줄 수 없는 상황이었으나, 그는 영국에 유학을 갔고, 자신이 발전할 수 있는 부분을 찾아서 배워서 왔다. 같은 영역에 다른 사람들이 어떻게하는지 알 수 있었을 것이고, 새로운 입력값을 받을 수 있는 환경에 들어가서 효과를 잘 보신 것 같다.\n\n#### 직업에 귀천이 없다\n히로세 스즈가 욕을 엄청 먹었다고 하는 스탭에 대한 이야기가 예전에 봤을 때는 와 어떻게 저런 말을 하지 라고 생각 했는데 어제 다시 그 얘기를 보니 영 틀린 말은 아니잖아? 라고 생각하게 되버렸다.\n\n음향팀 스탭이 붐마이크를 들고 자신에게 갖다 대는 일을 하는 것을 보고 '저 사람은 왜 저런 일을 하고 있는 걸까? 저런 것을 하기 위해 태어난 것은 아닐텐데' 라는 말이었는데\n\n나도 일용직 노동자나 생산직, 주부들을 보고 왜 좀 더 자기가 원하는 일을 하지 않고 저렇게 사는 걸까 라고 생각 했다. 공부를 하고 자기의 일을 더 발전시킬 수 있는 직업만이 가치 있다고 생각한 것인데 어떤 일이든 그 사람에 상황에 따라 그 일을 하는게 그저 사회에 적응하기 위해 억지로 하는 일이 아니라 소중한 것를 지키기 위해 그 일을 하는 것일 수 있고 더군다가 촬영스탭의 경우에는 붐마이크를 드는 일은 누군가는 해야 하는 일임과 동시에 음향팀의 스탭이 거쳐가는 작업이지 그것을 위해 음향팀을 한 것은 아니기에 그런 일도 하는 스탭을 불쌍하게 볼 일은 아닌 것이다. 물론 붐마이크만 들고 다니는 직업이 있다고 하더라도 그것이 불쌍하게 볼 일은 아니다. 생존을 위해, 꿈을 위해, 누군가를 위해 일을 한다는 것은 무엇을 하느냐에 상관 없이, 남이 참견할 수 없는 가치 있는 일이다. 하지만 내 친구가 아무 목적 없이 일용직 노동자를 하고 있으면, 아니 그래도 그것은 괜찮다 청소부를 한다고 하면? 유퀴즈에 나온 20대 청소업체를 하는 사람을 보고 좀 더 공부를 해서 개발자를 하면 좋을텐데 라고 생각 했었다. 직업에는 귀천이 없다고 한다. 멋지다고 한다. 그에게 가족이 있어 하루 하루 살아가기 급급하다면 그에게는 공부할 여유가 없고 현재 직업에 충실한 것이 멋진 일이다.\n\n직업에 귀천이 없다는 것이 항상 맞는 말은 아닌 것 같다\n근데 그렇다고 천한 직업이 있는 것은 아니다\n근데 또 친구가 청소일을 한다고 하면 말릴 것 같다...\n\n좋아하는 것을 직업으로 삼는 것에 감사함을 느끼게 된다\n\n훙미, 적성이 모두 달라 개발자가 되고 싶지 않은 사람도 많을거다\n단순 노동보다는 발전 가능한 일이 더 가치 있다고 하기에는 모든 일이 그 자체로 가치가 있다\n누군가는 청소를 해야 하고 그 청소를 하는 것은 쓸데없는 일이 아니고 노동력을 들이는 일이기 때문에\n\n#### 사례 모음집\n이동진 평론가가 영화 82년생 김지영을 '영화의 안과 밖을 폭넓은 공감으로 연결하는\n전형적 사례모음집' 이라는 평론을 남겼다.\n내가 모으는 정보들이 단순히 전형적인 사례 모음집이 아니라 퀄리티 있는 결과물로\n발전하려면 어떻게 하면 될까\n- 단순 사례 모음은 나무위키에 잘 되있다.\n#movie\n\n#### 더 커뮤니티 후기를 보고\n인생에 정답은 없다. 본인이 살아온 삶대로 생각한대로 행동하면 되는거고 그게 그 사람의 성격이다\n매력은 개성에서 나오는 것 같다\n\n#### 허위의식\n'사회가 만든 이미지가 잘못됐기 때문에 사람들이 무의식으로 쓰는 이미지가 잘못됐다' 라는 건 사진 속에 있는 동양인의 스테레오 타입을 보고 서양인은 무의식으로 사용하는 것인데 무의식을 지배한 기업이나 미디어가 잘못됐다는 연구가 나온 것을 보고 사람들이 그것에 공감해서 더 그렇게 느낄 수 있는데 정말 나쁜 것인가?\n\n매트릭스에서 통안에서 행복감을 강제로 느끼게 하는 것을 탈출시키는 모피어스는 허위의식에서 탈출시키려 하는 것이다. 멋진신세계에서의 행복도 허위의식이다. \n\n그러나 허위의식은 무엇인가 노예들이 자신의 상황에 합리화하고 다른 노예보다 조금 더 나은 상황에 있다면 그것에 만족하는 것은 허위의식인가 돈이 적은데 행복감을 느끼는 사람은 돈을 많이 가진 사람에게는 허위의식으로 보일 수 있는 것인가 행복감을 느끼는 자체에 만족하면 안되겠지만 어떤게 진짜 가치 있는 것인지는 누구도 결정해서는 안된다. 허위의식 속에서의 행복은 그것을 생각하는 지금 나에게는 거짓가치가 맞지만 나중에 매트릭스처럼 통 속에서 행복을 느끼는 중이라면 그것을 거짓이라고 말할 수 있을까\n\n고대 그리스 신화에 태초에 모두가 악한 감정 없이 살다가 판도라의 상자가 열린 뒤로 이렇게 복잡한 세상이 됐다고 하는 얘기가 있는데 판도라 상자가 열리기 전의 세상이 우리가 미래에 갖고 싶은 세상인가? 꼭 그렇지만도 않을 것이다\n\n죽을 때까지 통 속에서 원하는 것만 하며 사는 것처럼 느껴지도록 할 수 있다면 통 속의 세상이 진짜 세상이 되는 것이지 않은가 통 속의 세상을 거부할 수 있을까? 거부해야 하는 이유는? 통은 누가 유지하는가? 그것도 사람이라면그 사람에게 통제당한다고 생각이 들기 때문에 거부감이 들 수 있다. 그것이 매트릭스처럼 로봇이라면? 로봇이 스스로 유지할 수 있다면? 로봇이 인간의 종족 유지를 위해 계속 번식을 하도록 한다면? 그러면 그 때의 로봇과 사람은 무엇으로 구분하지?\n\n매트릭스는 거부할 수 있는 사회인가?\n"},{"headings":[{"value":"History"},{"value":"Software History"},{"value":"history of IT"},{"value":"Historical Company"},{"value":"desktop os history"},{"value":"history of array"},{"value":"History of IT"},{"value":"Devops came from agile 2009"},{"value":"history of manual"},{"value":"Behind story"},{"value":"footprint"},{"value":"shannon claude - information theory"},{"value":"짐 켈러"},{"value":"유닉스의 탄생이라는 책이 나온 것을 보고 유닉스의 역사를 알면 재밌겠다 싶었는데"},{"value":"과거에 빚댄 미래"},{"value":"history of it"},{"value":"story, history"},{"value":"사진 발명 이후의 회화"}],"fields":{"slug":"/history/"},"rawMarkdownBody":"\n## History\n\n[[Network#WWW]]\n[[About_Development#story, history]]\n[[Reading#sapiens]]\n[[Exploration#History, Background, Trade-off, Revision, Behind_story]]\n\n[[file:~/Documents/shannon1948.pdf]]\n\n## Software History\nc developed for system control make easy in 1972\nc++ developed for c language make fit to object orient programming in 1980\nc++ suggest object, class, inheritance, polymorphism, Abstraction, Encapsulation\n\npython in 1990\nJava in 1995\n\n- hardware\n- software\n\n- 불 대수 - 0과 1로 논리 표현 가능\n- 섀넌 - 0과 1로 회로 표현 가능\n- 튜링 - 0과 1로 수학적 풀이 가능\n\n#### history of IT\n- transistor 1947\n    - cpu made by texas Instruments(1958), intel(1971)\n- programming languages assembly(1951) C(1972)\n- OS GM(1956) multics, unix(1969)\n- internel ARPANET 1963\n - data communication\n - information theory\n - tcp/ip 1982 tcp(1974)\n - dns 1983\n- www 1990\n - http 1993 hypertext(1989)\n- software engineering\n\n#### Historical Company\n- Bell, GM, Texas, ARPANET, CERN, IBM, MIT\n\n#### desktop os history\n- mac windows linux\n- mac based nec, xerox\n - gui, mouse came from xerox\n- xerox labs (paloalto r&d) 1970~\n - mouse, gui, ethernet, What you see is what you get, OOP\n- at&t (bell labs)\n - transistor, unix, c, c++\n- turing, neumann, dennis ritchie\n\n#### history of array\n- array in assembly\n- memory\n - data, bss -> global variable, bss is not initialize variable\n - stack -> logical variable\n- data make many at once\n\n#### History of IT\nmechanical machine -> computer -> program -> os -> programming language -> algorithm -> software development\n\t* for hard work to make easy and automatically\n\nlogical decision TRUE, FALSE -> 0, 1 -> Data can make to computer -> Information\n\n#### Devops came from agile 2009\n1993 kent beck developed with xp in Chrysler\n2001 agile summit\n\n#### history of manual\npeople want to make something to compatible.\nconvention, protocol.\nif you don't want to share data. you don't have to make manual?\nif you want to quick find something. manual can make it, only myself, though.\n\nhow to know manual is exist or not?\nsomebody who already know their industry is good to know.\n\n## Behind story\n\n## footprint\n- 사이버네틱스 이론 노버트 위너\n- 조지프 릭라이더\n- 테드 넬슨, 안드리스 반 담(하이퍼텍스트)\n- 더글라스 엥겔바트(텍스트 편집 시스템, 마우스)\n- 밥 테일러, 앨런 케이\n- 버니바 부시, 클라우드 섀넌\n\n#### shannon claude - information theory\n- 통신을 위한 정보를 가공, 정량화하는 작업 (압축, 필터)\n- automata\n    - 입력값에 의존해 출력값을 계산하는 기계\n    - 컴퓨터가 어떤 문제를 풀 수 있는지 연구하는 이론\n\n#### 짐 켈러\namd에서 cpu 아키텍처 설계\n멀티코어의 시대를 열었다고 한다\n인텔이 10GHz를 도전하는 동안 amd에서 멀티코어로 방향을 전환한 사람이라고 함\n\n[[Software#Historical Company]]\n\n#### 유닉스의 탄생이라는 책이 나온 것을 보고 유닉스의 역사를 알면 재밌겠다 싶었는데\n유닉스 뿐만 아니라 지금 영향을 주는 기술들의 역사를 찾아보고 싶은 마음이\n되살아났다.\n예전에 nacyot님의 글을 보고 통신이론(정보이론)의 발달 과정을 알고 싶은 것의\n연장선상으로 하이퍼미디어 등등을 찾고 싶다.\ncpu나 programming 언어는 대충 찾아봤었는데 정보이론은 완전 생소하다.\nms dos와 맥킨토시가 xerox라는 회사의 제품을 기반으로 만들어졌다는 것도 신기했다.\nxerox라는 회사는 마우스와 oop등을 개발했다는데 상업적인 이득은 얻지 못했다고 한다.\napple은 가져온 것을 수익화하는 것에 성공했다.\n\n#### 과거에 빚댄 미래\n과거의 사례를 가져와서 현재의 상황, 또는 미래 일어날 것 같은 일을 은유하는 일이\n있다. 이는 현재에 경종을 울리는 통찰을 준다.\n과거의 사례가 항상 미래에 적용되는 것이 아니고, 사람들은 상황에 맞춰서 적응해\n나가지만, 이 통찰은 굉장히 울림이 있다.\n1984, 멋진 신세계, 과거 정부의 검열 사례 등\n현재의 검열과 과거의 검열이 다른 상황이지만, 현재의 상황을 돌아보게 된다,\n하지만 현재의 상황에 맞게 또 다른 이유와 합리화가 이루어지긴 한다.\n\n#### history of it\nWord\n- imprative\n- proponent\n- percolate\n- notion\n- intent\n- precisely\n- consist\n- precise\n- primitive\n\nKeyword\n- composabliity\n- data race\n- type theory\n- russell's paradox\n- isomorphism\n- morhisms, objects\n\nCollection of individual computer make to see one computer.\nconcurrently\nfail independent\n\nstorage - CAP\ncomputation - Map Reduce\nMessaging\nstablity - distribute system.\n\nabstraction, composition, identity\n\nfirst-order logic\n\nthe chomsky Hierarchy\n\n하드웨어 컴퓨터를 만들어낸 아이디어\n- 찰스 배비지: 19세기 초 계산 기계 제작\n    - 폰 노이만: CPU - OS, CPU에 폰노이만 구조 제시하여 컴퓨터 효율 증가\n        - OS - Multics - Unix\n    - 천공카드 - Assembly(제럴드 와인버그) - C(켄트 백, 데니스 리치, 커닝햄)\n- 알론조 처치\n- 튜링: 불 대수를 이용해 컴퓨터가 논리 연산을 할 수 있다는 것을 발견\n    - 컴퓨터 알고리즘, 컴퓨터 역할 고도화\n\n정보 이론 논리구조 -> 0,1 을 정보로 변환시킨 아이디어\n- 조지 불: True와 False로 논리 구조 구현 가능하다.\n- 버니바 부시: 인터넷, 하이퍼텍스트 개념 제시\n- 클로드 섀넌: 디지털회로 창시. 통신의 수학적 이론, 정보통신 이론\n- 팀 버너스 리: WWW, HTTP\n\n- 자료형: B에는 자료형이 없었다고 한다. - C에서 추가됨\n- 문자\n- ASCII (1963)\n- Array\n    - 폰 노이만 - 머지솔트에 사용\n    - FORTRAN에도 사용\n\nAnalog -> Digital\nElectronic\nComputing -> Information communication\nMachine -> Computer\nPhone -> Internet\n\nICT 관련 분야\n- 컴퓨터 아키텍처\n- 정보\n- 통신\n- 데이터 구조\n- 네트워크\n- 이산수학\n- 수리논리학\n- 오토마타\n\n#### story, history\n소프트웨어에는 스토리가 있다\n처음 만들게된 계기부터 요구사항에 따른 새로운 기능과 기존 기능의 변화 등\n이런 스토리를 책으로 읽고 싶다\n\n\n#### 사진 발명 이후의 회화\n사진이 잘하는것을 하지 않고  \n그림만 표현할 수 있는것을 함  \n  \n세잔의 정물화  \n- 한 작품에 시점의 변화  \n  \n큐비즘의 시작  \n- 피카소와 브라크 1907년 만남  \n- 회화의 규칙을 바꾸자  \n- 현실에 있는 것을 그대로 표현하지 말자  \n- 분석적 큐비즘  \n- 3차원의 입체를 2차원의 컨버스에 표현한다  \n- 현실을 재현하는 데 그치지않고 회화만이 할 수 있는것을 하자  \n- 사진은 1830년쯤 발명됨  \n- 큐브의 모양으로 표현한다고 해서 큐비즘  \n  \n1900년대 초 시작  \n10년대 한걸음 더  \n- 무엇을 그렸는지 알 수 없었던 적도.  \n- 더 잘 표현하기 위해 애씀  \n- 종합적 큐비즘  \n- 사용하는 색을 늘리고 물감 이외의 것도 사용. 다양한 것을 이용. 종합적  \n- 색채를 자제하긴 했음  \n  \n동시대 다른 아티스트  \n로버트 들로네와 소니아 들로네  \n오르빗 큐비즘  \n색채를 다양하게 사용  \n  \n라 루쉐 la ruche  \n샤갈  \n- 색 음영 준게 예술적이다  \n  \n1차세계대전  \n  \n르코르뷔지에 - 퓌리즘  \n큐비즘은 복잡  \n기능성에 집중  \n구조를 철저하게 계산"},{"headings":[{"value":"2025"},{"value":"~2025"},{"value":"정보"},{"value":"덴마크 회색 코끼리처럼 공동체가 공유하는 정보가 있다"},{"value":"본질"},{"value":"정보의 바다"},{"value":"홍보"},{"value":"공적 네트워크 이용"},{"value":"people want to know how the world change is."},{"value":"이통기국은 이상이 현실 속에 존재함을 의미한다."},{"value":"모든 진정한 이론은 오직 구체적인 현실속에서만 명료화되고 발전되어야 한다"},{"value":"개인의 입장에서는 투자 수익률보다는 순자산 증가라는 관점에서 투자에 접근할 필요가 있다."},{"value":"개미의 80%는 일을 하고 20%는 위기에 대응한다고 한다"},{"value":"20세기 이전은 천재가 시대를 바꿨다면 이후는 통합의 시대가 될 것이다"},{"value":"평론"},{"value":"About write to a paper"},{"value":"단편적인 사실들만 알고있는 것은 아무런 힘을 발휘하지 못한다."},{"value":"과학자들의 발견은 대개 은유적 착상으로부터 시작된다."},{"value":"인간이 이 세상에서 귀하다고 하는 것은 정성 때문이니, 전혀 속임이 있어서는"},{"value":"우리는 중국측에 코로나로 인해 세계에 끼친 경제적인 손실에 대해 보상할것인가에"},{"value":"“Amateurs practice until they make the shot. Pros practice until they can’t miss.”"},{"value":"무질서한 원숭이(Chaos Monkey)"},{"value":"저에게 있어서, 속도와 메모리는 최첨단 기술이나 이식성 보다 중요합니다."},{"value":"보이지 않는 손"},{"value":"간디 7가지 악덕"},{"value":"다람쥐는 국립국어원에서 지정한 마우스의 순화어다."},{"value":"좋은 판단(euboulia)은 다양한 의견의 수렴에서 비롯되고, 도시의 안전은 일반적 원칙과 특수한 경우의 균형에서 비롯된다는 것이다."},{"value":"신이 만든 주어진 세계에서 인간이 만들어가는 세계가 되고"},{"value":"인간의 평균 지적 수준이 괴테와 실러에 이를 것이라는 유토피아"},{"value":"메타포"},{"value":"less is more"},{"value":"less is bore"},{"value":"전쟁"},{"value":"Law"},{"value":"법원 판례집 보는법 - https://mglaw.scourt.go.kr/wsjs/panre/sjs050.do"},{"value":"저작권"},{"value":"개인정보보호법"},{"value":"민사 형사"},{"value":"손해"},{"value":"인터페이스 종류"},{"value":"IoT"},{"value":"protocol"},{"value":"Item"},{"value":"Iot 적용 가능 분야"},{"value":"개발자 프리 사이트"},{"value":"역사적 사료의 가치가 있으면 나라에서 수집품으로 인정해준다"},{"value":"멱등성: 항상 같은 결과를 출력하는 성질"},{"value":"스타트업 업체수"},{"value":"1차 세계대전"},{"value":"iphone wifi"},{"value":"축구 승점 3점 1점 이유"},{"value":"개발자 프리 뛰는법"},{"value":"정량적 데이터는 의사전달이 명확한데 정성적 데이터는 기억에 남는다"},{"value":"데스크탑 cpu 교체 시"},{"value":"써멀 도포"},{"value":"중고차 유튜브에 정보 많다"},{"value":"지역별 시장통합 배달 서비스가 있다"},{"value":"바퀴벌레 맥스포스 셀렉트갤"},{"value":"티맵 지하철 혼잡도 알려줌"},{"value":"행복주택 지원시기 중간에 경쟁률 알려준다"},{"value":"보일러의 예약기능은 꺼지는 시간이 아니라 켜질 시간에 대한 예약이었다!"},{"value":"컴퓨터는 함수가 무한루프에 빠지는지 여부를 판단할 수 없다고 한다 (튜링)"},{"value":"핍진성 - 그럴듯함"},{"value":"한국십진분류표"},{"value":"스타트업"},{"value":"로비스트"},{"value":"과거에는 무조건 범행에 동기가 있다고 봤는데 사이코패스는 동기 없이 범행을 저지른다."},{"value":"하루키 새벽에 소설 쓰는 것"},{"value":"인터넷에서 찾을 수 없는 정보를"},{"value":"넷플릭스는 해시태그를 다는 직업이 있다고 한다"},{"value":"소셜네트워크 장점"},{"value":"유퀴즈"},{"value":"마츠무라 야스오, 만다라트 실천법"},{"value":"FLoC"},{"value":"세계경제포럼 - 직장인이 가져야 할 역량 순위"},{"value":"디지털 컨텐츠 소장"},{"value":"앱스토어"},{"value":"구글 크롤러, SEO"},{"value":"데이터 3법"},{"value":"소설가 1년동안 해당 분야 연구"},{"value":"억울한 피의자인지 기려내기 위해 증거를 많이 모으는 검사"},{"value":"시험x"},{"value":"Top team has people who finisher of top class"},{"value":"교도소에서는 교화 작업을 어떻게 하고 있을까"},{"value":"대학수업"},{"value":"법률가는 입법부가 만든 법 중에 납득이 안되더라도 그 법을 받아들이나?"},{"value":"컨퍼런스 유튜브"},{"value":"포스텔의 법칙"}],"fields":{"slug":"/information/"},"rawMarkdownBody":"\n## 2025\n\n\n## ~2025\n\n## 정보\n\n#### 덴마크 회색 코끼리처럼 공동체가 공유하는 정보가 있다\n#information\n\n#### 본질\n쏟아지는 데이터의 대부분은 소음이다.\n본질에 집중하면 필요한 것을 골라낼 수 있다\n\n#### 정보의 바다\n인터넷에 올라온 정보는 알려지지 않으면 닿을 수 없다\n\n주식에서 숨겨진 유망주는 없다?\n숨겨진 맛집은 없나?\n아무도 아직 안 한 아이디어는 없나?\n뭔가를 발명하려고 생각하면 누군가 이미 만들어놨다\n새로운 과학적 발견이라고 생각하면 누군가 이미 생각했던 것이다\n\n가치있는 것은 알리지 않아도 발견될까?\n많은 사람들이 필요로 하면 내가 알리지 않아도 찾으려고 하긴 할거다\n근데 어느 시점에 생각나게 하는 트리거가 있어야 찾는다\n그렇지 않으면 아주 미미하게 찾아진다\n트리거가 있더라도 잘 발견되게 모양을 갖추고 있어야 한다\n그래서 seo를 사람들이 신경 많이 쓰고 구글에서도 관련 태그를 추가해주는 옵션이\n있긴 있다(메타데이터)\n근데 그것으로는 부족한 것 같다\n특정 시점을 만드는 것도 어불성설이고\n사람들이 자주 떠올리는 것만 노리고 하는 것도 별로고\n커뮤니티에 글을 올리는 것(좋아하는 사람들에게 내 새로운 시도를 알리는 것)도 별로고\n근데 이 방법들이 아니면 우주에 떠있는 먼지에 불과해지겠지\n\n내 정보를 알리는 것 뿐 아니라 정보를 얻을 때도\n정리가 돼있지 않으면 아는 사람들만 아는 정보들은 놓치기 쉽다\n논문은 리뷰라는 프로세스가 있고\n인터넷에는 가끔씩 정리해주는 사람들이 있지만 항상 있지는 않다\n\n#### 홍보\n사람들은 입소문 난 것은 보고싶어 하는데 홍보하려고 하는 것은 안보려고 한다\n남들이 하는 건 나도 놓치지 않고 싶어하는 것과 새로운 것을 원하는 마음이 있지만\n작위적인 것은 싫어한다\n\n#### 공적 네트워크 이용\n40? 50대 이후부터는 그동안 받아왔던 인풋들을 나눠줄 수 있는 삶이 되면 좋겠다.\n\n> '고용’이란 개념은 사람 A가 자신의 자원(돈)을 이용해 사람 B로 하여금 그의 에너지를 A의 목표를 성취하는 데에 쓰도록 하는 것이다. 오프라 윈프리가 책 한 권을 공적인 자리에서 소개를 한다면, 그것은 오프라 자신의 인적 네트워크와 공적 신뢰도를 이용해 그 책을 수 천 명의 사람에게 알려준다는 목표를 성취하고자 함이다.\n> https://hahnryu.com/2017/05/22/elon/\n\n광고를 받아서 그것을 홍보해주는 것도 가치가 있지만, 나의 행동이 영향력이 생긴다면, 내가 그렇게 영향력이 생기기까지 받아왔던 도움을 갚는데에 쓰는 것이 더 가치 있는 일인 것 같다.\n\n열심히 달려서 원하는 것을 얻고 난 후에는 그것을 얻기 위해 받아왔던 도움을 갚으면 멋있을 것 같다.\n감사한 것들을 잘 적어놓자.\n\n그리고 그렇다면 그렇게 갚아나가는 것이 유효할 수 있도록 영향력을 키우는 것이 40대까지의 목표로 삼을 수 있겠다.\n\n도움을 준다는 것이 꼭 가진자만 할 수 있는 것이 아니니까 뭔가를 달성한 후에 돕겠다는 생각은 하지말고 꾸준히 도우는 삶을 살지만, 중년 이후의 삶을 재미없는 삶으로 보내지 않기 위한 방법을 찾는 중에 나온 좋은 방법인 것 같다.\n\n중년 이후에도 계속 배우고 습득해야하겠지만, 지금은 확실히 배우기에 힘을 대부분 쏟는다면, 이후에는 나누는 것에 힘을 쏟는 것이다.\n\n그러고보니 강연을 하는 교수님들은 이 작업을 이미 하고 있는 것 같다.\n\n#### people want to know how the world change is.\nand so generally watch the TV to know what’s different in the world.\nnowadays, TV has reduced usage.\ninstead, youtube has grown.\nit is through to personality.\n\npeople also have a personal focus.\nTV doesn’t fill this.\n\nbut to focus only on personal interest is no good. need variety.\n\ndon’t stuck in the personal interest. be variety.\nbut personal interest is good.\n\n\n\n## 이통기국은 이상이 현실 속에 존재함을 의미한다.\n> 현실이 어떤 모습을 갖추느냐에 따라 이상이 온전히 실현되기도 하고 전혀 실현되지 않기도 한다.\n컵의 모양에 따라 물의 모양이 달라지는 것과 같다.\n따라서 중요한 것은 현실을 변화시켜 이상이 온전하게 드러나도록 하는 것이다.\"\n>> http://naver.me/IgqjJ3Xc\n\n## 모든 진정한 이론은 오직 구체적인 현실속에서만 명료화되고 발전되어야 한다\n> 칼 마르크스\n\n## 개인의 입장에서는 투자 수익률보다는 순자산 증가라는 관점에서 투자에 접근할 필요가 있다.\n> 20% 정도 손실이 났다고 주식 시장을 저주할 필요도 없고, 20% 정도 수익이 생겼다고 인생이 역전되지도 않으니까.\n>> https://141.nacyot.com/posts/category/investment/\n\n## 개미의 80%는 일을 하고 20%는 위기에 대응한다고 한다\n팀도 이렇게 업무 집중 인원과 전체 조망 인원을 가져감으로써 혼잡의 문제를 해결할\n수 있지 않을까\n\n외국의 PM이 이런 역할이라 할 수 있겠다.\n한국의 프로젝트 매니저는 상하관계가 있어서 이런 거라 생각 못했는데 외국은\n수평적이고 그냥 하나의 직업적 차이일 뿐이라고 한다\n\n풍훤과 제갈량 이야기\n- 풍훤은 평시에 도움이 없다가 위기상황에만 능력을 발휘해 끝이 좋았고\n  제갈량은 평시에도 리더여서 끝을 다 마치지 못했다\n\n> 새로운 시대의 권력, 마이크로 파워 - 천훙안, 미래의 창\n\n[[Teamwork]]\n\n## 20세기 이전은 천재가 시대를 바꿨다면 이후는 통합의 시대가 될 것이다\n\n## 평론\n- 좋음은 느껴지지만 왜 좋은지 얘기하기 힘든경우가 있는데, 왜 좋은지 얘기해주는 것\n- 상징 -> 해석 -> 담론 (https://blog.naver.com/a_lord/221669730994)\n- check: 평론의 과도한 의미부여\n\n## About write to a paper\n> “백성들이 이걸 배우면 그들의 영혼에 망각이 자리 잡을 것입니다. 백성들은 기억의 단련을 그만둘 것이고, 그럼 기억을 잃을 겁니다. 당신이 발명한 것은 기억이 아니라 망각을 위한 수단일 뿐입니다”\n> - 플라톤 [대화] 중에서\n> - https://www.clien.net/service/board/use/14886286?od=T31&po=7&category=&groupCd=allreview\n\n## 단편적인 사실들만 알고있는 것은 아무런 힘을 발휘하지 못한다.\n> 사실들을 엮어 의미와 해석을 가능케 해주는 것을 “멘탈 모델” 이라고 하며, 이는 다양한 학문에서\n유래하기도 하고, 살면서 자연스레 체득되기도 한다.\n다양한 멘탈 모델들, 특히 모든 분야에 강력한 힘을 발휘하는 “슈퍼 모델” 들을 많이\n익히면 “슈퍼 씽킹” 을 할 수 있다.\n>> http://jaynewho.com/post/41\n\n## 과학자들의 발견은 대개 은유적 착상으로부터 시작된다.\n> 이후 그것을 명시적으로 규명하는 과정이 따른다. 새로운 문제에 대한 해결 알고리즘을 만드는 과정도\n비슷하다. 먼저 영감이 오고 체계적 절차와 관계를 표현하는 일이 따른다. 어떤\n문제를 해결하는 알고리즘 하나를 배우는 것은 직접적이다. 그것으로부터 기시감을\n느껴 다른 문제 해결에 사용하는 것은 은유적이다. 은유적 능력은 고통스런 기초\n확립의 시간과 시행착오의 축적이 만드는 기시감의 밭으로부터 나온다. 전공과 다른\n영역의 독서도 은유적 상상력을 자극하는 토양이 된다.\n>> https://news.joins.com/article/23727093\n\n## 인간이 이 세상에서 귀하다고 하는 것은 정성 때문이니, 전혀 속임이 있어서는\n> 안 된다. 하늘을 속이면 제일 나쁜 일이고, 임금이나 어버이를 속에거나 농부가 같은\n농부를 속이고 상인이 동업자를 속이면 모두 죄를 짓게 되는 것이다. 단 한 가지 속일\n수 있는 일이 있다면 그건 자기의 입과 입술이다. 아무리 맛없는 음식도 맛있게\n생각하여 입과 입술을 속여서 잠깐 동안만 지내고 보면 배고픔은 가셔서 주림을 면할\n수 있을 것이니, 이러해야하만 가난을 이기는 방법이 된다.\n\n## 우리는 중국측에 코로나로 인해 세계에 끼친 경제적인 손실에 대해 보상할것인가에\n> 대해 문의했고, 베를린에 있는 중국대사관으로부터 답장을 받았다. 중국대사관은\n우리한테 \"비열하다\"고 했고, 우리가 내셔널리즘을 유발할 것이라고 했다.\n그에 대해 나는 당신에게 할말이 있다.\n> 1. 당신은 모든 국민들을 감시하고 있으며, 감시가 없었으면 당신은 대통령 지위를\n유지할 수도 없었을 것이다.\n> 2. 감시는 자유를 억압하며, 자유가 없으면 창의성도 없다. 창의성이 없으면\n발명도 없다. 그래서 당신의 나라 젊은이들은 창의성이 없고, 남이 만든 것을\n베끼기만 한다. 중국의 가장 큰 발명품은 코로나이다.\n> 3. 당신들은 코로나가 사람간에 전염이 된다는 것을 분명 알고 있었음에도\n불구하고, 그에 대한 서양연구자들의 질의에 답변하지 않았다. 당신은\n세상을 어둡게 만들었다.\n> 4. 워싱턴 포스트에 의하면 박쥐를 연구한 우한의 연구소는 안전을 위한\n적절한 조치를 취하지 않았다고 한다. 왜 우한의 연구소는 당신의 정치범\n수용소만큼 철저히 관리하지 않았나? 코로나로 희생된 사람들한테 왜\n그랬는지 설명해달라.\n> 5. 당신은 불투명한 국가, 감시국가를 만들었고, 치명적인 병을\n만들었다. 이게 당신의 정치적 업적이다.\n당신의 대사관은 내가 보낸 질문에 대해 이것은 우리의 우정에\n어긋나는 행위라고 했다. 당신이 우리한테 마스크를 보낸게 그게\n우정이라고 당신은 생각하는가? 나는 그것은 오히려 웃고있는\n제국주의라고 생각한다. 당신은 당신네 나라에서 시작된 코로나로\n중국을 강화하고 싶은가 본데, 나는 코로나가 당신의 정치생명을 끝낼\n거라고 생각한다.\n\n## “Amateurs practice until they make the shot. Pros practice until they can’t miss.”\n> https://www.andrewahn.co/silicon-valley/pros-practice/\n\n## 무질서한 원숭이(Chaos Monkey)\n>넷플릭스의 엔지니어들은 무질서한 원숭이(Chaos Monkey)라는 프로그램을 만들어서\n운영한다고 합니다. 이 원숭이는 서비스 인스턴스들을 무작위로 중단시키는 역할을\n합니다. 다소 황당하게 들리지만, 넷플릭스에는 일부 서비스에 장애가 발생하더라도\n나머지 부분은 문제없이 운영되어야 한다는 원칙이 있으므로, 이를 수시로\n시뮬레이션하는 과정을 통해 복구 능력을 높여둔다는 것입니다.\n>> https://www.ridicorp.com/blog/2016/09/02/idc-outage/\n\n## 저에게 있어서, 속도와 메모리는 최첨단 기술이나 이식성 보다 중요합니다.\n> 교수님 말대로 미닉스는 이식성을 고려했고 많은 머신에 포팅이 되었습니다. 그래서\n그러한 머신을 갖고 있는 사람들에게는 미닉스가 좋겠지만, 공짜 점심은 없습니다.\n미닉스는 386 일부 성능과 몇가지 기능을 희생에서 그러한 이식성을 얻었습니다.\n>\n> 먼저 우리는 리눅스가 가야할 길이 아니라고 결정하기 전에, 리눅스가 어떻게 사용될\n것인지를 생각해야 합니다. 저는 제 486에서 메모리 및 연산이 많이 필요한 그래픽\n프로그램을 실행하는데 이를 사용할 것입니다. 저에게 있어서, 속도와 메모리는\n최첨단 기술이나 이식성 보다 중요합니다.\n>> https://joone.net/2019/02/09/30-%eb%a6%ac%eb%88%85%ec%8a%a4-%ec%9d%b4%ec%95%bc%ea%b8%b0-%eb%a6%ac%eb%88%85%ec%8a%a4-vs-%eb%af%b8%eb%8b%89%ec%8a%a4-1%eb%b6%80/\n\n## 보이지 않는 손\n보이지 않는 손은 가격이 모든 정보를 담고 있어 다른 더 많은 정보는 가지면 안되는\n공정한 경쟁시장을 원하지만 그런 완전시장은 존재할 수 없으므로 그런 환경을\n누군가가 만들어줘야하고 그렇지 못하다면 경쟁은 무너진다. 정부는 그런\n자율경쟁시장을 조성하는 역할로써 필요하다.\n\n## 간디 7가지 악덕\n> - 철학 없는 정치\n> - 도덕 없는 경제\n> - 노동 없는 부\n> - 인격 없는 교육\n> - 인간성 없는 과학\n> - 윤리 없는 쾌락\n> - 헌신 없는 종교\n\n\n## 다람쥐는 국립국어원에서 지정한 마우스의 순화어다.\n> 마우스 버튼은 다람쥐 단추, 광마우스는 광다람쥐, 마우스 커서는 다람쥐 깜빡이 또는 반디가 순화어다. 물론 여기서 나오는 말이 대개 그렇듯 거의 사용하지 않는다.\n>> namuwiki\n\n#### 좋은 판단(euboulia)은 다양한 의견의 수렴에서 비롯되고, 도시의 안전은 일반적 원칙과 특수한 경우의 균형에서 비롯된다는 것이다.\n\n\n#### 신이 만든 주어진 세계에서 인간이 만들어가는 세계가 되고\n>문자로 세계를 보는 것에서 숫자로 세계를 보게 된 이후,\n자연과 달리 숫자는 단절적으로 보였다. 여기서 미적분을 발견함으로써 빈틈은 메워졌다.\n>> 이미지 인문학1 - 진중권\n\n#### 인간의 평균 지적 수준이 괴테와 실러에 이를 것이라는 유토피아\n>> 미학 오디세이 - 진중권\n\n\n#### 메타포\n낯선 영역의 용어를 친숙한 영역으로 가져와서 빚대어 설명하는 것\n\n휴지통 아이콘 처럼 파일을 버리는 곳의 아이콘을 휴지통으로 함으로써 컴퓨터에 현실 세계를 가져왔다\n그러나 조심해야할 것은 우리 지역에서만 통하는 것을 모두에게 통할 줄 알고 쓰는 것이다\nhttps://ditoday.com/%eb%a9%94%ed%83%80%ed%8f%ac%ec%99%80-ui/\n\n#### less is more\n> Ludwig Mies van der Rohe\n\n#### less is bore\n\n#### 전쟁\n보급로가 중요하다\n무관을 문관으로 키우나, 문관을 무관으로 키우나? 둘 다 어렵다\n\n그러면 1명 보다는 2명이 낫다.\n근데 3명이 잘 묶이면 더 좋다. 이게 한도 끝도 없이 많아지는게 효과적이지는 않다.\n15명 정도가 한 팀으로 되면 공유가 적절히 된다.\n그러면 그 15명이 15팀 있으면 15팀을 관리하는 부서를 만들고, 그 부서가 15개가\n되면 또 그걸 관리하는 장치를 만드는 식으로 프랙탈적으로 규모를 키운다.\n\n근데 그게 계층적으로 존재하는 것이 아니라, 유기적으로, 수평적으로 얽히면\n좋겠다.\n\n작게 유지하는 기술을 쓰되, 많아진 리소스도 잘 활용하려면?\n\nA라는 최선안이 있어도 현실적인 문제로 A-1을 선택하는게 관료제의 병폐?\n- 합리적이라는 이유로 합리화가 된 것일수도\n\n\n## Law\n\n#### 법원 판례집 보는법 - https://mglaw.scourt.go.kr/wsjs/panre/sjs050.do\n\n#### 저작권\n남의 컨텐츠를 비슷하게 따라 그려서 블로그에 올려도 되는가?\n기안이 웹에서 검색한 사진을 참고해서 그림을 그리는 것 괜찮은가?\n\n인터넷의 사진을 퍼서 내 블로그에 실어도 되는가?\n- 인용물보다 창작 부분의 내용이 많고, 관련이 있어야 하며 주를 이루어야 한다.\n  구분이 되있어야 하고 변형을 해서는 안되며\n  출처를 남겨야 한다\n- https://m.blog.naver.com/jaming88/221687523030\n\n저작권은 사람의 생각이나 감정을 표현한 창작물\n\n영업비밀 - 산업재산권\n지식재산권\n\n발명 - 특허\n실용신안 - 실용신안권\n\n발명은 연필을 처음 선보인 것\n실용신안은 연필에 지우개를 붙인 것\n실용신안을 고안이라 한다. 고안했다 할때\n\n지식재산권 안에 산업재산권. 산업재산권 안에 특허권\n\n#### 개인정보보호법\n\n#### 민사 형사\n민사에서 사건을 접수하는 소장은 법원에 제출하는데 법원(국가)은 판결만 하고, 사건 개입은 하지 않는다\n\n형사에서는 고소장을 경찰,검찰이 받고 국가가 개입해서 수사를 한다\n\n민사는 원고와 피고가 개인의 권리에 대해 민법을 가지고 정당성을 따져, 배상을 하게 되고(돈을 받으려면 민사), 서로가 증거를 제시해 다툰다.\n\n형사는 국가와 피의자(피고인)가 형법 등을 가지고 형이 내려진다\n\n민사는 통상인이라면 의심할 여지가 없는 정도의 입증 필요\n형사는 법관이 합리적 의심을 할 여지가 없을 정도의 입증\n\n민사는 피고가 무대응 시 승소할 수 있다\n형사는 검사가 입증하지 못하면 무죄다\n\n사기, 폭행, 갈취\n모두 민형사 소송할 여지가 있다\n\n법률에서는 예외상황으로 몇가지를 정해놓았는데\n범인의 연령, 성행, 지능과 환경\n피해자에 대한 관계\n범행의 동기, 수단과 결과\n범행 후의 정황\n을 확인하여 법을 집행한다.\n\n법률에서 선의는 모르고 했을 경우를 뜻하고\n악의는 알고 했을 경우를 뜻한다.\n\n- 당하기 전에 꼭 알아야 할 생활 법률 상식 사전 - 김용국\n\n\n#### 손해\n\"손해라 함은 법익에 관하여 입은 불이익을 말한다.\n그것은 위법행위(채무불이행 또는 불법행위)가 없었더라면 존재하였을 상태와 위법행위가 있은 현재의 이익상태와의 차이이다. 불이익이 생긴 법익은 재산 ·신체 기타 법적으로 보호하기에 상당한 것이면 무엇이든지 상관없다.\"\n\n\n-----------------------------------------------------------------------\n\n## 인터페이스 종류\n- 무선\n    - 블루투스\n    - 와이파이\n    - 지그비\n- 유선\n    - LAN\n    - RS232\n    - HDMI\n    - 동축케이블\n    - USB\n- 디스크 인터페이스 (규격)\n    - SATA, mSATA\n    - PCIe\n    - M.2(SATA), M.2(PCIe-NVMe)\n- 디스크 통신방식\n    - AHCI\n    - NVMe -- Need PCIe\n\n## IoT\n\nIot 가 사람들의 삶을 어떻게 변화시켜 줄 수 있을까\nIot는 어떤 환경을 만들어 줄 수 있을까\n\n#### protocol\n\n- zigbee\n- BLE\n- WIFI\n- 비콘\n\n#### Item\n\n- 회사 사무실용 IOT 구상\n- 모듈화\n- 무선 LAN - LoRa\n\n#### Iot 적용 가능 분야\n\n- 사무실\n- 공장\n- 학교\n- 집\n- 도로\n- 가방\n- 수면\n- 가스\n- 에어컨\n\n## 개발자 프리 사이트\n- [https://m.freemoa.net/](https://m.freemoa.net/)\n- [http://www.elancer.co.kr/](http://www.elancer.co.kr/)\n- [http://www.wishket.com/](http://www.wishket.com/)\n- https://soomgo.com\n- guru.com\n- peopleperhour.com\n- upwork.com\n\n## 역사적 사료의 가치가 있으면 나라에서 수집품으로 인정해준다\n\n## 멱등성: 항상 같은 결과를 출력하는 성질\n\n## 스타트업 업체수\n- 실리콘밸리 뉴욕 런던 베이징 보스턴\n- 텔 아빞 베를린 상하이 la 시애틀\n\n## 1차 세계대전\n비스마르크는 프랑스를 고립시켜 독일의 안정을 원했지만 빌헬름 2세 왕이 즉위한 후\n물러나게 되고 독일은 강경책으로 나가게 된다. 러시아와 영국을 적으로 만들게 되고,\n\n세르비아는 민족운동이 일어나고 있었고, 오스만 제국을 쫓아내면서 그 땅을 전쟁을\n통해 획득하고, 오스트리아 제국이 소유권을 주장하는 보스니아를 되찾으려\n노력했다.\n\n세르비아의 과격 민족운동주의자들이 보스니아 사라예보에 세르비아를 견제하기 위해\n온 오스트리아의 대공을 죽임으로써 오스트리아는 독일을 등에 업고 세르비아에\n전쟁을 선포했고, 러시아와 프랑스는 세르비아를 지원하게 되면서 세계 전쟁이\n일어나게 된다.\n\n1차 세계대전은 그 전의 전쟁과 다르게 대량생산과 근대식 교육 때문에 공급이\n빨라져서 무의미한 소모전만 계속되어 길게 이어졌다.\n그 전에는 기사도 같은 것이 있었지만 물량전 앞에서 그것은 의미없어졌다\n[[Think#world war]]\n\n## iphone wifi\n- 07-01 releasing iphone\n- 09-11-25 lunching iphone in korea\n- iphone was not first smartphone. but best smartphone\n- it's start smartphone world from cellphone\n- wifi didn't allow in korea. but iphone coming with wifi.\n- more contents variation(app store) than android. cause developer can get price 70%.\n  (android is 5%)[^2]\n- dark side in comment[^3]\n\n[^2]: https://ko.wikipedia.org/wiki/%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD%EC%9D%98_%EC%95%84%EC%9D%B4%ED%8F%B0_%EC%B6%9C%EC%8B%9C\n[^3]: https://jsksoft.tistory.com/7517\n\n## 축구 승점 3점 1점 이유\n- game to be exciting\n- more winning team win then winning and draws team\n\n## 개발자 프리 뛰는법\n- 2400만원 이상 시 사업자등록증 필요하지만\n- 그냥 사업자등록증 내는 게 그 전에도 괜찮다\n- 구글 앱스토어에서 유료어플 등록 시 사업자등록증이 필요하다\n[[Economics#프리랜서 세금]]\n\n## 정량적 데이터는 의사전달이 명확한데 정성적 데이터는 기억에 남는다\n\n\n## 데스크탑 cpu 교체 시\n소켓이 규격이 나눠져 있다\n메인보드 홈페이지에서 호환 확인 필요\n바이오스나 칩셋도 영향 있을 수 있다고 한다\n\n#### 써멀 도포\n- 굵은 콩알 - 물성이 강할 때(잘 펴지는 경우)\n- X자 - 찰질 때\n- 3줄 - 뻣뻣할 때\n- 펴바르기 - 쿨러가 매끈할 때\n- http://dpg.danawa.com/bbs/view?boardSeq=28&listSeq=2858957&past=Y\n\n## 중고차 유튜브에 정보 많다\n\n\n## 지역별 시장통합 배달 서비스가 있다\n서울은 놀장\n천안은 장바요\n\n#### 바퀴벌레 맥스포스 셀렉트갤\n#### 티맵 지하철 혼잡도 알려줌\n#### 행복주택 지원시기 중간에 경쟁률 알려준다\n#### 보일러의 예약기능은 꺼지는 시간이 아니라 켜질 시간에 대한 예약이었다!\n- 근데 잘 동작하는건지 잘 모르겠다..\n\n## 컴퓨터는 함수가 무한루프에 빠지는지 여부를 판단할 수 없다고 한다 (튜링)\n\n## 핍진성 - 그럴듯함\n\n## 한국십진분류표\n0 총류 1 철학 2 종교 3 사회과학 4 자연과학 8 문학 9 역사\n\n## 스타트업\n창업지원센터\n- 마루180, 경기문화창조허브 등\n\n## 로비스트\n미스 슬로운\n\n뒷돈 주는게 로비가 아니라,\n연결된 사람들을 만나고 설득하고 법의 테두리를 잘 이용하고, 요청을 연구해서 전략을 짜서 연결하고 설득하는 것이다\n\n#### 과거에는 무조건 범행에 동기가 있다고 봤는데 사이코패스는 동기 없이 범행을 저지른다.\n동기\n범행동기\n정상참작\n사이코패스 - 비동기\n\n#### 하루키 새벽에 소설 쓰는 것\n소설가가 된 이후로 줄곧 새벽에 일어나 5시간 소설 쓰고 운동하고 하는 식으로 산\n것은 아니고, 소설을 쓰는 시기에는 그렇게 한다는 것이었다.\n그리고 소설은 한참 소설을 안쓰다보면 이제 어느정도 표현할 재료들이 축적되었다\n싶을 때가 있고, 그리고서 어느 날부터 집중해서 쓰기 시작한다고 한다. 마감에\n좇기는게 아니기도 하고, 쓰는 중에는 쓰고 싶지 않다는 생각도 들지 않는다고 한다.\n\n#### 인터넷에서 찾을 수 없는 정보를\n예민한 관찰력으로 세상을 바라보며 얻을 수 있다\n\n동양은 관계중심으로 생각한다고 한다\n\n\n#### 넷플릭스는 해시태그를 다는 직업이 있다고 한다\n:information:\n\n#### 소셜네트워크 장점\n내가 안유명해도 유명한 사람이 나를 체크하면 빠르게 내 정보가 퍼져나간다.\n\n#### 유퀴즈\n온기우체부. 나미야 잡화점의 기적에서 모티브\n익명 고민 상담.\n\n#### 마츠무라 야스오, 만다라트 실천법\n만다라트 계획법을 이 사람이 만들었다고 한다\n이런 책이 있었다. 오타니는 이 것을 보고 그 계획표를 만든걸까\n\n#### FLoC\n개인정보보호를 위해 구글에서 FLoC 라는 개념을 도입해 개인을 그룹으로 묶어 데이터를 관리한다고 한다\n좋은데?\n\n#### 세계경제포럼 - 직장인이 가져야 할 역량 순위\n2020\n1. 복잡한 문제 해결\n2. 비판적 사고\n3. 창의성\n4. 사람관리\n5. 다른 사람들과의 협력\n6. 정서 지능\n7. 분별 및 의사 결정\n8. 서비스 지향\n9. 협상\n10. 인지적 유연성\n\n+ 2015 - 품질 관리(?),  적극적 경청\n\n\n#### 디지털 컨텐츠 소장\n[[Digital_Content]]\n\n외부 유출, 불법 복제 및 다운로드를 막기 위해 DRM을 걸고 자신의 플랫폼 안에서만 돌아가도록 되어있는 현재.\n\nNFT를 컨텐츠의 유일성을 위한 것이 아니라 불법이 아니라는 것을 증명하는 도구로서 사용 가능할까\n\n#### 앱스토어\n앱스토어라는 시장에 물건을 올리면 시장이 그 물건을 판단하고 검증하여 자격이 충족되야 등록을 시켜주고 게다가 이것을 이유로 수수료도 받아낸다. 소비자는 그 시장을 믿고 안심하고 구매를 한다.\n플랫폼이 그 안의 컨텐츠를 통제할 수 있겠다.\n\n#### 구글 크롤러, SEO\n구글 검색에 잘 들기 위해 사이트를 최적화하면서 사용자 경험도 증가한다. 웹이 막무가내로 이루어진 사이트보다 최적화 잘 된 사이트가 사용자에게 더 잘 닿게 된다. 그러면 개발자들은 최적화를 하기 위해 더 힘쓴다. 선순환.. 이자 플랫폼의 통제(앱스토어처럼 긍정적 통제..)\n개발이라는게 자유도가 엄청 높지만, 이런 기준이 있어서 나름 정돈되면서 발전되간다\n\n#### 데이터 3법\n머신러닝에 가장 중요한 것이 쓸만한 데이터이고, 데이터의 가치가 커져가는 시대적 상황에 맞춰 국내에서는 데이터 3법이라는 이름으로 법률 개정안이 나왔다. (유럽은 GDPR, 미국 CCPA)\n각 기관이 독점하던 데이터를 공유하는 고속도로의 건설 같은 개념으로 생각할 수 있다.\n개인정보를 취급하는 법과 기관을 일원화하였다.\n개인정보(특정인 식별가능), 가명 정보(이 정보만으로는 개인을 식별 불가능), 익명 정보로 정보의 개념을 구분하였다.\n\n기업, 기관이 개인정보를 가명정보의 형태로 자유롭게 사용 가능하게 한다는 것이 주요내용\n가명정보가 되어도 정보가 조합되면 개인정보가 유출될 것이 우려점. 이로 인해 기업, 기관에 유리하게 이용할 수도 있음. 개인정보침해\n\nhttps://www.dokdok.co/brief/nae-gaeinjeongboyi-mirae-deiteo3beob-ihaehagi\n\n#### 소설가 1년동안 해당 분야 연구\n묘사를 위한 구체적인 지식 획득\n소설가는 글의 핍진성, 사실성, 세밀한 묘사를 위해 소설을 쓰는 분야에 대해 연구를\n하는데, 이 연구를 한다고 전문가가 되지는 않는다.\n사업을 할 때도 사장이 모든 분야에 대해 잘 알지 못하지만 직원들을 잘 관리하면서\n일을 잘 하도록 해주는 것처럼, 그 분야에 **어느 정도** 파악하고 있으면 역할에\n충실하다고 할 수 있다.\n**어느 정도** 는 어느 정도인가? 해당 분야가 아닌 사람이 얼마나 알 수 있을까?\n프로젝트 단위로 팀을 맺게 되면 팀 내에 역할을 공유하게 되는데, 각자의 역할이\n아닌 부분에 대해 어느 정도나 영향을 발휘할 수 있을까?\n\n#### 억울한 피의자인지 기려내기 위해 증거를 많이 모으는 검사\n어떤 결정을 할 때 근거를 많이 모으면 더 나은 결정을 할 수 있을까\n그렇게 결정한 문제가 틀릴 수도 있음을 염두에 두고 항상 돌아보고 경계해야한다\n\n#### 시험x\n연구자들은 시험을 안봐도 새로운 발견을 위해 힘쓴다\n회사에서는 시험을 안봐도 제품을 만들기 위해 노력한다\n\n시험이 아닌 다른 형태일 뿐이지 고객이라는 평가가 있기 때문에 필요없는 것이지\n학생들은 피드백을 받을게 시험이라서 시험이 필요하다\n\n사람사이에 시험을 하는 것은 피드백이 제대로 안와서, 믿음을 주지 못해서, 또는\n단순히 재미를 위해 할 수 있지만, 안했으면 좋겠다.\n\n#### Top team has people who finisher of top class\n\n#### 교도소에서는 교화 작업을 어떻게 하고 있을까\n교도소에 있는 수감자들을 어떻게 교화하는 중이고, 잘 되고 있을까?\n최근 조두순이 출소하는 날이 다가옴에 따라 우려를 하는데, 어떻게 될까\n형량 안에 교화를 한다는 게 말이 안되는 것 같기도 하고, 또 형량을 살았지만 교화가\n전혀 안되었다면 교도소의 의미가 조금 퇴색될 수도 있을 것 같다.\n출소를 하고 나서 교화가 되었는지 확인할 방법도 없는데.\n\n#### 대학수업\n대학수업은 그 분야의 기초지식들을 알려주고, 그 분야에 대해 알 수 있게 해주는 수준이다.\n과제들을 통해 깊게 연구할 수 있도록 유도해주지 수업 자체가 깊이 있는 강의를 해주지는 않는다.\n해당 분야에 대해 이런 것도 있구나 라는 것을 알게 한 후 스스로 깊이 있게 공부하도록 도와준다.\n[[Exploration]]\n\n#### 법률가는 입법부가 만든 법 중에 납득이 안되더라도 그 법을 받아들이나?\n법의 자의적해석범위는 합리적인가?\n\n판결가에게도 보수적인 성향이 있고 진보적인 성향이 있다\n\n#### 컨퍼런스 유튜브\n컨퍼런스 영상이 유튜브에 올라온게 있을텐데\n- [https://github.com/hibuz/dev-conf-replay](https://github.com/hibuz/dev-conf-replay)\n- [https://gent.tistory.com/525](https://gent.tistory.com/525)\n\n대기업 컨퍼런스\n- https://channy.creation.net/blog/1482\n\n#### 포스텔의 법칙\n유연성의 극대화를 위해서는 한 부품의 출력범위가 상당히 작고 잘 정의되어야 한다\n입력은 관대하게 출력은 보수적으로\n#architecture\n"},{"headings":[{"value":"~2024"},{"value":"Writing technique"},{"value":"반드시 지키고 싶은 글 작성 방법"},{"value":"기타 작성 요령"},{"value":"관련"},{"value":"글 쓸 때 체크리스트"},{"value":"형식과 리듬"},{"value":"노트에서 한눈에 구분하는 여러 방법"},{"value":"글 쓸 때는"},{"value":"아마존에서 배운 5가지 글쓰기와 소통 방식 :: Channy's Blog"},{"value":"내가 노트에 바라는 것"},{"value":"노트를 찾을 수 있어야 한다"},{"value":"지금의 노트 기준"},{"value":"위키 지침"},{"value":"글로 만들기"},{"value":"경험과 돌아볼 것, 그리고 성장한 것을 남겨두면 좋을 것 같다"},{"value":"Keep specific note to yearly archive"},{"value":"글"},{"value":"글마다 예제를 다는 것은 좋은데 예제가 좁은 범위만을 다룬다는 한계도 있다"},{"value":"쓸데없는 수식"},{"value":"앱을 따로 써서 예쁘게 한장 요약되도록 해서 사진으로 기록을 남겨도 좋겠다"},{"value":"모든 노트에 tag를 달아놓고 untagged 리스트를 볼 수 있으면 좋겠다"},{"value":"처음에 어떤 기능이 좋다고 생각해도"},{"value":"이미지"},{"value":"이미지 생성 AI 를 이용해서 글과 글 사이에 이미지 넣기"},{"value":"노트 색인"},{"value":"서울비님처럼 교사는 계층형 구조가 정말 유용하겠다"},{"value":"5년 노트"},{"value":"Note Category"},{"value":"문서를 항상 최신상태로 유지하기"},{"value":"하나의 시스템 안에 쉽게 넣고 뺄 수 있도록 하면 좋겠다"},{"value":"think with information."},{"value":"분류 구조"},{"value":"노트 구조 변경 v0.1"},{"value":"note title"},{"value":"마감 기간이 있는 것을 따로 모아서 링크를 걸어서 별개의 글로 만든다"},{"value":"목표를 decision 노트에 넣는다"},{"value":"category"},{"value":"노트를 주제에 따라 문서를 만들고, 유형에 따라 태그를 달자"},{"value":"category abstraction"},{"value":"Todo-list"},{"value":"투두를 보고싶게 만들어야 한다"},{"value":"to-do-list"},{"value":"todo"},{"value":"todo list 관리가 안된다!"},{"value":"오늘 할일이 바탕화면에 리스트업 되있어야 한다"},{"value":"Template"},{"value":"template 1"},{"value":"template 2"},{"value":"WIKI"},{"value":"위키 이것저것 조금씩 하는 것"},{"value":"note"},{"value":"Note Tag"},{"value":"위키"},{"value":"위키노트에서 참조한 곳이 있는데"},{"value":"위키를 분리해야할까"},{"value":"노트 쪼개기"},{"value":"편집가능성"},{"value":"지금 노트 방식의 문제점"},{"value":"작은 메모 100개가 모이면 글을 쓰는 일본저자의 글이 기억난다"},{"value":"노트 태그"},{"value":"vimwiki"},{"value":"archiving"},{"value":"wiki"},{"value":"국어 맞춤법 검사 해주는 프로그램"},{"value":"tag"},{"value":"image"},{"value":"vimtodo"},{"value":"wiki"},{"value":"Reference"},{"value":"ETC"},{"value":"more"},{"value":"category 1"},{"value":"category 2"},{"value":"인박스 -> 분류 -> 리스트업 -> 작성"}],"fields":{"slug":"/journal/"},"rawMarkdownBody":"\n이 전체 노트는 내가 몸에 새길 수 있는 것과 새겨져 있는 것들을 그림으로 그릴 수 있도록 정리해놓은 것이기 때문에 AI에게 물어보고 대답 받은 지식은 최대한 옮기지 않는다\n\n## ~2024\n\n- [February](diary/2024-02-01)\n- [March](diary/2024-03-01)\n\n* [[2024]]\n* [2023](2023.md)\n* [2022](2022.md)\n* [2021](2021.md)\n* [2020](2020.md)\n* [2019](2019.md)\n* [2012](2012.md)\n\n![graph](../img/graph.png)\n\n## Writing technique\n\n1. 적, 의, 것, 성 빼기 (적의것들)\n2. 하고 있다, 할 수 있다 안 쓰기\n3. 관한, 대한 안쓰기 (에 대해 대한)\n4. 있는 있어서\n5. 수동 능동\n6. 수식하는 표현이 어느 명사를 수식하는지 불분명하면 읽기 쉽지 않다\n\n#### 반드시 지키고 싶은 글 작성 방법\n\n1. 쉬운글\n2. 짧은문장\n3. 결론먼저\n4. 경험(정성적)으로 기억에 남게 할수있다\n5. 서론을 먼저 나눠 쓴다\n   - 서론에는 본문의 핵심내용을 미리 안내한다.\n   - 서론은 간단 명료하게 쓴다\n   - 본문은 가독성이 중요하다\n6. 유머가 있어야 한다\n7. 비유로 설명하는 것은 좋은 방법\n8. 글에 호기심을 담으면 흡입력이 강해진다\n   - 호기심, 궁금증이 글을 읽는 원동력이 된다\n   - 위키의 정보글은 호기심을 던지고 설명하는 방식으로 작성\n\n#### 기타 작성 요령\n\n- 첫줄에 한줄요약으로 그림을 그릴 수 있도록, 연상을 할 수 있도록 작성\n  그 뒤에 질문과 설명 적기\n\n* 짧게 쓰지 말고 길게 쓰고 필요없는 부분을 지우는 방식으로 쓰자\n* 간결했으면 좋겠다\n* 일관된 폼\n* 하나의 글 타이틀 안에 정반합을 모두 고려하도록 하고싶다.\n* 컨텐츠를 스토리로\n* 그리고 컨텐츠를 다른 곳에서도 다시 쉽게 사용할 수 있어야 한다\n* 글은 웬만하면 사진과 함께 사진안에 글자를 넣어서 읽기 좋고 보기 좋게 쓰는게 좋겠다\n  - 그림이 중요한게 아니라 내용이 중요하다 그런데 이미지가 같이 있으면 보기 수월하고 내용 전달도 쉬워진다. - (횡설수설 다이어리 참고)\n\n- speak with emotion is good to click with someone - emotion and experience\n- 읽다가 막히지 않고, 따라가다 보면 원하는 목적지에 편하게 도달하는 글이 좋은 글\n  내가 아는 것을 남들도 알거라고 생각하고 적으면 안된다.\n- 큰 그림에서 작은 그림으로\n- 정확한 댓생보다는 상황을 재미있게 표현하는 방법을 연구하세요\n\n##### 관련\n\n- [[Think#점진적]]\n- [[Think#제한을 둠으로써 새로운 것을 만들어 낼 수 있다]]\n- [[Blogging#읽고 싶은 제목]]\n- [[Information#모든 진정한 이론은 오직 구체적인 현실속에서만 명료화되고 발전되어야 한다]]\n- [[Collection#스토리 없는 단순 나열은 아무리 핵심만 담겨있다고 해도 쓸모가 없다]]\n\n#### 글 쓸 때 체크리스트\n\n- 전체 분량\n- 목차\n- 맞춤법\n- 첨부자료\n\n#### 형식과 리듬\n\n글을 쓰는데 두 가지 방식\n- 형식에 맞추냐 리듬에 맞추냐\n\n소설을 쓰는 두가지 방식\n- 글의 리듬, 글의 형식\n\n[[2022#06-01]]\n\n#### 노트에서 한눈에 구분하는 여러 방법\n\n- 크기\n- 탭 (단락)\n- 색깔\n- 볼드\n- 불릿과 문단, 인용문\n\n#### 글 쓸 때는\n\n- 기승전결\n- 발단전개위기절정결말\n- 논문의 초록본문결론\n- 문제제시근거대안예시\n\n이런 큰 틀을 확인하면서 쓰고 싶다\n\n#### 아마존에서 배운 5가지 글쓰기와 소통 방식 :: Channy's Blog\n\n- 문장은 “주어-목적어-동사” 구조로 실행하는 주체와 행동을 명확히 쓴다. (예: 수동태 금지)\n- 영어로 30단어 이하, 불필요한 구절을 안 쓴다. (예: due to the fact that -> because)\n- 약어는 처음에는 풀어 쓴다. (예: NDA -> Non Disclosure Agreement (NDA)…)\n- 모호한 ‘형용사’ 대신 데이터를 넣는다. (예: 대부분 AWS 고객 -> 한국 AWS 계정의 86%)\n- 모호한 ‘부사’ 대신 데이터를 넣는다. (예: 매출이 상당히 증가했다 -> 매출이 40% 증가했다)\n  http://channy.creation.net/blog/1620#:~:text=%EB%AC%B8%EC%9E%A5%EC%9D%80%20%E2%80%9C%EC%A3%BC%EC%96%B4%2D%EB%AA%A9%EC%A0%81%EC%96%B4,%EB%A7%A4%EC%B6%9C%EC%9D%B4%2040%25%20%EC%A6%9D%EA%B0%80%ED%96%88%EB%8B%A4)\n\n#### 내가 노트에 바라는 것\n\n- 전체를 보는 방법을 알고 싶다. 전체를 그림처럼 갖고 있으면 세부는 필요할 때 꺼내 쓸 수 있다\n- 실패에 대한 경험을 적어두어도 같은 실수를 반복한다. 그 실수를 기억 못하기 때문에\n- 추적을 위해 이슈라인을 만들어서 변경사항 추적\n\n#### 노트를 찾을 수 있어야 한다\n\n메모를 남기는 건 쉽다. 근데 어떻게 남겨야 찾기 쉽고 후루룩 봤을 때 원하는 걸 찾을 수 있을까. 매일마다 쓴 것들을 나중에 한번에 돌아보는건 결코 쉽지 않다. 찾지 못하면 둘러봐야하는데 둘러보면 있어도 지나칠 수 있다\n\n#### 지금의 노트 기준\n\n- 점진적으로 내용을 추가하고, 그 후 정리한다.\n  - 작은 사례들을 모으다보면 큰 흐름을 잡을 수 있다.\n- 너무 많은 양은 전체를 파악할 수 없다\n  - 링크를 걸려면 나눠야 한다\n    - vimwiki에서는 링크가 나열되있어도 내용을 보려면 들어갔다 나왔다해야한다.\n  - 여러 계층으로 돼있으면 파악하기 힘들다\n- 하나의 주제에 관련된 내용이 집적되고 강화되고 보완돼야 한다.\n  - 연관된 정보가 이어져 있어야 한다.\n\n* 노트는 재사용되야 한다.\n* 나의 언어로 쓰여야 한다.\n\n#### 위키 지침\n\n- 위키처럼 내용을 쌓는다\n- 복붙하지 않는다.\n- 내용이 길어지면 정리한다\n\n#### 글로 만들기\n\n근거\n\n덩어리진 생각을 글로 표현해서 다른 사람의 마음을 건드릴 수 있는 것\n\n#### 경험과 돌아볼 것, 그리고 성장한 것을 남겨두면 좋을 것 같다\n\n그 날의 경험을 통해 다음 날 더 성장하는 것을 잘 남겨두고 싶다.\n\n회사에 처음으로 코드를 수정하는거라 최대한 안전하게 하고 싶어서 기존 코드를\n그대로 따랐는데, 너무 그대로 따랐다. 리팩토링할 여지가 충분히 있었는데, 미뤘다.\n처음 온 개발자가 만든 코드든, 베테랑이 만든 코드든 운영에는 똑같이 돌아간다.\n그러니 코드에 처음이니까 괜찮겠지는 없다.\n그리고 코드 하나를 수정하는데에도 이유가 있어야 하고, 그 분기를 하게 되면 그것에\n대한 내용도 파악하고 있어야 한다. 한 부분을 변경하더라도 다른 부분이 영향을\n받는지 신경을 계속 써야한다. 내가 맡은 부분만 신경쓰려고 하고, 주변 사이드\n이펙트는 없겠지 하고 넘어가려고 했는데, 더 주의를 기울여야겠다.\n\n1. 처음이라고 안일하게 넘어가지 않기\n2. 수정하는 전반에 파악하고 수정하기\n3. 퍼포먼스 높이기\n4. 미리 처리할 수 있는 건 처리하기\n\n하고 싶은게 많아지면 다 할 수가 없다.\n1번은 처음일 때 다시 상기하도록 하고, 2번을 신경쓰도록 해봐야겠다.\n\n#### Keep specific note to yearly archive\n\n1. want to know behind or side background, similar thing\n2. base thing that you already know is take to new keyword\n\n- specific note: etc) golang library, sql query, test tool usage\n- I want to write to note my everything. but main note is keep small size.\n\n일자별 노트에 적고 태그를 그 부분만 달아놓으면 그 부분만 태그된 목록에 들어가고\n태그에서 글을 작성해도 일자별 노트에 작성되게 만들면 좀 더 접근성이 높아지지\n않을까? 데이터는 두배가 되지만.\n\n- 데이터가 두배가 안되게 글을 공유하도록 구성하면 좋겠다\n  이렇게 생각하는 이유가, 노트를 따로 정리하지 않으면 놓치는 부분들이 많다.\n  특히 다운로드된 문서나 사진은 첨부가 힘든데, 그냥 일자별노트에 자동으로 올라가게 해두면 태그만 다는 작업만 하면 되니까 좋을 것 같다.\n\n노트 추천 봇 고랭으로\nText to one category\nTo easy find and connect think\n\ntelegram message 1 day 1 time 5 article\nsubject + content\nmake index file\n\n#### 글\n\n처음 그 분야에 접하는 사람은 원리나 본질을 보기보다, 흥미로운, 실제적인 경험을 먼저 보고 싶을 것 같다. 원리는 그 분야를 좀 더 알고나서 궁금해지지 않을까\n\n#### 글마다 예제를 다는 것은 좋은데 예제가 좁은 범위만을 다룬다는 한계도 있다\n\n호기심과 몰입을 위한 도입부, 머리말이 사족이 될 수 있다\n바로 본론만 딱 보고 싶은데 쓸데없다고 느낄 수 있다\n\n날짜로 정리되어있는 기록은 시간이 지나면 예전의 기록은 찾아볼 엄두가 안난다.\n그 날의 특별한 아이디가 있으면 좀 더 나을까?\n\n기록을 찾아볼 때 날짜별로 되어있으면 찾을 엄두가 안나고 지쳐버린다.\n잘 정리된 책이라면 같은 분량이라도 보기 쉬울 것 같다.\n\n개발 책 중에 101 레시피 북은 별로 안좋아했는데, 사례의 나열이라 읽는데 기억에\n안남고 국부적이라 그랬다. 심리학 책도 너무 많은 사례의 나열이라 머리속에\n안남아서 별로 안좋아했다.\n\n#### 쓸데없는 수식\n\n'분량이 정해진 글쓰기에서 분량을 채우기 위해서 미사여구를 넣는 느낌' 을 피하자\nhttps://crmerry.tistory.com/56?category=1022504\n\n#### 앱을 따로 써서 예쁘게 한장 요약되도록 해서 사진으로 기록을 남겨도 좋겠다\n\n독서노트, 영화기록\n\n[\"앱이 통계를 예쁘게 내는 건 좋은데 그림 송출하면서 자꾸 잘라먹는다. 앱은 iReadItNow HD )\"](https://cojette.github.io/bookreview2020/#:~:text=%EC%95%B1%EC%9D%B4%20%ED%86%B5%EA%B3%84%EB%A5%BC%20%EC%98%88%EC%81%98%EA%B2%8C%20%EB%82%B4%EB%8A%94%20%EA%B1%B4%20%EC%A2%8B%EC%9D%80%EB%8D%B0%20%EA%B7%B8%EB%A6%BC%20%EC%86%A1%EC%B6%9C%ED%95%98%EB%A9%B4%EC%84%9C%20%EC%9E%90%EA%BE%B8%20%EC%9E%98%EB%9D%BC%EB%A8%B9%EB%8A%94%EB%8B%A4.%20%EC%95%B1%EC%9D%80%20iReadItNow%20HD%20)\n\n#### 모든 노트에 tag를 달아놓고 untagged 리스트를 볼 수 있으면 좋겠다\n\n#### 처음에 어떤 기능이 좋다고 생각해도\n\n나중에 그것에 대해 반박하는 게 생기고 그러면 왜 좋았는지에 대해 다시 생각해봐야 하는 상황이 생기기에 좋았던 점을 기록해놓아야 한다\n\n#### 이미지\n\n이미지가 한 눈에 많은 정보를 줄 수는 있지만,\n너무 많은 정보가 있으면 이미지에서 어떤 정보를 봐야할지 모르게된다.\n페이지를 나눠놓으면 필요한 내용만 바로 찾아볼 수 있다\n\n#### 이미지 생성 AI 를 이용해서 글과 글 사이에 이미지 넣기\n- 같은 톤으로\n- 바로바로 생성\n\n#### 노트 색인\n\n노트에 색인을 따로 만들어서 관리하는 방식이 있었다.\n\n#### 서울비님처럼 교사는 계층형 구조가 정말 유용하겠다\n\n가령 1학년 - 수학 - 중간고사 의 계층이 완전히 성립한다.\n내년에 중간고사에 대한 정보를 얻을 때도 가져오기 쉬울 것 같다.\n이렇게 반복되는 이벤트가 있다면 그 이벤트가 발생했을 때 리마인드가 된다.\n\n#### 5년 노트\n\n데일리 다이어리인데 한 날짜에 5년의 내용을 적을 수 있어서 5년뒤에는 5년전 내용을 같이 볼 수 있다\n\n## Note Category\n\n- software, programming language, web, technology, new language\n- which category is to remove?\n- development, developer\n- programming, programming language.\n\nduring write note\n\n- tag is useful. but how to register all of them, annoying\n- data tag, emotion tag, rating tag\n- content tag, ex) [[Golang]] tutorial clear\n\nhttps://www.youtube.com/watch?v=iwLbRqbkT38&t=85s\n\n- good tag example\n  - `[go]` - `[go/example]` - `[go/example/bbd]`\n  - like this, it can has a directory\n\nin being tagged file need tag root (each other has tag)\n\n- no no, search tag, then can see when write tag\n- tag is itself useful, tag write useful\n- link, tag is different\n- book, movie has rating, emotion,\n- take a picture. with location\n\n한 아키텍처 별로 레벨로 나눈다\n\n- 천재는 좋은 스승이 되기 힘들다\n- 단계를 차근차근 밟아서 오른 사람이 좋은 스승이 될 수 있을 것 같다\n- 초급 - 중급 - 고급 으로 한 아키텍처라도 나눌 수 있음\n\n#### 문서를 항상 최신상태로 유지하기\n\n메모리 구조가 다른 언어가 있다면 그것을 일일이 적기보다 내가 쓰는 언어는 이런게\n있고 이 언어들은 구조가 똑같다. 이런 식으로 적을 것 같은데, 그러면 내가 쓰는\n언어가 추가 될 때마다 그 내용을 확인하고 수정해줘야 한다. 어떻게 하면 새로운\n언어를 배우는 것과 내용 수정을 연결 시킬 수 있을까.\n언어를 배우게 되면 거쳐야되는 문서를 확인해서 그 문서에 흔적을 남겨놓기?\n\n- [ ] 업데이트 되는 내용을 어떻게 항상 최신상태로 유지할 것인가!?\n\n#### 하나의 시스템 안에 쉽게 넣고 뺄 수 있도록 하면 좋겠다\n\n봤던 인터넷 페이지, 작성한 파일, 소스코드를 단축키 하나로 노트에 집어넣고, 나중에 호출할 때도 쉽게 호출해서 내용을 불러올 수 있도록 하는 시스템이 있으면 좋겠다. 검색과 호출하는 것이 효율적으로 동작해야한다. 하나의 문서에 내용이 쭉 있고, 그걸 태그해서 태그 분류된 대로 보는 방식은 전체를 볼 수 없고, 놓치는 문서들이 많을 것 같다는 걱정이 있다.\n\n#### think with information.\n\n- my wiki is my knowledge.\n- if economics document is there. think about economics is go to think category or economics category?\n- I want to write my language in wiki. not copy&paste word.\n- think category is need? or mix in category?\n\n## 분류 구조\n\n- 시간순으로 작성하고 주간별, 월별로 다시 정리하도록 할까\n  - 시간순,빈도순,주제로 태그 여러개 달기\n  - 날짜별로 적어놓고 분류가 되도록 할까\n- vs\n  - 분류별로 적어놓고\n- vs\n  - 주간노트 작성 후 주제별로 파편화 시키기\n\n#### 노트 구조 변경 v0.1\n\n[[Journal]] [[Blogging]] [[Input]] [[Logical_Thinking]] [[Readability]]\n[[Life_Tracking]] [[Development]] [[About_Architecture]]\n\n인덱스는 인덱스로 놔두고\n데일리노트에 인덱스의 키워드를 추가해서 인덱스로 검색해서 내용이 뜨도록?\n이러면 각 노트에 정리하기보다 노트마다 태그를 달아서 더 자유로워 질 수 있을 것\n같다. 대신 구조화된 내용은 보기 힘들어지는데, 이건 일정 이상의 크기가 되면\n아웃풋을 post로 만들어내는 식으로 보완할 수 있긴 할 것 같다.\n웹에서는 자동으로 인덱스마다 글이 보여지도록 하면 될 것 같긴 한데, 순서가\n문제다. 순서를 헤더에 맞게 뽑아내면 될 것 같기도 하다.\n키워드에 따른 사전 구축도 돼야겠다\n\n- 일단 기존의 것들을 수정하기보다 현재의 노트에 태그를 달면서 어떤지 보자\n- 태그를 많이 다는게 좋을까 엄선해서 다는게 좋을까 -> 일단 많이 다는걸로.\n- :tag: 로 할까 [[tag]] 로 할까... [[tag]]가 문서목록을 띄워주는 이점이 있다.\n  - daiay 폴더에서는 한단계 옮겨져야해서 바로 검색이 안되는 부분이 있다.\n\n제텔카스텐 방식이 좋은 것 같다\n아 이 방식이 기술인간님의 방식과 같은 것이다... 태그에 별5개 적고 하는 식으로\n확장 가능하다\n\njournal에서 이 노트가 검색이 되려면?\n\n- 검색이 잘 안되네\n\n#### note title\n\n**keyword** or **goal**?\n\nkeyward\n\n- Software, Company\n\ngoal\n\n- write [[Journal]] once on day\n\ngoal, 목표를 어느 노트에 넣을지\n\n#### 마감 기간이 있는 것을 따로 모아서 링크를 걸어서 별개의 글로 만든다\n\n여행계획, 개발 프로젝트, 책\n\n#### 목표를 decision 노트에 넣는다\n\ndecision 노트의 조건들을 단순화 시키는게 좋을까\n아니면 고민의 흔적을 모두 남기는게 좋을까\ndecision은 모두 남기고 그것을 cleaning에 정리하는게 맞을까\n\n결론은 목표를 decision 노트에 넣는걸로\n\n[[Exploration#목표를 decision 노트에 넣는다]]\n\n#### category\n\ndata 파일에 redis 사용법 같은 것을 data 관리에 대한 생각과 같이 넣는 것이 나을까\n아니면 생각은 생각대로 분리하는 것이 나을까\nstrong base에는 정보 위주로 담고 deep knowledge에는 생각도 포함해서 담자\n\n#### 노트를 주제에 따라 문서를 만들고, 유형에 따라 태그를 달자\n\n주제는 균형, 미니멀, 점진적발전이 될 수 있고,\n유형은 정보, 모음집, 책 발췌 등이 될 수 있겠다.\n\n한 주제가 너무 커지면 분리를 생각해야한다.\n100개의 메모에 한 주제의 글을 작성하는 일본인의 사례처럼\n\n근데 생각 문서를 보면 너무 사부작 거려서 한 주제에 넣기가 좀 그렇다.\n주제에 관련 된 글은 정보 위주로 구성해야할까?\n\n한 주제에 대한 생각은 따로 빼놓아야겠다.\n\n근데 밸런스에 대한 글은 거의 내 생각으로 구성된 것이고, 웹에 대한 것은 정보로\n구성된 것에 생각이 약간 첨부되는 식으로 될 것 같다\n\n- [ ] 출처를 알 수 없는 인용구는 어떻게 표시할까\n\n#### category abstraction\n\nthink, history, decision, technology is big abstraction\ncoding, computer-architecture is small abstraction\npython, golang is not abstraction\n\nI need update each note page everytime. so big abstraction category gonna be\ndisturb. so then I need make category to small size\n\nbut, I have many same word like trade-off, history, minimal\nI want to see this word at once.\n\none category(key priority) to make link page.\ncompose link that related keyword.\n\n- 한 페이지에 같은 업무이면 같이 모으기 vs 페이지를 나눠서 적기\n  한 페이지에 모으면 한 페이지만 보면 되게 된다\n\n## Todo-list\n\nTodolist for Each job\nWhen before making video, see todolist and do first.\nAnd when coding in pomodoro app, see todolist and do first\nWhen coding a use golang, do todolist.\n\ntodo앱으로 관리할까\n\n- 매일매일 쌓이게 된다\n- 나중에 할 일과 분리가 필요하다\n\ntodo <-> note how to flow\n\n#### 투두를 보고싶게 만들어야 한다\n\n노트의 연결도 의도하지 말고 자연스럽게 발생하도록 해야한다\n\n#### to-do-list\n\nauto create todo list when write todo?\nif done write a weekly note, remove that in a todo list\ntodo organize main-todo menu automatically\nhow to manage bookmark\nmake todo.txt parsing and done button\n\n> to-do-list - start but not finished. Does it need a different list?\n> I have done-list. it is managed at week. done-list have category\n> to-do-list has a duration, 1hour, 1day, 1week, 1month, 1year\n> Pomodoro - to-do-list - shell - title-bar - kanban\n\n#### todo\n\ntodo를 한 파일에 모을 필요 없이 - [ ] 키워드를 앞에 달아놓고 검색해서 확인하고\n추가내용 적고 정리하면 생각나는대로 투두를 만들고 접근할 수 있다\n\n- 문제점은 투두의 우선순위가 명확하지 않고, 여기저기 섞이고, 너무 많아지는 것.\n- 검색을 보기 편하게 만들어야겠다.\n\nag '\\- \\[ \\]' 또는 ag '^- \\[ \\]'\n\n#### todo list 관리가 안된다!\n\n포모도로에서 투두리스트를 따로 관리해볼까\n그러려면 포모도로가 제공해주는 투두리스트의 기능이 따라줘야한다.\n그런 포모도로 타이머가 있을까...\n\n적는 형식도 뭔가 개선이 필요하다\n\n- 진짜 해야할 리스트와\n- 진행하면서 생긴 궁금증\n- 궁금했는데 잘못 안 것\n- 나중에 다시 써먹을 수 있는 문제 해결법\n\n히스토리 라인이 잘 보이면 좋겠다.\n\n#### 오늘 할일이 바탕화면에 리스트업 되있어야 한다\n\n바탕화면에서 표시해줄 수 있으면 좋겠다\n\n- 원노트 빠른노트의 페이지 수\n- 삼성녹음 신규 개수\n- inbox개수\n\n## Template\n\n#### template 1\n\n- 템플릿 제작\n  - 검색 기록\n    - 무엇을 찾는가\n    - 키워드\n  - 하루 회고\n    - 무엇이 궁금했는가\n    - 오늘 무엇을 배웠는가\n    - 내일 무엇을 할 것인가\n  - 업무 일지\n    - 질문\n    - 선택\n    - 할일\n  - 프로젝트 진행 중 모아둘 제목\n    - 선택의 순간\n    - 질문\n    - 어쩔 수 없이 한 선택\n\n#### template 2\n\n- 내용\n- 분야\n- 키워드\n- 생각의 확장\n- 관련있는 메모\n- 추가로 조사할 내용\n- 의견 / 반대되는 의견\n- 질문 / 해답\n- 주장 / 반대되는 주장\n\n## WIKI\n\n위키형식이 나에게 딱 맞는 방식인 것 같다.\n\n- 위키는 점진적 발전 형식의 문서화가 가능하다. Evolving 이 좋다.\n\nnote 4개는 뎁스에 신경쓰고 4개는 넓이에 신경쓰도록 구성\n\n위키의 단어 나열형식을 현실의 어떤문제 해결을 위해 나온개념인지를 적어놓자\n\n느낀것들은 한달씩 모으기\n연말 회고용으로 쓸 수 있겠다\n\n자료가 괜찮게 느껴졌으면 최대한 정보를 남기고 나중에 정리를 하도록 하자\n데이터를 많이 쌓아놓고 정리하는 것이\n나중에 다시 찾아보는 것보다 편할 것 같다\n\n몇 가지 중 하나를 제시할 때는 다른 것들은 뭐가 있는지 문서 안에 첨부해야 좋겠다\n\n#### 위키 이것저것 조금씩 하는 것\n\n한번에 집중해서 하지 않아서 흐지부지 될 수 있다?\n퀄리티가 떨어진다?\n\n위키피디아는 괜찮은 것 같은데 그래도 전문성이 떨어질 수 있는 위험요소는 있다.\n\n- 워낙 많은 사람들이 접근하니까 내용이 계속 업데이트가 되서 가능한 것 같다.\n\n#### note\n\n맨 위에 나무위키처럼 분류를 띄워주면 좋겠다\n\n#### Note Tag\n\n- during watch sub-tag, can see root tag\n- make tag relation tree\n- if I went to Rome. Rome tag is related to Italy, travel\n- travel -> Italy -> Rome\n- when I see the Rome log. can see Italy and travel, plus day tag\n\n#### 위키\n\n지금 노트 방식이 노트를 여러 개 만드는 방식과의 차이점과 공통점\n\n파일로 만들게 되면 문서의 제목을 링크로 가리켜서 내용을 볼 수 없다\n\n태그는 계속 추가될 수 있어야겠다.\n\n- 아 근데, 나는 태그를 64개로 제한할텐데 그러면 태그가 이미 다 달려있게 되지\n  않을까\n\n일단 책, 정보, 생각 같은 메타적인 것들을 태그를 달아서 본문에 합치고, 문서\n자체는 없애면 좋을 것 같다.\n\n- 어디에도 속하기 애매한 것들은 어떻게 할까...\n- 여러 군데에 속해야 하는 것들은 어떻게 할까...\n\n문서 자체는 한 공간에 있는데, 인덱스 파일과 키워드 파일을 만들어서 관리하도록?\n\n#### 위키노트에서 참조한 곳이 있는데\n\n원본이 수정되면 참조는 허공을 가리킨다\n위아래로 쭉 나열되있는 노트는 약간 부족하다\n뭔가 효율적인 구조가 필요한데...\n마인드맵, 표, 3단 노트\n\n#### 위키를 분리해야할까\n\n각 노트를 쪼개서 링크를 여러 개로 만들면 여러 문서에 연결 시키기 편해진다.\n대신 문제는 링크가 산발적으로 생기고, 일일이 들어가봐야 하고, 존재를 잊어버릴 수\n있다.\n\n#### 노트 쪼개기\n\n노트를 잘게 쪼개야 리마인드 할 때 다루기 좋겠다.\n날짜 확인할 방법 등등\n\n쪼개면 한 곳에서 확인할 수 없고, 여기 저기 왔다갔다 해야 한다.\n\n쪼개놓고 오래된 글을 다시 리마인드해주면 좋겠는데, 너무 많이 쪼개면 리마인드\n되는 글들이 많아져서 무시하게 될 것 같다.\n\n#### 편집가능성\n\n노트 대신 카드\n\n카드로 글을 써서 작게 유지하는 것 까지는 좋다\n\n근데 그 카드들을 어떻게 잘 엮고 활용할 수 있을까?\n\n객관성이 사회의 설명방법이 아닌 지금의 세상에서 과학은 편집 가능성이 높아야 좋은 정보가 된다\n이 편집 가능성은 프로그램 구조에서 모듈화를 잘 만들어 확장성을 높이려는 시도와 일치한다\n프로그래밍의 발전방향이 과학의 발전방향과 나란히 가고 있구나 싶다\n\n노트의 수량을 내가 파악할 수 있는 정도로 한정하고 거기서 살을 붙이는 방식으로 운용해왔지만,\n\n양을 무수히 늘리는 대신 이를 쉽게 관리하는 시스템이 더 나을 수 있겠다는 생각이 든다\n\n라이프 트래킹도 데이터를 많이 받아서 이를 확인할 수 있는 시스템을 구축해야겠다\n\n제텔카스텐은 작은 메모를 잘 엮어서 하나의 흐름을 만드는 방법인데,\n이는 메모를 어떤 내용에든 붙일 수 있어야 하는데, 그렇다면 하나의 크기가 작아야 한다.\n이 작은 메모는 하나의 흐름에 연결 될 뿐, 이를 일일이 관리할 필요는 없다.\n\n적은 문서로 커버하려고 하니 하나의 문서가 너무 커지는 문제가 발생했고, 또 하나의 문서가 다른 곳에 연결되었으면 좋겠는데 잘 연결되지 않았다. 모아보기가 힘들었다.\n\n하나의 문서가 다른 곳에 잘 연결되야 하는 부분은 지금의 위키에서 컨트롤하기가 쉽지 않았다.\n너무 커지는 문제는 그 내용을 내가 다듬으면서 내용을 엑기스만 남기면 될 줄 알았는데, 이렇게 하면 잘려나간 내용이 너무 아깝게 되고, 내용 정리도 쉽지 않다.\n\n제텔카스텐에서는 작은 메모들은 그대로 두고, 이를 정리한 하나의 잘 작성된 글이 만들어지게 되는데, 이 방식이 마음에 든다.\n정리용 메모와 잘 작성된 글을 분리하는 것. 이게 마음에 드는 포인트였다.\n\n메모에 타임라인, 언태그된 글 모아보기, 할 일 모아보기를 위키에서 일단 만들어보고 싶다.\n\n#### 지금 노트 방식의 문제점\n\n- 계속 수정하는 방식이다보니 지금 깔끔하게 정리하지 않고 미루게 된다.\n- 카테고리가 무수히 늘어나면 어느 카테고리가 있는지 모르고 중복되는 것을\n  막으려고 개수를 제한했는데, 문서는 제한됐지만 주제는 많이 나뉘어있어서 같은\n  문제가 있다.\n\n#### 작은 메모 100개가 모이면 글을 쓰는 일본저자의 글이 기억난다\n\n그것처럼 한 주제에 100개의 작은 메모가 모이면 한번씩 정리하면 파편화가 줄어들 수 있겠다\n\n근데 작은 메모를 한 주제별로 어떻게 모으지?\n태그가 된 개수를 알 수 있으면 좋겠다\n\n#### 노트 태그\n\n아무대나 적는다\n태그를 단다\n태그에서 확인할 수 있다.\n태그에서 수정하면 원래 글과 함께 바뀐다\n\n파일, 이미지 첨부\n\n태그, 링크\n링크를 만들어서 그것이 어디서 호출됐는지 확인하는게 백링크의 핵심인데, 지금은\n백링크가 효율적으로 쓰이고 있지 않다.\n그리고 백링크 자체가 보기 편하지는 않다.\n\n## vimwiki\n\n- vimwiki write two space bar after sentence being a new line\n- category: #### split: -\n- link\n- todo\n- today journal\n- plain text and `:`\n\nin front of trouble note, write `!`\n\n#### archiving\n\n2020년의 나와 2021년의 나는 다르지만 2020년의 내 나름의 생각도 있다. 시간이\n지나면서 생각은 바뀌지만 그 때의 생각도 의미가 있다.\n그래서 wiki를 년도별로 브랜치를 따로 따서 아카이빙 해놔야겠다.\n\n```\ngit checkout -b 2020 <commit>\ngit commit and push\n```\n\n#### wiki\n\n커밋 할 때 맞춤법 검사하기?\n\n- `hanspell <file>`\n\n#### 국어 맞춤법 검사 해주는 프로그램\n\n- https://github.com/lqez/awesome-hangul/blob/main/README.md\n- https://github.com/datanada/Awesome-Korean-NLP\n\n#### tag\n\nvimwiki에서 :tag: 를 이용하면 태그가 된다\n두개짜리 헤더에 태그를 달아보자\n\n#### image\n\nkeep on desktop browser\n이미지를 데스크탑 브라우저용 킵 확장프로그램을 이용하면 이미지와 주소가 같이\n저장된다. 쓸만한 이미지를 킵에 저장 후에 노트로 옮겨야겠다\n\n#### vimtodo\n\n- [ ] TODO 리스트 바로 뜨도록\n- [ ] TOC 목차 옆에 뜨도록\n- [ ] 일기 한 번에 모아 보도록\n\n#### wiki\n\n- [ ] 모바일에서 클릭했을 때 팝업 뜨도록\n- [ ] 웹에서 글자랑 팝업이 멀어도 멀리 치우지 않으면 팝업 안사라지도록\n- [ ] 모바일 이미지 사이즈 제한 필요\n- [ ] 단순 텍스트 코드 길이 오버됨\n- [ ] blog 가독성 향상 시키기\n  - [ ] 트위터 share 누르면 html로 복붙되나?\n\n## Reference\n\n- [번역체-나무위키](https://namu.wiki/w/%EB%B2%88%EC%97%AD%EC%B2%B4%20%EB%AC%B8%EC%9E%A5/%EC%98%81%EC%96%B4#s-2.10)\n\n---\n\n## ETC\n\n#### more\n\n//당장 정리안되는 것들 보관해놓고 알람 설정하기\n\n- 대시보드에 정리할까\n- 미완료된 글은 따로 또 모여서 볼 수 있도록 할 수 있으면 좋겠다\n- 독서노트는 일주일에 한개라도 다시 볼 수 있으면 좋겠고\n- 미완성된 독서노트는 바로 적을 수 있게 띄워주면 좋겠다\n- 노트에 남아있는 할 일은 당장 할 수 있는 것도 있고 아닌 것도 있고 하기 싫은 것도 있을텐데 나눠져야겠다\n- 필요한 것이 생길 때 바로 찾고 싶다\n- 생각나지 않아도 눈에 띄여서 떠올려 줬으면 좋겠다\n- 흩어진 정보가 잘 모여서 보여졌으면 좋겠다. 흩트리지 않는 방법은 무엇일까\n- 카테고리로 정렬할 내용이 있고, 일자별로 정렬할 내용이 있다\n- 영감이 될만한 내용을 모아놓고 틈틈이 그것을 봤으면 좋겠다\n- 내용 추가가 필요하면 태그 남겨놓기\n- 정보의 다양한 사용용도\n- 변화의 기록을 남기게 된다\n- 노트를 수정하면 수정한 부분이 로그로 남게 하고 싶다 - git\n- 태그를 대시보드에 쭉 나열해 놓는다면 오히려 안보게 될 것이다\n- 흩트려 놓으면 알아보기 힘들다\n- 나중에 꺼내 볼 글이 있고 수시로 보면 좋을 글이 있다\n- 검색해서 찾아볼 글은 인터넷에 검색하면 그만인데 태그 달아논 것을 나중에 볼까?\n- 매일 확인하면서 기억해둘 내용, 한달에 한번정도 상기시키면서 필요한 내용,\n  어쩌다 그 주제가 생각날때 꺼내볼 정보\n- 분류는 굉장히 많아질 수 있으니 최소한 처음 접근할때는 3가지 이내로 나누고 그 후에 원하는 것이 필요할때 찾을 수 있도록 세부적으로 나누는 것 또한 필요하다(태그)\n- 이 글은 빈도수를 어떻게 설정해야 하나\n- 블로그 글을 쓰려고 할 때 보면 되나\n- guide 로 카테고리를 만들어서 그곳에 정리할까\n- 가이드는 작성을 편하기 위한 포장도로를 까는 것이고 꼭 지킬 필요는 없다\n- 입력은 하나로, 출력은 여러 개\n- 업무를 하면서 노트를 적고, 배운 것들을 적는 것, 생각나는 것을 적는 것 각각 방식이 다르다\n\n- keep finding new function and upgrade\n\n- [ ] i want to set workflow through one click\n- [ ] how to set workflow efficiently\n  - what is workflow?\n- [ ] Is it need divide to-do with develop and daily?\n\ncheck pomodoro script -> manage pomodoro log\nbefore pomodoro -> need check what todo\n\n- duration\n  - 자주 다시 볼 글\n  - 미완료된 글\n- category\n  - 간단한 글은 킵노트\n  - 원페이지로 간단하게\n- frequency\n  1.  다시 보기할 문서들이 있다 - 다시 볼 문서를 어떻게 정하면 좋을지\n  2.  잠깐 생각이 떠오르거나 궁금한 것들이 있다.\n  3.  오늘 할 일 관리를 어떻게 할지\n  - 다시 바로 확인할 내용, 언젠가 확인할 내용, 완료, 진행중,\n\n* structure\n  1. 요약\n  2. 큰 그림부터 작은 그림으로\n  3. 사례\n  4. 반례\n  5. 정리\n  6. 참고\n\n#### category 1\n\n1. 이렇게 하자 - 한페이지로 정리 -> decision check list\n2. 읽을거리(북마크)\n   - 파일로 변경하여 드라이브에 저장\n3. trouble shooting & share information\n4. journal\n5. some list\n6. todo\n   - trello(kanban)?\n7. 인박스\n8. 분류 박스\n9. 생각할 거리, 생각, 짧게 생각 모아놓은 리스트가 있다\n10. 정보\n\n#### category 2\n\n- 생각 정리\n- 꿀팁 정리\n- 클립 정리\n- 작업 기록\n- 독서노트\n- 정리된 글\n- 일정\n- 메모\n- 프로젝트 관리\n- 공부하면서 얻은 정보\n- 나중에 한번씩 보면 좋을만한 것들\n\n#### 인박스 -> 분류 -> 리스트업 -> 작성\n\n리스트업 된 것 중에 글을 쓴다\n글을 쓰고 리스트업해도 상관없음\n블로그 글은 리스트업으로도 볼 수 있으면 됨\n목차 누르면 내용 펼쳐지고\n왼쪽에 바로가기 만들어서 목차로 바로 돌아오거나 이전 동작으로 바로 돌아갈 수 있도록\n구글 검색 시 찾는 항목이 나오도록\n"},{"headings":[{"value":"영화 화질"},{"value":"작품 깊게 즐기기"},{"value":"Review"},{"value":"2025"},{"value":"~2025"},{"value":"본 얼티메이텀"},{"value":"자폐증을 가진 형을 가진 동생이 이렇게 말했다"},{"value":"모테키"},{"value":"고백을 보고"},{"value":"그곳에서만 빛난다"},{"value":"벌새"},{"value":"뮤지컬 팬레터"},{"value":"두교황"},{"value":"세상에서 고양이가 사라진다면"},{"value":"내사랑 - 모드"},{"value":"시라노 연애 조작단"},{"value":"어느 가족"},{"value":"밀양"},{"value":"그녀"},{"value":"복수는 나의 것"},{"value":"아네트"},{"value":"화양연화"},{"value":"김종욱찾기"},{"value":"타오르는 여인의 초상"},{"value":"컨택트 - 드니 빌뇌브"},{"value":"사랑도 통역이 되나요 - 소피아 코폴라"},{"value":"영화 아사코"},{"value":"위플래시"},{"value":"도쿄의 밤하늘은 항상 가장 짙은 블루"},{"value":"중쇄를 찍자 1화"},{"value":"중쇄를 찍자 2화"},{"value":"존 말코비치 되기"},{"value":"애브리띵 애브리웨어 올앳원스"},{"value":"영화 여인의 향기"},{"value":"영화 패터슨"},{"value":"영화 파수꾼"},{"value":"영화 우리도 사랑일까"}],"fields":{"slug":"/movie/"},"rawMarkdownBody":"\n| Movie                              | Saw      | How About |\n| ---------------------------------- | -------- | --------- |\n| 퐁네트의 연인                            |          |           |\n| 세렌디피티                              |          |           |\n| seven samurais                     |          |           |\n| 패왕별희                               |          |           |\n| 스포트라이트                             | O        |           |\n| 히든 피겨스                             | O        |           |\n| Little Women(2019)                 | O        |           |\n| face off                           | O        |           |\n| fight club                         | 20/12/12 |           |\n| 박하사탕                               | O        |           |\n| 파수꾼                                | O        |           |\n| Me Before You                      | O        |           |\n| Dirty Money -- Netflix documentary | O        |           |\n| 중경삼림                               | O        |           |\n| Birdman                            | 20/05/18 |           |\n| The Prestige                       | 20/05/26 |           |\n| Born_Series                        | 20/06/01 |           |\n| 밀양 (깊이)                            | O        |           |\n|                                    |          |           |\n|                                    |          |           |\n|                                    |          |           |\n|                                    |          |           |\n인사이드아웃2\n괴물 고레에다히로카즈\n\n\n## 영화 화질\n원본의 화질이 중요\n같은 크기의 파일이라도 원본이 깨끗하면 화질이 좋다\n비트레이트/해상도\n코덱\n\n블루레이?\n\n다운받을 때 이름에\nHDrip DVDrip BRrip BDrip Bluray 순으로 좋으나 HDrip 이상이면 큰 차이 없다고 함\n\n## 작품 깊게 즐기기\n- 프리뷰\n- 감상\n- 리뷰\n- 비하인드\n\n# Review\n\n## 2025\n\n엘리오\n\n## ~2025\n\n//골든슬럼버\n//다만 널 사랑하고 있어\n//불량공주 모모코\n//고백\n//그렇게 아버지가 된다\n\n#### 본 얼티메이텀\n엔딩에서 본이 바다에 빠졌어도 당연히 살아있을거라고 쉽게 예상했지만 엔딩장면은 소름이 돋았다\n연출이 기가 막혔다\n아무리 예상한대로 흘러간다고 해도 연출을 어떻게 하느냐에 따라 이렇게나 전율이 흐르게 할 수도 있구나..싶다\n\n#### 자폐증을 가진 형을 가진 동생이 이렇게 말했다\n형이 없었다면 자신은 태어나지 않았을 거라고\n나는 이 말이 부모님이 정상적인 아이가 필요해서 그렇다고 생각했다\n여기에는 자폐증 가진 형의 존재는 전혀 생각하지 않았다\n하지만 동생은 이렇게 말했다\n부모님이 죽고 난 후 형을 돌봐줄 사람이 없을거니까 형을 위해 동생이 필요할 거라고\n나는 병을 가진 사람을 보살핀다는 것을 전혀 생각도 안하고 있었다\n그 사람은 금방 죽을테니까 신경쓰지 않아도 된다고 말이다\n그렇게 생각했던 것이 너무 충격적이다\n형을 아예 죽어도 아무렇지 않은 사람 취급을 해버린 것이다\n하지만 사람의 목숨 그 자체는 너무도 소중한 것이다\n부모님은 자폐증 아들이 태어났을 때 아이를 없애겠다고 절대 생각하지 않는다\n오히려 그 아들을 지키기 위해 동생을 낳아 같이 살게 하고 싶어한다\n둘째를 낳을 생각이 전혀 없었다고 해도.\n동생의 삶은 형에게 묶이게 된다\n\n#### 모테키\n여태 일본영화의 좋았던 감성이 이 영화에도 있고, 여운이 남는다.\n여주인공이 바닷마을 다이어리와 세상의 중심에서 사랑을 외치다의 그 여배우라는 것이 놀라웠다. 그 때는 한성주를 닮았다고 생각했는데 이 작품에서는 미모가 돋보였다.\n와 알고보니 남주인공도 세중사 영화에 아역을 같이 했던 그 사람이었다...\n\n일본영화의 감성이라고 뭉뚱그려 표현되지만 마음 속에는 뭔가 다른 여러 감정이 뒤섞여 있는데 좀 더 구체적으로 밝혀내고 싶다\n\n러브레터\n내일 어제의 너를 만난다\n세상의 중심에서 사랑을 외치다\n조제, 호랑이 그리고 물고기들\n지금 만나러 갑니다\n냉정과 열정 사이\n4월 이야기\n하나와 앨리스 4\n태양의 노래 4\n사랑은 비가 온 뒤처럼\n천사의 사랑\n모테키\n\n#### 고백을 보고\n아역 배우가 선정적인 역할을 맡으면 그 기억이 인생에 영향을 미치지 않을까?\n이렇게 생각하는 것도 외부에서 단편적인 것을 보고 넘겨짚는 것에 불과하다.\n실제 아역 배우의 삶은 모른 채 내 속에서만 그것을 조립하여 생각한 뒤 아역 배우에게는 선정적인 것을 맡기지 말아야 해 라는 생각에 빠지고 만다.\n하지만 누가 아는가? 그것이 좋은지 나쁜지.\n\n그렇지만 다른 나뭇가지로 뻗어간 생각을 마저 적자면\n처음에는 아역 배우에게 그것에 대한 주의사항을 알려주고 교육을 한다는 전제하에 맡겨야 한다고 생각했다. 그러나 그 교육은 누가 똑바로 할 수 있는가? 그리고 그 교육이 효과가 있는지는 어떻게 알 수 있는가? 오히려 교육하려고 하면 더 반발할 수도 있는 것이 사람인데. 눈 앞에서는 알겠다고 해도 그것이 진실인지는 교육자가 알기 힘들다.\n열과 성을 다하여 교육한다고 해도 진실은 다른 곳에 있을 수 있다. 영화에서 남자 교사가 본인 나름대로는 아이가 학교에 돌아오도록 노력을 했지만 완전 헛발질이었다.\n결국 중요한 것은 개인 개인이 삶을 책임질 수 밖에 없고,  스스로 느껴야 한다. 적고보니 너무 무책임하고 뻔한 말이다.\n\n아이의 새 엄마가 아이를 다른 공간에 머물도록 하고 아이에게 '이건 동생이 울면 공부가 방해될까봐 그러는거야' 라고 하면 설사 그것이 진심이라고 해도 아이에게는 의도와는 다르게 전해질 수 있다. 그러면 어떻게 말해주면 진심을 알 수 있을까? 짧은 시간으로는 안될 것이다. 계속 관심과 사랑을 주면 진심을 알아줄까?\n\n내가 세상을 이해하려 하지 말고 나는 어떻게 할지를 생각하자. 내 자식이 어떻게 컸으면 좋을지\n\n내 아이가 아역 배우를 한 후에 어떻게 느끼면 좋을까\n영화의 메시지를 위해 과정에 있었다는 것을 알았으면 좋겠다.\n역할과 현실을 구분했으면 좋겠다\n잘못된 것은 잘못되었다고 느꼈으면 좋겠다\n뭐가 잘못된 것인지 모두 알 수는 없지만 그것을 구체적으로 이해하지 못하더라도 잊진 않더라도 스스로 판별할 수 있고, 그 판별이 세상의 일반적인 잣대와 크게 벗어나지 않았으면 좋겠다.\n그리고 언젠가 그것을 이해하려고 하면 좋겠다.\n일반적인 잣대가 옳은 것은 아니지만 대부분이 공유하는 도덕적인 세상은 크게 벗어나지 않았으면 좋겠다\n\n그러나 내 생각이 맞다는 보장은 당연히 없고 아이가 꼭 나처럼 생각해야 하는 것도 아니다\n\n\n#### 그곳에서만 빛난다\n그곳에서는 빛난다\n가족이라는 속박에서 벗어날 수 없지만\n추잡한 사람들에게 벗어날 수 없지만\n을이 되는 입장에서 벗어날 수 없지만\n벗어나고 싶지만\n\n마지막 아버지를 죽이려는 장면에서 아야노 고가 말려서 실패한 장면이 인상깊다\n죽었으면 좋곘지라고 감독이 물어보는 것 같았다\n\n쇼생크탈출의 주인공이었다면 그 상황에서 벗어나기 위해 다른 수단을 찾았을 것 같다\n\n여자가 남자에게 '나는 한 곳에서 머물러서 일 할 수 없어. 넌 날 이해할 수 없어' 라고 하고 아야노 고는 그 자리에서 나온다. 하지만 둘은 결국 이루어진다.\n\n> 아야노 고도 여자 덕분에 트라우마에서 벗어날 수 있게 되었다. 여자도 남자에게 빛이었다\n\n\n#### 벌새\n세상 참 좆같지만\n힘들 땐 손가락을 보면서 신비로움을 느낀 후 다시 힘 내자\n맞고 있지 말고 싸워야 한다\n전체 앞에서 개인이 목소리를 내기 힘든 사회에서, 그나마 그동안 해오던게 무조건 옳지는 않고, 바뀌어도 된다는 사회적 합의가 커가고 있다. 다음 세대에게 전달하는 사회는 하란다고 그냥 하지 않아도 되는, 부당한 것에 적극적으로 목소리를 낼 수 있는 것이 자연스러운 사회가 되도록하기 위해, 관습에 열심히 저항하는 멋진 사람들이 있다. 나도 저항하는 사람이 되면 좋겠다.\n\n\n#### 뮤지컬 팬레터\n마음을 알아주는 상대\n글의 겉 뿐 아니라 속을 알아주는 상대에게 고마움과 사랑을 느낀 작가\n밖으로 나온 말 속의 진짜 숨은 속내를 알아봐주었을 때 좋을 때가 있다\n넘겨짚는, 의례적으로 하는 말이 아니라 진짜 알아주었을때 감동이 될 것 같다\n\n작가가 되는 것에 계속 고뇌하고 어릴 때의 치기일 뿐일지, 작가가 될 수 있을지 고민하는 것에 위로를 받았다.\n\n1930년대의 예술가는 좋든 싫든 그 시대의 상황을 신경써야했다\n\n윤동주도 데모를 안하고 시를 쓰는 것을 괴로워했다\n\n나는 이러한 격변의 상황에서 태어나지 않은 것에 감사하고 내 안위만을 생각했는데 이런 극을 볼 때 마다 이 시대에서 내가 할 일이 뭔지에 대해 다시 생각해보게 된다\n\n\n#### 두교황\n- 보수적인 성향과 진보적인 성향\n- 신념을 위해 죽는 것, 타협하지만 살아가는 것\n- 살아간다면 다시 기회가 올까\n\n#### 세상에서 고양이가 사라진다면\n- 하루 더 살 수 있는 대신 물건 하나를 세상에서 없애야 한다\n- 하루\n- 전화, 영화, 시계, 고양이\n\n영화 후반부에 하고 싶은 얘기를 직접적으로 다 해준다. 세상에 소중한 것들이 너무 많다고.\n악마 역할이 어떻게 보면 누구나 생각할 수 있는, 내가 잘 모르는 것들을 없애는 대신 내가 좀 더 살고 싶다는 욕망을 은유한 것이라고.\n구체적으로 짚어주니까 그제서야 알아차렸다. 이런 이야기를 구체적으로 해주지 않아도 상상할 수 있고 싶다. 매번 그냥 보여지는대로만 보고 있다.\n\n#### 내사랑 - 모드\n폭력적이고 거친 남자... 보기 힘듬\n거칠게 자라온 남자와 아프게 자라온 여자가 서로의 부족함을 메꾸며 살아갈 수 있는 사랑, 사람\n그림을 사는 사람이 후원자가 되고\n부통령이 그림을 샀다는 소식이 그를 성공한 인생으로 만들어주는 것인가\n\n#### 시라노 연애 조작단\n믿음 보다 사랑?\n\n#### 어느 가족\n가족이란? 사랑이란?\n낳은 부모, 기른 부모, 잘 대해주는 부모, 사회의 보호를 받을 수 있는 부모\n낳은 부모를 떠나고 싶을 때 떠날 수 있도록 지원해주는 것이 필요할까\n부모를 선택할 수 있을까\n나를 괴롭게하는 부모라고 부모를 떠나도 될까\n\n#### 밀양\n의례적이고 상투적인 인간 표현이 아닌, 나만 알고 있는 나만의 순간을 묘사하고 있다. 깊이 파악할 수 없지만 깊이에 대해 어렴풋이나마 본 것 같다.\n하나님의 용서와 사람의 용서에 대해서는 비종교인에게 납득이 안되는 것 중에 하나일 것이다. 나도 결정의 순간이 찾아오고 있다.\n겉으로 보이기에는 미친 사람처럼 보이는 상황이지만, 그 행동의 과정을 알고 나면 그럴 수 있겠다 싶은 마음이 들게 된다. 원수의 딸이 당할 것이라 예상되는 삶의 고통도 걱정이 된다. 주인공도 남이고 유괴범의 딸도 남인 내 입장에서는 둘 다 나쁜 일을 안겪었으면 좋겠지만, 내 원수에게도 이렇게 상황을 이해해줄 수 있을까? 그동안 너무 중립적인 입장으로 생각하려 해서 걱정이 됐었는데, 걱정 안해도 될 것 같다. 남이니까 그러려니 하는 거겠지...\n\n#### 그녀\n감정을 나누면 사랑\n기계학습은 너무 빨라서 인간을 초월한다\n처음에 기계를 말로 컨트롤하는 것에서 이어져서 인공지능 OS와의 대화 자체에 대한 설득의 과정을 넘어가고 바로 정서적 교감을 나누는 씬으로 넘어간 연출이 깔끔하고 좋았다.\n\n#### 복수는 나의 것\n- 너무 잔인했다...\n- 나의 것에서 '나'가 누구인가 했더니, 끝없이 이어지는 '나'가 있다는 의미인 것 같다\n\n#### 아네트\n- 재미없었음\n- 두 스타가 결혼을 했다. 한 명은 승승장구하고, 한 명은 슬럼프를 겪게 됐다.\n- 이른 나이에 성공을 쭉 이어갈 수도 있고, 고꾸라질 수도 있다.\n- 이게 부부 내에서 모두 일어난다면 서로 힘들 수 있겠다.\n- 커리어를 쭉 이어나가면서 죽어서도 이름을 남기는 사람이 있고\n- 이른 성공 후 잊혀지는 사람도 있는데\n\n#### 화양연화\n- 불륜 당하고 불륜을 했던 그 시절을 화양연화라고 제목지은...\n\n#### 김종욱찾기\n- 끝을 봐야 새로운 시작을 할 수 있다\n\n#### 타오르는 여인의 초상\n그림같은화면의 연속\n부드럽고 섬세한 대사\n그렇게 말하고 싶다\n다시 보고 싶다\n\n#### 컨택트 - 드니 빌뇌브\n내용을 진행하는 중에 필연적으로 등장하게 되는 사회적 이슈를 자연스럽게 다루는 느낌이 들어 좋았다. 억지로 사회적 메시지에 대한 이야기를 전달하기 위해 부자연스러운 느낌을 내는 영화도 많은데 이 부분에서 부드러움을 느꼈다\n\n내용적으로는 미래를 알면서도 현재를 받아들이는 것이 가능할까 라는 의문을 잘 던져줬다.\n#movie\n\n#### 사랑도 통역이 되나요 - 소피아 코폴라\n좋았다\n촬영감독과 모델이 의사소통이 안되지만 각자의 요구사항을 가지고 있는 장면을 보면서 자신의 개성을 표현하려는 독창성, 예술성을 나도 낼 수 있으면 좋겠다는 생각을 함\n#movie\n\n\n#### 영화 아사코\n\n처음에 여주의 영혼없는 표정이 약간 무섭게도 느껴졌다\n근데 후반부에 이성을 되찾으면서 표정이 생겨나는게 대비가 되어 좋았다\n마지막 부분에서는 다시 표정이 사라졌는데, 료헤이가 여주를 받아주고 표정이 약간\n풀리는 것으로 보여서 약간 이상했다. 서로의 기분에 대한 상상을 해볼 수 있겠다.\n\n인간이 인간다운 행동을 하는건 본능으로 행동할 때도 있지만 이성적인 판단을 더해서\n행동할 때도 인간다운 행동이다\n\n바쿠를 따라간 것이 직관에 이끌려 간 것이고 아침이 되어 다시 심경의 변화가 생긴\n것이라 생각했는데, 따라가는 순간부터 이별의 방법으로 선택했다고 보는 시각도 있는\n것 같다.\n바쿠를 처음 봤을 때는 직관이 거부감을 일으켰는데, 그 이후 바쿠와 료헤이에 대한\n고민이 있었을 것 같긴 하다. 그리고 두 번째 만남이 있었으니 그렇게 볼 수도\n있겠다.\n\n초반 바쿠의 행동이 나오는 장면이 로맨스의 정석처럼 보였고,\n사진전을 보고 난 후 료헤이가 여주의 친구에게 해주는 말도 사려깊어 좋았다.\n여주의 친구의 연극에 대해 직설적인 말을 뱉은 동료에게 한 대사와 그 씬 전체가 좋았다.\n\n전체적으로 연출이 진부하지 않고 비트는 장면이 있었고, 찌릿 찌릿하게 봤다.\n\n#### 위플래시\n위플래시 - 한계를 깨도록 해서 위대한 연주자를 만드려는 과격한 코칭\n\n#### 도쿄의 밤하늘은 항상 가장 짙은 블루\n도쿄의 밤하늘은 항상 가장 짙은 블루 - 그래도 예상대로 흘러가지 않는 일이 찾아온다\n\n#### 중쇄를 찍자 1화\n만화가의 콘티가 만화의 설계도\n콘티를 꼼꼼하게 작성해서 주는 만화가도 있고, 아닌 만화가도 있다고 한다\n\n신입이 편집자란 무엇인가요 물어봤을 때 부편집장이 그건 니가 앞으로 알아가야한다고 했다. 좋은 대답인 것 같다. 후반부에 본인도 모르고 찾고 있다고 하는 것도 좋았다.\n\n작가의 문하생이 작가가 못알아본다고 해서 애매한 부분을 그냥 넘어간다면 나중에 자신의 것이라고 해도 그것을 제대로 챙길 수 있을까? 근데 상황이 달라지면 그 상황에 따라 또 달라질 수도...\n\n왕년에 잘나가던 작가가 인터넷에서 한물갔다는 이야기를 보면다면, 문하생은 그것에 영향을 받아 작가가 콘티를 봐줄 때 구린 사람이 봐봤자 뭘 알겠어 라고 생각할 수 있겠다. 그런 생각을 하면서 남아있는게 맞을까? 그런 생각이 잘못된걸까? 10년 정도 그 사람과 있다가 점점 그 이야기를 듣게 된다면.. 좋게 생각하긴 어려울 것 같다.\n한물 갔다는 얘기를 듣게 된 작가는 자신에 대한 평가를 받아들일 수 있을까..\n한물 갔다는 평가를 들은 사람들이 있었지만 그 평가를 뒤엎고 자신을 증명한 작가들도 있다.\n1화에 나온 작가는 그런 평가를 듣는 것에도 놀랐지만 가장 힘든 건 자신이 계속 만화를 통해 이야기하고 싶었던 것이 독자들이나 가까이 있는 사람에게 전달이 안된 것 같다는 것이라고 한다.\n\n전달이 안된 사람들도 있을 수 있지만, 영향을 받은 사람도 있을 것이다. 드라마에서는 문하생 출신 작가들이 나와서 그것을 작가에게 상기시켜주었다.\n디지털 환경을 신경 안쓰다가 이제 신경쓰게 되고, 편집자와의 관계도 바꿔보려고 하는데, 이 시도가 실패하는 것으로 끝나는 경우도 있다. 그래도, 한 발 나아갔다.\n\n신입에서부터 회사에 적응하는 과정과 한 작가의 경력을 돌아보는 내용으로, 프로의식에 대해 돌아볼 수 있어 좋았고, 대사들이 좋았다. 한 시리즈가 밀도 있게 진행되서 좋았다.\n\n드라마가 끝이 다음 내용을 궁금하게 만들어서 다음화를 보게하는 중독성 때문에 멀리하려고 했었는데, 이 드라마는 한 편이 아주 깔끔하게 끝났다. 그러고보니 리갈하이도 마지막화에 다가설 때를 제외하고는 한 편 한 편이 완결된 형태였다. 이런 옴니버스식 드라마는 괜찮을 것 같다.\n\n#### 중쇄를 찍자 2화\n신인 작가는 얼마나 팔릴지 몰라 최소 부수만 찍게 되면, 판매대에 전시하는 물량은 안되서 그 신인이 새로 등장했는지 알릴 수 없다는 것을 파악하고 있다. 신인을 알리기 위해 눈에 잘 띄는 곳에 책을 배치하는 것도 새로운 것을 알리는 좋은 방법이라는 것을 출판업계에서는 이미 파악하고 있다.\n\n영업팀장의 비밀노트에는 입사하면서 봤던 것들, 경험했던 것들이 적혀있었다. 서점에 직접 영업을 뛰러가면서 만났던 사람의 특징이나 관찰한 것들을 잘 모아뒀다가, 팀장이 된 지금에도 판매사원들의 특징을 참고해서 본인의 업무에 참고하고 있었다. 그렇게 입사초기의 경험들을 간직해둬서 그 사람들을 기억하고, 지금은 직접 만나지 않지만, 고객들과는 직접 대면하는 판매사원들을 파악해서 고객과 연결고리를 이어가려 하고 있었다. 입사 때의 사람이 남아있지 않을 수도 있지만 그 서점의 특성이라던지, 경험했던 것들을 이용한다는 것이 인상적이었고, 본사 - 판매점 - 고객의 구조에서 판매점과의 연결고리를 강화함으로써 고객과의 연결고리도 강화한다는 것이 효과적이라고 느껴진다. 본사가 고객과 직접 대면하는 것이 힘들다면 판매점과의 긴밀한 교류를 하는 것이 필요할텐데, 그 긴밀한 교류를 자신의 경험을 잘 적어둔 것을 이용해서 효과적으로 만들어낼 수 있을 것 같다.\n\n주인공이 서점에 가서 판매사원들에게 밝게 다가가서 이야기를 하는 모습에서 인간에 대한 사랑과 관심이 느껴졌다. 외향적이고 내향적인 것을 떠나서 인간에 대한 사랑으로 다가가는 느낌이 들었다. 나도 이런 마음으로 사람들을 대하면 좋겠다.\n\n#### 존 말코비치 되기\n재밌었다\n처음 꼭두각시 연극 장면과 중간에 말코비치가 같은 연극을 하는 장면이 인상깊었는데 왜 인상깊은지 표현을 못하겠다. 그렇게 같은 장면을 비슷하게 반복하는 연출은 처음보는 연출은 아닌데도 특별하게 느껴졌다\n\n거울이 신비로운 소재라고 생각했는데 영화에서도 잘 쓴거 같다. 거울이 나올 때마다 뭔가 생각이 떠오르려고 하는데 끄집어내지는 못했다. 영화를 보면서 느끼는 감상을 잘 알고 싶다.\n\n엔딩 부분은 굉장히 섬뜩하면서 이야기가 이야기로 느껴지게 해준다. 형이상학적으로 생각하도록 영화에서 직접적으로 언급도 하지만, 스릴러로써도 이야기가 잘 만들어진 거 같다. 자아의 저주라는 표현이 영화에서 나온건지 다른곳에서 본건지 헷갈리는데 자아에 대한 고찰을 다루는 영화같기도 하고 스릴러 같기도 한 다층적인 각본이 훌륭한 것 같다.\n\n말코비치가 말코비치의 의식으로 들어갈 때 어떻게 될지 궁금했는데 잠재의식으로 들어가게 해서 약간 아쉬웠다. 자아가 내 자아인지 아닌지 다른 사람에게는 의미가 없을 수도 있겠다 싶다. 말코비치의 지인들은 갑자기 바뀐 말코비치가 외부의 영향으로 그렇게 바뀌었을 수 있겠다고 생각할 수 있겠고, 그의 예술을 다른 관련인들이 어떻게 해석하느냐에 따라 작품 세계도 대중에게 해석대로 인식 될 수 있어서 말코비치가 말코비치가 아니어도 알아차리 수 없음과 동시에 그가 아니어도 상관 없는 것 같은게 섬뜩하다. 자신의 에고가 강해서 주변인들에게 그렇게 인식되고 있어서 변화를 감지하고 알아채는 스토리도 봤었었는데 그런 캐릭터가 멋있게 느껴진다.\n\n남자 주인공이 회사에서 치근덕대는 것과 여자 주인공이 동업자에게 빠져드는 것의 본질적 차이가 있는지 궁금하고, 동업자의 개인적 선택인건지 본질적 차이 때문인건지 헷갈린다.\n\n#### 애브리띵 애브리웨어 올앳원스\n별점 5\n\n멀티버스 이야기. 다른 멀티버스에는 하나의 장점이라도 가지고 있는 '나'가 있는데, 세상을 구원할 '나'는 장점이 하나도 없는 세계의 나이다. 그래서 오히려 모든 장점을 가질 수 있는 가능성이 생긴다. 그렇게 나는 다른 세계의 나의 장점을 하나씩 가져오며 그 세계의 나의 멋진 모습을 보고 그 세계로 가고 싶어 하지만 결국 현재 세계의 좋은 점이 다른 세계의 좋은 점보다 작은 게 아니라 안좋은 점만 보고 있었다는 내용으로 진행되며 흔한 메시지를 다시 꺼내긴 했지만 이후 딸과 함께 클라이막스를 전개하면서 나오는 장면은 임팩트 있었다.\n\n딸은 상대역으로 나오지만 오히려 우리인 것 같고 나는 세상을 표현한 것 같다. 세상을 여유를 가지고 열린 마음으로 다정하게 보자라는 결론이 된 것 같다.\n\n부부는 서로의 온전한 상태를 이해하는 존재이지만, 그래서 서로를 모두 알고 있다고 생각하게 된다. 하지만 서로의 공유하는 부분도 있지만 고유한 부분도 있다. 하지만 그것은 쳇바퀴처럼 도는 일상에서는 발견하기 힘들고, 서로에게 관심이 줄어들고 여유가 없어지면 관계는 더 멀어지기만 하게 될 것 같다. 갇힌 생각에서 벗어난다면 그 부분을 살아가면서 계속 발견할 수 있고, 그 부분에 감동을 받을 수 있는 관계는 서로에게 좋은 영향이 되고 좋은 관계인 것 같다.\n\n좋았던 장면\n일상을 살아가는 부부의 자연스러운 모습 이후에 서로에게 못봤던 새로운 모습을 보게 하는 장면은 사랑에 대해 공감했던 에리히프롬의 문장과 일맥상통하여서 와닿았다.\n할아버지가 딸을 떠나보낸 장면과 손녀가 떠날려고 할때 딸이 잡는 장면\n싫어할거라 생각해서 숨겨왔던 것을 다 공유했을 때 그것을 받아들일 수 있는 마음을 나타낸 장면\n할아버지가 손녀의 여자친구의 존재를 알게 되었을 때,\n\n#### 영화 여인의 향기\n> 자신이 위기를 맞았을 때 누군가는 도망가고 누군가는 남는다. 위기에 맞섰고 진정성이 있었고 용기가 있었다\n\n이게 급우의 비행을 숨겨야하는 입장이 할 수 있는 말인가?\n\n#### 영화 패터슨\n역시 감성적인 영화가 기억에 남는다\n첫 시작에 뭔가 재미있는 부분은 없었는데 시가 등장하기까지 전혀 지루함없이 잘 흘러갔다. 그리고 시가 나오면서 너무 좋았다. 흰 바탕에 검은색 무늬 패턴을 계속 보여주면서 영화의 주제를 시각적으로 보여주는 것 같은 소재도 좋았다. 일상 속에서 새로움이 있다는 진부한 말을 예술적인 연출로 표현했다. 월요일까지의 상황이 일요일까지 반복되는걸 알면서도 영화를 끝까지 보게 만드는게 대단한 것 같다. 매일마다 크게는 같지만 새로운 일들이 분명 생긴다. 일상적인 루틴을 좋아하는 나에게 굉장히 위로가 된다.\n\n주인공은 휴대폰을 갖고 있지 않다. 휴대폰이 있기 이전에도 삶은 잘 살아졌기 때문에 굳이 필요하지 않다는 입장이다. 편하지 않아도 괜찮다고 한다. 그래서 종이노트를 쓰고, 시계를 쓰고, 문자 대신 편지를 받고, 남의 전화를 빌린다. 종이노트가 감성이 있지만 전자노트가 훨씬 실용적이라고 생각해서 그동안 멀리하고 있었는데 그 나름의 쓸모를 조금씩 느끼고 있던 와중에 이 영화를 보니 너무 끌린다. 종이의 질감을 더 잘 느낄 수 있을 것 같다. 휴대폰에 속박에서 벗어나서 전화만 되는 것도 충분하겠다는 생각이 든다. 스마트폰이 있기 전에 모든 역할이 휴대폰 안에 들어가면 더 이상 다른 것들은 필요 없을 줄 알았는데, 스마트폰이 수많은 기능을 삼켰지만 여전히 종이노트가 존재감을 뚜렷하게 가져간다는게 놀랍다. 가치가 있다. 연락의 노예가 되버린 나에게 이 족쇄에서 벗어나게 해줄 해방구가 될 것 같다.\n\n아날로그 감성을 기분좋게 채워준 이 영화가 계속 기억에 남았으면 좋겠다. 어제 본 영화인데 이렇게 좋은 기억으로 남은 것이 좋다.\n\n#### 영화 파수꾼\n내가 느낀 감정을 표현하기도 어렵고 설명하기도 어렵고 그래서 진심과는 다른 말로 나오기도 하고\n하지만 동시에 똑같이 미숙했던 친구는 그 말을 그대로 받아들일 수밖에 없고 무너진다\n학창시절의 일뿐 아니라 아무리 경험이 쌓여도 미숙할 수밖에 없고 이렇게 표현에서 상처를 받을 수 있다\n그렇다면 어떻게 솔직해지면서도 숨겨진 것들을 찾을 수 있을까\n그래 솔직하지 못했다. 하지만 방어막이 두껍게 쳐져있는 것을 어떻게 꺼낼 수 있을까. 내 안에서나 친구에게서나 껍질을 깨는 것은 너무 어렵다. 쌓아둔다고 안에서 썪는다는 말은 별로 공감을 안하지만 누군가 깨주길 바라는 것을 내가 깨면 좋겠다\n\n#### 영화 우리도 사랑일까\n안정적인 결혼생활 중 끌리는 사람을 만난다는 밸런스게임의 영화인 줄 알았는데 결말은 결국 두 사람과 같은 것을 반복하게 될 뿐이었다. 끌림에 집중해도 사랑을 모르고 안정도 사랑을 알 수 없다 오래가는 사랑을 하고 싶은데 결국 두 밸런스를 잘 잡아야 할거라는 막연한 결론으로 다시 돌아왔다.. 안정적인 연애를 그리는 장면에서도 서로를 유혹하기 위한 노력은 계속 있었고 이 사랑도 끝은 났다. 다른 끌림의 유혹에 넘어갔으니까. 그러면 그런 끌림의 유혹이 결국 의미 없으니까 그것을 조심하라는게 영화의 메시지일 수도 있겠다\n\n\n"},{"headings":[{"value":"INBOX"},{"value":"수학자들은 뭘할까? 어떻게 살까?"},{"value":"수학자 관련 쉬운 책 추천"},{"value":"과학학술지에 머신러닝 섹터 확인"},{"value":"Review"},{"value":"2025"},{"value":"하늘"},{"value":"~2025"},{"value":"상실의 시대"},{"value":"사피엔스"},{"value":"철학자의 조언"},{"value":"미학에세이"},{"value":"빛의 호위"},{"value":"쇼코의 미소"},{"value":"7년의 밤"},{"value":"바른 마음"},{"value":"sapiens"},{"value":"특별한 순간에 대한 기억"},{"value":"Truth"},{"value":"근원, 시작점이 어딘지 궁금했었다"},{"value":"멋진 신세계"},{"value":"클린 코드 책 정말 좋다 소장각"},{"value":"미학 오디세이"},{"value":"지각은 직관 이후에 생긴다"},{"value":"진리란?"},{"value":"다자키 쓰쿠루"},{"value":"clean architecture :input:book:tech:architecture:"},{"value":"나는 농담이다 김중혁"},{"value":"여자 없는 남자들"},{"value":"아무튼, 피아노 - 김겨울"},{"value":"밝은 밤"},{"value":"열한 계단"},{"value":"팩트풀니스"},{"value":"뇌 과학이 인생에 필요한 순간 - 김대수"},{"value":"이미지 인문학 1 - 진중권"},{"value":"인간 실격"},{"value":"장하준의 경제학 강의"},{"value":"일의 기쁨과 슬픔"},{"value":"사람의 아이들"},{"value":"숫자가 만만해지는 책"},{"value":"내게 무해한 사람"},{"value":"사피엔스"},{"value":"진중권의 미학 에세이"},{"value":"수학이 필요한 순간"},{"value":"바른 마음"},{"value":"지하로부터의 수기"},{"value":"소프트웨어 장인"},{"value":"어떤 양형 이유"},{"value":"숨"},{"value":"판결의 재구성"},{"value":"이방인"},{"value":"당신 인생의 이야기"},{"value":"부자의 경제학 빈민의 경제학"},{"value":"김화진"},{"value":"날씨가 좋으면 찾아가겠어요"},{"value":"거위의 간"},{"value":"컨텐츠"},{"value":"독서는 여행이다"},{"value":"Review"},{"value":"책을 읽는 이유"},{"value":"책을 읽으며 기대하는 것"},{"value":"평론가가 니가 느낀 감정은 이거야 라고 단정지으면 기분나쁘다"},{"value":"책값 price, value"},{"value":"Pay for contents"},{"value":"텍스트와 이미지의 차이"},{"value":"책에서는 알 수 없었던 것"},{"value":"Book award"},{"value":"IT 서적"},{"value":"personal recommand"}],"fields":{"slug":"/reading/"},"rawMarkdownBody":"\n[[Movie]]\n[[Think#독서는 여행이다]]\n\n## INBOX\n| Book                                               | Start  | End  |\n| -------------------------------------------------- | ------ | ---- |\n|                                                    |        |      |\n| 어린이라는 세계                                    |        |      |\n| 플래시보이즈                                       |        |      |\n| 부분과 전체                                        |        |      |\n| 괴델, 에셔, 바흐                                   |        |      |\n| 멀티미디어 - 바그너에서 가상현실까지               |        |      |\n| 후츠파 윤종록                                      |        |      |\n| 소로우 월든                                        |        |      |\n| 배삼식                                             |        |      |\n| 마거릿 애트우드 그레이스                           |        |      |\n| 오만과편견                                         |        |      |\n| 카뮈 - 시지프신화                                  |        |      |\n| 카뮈 - 작가노트                                    |        |      |\n| 그림자 노동의 역습                                 |        |      |\n| // 멋진신세계                                         |        |      |\n| 총,균,쇠                                           |        |      |\n| 칼 세이건 - 코스모스                               |        |      |\n| 브라이언 그린 - 우주의 구조                        |        |      |\n| 지금 다시, 헌법                                    |        |      |\n| 움베르토 에코                                      |        |      |\n| 상대성이론의 참뜻 버트런드 러셀 사이언스북스       |        |      |\n| 수학의 쓸모                                        |        |      |\n| Aosabook - 오픈소스 아키텍처 소개 ebook            |        |      |\n| 서버/인프라를 지탱하는 기술                        |        |      |\n| 신용복 - 강의                                      |        |      |\n| 단단한 과학공부                                    |        |      |\n| 강유원 - 인문고전강의                              |        |      |\n| rethinking the internet of things                  |        |      |\n| SICP                                               |        |      |\n| 뒤렌마트 희곡선                                    |        |      |\n| 공산당선언                                         |        |      |\n| 발터 벤야민 1892-1949, 한나 아렌트                 |        |      |\n| c 프로그래밍 - 브라이언 커니햄                     |        |      |\n| 데브옵스 핸드북                                    |        |      |\n| 부의 지도를 바꾼 회계의 세계사                     |        |      |\n| 인포메이션, 제임스 글릭 저                         |        |      |\n| 프로그래밍 심리학, 제랄드 와인버그                 |        |      |\n| 가담항설 단행본                                    |        |      |\n| 영화를 찍으며 생각한 것                            | 21     |      |\n| 이미지 인문학                                      | 21     |      |\n| //수학이 필요한 순간                               |        |      |\n| //정유정 소설 (7년의 밤)                           | 19     | 19   |\n| //어떤 양형 이유                                   | 19     | 19   |\n| //가아더 소피의세계                                |        |      |\n| //1984                                             |        |      |\n| [[#상실의 시대]]                                   |        |      |\n| [[#바른마음]]                                      | 19     |      |\n| [[#빛의 호위]]                                     |        |      |\n| [[#사피엔스]]                                      |        |      |\n| [[#철학자의 조언]]                                 |        |      |\n| [[#미학에세이]]                                    |        |      |\n| //상류엔 맹금류                                    | 19     | 19   |\n| //내 문장이 그렇게 이상한가요?                     | 19     | 19   |\n| 루시 | |\n| 그녀를 만나다       |      |\n| 헬로 데이터 과학       |      |\n| 컴퓨터 과학이 여는 세계       |      |\n\n사회과학을위한 질적연구 핸드북,김영천,아카데미프레스\n침묵의 세계 - 막스 피카르트, 까치\n에디토리엉 싱킹 - 최혜진\n\n#### 수학자들은 뭘할까? 어떻게 살까?\n이론연구를 하는건가?\n그 수학적 증명방식처럼 증명가능성을 찾는 여정을 개발에 접목할 수 있을까\n\n게으름에 대한 찬양 - 버트런드 러셀\n\n#### 수학자 관련 쉬운 책 추천\n[주말N수학] 단 한번의 기회가 수학자의 길로 인도\n\"영국 수학자 고드프리 해럴드 하디의 <어느 수학자의 변명>\"\n[https://n.news.naver.com/article/584/0000020887?cds=news_edit#:~:text=%EC%98%81%EA%B5%AD%20%EC%88%98%ED%95%99%EC%9E%90%20%EA%B3%A0%EB%93%9C%ED%94%84%EB%A6%AC%20%ED%95%B4%EB%9F%B4%EB%93%9C%20%ED%95%98%EB%94%94%EC%9D%98%20%3C%EC%96%B4%EB%8A%90%20%EC%88%98%ED%95%99%EC%9E%90%EC%9D%98%20%EB%B3%80%EB%AA%85%3E](https://n.news.naver.com/article/584/0000020887?cds=news_edit#:~:text=%EC%98%81%EA%B5%AD%20%EC%88%98%ED%95%99%EC%9E%90%20%EA%B3%A0%EB%93%9C%ED%94%84%EB%A6%AC%20%ED%95%B4%EB%9F%B4%EB%93%9C%20%ED%95%98%EB%94%94%EC%9D%98%20%3C%EC%96%B4%EB%8A%90%20%EC%88%98%ED%95%99%EC%9E%90%EC%9D%98%20%EB%B3%80%EB%AA%85%3E)\n\n#### 과학학술지에 머신러닝 섹터 확인\n저명한 학술지를 시작점으로 관심이 가면 논문을 찾아봐도 될듯. it 쪽 학술지 있으려나\n- 네이처\n\n\n# Review\n\n## 2025\n\n#### 하늘\n- 허공\n- 별의 집\n- 나무의기댈곳\n- 새의 길\n\n> 인간에 대한 관심과 궁금증이 인터뷰를 만든다. 미숙했던시절부터 서술하면서 저자와 가까워진 느낌이 들었고 뒷 내용이궁금해지더라\n> - 장은교, 인터뷰하는 법\n\n## ~2025\n#### 상실의 시대\n책으로 감수성을 깨울 수 있다는 것을 알려줌 책의 재미를 알게 해줌\n\n#### 사피엔스\n항상 궁금했지만 몰랐던 역사의 흐름을 알려줌\n\n#### 철학자의 조언\n지금 하는 고민을 과거의 사람들도 하였다는 것을 알려줌\n\n#### 미학에세이\n독특한 접근방식, 시각을 느끼게 해줬다\n[[Decision# 마티스의 ‘영감’에서 네자르의 ‘작품’까지]]\n\n#### 빛의 호위\n[문학과지성사](http://moonji.com/monthlynovel/7536/7/)\n\n#### 쇼코의 미소\n인상 깊게 감성적인 책이었다\n\n#### 7년의 밤\n인상적인 내용\n- 아들의 시선으로 내용 시작\n- 범죄자 아버지를 둔 아들의 입장을 보여주면서 범죄자 자식에 대해 어떻게 바라볼 것인지 생각해보도록 유도\n- 개인의 과거행동에 후회가 담기면 인생의 불행이 됨을 표현\n- 마지막 아버지는 아들이 과거에서 벗어나 미래를 향해 가기를 희망함\n- 그것도 아들이 선택할 수 있도록 하는 것이 진짜 선택이라고 작가는 말함\n- 모든 인물이 살아온 환경에 큰 영향을 받음. 실제 세상에도 그럴 것이고\n- 미래를 바꾸는 것은 결국 개인의 선택\n\n#### 바른 마음\n- 감정과 인지\n- 직관과 추론\n  - 감정에도 인지에 의한 감정이 있고, 감정에 의한 추론도 있다\n- 도덕적 추론\n- 도덕적 직관\n- 도덕적 감정\n  - 호르몬변화는 감정\n- 주의력 및 경계심 변화는 감정의 인지적요소\n- 직관의 하위유형\n- 추론은 직관의 하인\n\n자주 본 것을 한번 본 것보다 더 호감을 느끼는 상황이 있다.\n광고에서도 이용된다 단순 노출 효과.\n그러나 부정적인 느낌을 가지게 되면 여러번 본다해도 좋아지지 않을 수 있다.\n\n#### sapiens\n- I've read sapiens. and then I'd like to read about after world war 2\n because computer and network are made after that war.\n Computer and world war is very relevant\n- Knowing history is make me able to develop a better software. because software is\n evolved from every previous software like history.\n[[Reading]]\n\n#### 특별한 순간에 대한 기억\n- 소름돋음\n(책)숨결이 바람될 때 - 죽음에 대하여..\n- 퍼디난드 자서전을 읽으면서\n월드컵에서 호나우두에게 제쳐진 후 자신의 발전해야 되는 부분이 이것이라고 생각하고, 그 후 뭔가 실패할때마다 새로운 것을 배워나갔다고 한다\n나도 실패, 실수하는 경우가 많은데 이것이 내가 배울 수 있는게 많다는 것을 의미하는 것 같다\n그냥 안주해버리면 안된다. 계속 발전해나가야 한다\n\n#### Truth\n개츠비는 데이지를 원한다고 말한다. 그것은 바로 그가 사랑을 원한다는 뜻이지만, 사실 그는 그녀를 통해서만 얻을 수 있는 다른 무엇인가를 원할 따름이다. 표면 아래 음울하게 감추어진 형식을 취하고 있는 다른 무엇인가는 소설이 끝나고도 오랫동안 요동친다.\n\n>어쩌면 개츠비는 자신이 데이지를 원한다고 착각했던 것일지도 모른다. 만약 그렇다면 자신이 원하는 것이 무엇인지도 모르고 저질렀던 그 많은 소동의 의미는 상당히 우스꽝스러워진다. 이 씁쓸한 웃음 속에 아이러니가 깃든다.\n>> 김연수, 『시절일기』 180쪽\n\n자신의 감정이 착각일지 모른다고 말하는 다른 사람은 그렇다면 당신이 나의 감정을 아는 것인가\n그렇다면 내 감정은 내가 착각할 수 있으니 내 감정을 믿지 말라는 것인가\n라고 말할 수 있다\n진심이 꼭 진실은 아닐 수 있다\n진심을 담아 얘기했지만 기억이 안나서 생각을 못했을 뿐 바뀔 수 있다\n그러나 그 순간에는 그것이 맞다고 생각한다\n\n#### 근원, 시작점이 어딘지 궁금했었다\n역사는 사피엔스로 흐름을 파악할 수 있었고\n컴퓨터는 조금씩 인터넷 검색으로 알게 되었다\n\n#### 멋진 신세계\n태어날 때부터 본능, 할 일, 계층이 정해진 사람\n본능이라고 느낀 것이 사실은 제작자의 의도인 것\n- 인류의 진보가 없이, 발전이 없이 계속 똑같은 것만 하게 되지 않을까\n\n성적인 것을 어릴 때하는 장난으로 만들고, 20살까지 억제되있는 현재의 상황을\n끔찍한 것이라고 함으로써 어릴 때의 사랑이 자유롭게 열려야 한다고 말한다\n- 성이 고귀하거나 진리인 것은 아니지만 무분별한 허용은 안좋을 것 같다\n\n> 의회라는 데서 수면 학습 금지법을 기어이 통과시켰지. 그 당시 기록이 지금도 남아 있다. 바로 국민의 자유에 관한 연설문이지. **비능률적이고 비참한 삶을 살아갈 자유, 맞지 않는 옷을 입고 불편하게 살아갈 자유** 를 주장하는 내용이다.\n\n예순이 되어도 열일곱 살의 체력과 취향을 유지한다. 일을 하며, 삶을 즐긴다\n- 기반이 이미 조작된 것이어서 삶이 의미가 없다\n- 노년에 즐겁게 살 수 있으면, 자유가 필요한 이유는 뭘까. 자유는 노년의 행복을\n  가져다 주지 못한다.\n- 자유를 통해 노년의 행복으로 다가갈 수는 있다.\n  과학자들은 지금 눈 앞의 문제 해결을 위해 애쓰고 있고, 이것은 자유가 있기에\n  발전을 만든다.\n  문제 해결의 끝이 꼭 노년의 행복이 아닐 수도 있다.\n  그것이 무엇이 될지는 아무도 모르고, 멋진 신세계의 유토피아는 사실 유토피아가 아니다.\n\n- 존엄성을 잃었을뿐 아니라\n  노예이고, 노예로서 세뇌되어 행복을 느낀다\n- 행복이 최고의 가치는 될 수 없겠다 싶다.\n\n- 자유를 최고의 가치로 여기는 현재는 행복은 덜하지만 원하는 것은 스스로 할 수 있다\n  근데 스스로 뭐든 할 수 있다는 것이 기득권에게는 더욱 잘 활용되어진다\n\n#### 클린 코드 책 정말 좋다 소장각\n\n#### 미학 오디세이\n1권이 고대 2권이 근대 3권이 현대\n이런식이 아니라\n1권에서는 가상과 현실을 주제로.\n2권에서는 다른 주제로 전체를 보는 방식\n- 애자일하고 순환적인 방식. 좋다\n- 한 주제를 집중해서 조망한다고 해도 보는 관점은 수없이 많을 수 있고, 그러면 한 곳에 담을 수도 없다.\n  차라리 한 주제를 잡고 전체를 훑는 방식이 더 구체적일 수 있겠다\n-> 알고보니 1권이 고대 2권이 근대 3권이 현대인게 맞았다.\n\n\n> 추상은 본질적이고 변하지 않는 것을 남기려는 시도\n\n> 추상은 차갑다\n\n> 아이스킬로스에 이르면 이미 디오니소스 숭배와의 연결고리는 끊긴다. 말하자면 제의가 예술이 된 거다. 비극은 이제 제의 기능을 위해 신화를 정확히 재현할 필요성에서 해방되고, 더욱더 무대의 요구에, 말하자면 예술적 창조의 법칙에 따르게 된다\n>> 미학 오디세이 - 진중권\n\n기존의 흐름과 떨어진 것이 기존의 질서에 억압에서 풀려나 자유로움을 얻게 되고, 넓은 영역으로 발전할 수 있게 된다.\n억압에서 풀려나면 다른 차원으로 길이 생긴다.\n\n[[Input#영화 피아니스트]]\n[[Standard#제한이 억압이 되면 그것을 깨부수고 대안을 찾으려 한다]]\n\n#### 지각은 직관 이후에 생긴다\n> 우린 그냥 바라볼 뿐, 빨간색이 '보이는 행위'에 속하는지, '보이는 사물'에 속하는지 묻지 않는다. '보는 것'과 '보이는 것'의 구별은 나중에 이 지각 체험을 돌이켜 생각할 때 비로소 생기는 거다.\n  > 미학 오디세이2\n\n바른 마음에 나오는 직관이라는 코끼리를 끄는 사람의 비유와 일맥상통한다\n\n#### 진리란?\n대응설 - 진술과 사실의 일치. 하지맘 사실을 알 수 없다\n합의설 - 다수의 공감, 합의. 하지만 지구는 태양을 돈다\n정합설 - 논증의 타당성, 사실여부에 관계없이 타당할수만도 있음\n\n하이데거\n예술이란 존재자의 진리를 나타내는 것\n존재자는 작품의 대상\n진리는 이데아와 같은 그 자체로의 근본적인 전제\n\n바다 그림의 이야기를 본 것이 떠올랐는데 그 그림에서 바다는 사람들에게 바다를 꿈을 꾸게하는 무언가로 표현을 했고 이 그림이 바다라는 존재자의 진리를 나타냈다고 생각하며 읽으니 와닿았다\n- 미학 오디세이2\n\n#### 다자키 쓰쿠루\n> 의식과 기억 그리고 자아\n- 의식이 생기고, 기억이 생기고, 자아가 생기는 사람의 정신적 성숙 과정\n\n> \"만드는 일에 열정을 불태우는 정도는 아니야. 그저 한정된 대상에 관심을 가졌을 뿐이야.\"\n> \"한정된 관심을 가질 대상을 살아가면서 하나라도 발견했다는 것 자체가 정말 대단한 성취 아닌가요\"\n>> 색채가 없는 다자키 쓰쿠루와 그가 순례를 떠난 해 - 무라카미 하루키\n\n#### clean architecture :input:book:tech:architecture:\n> 수많은 유형의 프로그램을 개발했지만 그 시스템들은 근본적으로 비슷한 아키텍처를 공유하고 있었다. 소프트웨어 아키텍처의 규칙은 다른 모든 변수에 독립적이다.\n    (독립적이다는 말은 그 프로그램에 종속되거나 의존하는게 아니라 어떤 프로그램이든 상관 없다는 뜻이다.)\n> 소프트웨어 아키텍처의 목표는 필요한 시스템을 만들고 유지보수하는 데 투입되는 인력을 최소화하는 데 있다.\n- 개발의 생산성을 코드 라인 수로 측정한 것은 아쉽다.\n회사가 커지면 제품도 커지고 그에 따라 팀이 개편된다. 이 때 소프트웨어도 같이 팀의 크기에 맞춰 조절이 가능해지면 좋겠다.\n> 회사에서 이전에 급하게 지은 코드를 나중에 고치는 일은 있을 수 없다.\n> 소프트웨어를 만든 이유는 기계의 행위를 쉽게 변경할 수 있도록 하기 위해서다. (중략) 다시 말해 변경하기 쉬워야 한다.\njavascript에서 npm에 코드를 배포해서 관리하는 것처럼, 회사에서 모든 코드를 저장소에 저장해놓고 사용하는 쪽에서도 쉽게 업그레이드해서 공유할 수 있으면 좋겠다.\n> 각 패러다임(구조적, 객체 지향, 함수형)은 프로그래머에게서 권한을 박탈한다.\n- 패러다임들의 개념이 생긴 순서가 구현된 순서와 반대라는 점과 그 생긴 것이\n  58~68년에 걸쳐있다는 점, 그리고 새로운 무엇인가를 제시한 것이 아니라 오히려\n  제한을 했다는 것이 충격적이다. 이 세 가지 패러다임 외에는 더 나올 것이 없다고\n  보는 것도 놀랍다.\n다익스트라는 공리, 정리, 따름정리, 보조정리로 구성되는 유클리드 계층구조를 프로그래밍에 이용하고자 했다.\n> 뵘과 야코피니는 모든 프로그램은 순차, 분기, 반복이라는 세 가지 구조만으로 표현할 수 있다는 사실을 증명했다.\n- 다익스트라가 구조적 프로그래밍을 생각한 계기는 모듈을 기능적으로 분리하기 위함이다.\n- goto문은 해당 모듈이 올바르지 않다는 증명을 할 수가 없다고 한다. 다익스트라가\n  유클리드 계층구조를 구현하려는 시도는 실패했지만, goto문 없이 코드가 구현\n  가능하다는 것을 통해 부정확함에 대한 증명은 가능하다는 것을 알게 되었고,\n  그래서 작은 모듈이 부정확하지 않다는 입증이 되지 않았다면 이는 쓸만한 모듈이\n  되고, 이런 모듈들을 모아 소프트웨어 구조를 만들 수 있다는 것이 구조적\n  프로그래밍의 핵심이었다.\n- 수학적 증명은 참이라는 것이 증명되야 하지만, 과학적 증명은 반례를 들 수 없으면\n  참이라고 인정하는 방식으로 동작하는데, 구조적 프로그래밍은 이렇게 수학적\n  증명은 실패했으나 과학적 증명의 방식으로 동작할 수 있게 되었다. 그래서 각\n  모듈은 쉽게 반증이 가능하도록 만들기 위해 (테스트하기 쉽도록) 만들어야 한다는\n  놀라운 통찰이다. 내가 지금까지 객체 지향으로 설계하고 있다고 생각한 것들\n  대부분이 구조적 프로그래밍에 해당하는 것이었다. TDD 마저도 구조적\n  프로그래밍에서 이미 이야기가 되었던 것이었다.\n> 정책과 세부사항을 구분한다.\n- 변하지 않을 것과 변할 것을 정해본다.\n- 격리된 부분과 외부 통신용 부분을 따로 관리할 수 있을까\n> 시스템에서 서로 결합되지 않는 계층\n  UI, 도메인에 관련된 업무 규칙, 애플리케이션에 관련된 업무 규칙.\n> 다른 이유로 변경되는 것. 유스케이스\n1. 처음에는 한 서버 안에 웹서버와 데이터베이스가 있다.\n2. 좀 커지면 웹서버와 데이터베이스가 분리된다.\n3. 그 다음은 로드밸런서가 들어오고 웹서버와 데이터베이스 묶음이 복사된다.\n4. 그리고 추가적인 보조도구들이 점차 더해진다.\n5. 그 다음은 웹서버가 각 기능별로 분리된다.\n6. 그 기능은 다시 데이터베이스와 하나로 묶이고, 분리되고, 확장된다. 순환 구조가\n   완성되었다.\n- 그렇다면 웹서버를 기준으로, 확장성을 가진 구조를 만드려면 데이터베이스와\n  연결이 되야 하고, 웹서버가 복사되어도 똑같은 동작을 해야하고, 외부 장치와\n  연결이 쉬워야 한다. 그리고 각 기능의 분리가 된 이후에도 같은 동작을 해야한다.\n- 쿠버네티스는 웹서버와 데이터베이스를 쉽게 연결시키고, 웹서버의 복사도 되고,\n  외부 장치와의 연결은 데이터베이스와 연결과 다르지 않게 관리할 수 있다.\n- 기능 분리 시 데이터베이스 분리도 쉽게 되야 한다.\n- 보조도구들이 인프라에서 쉽게 관리되야 한다.\n\n나중에 처리하겠다고 하고 작성한 코드는 안좋은 레거시의 예\n- 나중에 레거시를 보고 한숨을 내쉬며 처음부터 다시 짜는게 낫다고 생각이 드는데, 그래봤자 똑같은 일을 반복할 뿐이다. 지금부터 나은 코드를 쌓으려고 노력하고, 이전의 코드를 리팩토링을 계속 하는 것이 더 효과적이다.\n- 물론 처음부터 잘 짜여진 프로그램도 있을 수 있지만 조건이 많이 필요하다. 잘 짜여져서 같이 오랫동안 일한 동료와, 적절한 마감시간, 지식의 공유가 잘 되어있는 상태, 구성원들의 공감 등등.\n\n#### 나는 농담이다 김중혁\n> 직선으로 흐르는 시간의 강물 옆에서 우두커니 수면을 바라보고 있는 사람같았다\n\n> 우주선에 오르기 위해서 얼마나 많은 노력을 했는지 알지 않느냐고, 그 시간을 배신하지 않으려면 우주선을 타고 하늘로 날아오르는 수밖에 없다고 너는 그렇게 말했다. 나는 이해했다. 너는 후회하지 않는다고, 날더러 행복하라고 했지만, 내가 행복하기로 마음먹는다는 건 너를 포기한다는 얘기니까 아직은 그러지 않을 생각이다.\n\n> 다락 깊숙한 곳에 넣어두었다가 10년후에 다시 보고 울고 10년후에 다시보고 울고. 감정이나 편지는 다락에 넣어두는 게 아니야. 무조건 표현하고 전달해야 해.\n\n\n#### 여자 없는 남자들\n> 당신은 연한 색 페르시아 카펫이고, 고독은 절대 지워지지 않는 보르도 와인 얼룩이다.\n\n> 그 세계에서 당신은 '여자 없는 남자들'로 불린다. 한없이 차가운 복수형으로.\n\n복수형이 되면 그 단어에 내가 포함되지만 내가 특정되지 않는다. 내가 거기 있지만, 거기 없다. 차갑다는 단어가 정말 맞다.\n\n#### 아무튼, 피아노 - 김겨울\n\n> 팔을 천천히 들어 올린 다음 건반 위로 손가락 하나를 뚝 떨어뜨린다. 손가락은 건반 위에 우뚝 서 있지만 팔은 완전히 이완된 상태, 팔의 모든 무게를 오로지 손가락과 손끝으로 받아내는 상태다. 계속 반복한다.\n\n키보드를 치는 행위를 하는 입장에서 아프지 않게 편한 자세를 어떻게 잡는지 참고 할 수 있을 것 같다\n\n> 애초에 모든 분류에는 자의성과 위험성이 있다. 보르헤스의 '존 윌킨스의 분석적 언어' 에 인용된 '어떤 중국 백과사전'의 동물 분류가 현대인의 눈에 놀랍게 보이는 것처럼. 분류에는 그 분류가 이루어지는 시대와 분류하는 사람의 관점이 반영되어 있으므로.\n\n#분류\n\n> 감정을 표현하고 관객을 설득하는 것이다.\n\n> 음악을 흐르게 만드는 건 아주 어려운 일이다. 음악이 흐르려면 시간 속에 일정한 점을 찍을 줄 알아야 하고, 점과 점 사이를 유연하게 움직여야 하며, 그 움직임에 설득력이 있어야 한다.\n\n점과 점 사이를 유연하게 움직이며, 움직임에 설득력이 있어야 한다...\n\n> 또한 연주자는 쉬지 않고 앞으로 나아가야 한다(이것은 쉼표 없이 연주해야 한다는 말이 아니다. 연주자는 쉼표에서 멈추는 게 아니라 '쉼표를 연주'한다).\n\n#book\n\n#### 밝은 밤\n> '지는 게 이기는 거다.' '너를 괴롭힌다고 똑같이 굴면 너도 똑같은 사람 되는 거야.' '그냥 너 하나 죽이고 살면 돼.' 패배감에 젖은 그 말들. 어차피 맞서 싸워봤자 승산도 없을 거라고 미리 접어버리는 마음. 나는 그런 마음을 얼마나 경멸했었나. 그런 마음에 물들지 않기 위해서 얼마나 발버둥쳐야 했었나. 그런 생각을 강요하는 엄마가 나는 미웠다. 그런 식의 굴욕적인 삶을 원하지 않는다고 저항했다. 하지만 왜 분노의 방향은 늘 엄마를 향해 있었을까. 엄마가 그런 굴종을 선택하도록 만든 사람들에게로는 왜 향하지 않았을까. 내가 엄마와 같은 환경에서 자라났다면, 나는 정말 엄마와 다른 선택을 할 수 있었을까. 내 생각처럼 당당할 수 있었을까\n\n> 사람의 노력을 알아보고 애쓴 마음을 도닥여주는 사람. 겨울에 빨래를 하고 있으면 손이 시리지는 않은지 물어보고, 장을 봐오면 다녀오는 길이 힘들지는 않았는지 물어보는 사람.\n\n#communication\n\n> 맞은편에 작은 텔레비전이 놓여 있었는데 화면이 미세하게 위아래로 흔들렸고 소리가 컸다\n\n뭔가 소감을 적어놨는데 맥락이 전혀 기억이 나지 않는다.\n소감부분 : 소설을 통해 현실의 상황을 떠올리고 현실을 객관적으로 다시 생각할 수 있게 해준다. 내가 참 못났구나라는 것을 깨닫게 해준다.\n\n#### 열한 계단\n> 지능, 정체성, 기억, 인식능력, 해석능력\n\n> 안병장의 판단이 틀렸음을 증명하기 위해서 나는 무수히 많은 생각의 가지를 뻗었다. 자신의 시간을 포기할 만큼 군대라는 집단이 그렇게 윤리적인 집단이 아님을 생각했고 한국의 군대문화가 만들어낸 관료주의와 권위주의를 생각했으며, 국수주의와 애국주의가 어떻게 전체주의적 폭력으로 귀결되는가를 생각했다. 안 병장을 만나면 이런 것들을 말해주리라 생각했던 것이다. 하지만 그럴 수 없었다. 그는 그 모든 이유와 무관하게 옳다. 그는 자기 삶의 입법자이고, 자기 삶의 대지를 걸어가는 자가 아닌가.\n\n> 자기 세계의 지평을 점차 넓혀가는 사람\n\n#### 팩트풀니스\n> 자신이 즐겨 사용하는 범주에 늘 의문을 제기하는 효과적인 방법 다섯 가지가 있다. 내부의 차이점과 집단 간 유사점 찾아보기, 다수에 주의하기, 예외 사례에 주의하기, 나는 평범하지 않을 수 있다고 생각하기, 하나의 집단을 다른 집단으로 일반화할 때 주의하기가 그것이다\n\n> 그리고 무엇보다 우리 아이들에게 겸손과 호기심을 가르쳐야 한다. 여기서 겸손이란 본능으로 사실을 올바르게 파악하기가 얼마나 어려우지 아는 것이고 지식의 한계를 솔직히 인정하는 것이다. 아울러 \"모른다\"고 말하는 걸 꺼리지 않는 것이자, 새로운 사실을 발견했을 때 기존 의견을 기꺼이 바꾸는 것이다. 겸손하면 모든 것에 대해 내 견해가 있어야 한다는 압박감도 없고, 항상 내 견해를 옹호할 준비를 해야 할 필요도 없어 마음이 편하다. 호기심이란 새로운 정보를 마다하지 않고 적극 받아들이는 자세를 말한다. 아울러 내 세계관에 맞지 않는 사실을 끌어안고 그것이 내포한 의미를 이해하려고 노력하는 것이다. 실수를 부끄러워하기보다 실수에서 호기심을 이끌어내자\n\n> 나는 비판적 사고를 무척 좋아하고 회의주의를 칭찬하지만, 증거를 존중할 때라야 그렇다.\n\n> 세계은행과 유엔이 내놓은 흔한 통계가 그래요\n\n> 청중이 내 물음의 답을 이미 알고 있다면\n\n소감부분: 저자는 그에 대한 답을 어떻게 알게 됐고, 그것이 정말 확실한 답인가?\n앎이 무엇인지 의문을 가지던 때의 질문같다. 이 질문의 답을 알지 못하면서 최근에는 이런 의문을 가지지 않고 있다는 게 새삼 느껴진다.\n\n\n#### 뇌 과학이 인생에 필요한 순간 - 김대수\n> 내가 경험하는 동안에는 별로인 사람\n\n> 갈망하는 상태\n\n> 강화학습 전략은 경험에 의존한다는 것이 장점이자 결정적인 약점이다. 상황이 변한다면 혹은 경쟁 상대가 나의 강화학습을 활용할 가능성이 높다.\n\n> 승리의 확률을 높이는 가장 좋은 방법은 아예 새로운 게임을 만들어 다른 사람들이 참여하도록 하는 것이다.\n\n> 새로운 게임을 만드는 것도 중요하지만 다른 사람이 따라 하지 못하는 소위 진입장벽도 중요하다는 것을 깨달은 순간이었다.\n\n> 현장에서 관찰되는 빛의 방향이나 패턴을 흉내 내면 뇌가 그것을 3차원으로 착각한다는 점을 활용했다.\n\n그림에 명암을 넣는 것이 진짜 효과적인 것이었구나. 과학적인 것이었구나\n\n> 오브젝트에 호기심과 애착을 느끼는 것은 본능이다\n\n> 대뇌 운동피질은 움직이라는 명령을 신경의 신호로서 근육에 전달하지만 그 명령신호가 근육으로만 가는 것이 아니다. 운동신경의 중간에 가지치기 신경회로를 통해 운동신호는 시상핵으로 들어간다. 소뇌는 몸의 움직임을 감지하여 신호를 시상핵으로 보낸다. 애당초 전달된 운동명령신호와 그 결과 움직인 데이터 정보가 시상핵에서 만나는 것이다. 여기에서 비교가 이루어지고 만일 서로 다르면 시상핵은 대뇌운동피질에 명령을 내려 교정하도록 한다.\n\n> 공부하지 말고 공부할 이유를 찾아라.\n\n> 과학은 자연이 출제한 문제를 풀기 위해서는 발견한 현상에 대한 원인이 무엇인지 질문을 하고, 질문에 답이 될 수 있는 가설을 세우며, 가서이 맞는다면 일어날 일들을 예측하여, 실험을 설계하는 과학적 방법론을 따라야 한다.\n\n\n#### 이미지 인문학 1 - 진중권\n> 특정한 기술을 사용할 때 우리는 미처 의식하지도 못하는 채로 그 기술의 창조자가 그것의 바탕에 깔아놓은 사유의 패러다임까지 받아들이게 된다. 특정 프로그램을 사용할 때 우리는 동시에 그 프로그램에 프로그래밍 당하게 된다.\n\n나의 패러다임에 의한 소프트웨어가 아닌 사용자의 패러다임에 맞춘 프로그램을 만들고 싶다.\n\n> 컴퓨터 산업이 대중을 IT 기기의 수동적 소비자로 만드는 방향으로 발전하는 것을 비판하며,\n\n수동적 소비자가 아닌 프로그램에 영향을 주는 소비자, 컴퓨터 산업에 영향을 주는 소비자가 되어야 한다는 뜻일까\n\n> 신을 거역하는 바로 그 범죄를 통해 인간은 언어능력과 제작능력 등 오늘날 인간의 유적 속성을 얻을 수 있었기 때문이다.\n\n성서에 따르면, 인간은 원죄를 저지름으로써 지금의 인간이 되었다. 근원이 죄인데 우리 사회가 아무런 걱정 없는 유토피아가 되는 것은 이루어질 수 없다. 단지 지금보다 조금 더 괜찮은 삶을 좇아 살 뿐. (유토피아가 무엇인지는 차치하고)\n\n> '컴퓨터'의 어원인 'com+putare'는 '함께+바라보다'라는 뜻을 갖는다.\n\n> 미적분으로 숫자들 사이의 간극을 채움으로써 자연의 모든 것을 형식화할 수 있었다.\n\n> 동굴벽화가 2차원의 평면이며, 문자로 쓰인 텍스트가 1차원의 선이라면, 문자 이후의 이미지는 0차원의 점(비트)으로 이루어진다.\n\n> \"모든 예술행위는 우리가 무심코 넘겨버리는 것을 잘 볼 수 있게 환기시키는 것\"\n\n> 디지털 이미지는 과거의 모상이 아니라 미래의 모형이다.\n\n> 디지털의 모더니스트들은 '윈도우'가 아날로그 세계를 그대로 베꼈다고 비난했다(이를테면 우리는 오피스'에 들어가 '폴더'를 열어 '파일'을 꺼내 보고 필요 없으면 '휴지통'에 버린다). 이들은 컴퓨터 운영체계가 안로그 세계를 모방하는 서 벗어나 디지털 고유의 특성을 구현해야 한다고주장했다. 이를테면 아이콘도 '휴지통' 같은 구상적 모티브가 아니라 칸딘스키나 몬드리안의 작품에서 보는 것 같은 추상적 모티브를 사용해야 한다는 것이었다.\n\n\n> 산업혁명의 인터페이스는 기계를 상수로 놓고 인간을 변수로 간주해 인간을 기계에 꿰맞추려는 경향이있었다. 그때 인간은 기계를 지향했다. 20세기 모더니즘 예술을 집했던 '무기물의 미학', 즉 추상과 몽타주는 그런 기계화의 예술적 반영이리라. 반면 정보혁명의 인터페이스는 인간을 상수로 놓고 기계를 변수로 놓는다. 여기서 디지털 가상마저도 아날로그 현실과 똑같이 디자인하려는, 이른바 '디지로그'의 복고적(?) 경향이 발생한다.\n\n> 사진은 시계의 그림이기 이전에 무엇보다 그것을 찍는 이가 지닌 관념의 그림이다. 굳이 연출하지 않더라도 '무엇을 찍을까' 혹은 '어떻게 찍을까'를 결정할 때부터, 세계는 사진사의 관념에 따라 구성된다.\n\n> 복잡한 이론 없이 바로 이해되는 가독성.\n\n#readability\n\n> 영화적으로 연출된 상황이 때로는 '상황'을 발견할 수 있게 해준다.\n\n> 디지털 이미지의 과도한 선명함은 마노비치 자신이 말하듯 \"인간의 시선보다 더 완벽한 어떤 다른 시각\", 즉 \"컴퓨터의 시각\"에서 나온다. 컴퓨터의 눈으로 세계를 재현하는 것은 그저 재현의 옛 방식을 강화하는데 그치지 않는다.\n\n#### 인간 실격\n> 거의 완벽하게 사람들을 속이다가 전지전능한 어떤 사람한테 간파당하여 산산조각이 나고 죽기보다 더한 창피를 당하게 되는 것이 '존경받는다'는 상태에 대한 제 정의였습니다.\n\n#### 장하준의 경제학 강의\n> 행동주의 학파에서 특히 강조하는 점은, 일정한 규칙이 있으면 당면한 문제에 관련된 다른 주체들의 행동을 더 예측하기 쉽다는 사실이다.\n\n> 우리가 합리적이려고 노력하지만 그럴 수 있는 능력은 너무도 제한되어 있고, 특히 이렇게 복잡한 세상(케인스식으로 말하자면 불확실성이 팽배한 상황)에서는 더욱제한적일 수밖에 없다고 본다. 우리가 결정을 내리는 데 가장 큰 장애가 되는 것은 정보의 부족이 아니라, 가지고 있는 정보를 처리할 수 있는 능력의 한계라는 뜻이다.\n\n> 투자하는 사람이 미래에 대해 어떤 기대를 하느냐에 따라 투자의 양이 달라지기 때문이다. 그리고 이 기대는 합리적 계산보다는 심리적 요인에 더 큰 영향을 받는다.\n\n> 예를 들어 여성은 지적 능려이 떨어지기 때문에 투표할 자격이 없다고 생각했다. 또 가난한 사람들에게도 투표권을 줄 수 없다고 주장했는데, 가난한 계층은 개인의 재산을 몰수하고자 하는 정치인들에게 투표할 것이라고 믿었기 때문이다.\n\n이 믿음은 어떻게 무너졌는가?\n\n> 16~17세기에 접어들면서 서유럽 사람들도 자신들 나름의 혁신을 보태기 시작했다. 코페르니쿠스, 갈릴레오, 페르마, 뉴턴, 라이프니츠 등 현대 과학과 수학의 아버지들이 이 시기에 등장했다.\n\n#### 일의 기쁨과 슬픔\n> 자신의 인스타그램에서 클래식 공연 공지를 가장 먼저 선점하려는 회장의 심기를 건드렸다는 이유로 월급 대신 카드 포인트를 받게 된 카드회사 직원의 이야기가 그 핵심이다. 평등하고 세련된 동시대 감각을 따라가겠다는 실속 없는 의지를 비웃듯, 가장 권위적이고 폐쇄적인 위계 구조는 굳건히 잔존하고 있다.\n\n#### 사람의 아이들\n> 테오는 학부 시절 느꼈던 매혹을 다시 느꼈다. 피지의 어느 조각가의 손에서 탄생한 목걸이가 젊어서 죽은 조종사에게 닿을 때까지 이어진 기이한 사건의 연속이라니\n\n우리는 한 세대를 살 뿐이지만 이전의 수많은 세대를 읽고 느낄 수 있다. 이전 세대를 읽는다는 것은 내가 여러 세대를 살아간다는 것과 비슷한 느낌이 될 수 있을 것 같다.\n\n> 줄리언이 말했다. \"루크야, 루크의 아이야\"\n\n롤프는 루크와 줄리엄이 기도를 하러 갈 때 아무런 의심없이 둘만 보내줬다. 이것은 그녀를 완전히 믿었기 때문이 아니라 방심을 한 것인가. 내가 여자가 다른 남자와 같이 뭔가를 하러 간다고 했을 때 여자를 믿고 있더라도 안보내는 것이 맞는 것인가? 이것은 줄리엄의 배신인가 아니면 롤프에 대해 계속 불만을 품고 있었기 때문인가\n\n> 내가 만약 루크를 사랑했더라면... 그녀는 잠시 멈추었다가 다시 말했다. \"죄악을 조금이라도 덜 수 있었겠죠\"\n\n롤프를 배신했다기 보다는 루크의 강렬한 마음을 조금 받아준 것이었다. -> 마음을 조금 받아준 것이라고 적은게 좀 이상함\n\n> \"이제 좋은 사람이 아니라는 걸 알았겠군요.\"\n\n미리엄이 줄리엄의 마음을 이야기할 때는 줄리엄이 쓰레기처럼 보였는데 줄리엄이 자신의 상황을 이야기하고 나니 납득이 갔다. 줄리엄은 좋은 사람이 아니지만 나쁜 사람도 아니었다. 사람은 자기합리화를 계속하지만 그럼에도 불구하고 다른 사람의 시선보다는 스스로 보는 시각이 실제 자신의 마음과는 더 가까울 것이다. 물론 못보고 지나치는 부분도 있을 것이고 그 부분을 다른 사람이 발견할 수도 있다.\n\n\n#### 숫자가 만만해지는 책\n> 근삿값 계산의 기본 원칙은 '계산 결과가 입력된 값보다 높은 정밀성을 가져서는 안 된다'는 것이다. 따라서 원래 데이터가 한 자리의 정밀성을 갖고 있을 뿐이라면, 결과치에 대해 그보다 훨씬 더 높은 정밀성을 기대해서는 안 된다.\n\n> 주목할 만한 것은, 59개 도시들의 경우 가중치를 적당히 바꿈으로써 1등도 될 수 있고 꼴등도 될 수 있었다는 것이다.\n\n그래서 통계치에 대한 불신이 있었다\n\n> 측정값이 균등하게 분포할 경우(이를테면 대규모 집단에서 키나 체중의 분포), 산술평균은 통상적으로 잘 작동한다. 그러나 두드러진 아웃라이어가 존재할 경우에는 사정이 달라진다. 그런 경우에는 대표성이 높은 통계값은 평균이 아니라 중앙값이다.\n\n그래서 평균과 중앙값을 같이 보여주라는 대안이 나왔다.\n\n> 생존자 편향이란 '대표성 없는 표본을 들이대며, 일반론을 펼치는 오류'를 말한다. 생존자들만으로 구성된 '대표성 없는 표본'에는 '상이하거나 더 정확한 결론'을 도출할 수 있는 데이터가 누락되어 있다. 왜냐고? 그런 사람들은 이미 세상을 떠나고 없기 때문이다.\n\n생존자 편향에 아우슈비츠 학살 사건보다 다른 유대인 학살 사건의 사망자 수가 많은데 아우슈비츠 사건이 널리 알려진 이유는 그곳에서 살아남은 생존자가 글을 썼기 때문이라는 예시를 봤다.\n또 전쟁 중 비행기의 기체 파손을 조사해보니 날개쪽 파손이 많았는데, 사실 몸체에 파손이 생긴 것들이 더 많은데 그 자리에서 추락하여 조사를 할 수 없어서 편향된 데이터를 얻을 수 밖에 없다는 예시가 있었다.\n\n#### 내게 무해한 사람\n> \"수이 네가 없는 곳에 행복은 없어.\" 그 말을 하기 전까지 이경은 수이가 없는 곳에 행복은 없다고 진심으로 믿었었다. 하지만 막상 그 생각을 말로 표현하고 나니 그 말이 껍데기만 번지르르한 거짓처럼 느껴졌다.\n\n말이 구체화 되면 너무 형식적이라는 느낌이 들 때가 있었는데, 공감되었다\n\n> 이미 은지의 번호는 지워버린 상황이었지만, 머릿속에서까지 지울 수는 없었다.\n\n사람을 만나다보면 그 사람의 매력에 빠져서 정신을 못차리게 되는 경우가 있다. 이경은 수이와 만나고 있지만 다른 사람에게 좋아하는 감정이 생겨버린다. 사람이라면 어쩔 수 없는 부분일까 수이라는 존재에 오랫동안 사랑의 감정이 있어지만 시간이 지나고 이런 저런 사건들을 겪으며 사랑의 크기보다는 의리의 크기가 커진 것 같다. 그리고 그 사랑의 부족함이 다른 사람을 통해 채워지게 되버린 것이다. 애인이 있는 사람에게 접근하는 은지의 마음도 이경이 너무 좋아서 그런 것일테고 은지에게 좋아하는 감정이 생긴 이경도 감정이 저절로 생겨버린 것이다. 이 감정을 거부하려고 해도 몸도 아프고 정신도 아픈 상태가 되어버린다. 그렇다면 사랑하고 있어도 다른 사람을 사랑하게 되는게 자연스러운 감정이라는 것일까? 그건 좀 이상하다. 이경이 수이와 열렬하게 빠져있던 순간에 은지를 지금처럼 만났다면 반응을 했을까? 하지만 시간이 지남에 따라 같은 감정을 계속 가지고 있는 것은 힘든 일이고, 그렇다면 사람이라면 언젠가 여러 사람에게 반응을 보이게 되는게 당연하다는 것일까? 이상하다. 사랑을 충만하게 채워주도록 끊임없이 노력해야겠다. 애인이 있는 사람에게는 철벽을 치는 것이 기본적인 생각이지만, 은지의 마음 또한 이경의 끌림과 다르지 않은 것일 테고, 사람 마음 다루는 것이 정말 어렵다.\n상황에 놓이지 않도록 조심하고, 본능에 이끌리지 않도록 자제하고 경계해야 한다.\n\n> \"너가 착하게 굴어야지 엄마가 아들 낳지.\" 할머니는 엄마가 보는 앞에서 나에게 그런 식으로 말했고, 나는 그게 엄마를 괴롭히는 말이라는 것을 느끼면서도 마땅히 대답할 말을 찾지 못해서 할머니를 더 미워할 수 밖에 없었다.\n\n> 모래도 공무도 서로를 어색해하고 있는 것 같았다. 공무는 나와 떠들면서 어색함을 이겨보려는 것 같았고, 모래는 그 순간이 지나가기만을 바라는 사람처럼 보였다.\n\n이것은 섣부른 판단인가 상대방의 속마음을 잘 읽는 것인가\n\n> 그날 모래의 말과 눈물이 나약함이 아니라 용기에서 나왔다는 것을 나는 그제야 깨닫게 됐다. 고통을 겪는 당사자를 포함해서 어느 누구도 그 고통이 진짜인지 가짜인지를 판단할 권리가 없다는 것도.\n\n#### 사피엔스\n> 침팬지와 마찬가지로 이들 원시인류의 사회성은 서로 친밀한 소규모 집단에만 적용되었다. 집단의 규모가 너무 커지면, 사회적 질서가 불안정해지고 무리가 쪼개졌다.\n\n원시시대 때부터 본능적으로 너무 많은 인원이 모이면 질서가 불안정해졌다는게 지금도 회사에서 5인 이상이 되면 조직 관리자가 필요한 것과 똑같은 것 같다.\n\n> 우리가 특정한 질서를 신뢰하는 것은 그것이 객관적으로 진리이기 때문이 아니라, 그것을 믿으면더 효과적으로 협력하고 더 나은 사회를 만들어낼 수 있기 때문이다. 상상의 질서란 사악한 음모도 무의미한 환상도 아니다. 그보다는 아주 많은 사람들이 효과적으로 협력할 수 있는 유일한 방법이다. 그렇지만 함무라비도 자신의 위계질서 원리를 동일한 논리로 옹호할 수 있었을 것이라는 점만큼은 기억해두자. 가령 이렇게 말이다. \"나는 귀족, 평민, 노예가 날 때부터 다른 사람이 아니라는 사실을 알고 있다. 하지만 만일 그들이 다르다고 믿으면, 우리는 더 안정되고 번영한 사회를 창조할 수 있을 것이다.\"\n\n> 고대 신화의 많은 부분은 실상 인간이 동식물을 지배하는 대가로 신들에게 영원히 헌신하겠다는 약속을 담은 법적인 계약이었다. 창세기의 첫 몇 자이 대표적 예다. 농업혁명 이래 수천 년간 종교의 예배는 주로 인간이 신에게 양과 포도주, 케이크를 바치고 그 대가로 풍성한 수확과 가축의 다산을 약속받는 것이었다.\n\n농업혁명 이후 풍성한 수확을 위해 기독교가 생겨난 것일까? 그동안 생각했던 것은 인간이 살아가면서 계시를 받고 지내오다가 그것을 글로 표현함으로써 자연스럽게 종교가 생겨났다고 생각했는데, 그게 아니라 대가를 위해 만들어낸 것일까? 성서가 인간의 관점에서 쓰여진 것이라 현대에 밝혀진 사실과는 다른 내용이 있지마 그건 그 시대의 사람들이 생각할 수 있는 내용을 쓴 것이지 하나님의 말씀을 그대로 옮겨쓴게 아니기 때문에 그럴 수 있다고 생각했었는데 다를 수도 있겠다 싶다. 이렇게 대가를 위해 쓰여졌다고 하는 것의 근거를 찾아봐야겠다.\n\n#todo\n\n> 역사는 결정론으로 설명될 수도 예측될 수도 없다. 역사는 카오스적이기 때문이다.\n\n> 주식 소유자는 회사가 내는 이익의 일부를 받을 권리를 갖게 된다.\n\n> 중세 문화가 기사도와 기독교를 어떻게든 조회시키는데 실패했던 것과 마찬가지로, 오늘날 세계는 자유와 평등을 조화시키는 데 실패하고 있다.\n\n> 도시와 왕국이 등장하고 수송 하부구조가 개선되자 전문화라는 새로운 기회가 생겼다.\n\n> 두 지역이 일단 무역으로 연결되면, 운송가능한 물품의 가격은 수요와 공급의 힘에 의해 평준화되는 경향이 있다.\n\n> 인도에서 금을 싸게 사서 지중해에서 비싸게 팔아 이윤을 남겼을 것이다.\n\n> 그럼에도 인도라는 현대 국가는 대영제국의 자식이다.\n\nit is true. but... so rude. people don't like true.\n\n> 어떤 길을 택하든 그 첫걸음은 이 딜레마가 복잡하다는 것을 받아들이고 과거를 극단적으로 단순화해서 선인과 악당으로 나누는 것은 아무 소용없다는 것을 인정하는 일이다.\n\n> 우리 마음이 \"지금과 다른 어떤 경험을 하고 싶은가?\" 보다 \"지금 나는 무엇을 경험하고 있는가\"라는 질문에 온 관심을 쏟도록\n\n#### 진중권의 미학 에세이\n\n[[Readability]]\n> 대중을 위한 텍스트는 이미지처럼 구체적이고, 사운드처럼 구술적이어야 한다. 아니면 앞서 말한 것처럼 스크립트가 되어 이미지와 사운드의 바탕에 비가시적으로 깔려야 한다.\n\n> 연출하고 가공하는 작가의 장인성, 그렇게 완성된 작품의 유일성, 복잡한 이론 없이 바로 이해되는 가독성.\n\n> 과거의 비평이 작품이 얼마나 '아름다운지'를 판정했다면, 현대의 비평은 작품이 얼마나 '새로운지'를 판정한다. 저마다 새로움을 표방하는 수많은 작품들 중에서 진정으로 의미 있는 새로움이 어느 것인지 가려내는 안목. 그것이 현대의 비평가가 요구받는 덕목이 된다.\n\n> 벼룩시장에서 태어나다. 마티스의 '영감'에서 네자르의 '작품'까지\n\n#### 수학이 필요한 순간\n[[Logical_Thinking]]\n> 일상의 문제에서도 정답부터 빨리 찾으려고 하기보다 좋은 질문을 먼저 던지려고 할 때, 저는 그것이 수학적인 사고라고 생각합니다. 어쩌면 대범하게도 수학적 사고를 통해서만 우리는 좋은 질문을 던질 수 있고, 우리가 찾은 답이 의미 있는지 확인할 수 있다고 말할 수 있습니다.\n\n> 우리는 살면서 여러 질문을 하죠. 그런데 질문을 하면서도 어떤 종류의 답을 원하는지 분명치 않을 때가 많습니다.\n\n#### 바른 마음\n\n> 이렇듯 도덕성이 주로 도덕적 추론을 통해 형성되는 것이 아니라면, 선천성과 사회적 학습이 어떻게든 조합되어 도덕성이 형성된다는 주장이 가장 가능성 높은 대답으로 남는다.\n\n도덕적 추론이 뭐지?\n\n> 감정은 일종의 정보처리 과정인 것이다.\n\n> 우리는 우리 자신이 어떤 판단에 이르렀는지 그 실제적 이유들을 재구성해보기 위해 도덕적 추론을 하는 것이 아니다. 그보다 우리가 추론을 하는 까닭은 다른 누가 왜 마땅히 우리 편에 서서 우리처럼 판단해야 하는가 하는 문제에 대해 가급적 최선의 이유를 찾기 위해서이다.\n\n> 이 순식간의 정서 반응은 그 속도가 너무도 빨라서, 사물을 바라볼 때 우리 머리에 떠오르는 그 어떤 생각도 이것보다 빠르지는 않다.\n\n> ProjectImplicit.org\n\n> 일순의 정서라는 것은 2분간 지속되지 않는 특징이 있다\n\n당장 생각나는 것은 있는데 나중에 그것을 곰곰이 생각해보니 다른 해석도 가능하다는 생각이 든 적이 있었다.\n\n> 누구에게 고마운 마음을 느끼다 보면, 그들의 관점을 취하기가 한결 쉬워지는 법이다.\n\n> 아이들이 말을 안 들을 때 부모나 선생님이 매를 들어도 되는가 하는 문제가 있다고 치자. 정치 성향이 왼쪽에 치우치는 사람들의 경우에는 보통 체벌에서 잔혹성과 압제라는 판단을 내리는 경향이 있다. 반면 오른쪽에 치우치는 사람들의 경우에는 체벌이 때때로 규칙의 적절한 집행이라는 판단(특히 부모와 선생님을 존경해야 한다는 규칙일 때)으로 연결된다.\n\n> 라이벌 집단의 도전과 공격을 막아낼 수 있도록 연합을 구성하고 유지해야 하는 일에 임했던 것은 벌써 수백만 년 동안의 일이었다.\n\n이것이 구시대에는 맞았지만 지금 시대에서는 달라질 필요가 있을 것 같다. 라고 메모를 남겼었는데 달라질 것이 없겠다고 다시 생각하게 된다. 연합은 없어질 수 없을 듯. 아마 개인주의의 발달로 연합의 의미가 달라질 것으로 생각했던 것 같다. 개인을 그대로 인정할 수 있는 식으로 연합이 구성되야 한다는 생각이었겠지?\n\n> 스포츠 경기에서 작동하는 심리도 상당 부분이 충성심 기반의 통용적 동인들이 확대된 것들로\n\n처음 레반도프스키가 팀과 상관없이 내가 소속된 팀에 최선을 다해야 한다라고 말했을 때 팀을 생각하지 않고 자신만 생각한다고 느끼고 충성심을 좀 가지면 좋겠다고 생각했어쓴데 지금 생각해보면 충성심이라는 게 필요할까 싶다. 오히려 레반도프스키의 프로의식으로 더 기억에 남았다\n\n> 잡식동물의 딜레마란, 새로운 음식을 찾아 늘 탐험하지만 그것이 안전하다고 밝혀질 때까지는 마음을 놓을 수 없는 잡식동물의 처지를 말한다.\n\n> 질병 위험이 낮을수록 진보적이고 개방적인 태도가 나타난다는 증거도 일부 나와 있다.\n\n> 사람들이 무기와 험담으로 자신을 무장하게 됨으로써, 보엠이 말한 \"지배 서열의 전도\"현상이 나타났다고 보는 것이 옳다. 즉, 이제는 졸병들끼리 뭉쳐 일인자 수컷을 지배하고 제어할 수단이 생긴 것이다(이 모습은 마르크스가 꿈꾸었던 '프롤레타리아 독재'와 소름 끼치도록 유사하다)\n\n> 앞서 나는 '선천성'을 마음의 초고에 비유한 바 있는데, 그 뜻이 딱 들어맞는 대목이 바로 이런 부분이다. 최종 편집본은 초고와 얼마든지 달라질 수 있는 것이다.\n\n> 정치적 평등과 관련된 사람들의 관심사는 호혜성에 대한 욕구보다는 압제를 싫어하고 희생자를 염려하는 마음과 더 관련이 있다는 사실이 눈에 들어오기 시작했다.\n\n> 평등주의의 개념은 평등 자체에 대한 사랑보다는 지배를 싫어하는 마음에 더 깊이 뿌리내리고 있는 듯하다\n\n\n#### 지하로부터의 수기\n> 인습을 숭배했다.\n\n\n#### 소프트웨어 장인\n> 이 코드를 수정할 일이 생기면 어떻게 될까요? 정보도 부족하고 이 코드가 작성된 맥락을 전혀 알 수가 없어요\n\n> 개발의 막바지 단계이더라도 고객의 요구사하 변경을 환영한다. 애자일 프로세스들은 변화를 활용하여 고객의 경쟁력을 높이는 데 기여한다.\n\n> 단계마다 피드백이 있다는 전제에서만 절차의 개선으로 제품이 나아진다. 피드백 시스템이 동작하려면 자기가 하는 일에 충분히 주의를 기울이고 뭔가 잘못되고 있거나 더 나은 방법이 있다고 느낄 때\n\n> 전혀 이해할 수 없는 애플리케이션을 수정했을 때의 영향을 파악하고, 잘못된 수정에 대해서는 책임을 져야 하기 때문이다. 어디가 어떻게 동작하는지 이해하지 못한 상태라서 이 코드의 일부를 수정할 때 어딘가 다른 쪽이 잘못되는 것은 아닐까 불안하다.\n\n이 부분이 항상 신경 쓰였는데 이것이 테스트주도개발을 하면 도움이 된다.\n\n> 요구사항에 질문하고, 비즈니스를 이해하고, 개선사항을 제안하며, 고객 또는 고용주와 생산적인 동반자 관계를 맺어야 한다\n\n> 변화와 싸우는 것이 아니라 변화 자체를 내재화한\n\n\n#### 어떤 양형 이유\n> 편견은 진영을 만들고, 진영 속에서 강화되어 차별과 혐오를 낳는다.\n\n> \"햇볕은 감미롭고, 비는 상쾌하고, 바람은 힘을 돋우며, 눈은 마음을 설레게 한다. 세상에 나쁜 날씨란 없다. 서로 다른 종류의 좋은 날씨가 있을 뿐이다.\"(존 러스킨) 세상에 나쁜 아이도 없다. 서로 다른 처지의 좋은 아이만 있을 뿐이다.\n\n> 결혼을 하고 시간이 흘러 깨달은 건, 결혼은 사랑해서 하는 것이라기보다는 사랑에 대한 예지로 감행된다는 사실이다. 아무리 오래 연애를 했더라도 그 사람을 완전히 이해하고 사랑할 수는 없기 때문이다. 사랑은 천천히 커지고, 작게 시작해 크게 여무는 것이다. 사랑이 식는다는 것도 이상한 말이다. 확 타올랐다가 식는 것은 사랑이 아니라 욕정이다. 결국 결혼은 저 사람이라면 계속 새롭게 사랑할 수 있을 것이라는 예지에서 결정된다. 그런 점에서 보면 이혼은 그 예지가 빗나간 경우다.\n\n사랑에 대한 가치관이 정반대라 새롭게 느껴진다. 처음에 불타는 게 사랑이고 결혼은 지지와 믿음으로 이루어진다고 생각하지만 시작이 약하고 결혼 후에도 사랑이 있을 수 있다고 생각할 수도 있구나 싶다\n\n> \"두려움의 원천은 미래에 있다. 미래로부터 해방된 자는 두려움이 없다.\"\n\n> 아이가 길을 잃고 방황하여 낭떠러지로 향할 때 아이의 자유의지라고 내버려둘 부모가 있겠는가.\n\n> 신동운, 재판관의 고민, 법문사, 2008\n> 야마모토 유지, 일본 최고재판소 이야기, 법률문화원, 2005\n\n> \"힘 없는 정의는 무력하고, 정의 없는 힘은 폭력이다. 정의와 힘은 동시에 있어야 하는데, 그러기 위해서는 정의가 강해지거나 강한 것이 정의가 되어야 한다. 정의는 시비의 대상이 되기 쉬우나 힘은 시비의 여지를 주지 않는다. 정의는 강해지기 힘들다. 결국 강한 것이 정의가 되었다\"는 파스칼\n\n> 어쩌면 절대적으로 곧고 바른 유일한 것은 미덕이나 공동선이 아니라, 아무리 험난한 길이라도 바르게 살려는 의지를 갖고 그 길을 끊임없이 고뇌하며 걸어가는 존재, 그 자체가 아닐까? 그렇다면 정의는, 목표가 아니라 여정이고, 정의로운 삶을 살려는 열망을 품은 인간 그 자체다.\n\n\n#### 숨\n> 자물쇠를 새것으로 바꿔놓지만 않았어도, 마약 살 돈을 마련할 물건을 가져가려고 자기 집 문을 부수고 들어가는 일은 없었을 거라고 생각했던 것이다. 냇이 자기가 저지른 일들에 대해 책임을 지겠다고 결심하기까지는 오랜 시간이 걸렸다. 비네사는 아직 그 시점에 도달하지 못한 것이리라. 대신 비난받아줄 데이나라는 인물이 존재하기 때문일 수도 있었다. 그러나 데이나가 비네사에게 못된 짓을 한 것은 사실이지만, 이미 오래전 일이었다. 지금껏 자기 삶을 추스르지 못했다면, 그것은 비네사의 잘못이지 데이나의 잘못이 아니었다.\n\n> 아무 생각 없이 규율에 맹종하는 건 사회 구성원으로서도 옳은 태도가 아녜요.\n\n#### 판결의 재구성\n> 견제받지 않는 권력이 폭주하듯 비판받지 않는 논리는 독선에 빠진다.\n\n\n#### 이방인\n> 철학적 에세이는 설명하고 소설은 묘사하고 연극은 이 부조리의 감정에 생명과 운동을 부여하는 것이었다.\n\n> 남들이 어떻게 생각하는가에 대한 배려\n\n> 페르라고 부르지 않고 므시외라고 부르느냐고\n\n\n#### 당신 인생의 이야기\n> \"스티븐 호킹은...... 우리가 미래를 기억하지 못한다는 사실에 애를 태우고 있다. 그러나 지금 내 입장에서는 미래를 기억하는 일 따위는 식은 죽 먹기다. 연약하고 의심할 줄도 모르는 나의 갓난애들이 나중에 어떻게 될지 나는 알고 있다. 왜냐하면 이제 그들은 이미 다 자란 어른이기 때문이다. 나의 가장 친한 친구들의 말로가 어떨지도 알고 있다. 그들 중 다수가 이미 은퇴했거나 죽었기 때문이다...... 스티븐 호킹을 포함한 나보다 젊은 친구들에게 나는 이렇게 말하고 싶다. '인내심을 가지도록. 제군의 미래는 제군을 잘 알고 있으며, 제군이 어떤 인간이든 간에 사랑해주는 개처럼, 제군의 발치로 달려와 드러누울 것이므로.'\"\n\n> 그것은 동정과 감정이입의 차이였다.\n\n\n#### 부자의 경제학 빈민의 경제학\n> 유한계급론\n\n> 철학이 모든 과학의 왕\n\n> 국내 거래의 자유화는 국민국가 독일의 국부를 증진시키는 길이다. 거기서는 스미드의 '보이지 않는 손'을 신뢰해도 좋다. 그러나 국제사회는 \"거인과 난쟁이, 정상인과 불구자, 문명인과 반문명인, 미개인이 공존하는 불균형 상태\"에 있다.\n\n국내 거래에 있어서도 거인과 난쟁이는 존재한다. 이는 어떻게 해소하는가. 지방자치? 마을단위?로 축소된다해도 차이는 생길 수 있다.\n\n\n#### 김화진\n나주에 대하여 좋다\n\n새 이야기도 좋았다\n\n#book\n\n#### 날씨가 좋으면 찾아가겠어요\n작가가 경험한 정서적 느낌을 책에 표현하는 사례를 보니 좋은 사례인거 같다\n\n#### 거위의 간\n\n돌연변이가 일어났는데 황금알을 낳는 거위\n돌연변이는 보통 부정적인 방향으로 나타나는데 긍정적인 결과가 나왔다\n근데 긍정적인 것은 인간의 관점. 거위에게는 자손을 못낳는 부정적인 방향이다\n\n거위가 황금알을 낳는 원리를 알게되어도 그 거위는 생식을 못하는 유일한 거위라 실험을 할 수 없어 그것을 거위 밖에서 재현할 수는 없는 상황\n이 상황은 황금알을 낳는 거위의 배를 가르는 사람의 이야기를 알고있는 현대 사람들은 배를 가르는 것이 멍청한 짓이라 생각하기 때문에 과감히 배를 가르자고 할 수도 없는 상황이기도 해서 절묘한 상황이다. 배를 가르지 못하는 상황으로 만드는 것이 재치가 넘친다. 마지막 부분에 실화인지 소설인지 모호하게 끝냄으로써 상상력을 발휘할 수 있도록 하는 것도 굉장한 스킬인 것 같다. 이런 방식이 다른 곳에서 쓰인 것을 본 것 같긴 하지만 시대를 생각했을 때 충분히 오리지널리티가 있다고 생각할 수도 있다.\n\n\n\n-----------------------------------------------------------------------\n\n# 컨텐츠\n\n#### 독서는 여행이다\n내가 혼자서 생각하지 못하는 것을 생각할 수 있도록 이끌어 준다.\n다양한 생각을 넣어준다.\n여행은 정착하기 위해서 한다. 정착 후 미련을 남기지 않기 위해\n생각하기 위해 여행한다. 아이디어를 얻기 위해\n휴가를 내고 세계의 큰 경기를 보러가는게 인생의 낙이 아닐까\n여행 장소 선정을 어떻게 할 것인가\n여행 전 여행장소에 대한 정보를 많이 수집하자\nReading is like travel\nIt lead think that about I don’t think alone\nVariety think give to me\nTravel is for do to stay\nFor no remain regret after stay\nTravel is for thinking\nFor gave a idea\n[[Reading]], [[Travel]]\n#think\n\n#### Review\n책이나 영화를 본 후 리뷰를 보는 것은 좋다\n하지만 먼저 자신의 생각을 먼저 정리한 후 나의 생각과\n비교해볼 수 있어야 좋지\n내 생각이 들어가기 전에 먼저 남의 생각이 들어가면 남의 생각이 내 생각인 것처럼 착각하게 되고 스스로 생각하는 힘이 떨어질 수밖에 없다\n먼저 내 생각을 확실하게 가져간 후에 생각의 확장으로 이용하도록 하자\n\n영화를 보고 내 감상을 내놓기가 힘들다\n다른 사람들의 반응과 다를까봐 혹은 전혀 엉뚱한 얘기를 할까봐 두려워하는 마음이 있는 것 같다\n또 내 생각에 갇힐까봐 섣불리 생각못하는 것도 있는 것 같다\n내 생각을 뚜렷하게 표현하고 다른 의견을 들어 내 생각을 넓힐 수 있으면 내가\n어떻게 생각하든 좋아질 수 있다\n걱정하지 말고 쓰고 무참히 깨지자\n더 넓은 길로 가는 길이다\n[[Reading]]\n\n영화같은 것을 보면 다음 장면을 예측하는 것이 하나의 작품감상에 재미가 있고, 영화감독도 그것을 의도하는 장면을 넣기도 하는데 나는 예측을 안하려고 하는 마음을 가지고 있어서 영화볼때도 예측을 안하고 싶은데 예측을 하는게 더 좋을까\n의미부여를 하는 것도 일상생활에서는 의미부여를 하고 싶지 않은데 영화에서는 의도를 넣어놓는 것을 읽는 것 또한 재미긴하겠다.\n영화뿐만 아니라 소설도 마찬가지\n일상생활과 분리해서 매체를 읽을 때의 묘미로 생각하면 될까\n연출자는 거기에는 의미를 부여하지 않았다고 말해도\n관객이 보기에는 한 장면 장면이 감독이 연출한 장면이기 때문에 장면을 어떻게 꾸몄는지(미장센) 읽으려고 하는 것은 과도한게 아니다\n\n#### 책을 읽는 이유\n일상에 치여 살면 다른 생각이 안나는데 책을 읽으면 생각지 못한 것을 생각하게\n해준다\n\n#### 책을 읽으며 기대하는 것\n작가가 그 글을 정성껏. 깊이 고민하며 쓴 것이라는 것을 느끼는 것\n그냥 이야기 전달이나 정보 전달이 아니라.\n하나 하나 사려깊게, 자신의 마음을 담아 쓴 글을 읽는 것을 원한다\n\n그래서 몇몇 책에서 마음에 안들었던 것이 있었나보다\n\n#### 평론가가 니가 느낀 감정은 이거야 라고 단정지으면 기분나쁘다\n나는 이런 느낌을 받았는데 너도 그렇지 않을까 라는 뉘앙스가 받아들이기 쉽다\n\n#### 책값 price, value\n책값은 일정한 범위가 있다\n그리고 내용이 아니라 책의 두께와 재질이 가격에 영향을 미친다\n니체의 책이든 조잡한 누군가의 책이든 가격이 똑같을 수 있다\n하지만 책을 쓰는 사람들은 책 값에 거칠게 저항하지 않는다\n책의 공익성이 영향을 미치는 것일까\n책뿐만 아니라 영화도 마찬가지\n비슷한 도메인에서 다른 예를 들어보자면 강의를 초청할 때 초빙 비용도 명성에 따라 차이가 있을 것이다.\n반대편의 예를 들어보자면 광고계에서는 가격과 명성이 비례한다\n\n#### Pay for contents\n보고 좋았던 영화는 돈을 주고서라도 소장하고 싶은데 검증 안된 것은 돈 내기 아깝다고 생각했다.\n인터넷에서 쉽게 구할 수 있기 때문에 그렇게 생각했던 것 같다.\n책은 좋은지 검증이 안되었더라도 소장하려고 하듯이 영화도 검증 안되었더라도 돈을 주고 사야겠다\n\n#### 텍스트와 이미지의 차이\n미세 플라스틱이 환경오염을 시킨다는 문장만 본 사람과 그 실태를 본 사람은\n받아들이는게 다르다.\n다큐멘터리를 본 사람과 글만 본 사람이 느끼는 것도 다른데, 글만 봐도 이성적인\n판단은 가능하다. 근데 감정이 들어가는 다큐멘터리가 더 사람을 바꾼다.\n하지만 어느 것이 정답이라고 말할 수는 없을 것 같다. 감정 없이 한 걸음 떨어져서\n남의 일처럼 생각하는 것이 틀린 것도 아니고, 감정이입이 되어 당장 행동을 바꾸는\n것도 틀린 것이 아니다.\n글만 봤을 때는 환경 오염을 시키는 것은 맞지만, 행동을 바꾸는게 무의미하다고\n생각할 수도 있고, 반대로 이미지를 봤을 때 도움이 안되더라도 나라도 바뀌어야겠다\n생각할 수도 있겠다.\n다큐에서 전하는 정보만큼 글에서 정보를 알게 되어야 정확한 비교가 될텐데, 지금은\n같은 정보량으로 비교하는게 아니라서 의미 없는 글을 썼다.\n책과 다큐를 비교해봐야겠다.\n\n#### 책에서는 알 수 없었던 것\n호흡\n흐름\n맥락\n\n---\n\n## Book award\n\n- [대문호들의 작품을 가르쳐주세요](t.ly/7M2y)\n- [르 몽드가 선정한 세기의 도서 100권](t.ly/NM0K)\n- [뉴욕타임즈 선정 꼭 읽어야할 책 100권](http://blog.naver.com/qqwwee24/220916631259)\n\n## IT 서적\n- [종립님의 책 추천](https://johngrib.github.io/wiki/my-favorite-books/)\n- https://www.sangkon.com/good_books_for_dev_2018/\n- [개발자 대상 200페이지 이하 추천 도서](https://news.hada.io/topic?id=2187)\n- [개발자 지망생을 위한 주관적 추천도서](https://www.notion.so/44da2a336b864d35bd642bc62a300708)\n- [무료 영어 IT Ebook](https://onecellboy.tistory.com/219?category=401949)\n- [The 25 best programming books of all-time](https://www.best-books.dev/list/best-programming-books)\n- [졸트 상](https://knight76.tistory.com/entry/30031488512)\n\n#### personal recommand\n- 웹 개발자를 위한 대규모 서비스를 지탱하는 기술\n- devops와 SE를 위한 리눅스 커널 이야기\n- 도커/쿠버네티스를 활용한 컨테이너 개발 실전 입문\n\t- subicura님의 글을 보고 입문하고 이 책을 읽으면 탄탄해지기 좋은 것 같다\n- 대규모 시스템 설계 인터뷰\n"},{"headings":[{"value":"Review"},{"value":"2025"},{"value":"~2025"},{"value":"Barcelona"},{"value":"Rome"},{"value":"Swiss"},{"value":"태국"},{"value":"치앙마이"},{"value":"푸켓"},{"value":"Japan"},{"value":"아키타현 이나니아 우동"},{"value":"Fukuoka"},{"value":"삿포로"},{"value":"Hungary"},{"value":"Poland"},{"value":"강릉 여행"},{"value":"Jeju"},{"value":"익사이팅 스포츠"},{"value":"Library"},{"value":"버킷리스트"},{"value":"여행 계획"},{"value":"여행지 숙소 고를 때 확인 사항"},{"value":"Travel"},{"value":"유럽 여행"},{"value":"travel"},{"value":"여행은 공간의 이동이 아닌 시선의 이동이라는 것을요"}],"fields":{"slug":"/travel/"},"rawMarkdownBody":"\n\n# Review\n\n## 2025\n\n\n## ~2025\n# [Barcelona](Barcelona)\n\n# Rome\n\n# Swiss\n\n# 태국\n\n코끼리 바지\n야돔\n\n무삥\n푸팟퐁커리\n\n숙소\n\n- 위치\n- 가격\n- 인테리어\n- 경치\n\n안대랑 마스크 챙겨가면 좋을 듯\nchann massage\n푸켓 숙소 - https://blog.naver.com/hellosydney02/223485097446\n\n#### 치앙마이\n\n샴록 치앙마이 호텔 13\nPor아락 저렴함 7.5\n반 클랑 위앙 태국느낌 12\n판비만 12\n**앳 니만**\n\n#### 푸켓\n\n사와스디 빌리지\n반 카론부리 저렴 5 위치 바다앞\n르메르디앙 푸켓 비치 리조트 25\n\n\n## Japan\n\n[도쿄 여행 어디로 가야할지 헷갈린다면 - 포텐터진 게시판 - 에펨코리아](https://m.fmkorea.com/best/1267922023korea.com/best/1082486494)\n[먹다가 망하는 도시 오사카.jpg - 포텐터진 게시판 - 에펨코리아](https://m.fmkorea.com/best/1068065400)\n삿포로\n오사카 [http://blog.tnote.kr/221024679441](http://blog.tnote.kr/221024679441)\n도쿄\n요코하마\n스시\n라멘 - 삿포로\n덮밥\n모찌\n우동\n녹차\n소바\n오코노미야끼 - 교차바나\n쿠시아게 - 타코보\n타코야끼 - 나니와야\n편의점 빵\n[http://blog.tnote.kr/221020286684](http://blog.tnote.kr/221020286684)\n로이스 초콜렛\n과자\n[http://blog.tnote.kr/221020286684](http://blog.tnote.kr/221020286684)\n역사..\n익사이팅..\n[http://blog.tnote.kr/221020286684](http://blog.tnote.kr/221020286684)\n\n#### 아키타현 이나니아 우동\n\n디카마츠도 유명한듯\n\n#### Fukuoka\n\n> 시티패스 개강추 후쿠오카 돌때 개꿀\n> 유후인 기차로도 가능 세시간 반 걸리고 환승한번 해야함\n> 버스는 미리 예약해야한다 네이버에 검색하는법 검색\n> 시간 없으면 기차에서 밥 술 빵 다 묵어도 되드라\n> 온천 당일치기로 갈껀데 전세탕 쓰고싶으면 누루카와가셈 여기 웨이팅 없음\n> 나가사키 전차 트램 패스 개꿀.\n> 나가사키랑 기타큐슈 유명한 전망대는 셔틀 운영시간 꼭 봐라 둘다 올라갔다 못 보고 옴\n> 분지로 돈까스 개애애애끌맛\n> 후쿠오카 키와미야 웨이팅 개쩔고 비쌈 규마루란데 강추\n> 이건 일본 김천같은덴데 야식이나 아침으로 스키야 찾아가라 굿이다\n> 산큐패스vs레일패스는 케바켄데 왠만해서 기차 추천\n> 나가사키 갈 사람. 이오지마 개강추 너무 이쁘다\n> japan travel 꼭 깔아 개끌앱이다\n\n#### 삿포로\n\n> 일단 후라노에 갈거지? 그럼 메론을 많이 먹어! (유바리메론)\n> 그게 아니라면 삿포로 시내는 모이와야마 전망대, 대관람차, 티비타워, 타누키코지같은게 있기도 하고 지하도는 더울 때 걸으면 딱이지\n> 시외엔 죠잔케이나 토야호도 좋아!\n> 죠잔케이는 크지않은 온천마을이라 쉬면서 산책해도 다 돌 수있음\n> 토야호는 내 기억이 맞으면 여름에 매일 불꽃쏘아올려서 호수뷰방이나 야외 댜욕장에서 볼 수 있어서 좋음!\n> 일정이 5일 이상이면 하코다테에 가서 하루정도 묵으면서 츠가루 해협의 신선한 해산물을 먹는것도 좋지!\n> 하코다테는 도시 자체가 크지 않아서 노면 전철로 유명한 관광지는 대부분 돌 수 있음!\n> 음식으론 시오버터라멘, 지역한정 프렌차이즈인 럭키삐에로의 차이니즈 치킨버거 하세가와스토어의 야키토리벤또 같은게 유명함\n> 쫌 더 멀리 갈 수 있으면 토마무란 곳이 있는데 여긴 이른 아침에 운해 테라스라는 걸 여는데 산 꼭대기에 테라스가 있거든 원래 스키장이라\n> 여기가 여름엔 구름이 바다처럼 흐르는 운해라는 현상이 일어남 이게 장관이라는데 난 아직 직접 본적이 없어\n> 후라노 하코다테 토마무 3개중에 두개 내지 하나만 고르되 토마무를 간다면 후라노에서 묵었다 가는 게 편할거야 차로 가든 대중교통으로 가든\n> 아, 그리고 꼭\n> [https://hanabi.walkerplus.com/](https://hanabi.walkerplus.com/)\n> 여기서 불꽃놀이 일정 확인해보고 겹치는데 있고 갈 수 있겠다 싶으면 꼭 가봐\n> 마코마나이에서 하는건 일본 국내에서도 꾀 규모로 재밌고\n> 하코다테항구에서 하는건 아오모리에서 이어지는거라 의미도 있고 무엇보다 축제느낌의 점포가 많아서 먹어볼거나 볼게 많아\n> 유노카와에서 하는건 해변에서 이어지는 길에서 보면 딱이라 보기 편할거임\n> - 침하하 유저분의 추천\n\n## Hungary\n\nWell I myself liked Budapest the most. It has the most choices. However if you\nlike mountains and hills you should check out Kékes once. It's not the tallest\nmountain but it's looks beautiful. Also Balaton lake is popular but it's also\nexpensive for even foreigners. Hévíz is a thermal lake. I think it's a better\nplace to go to. Be be sure that you can swim because it's 90 meters deep. Eger\nhas a castle back from the 1500s.\n\n## Poland\n\n바르샤바는 폴란드의 수도이니까 아마 가장 유명 한거예요. 제가 사는 도시 이름은\n크라쿠프예요, 여기도 인기있는 관광이에요. 크라쿠프는 아름다운 도시예요. 자연을\n좋아한다면 자코파네를 방문하기에 완벽한 장소이다. 그리고 역사를 좋아한다면\nAuschwitz를 추천해요.\n\n## 강릉 여행\n\n북강릉주차장 - 셔틀 - 강릉 교동 올림픽파크\n용평 알파인 스키장 스위스 하우스\n오죽헌\n바닷가 통일마을?잠수함\n에디슨 박물관\n수제맥주집\n\n## Jeju\n\n- https://www.fmkorea.com/best/1236944258\n\n## 익사이팅 스포츠\n\n국내 [http://m.post.naver.com/viewer/postView.nhn?volumeNo=7308344&memberNo=32920277&vType=VERTICAL](http://m.post.naver.com/viewer/postView.nhn?volumeNo=7308344&memberNo=32920277&vType=VERTICAL)\n싱가포르 - 케이블스키\n싱가포르 - [http://blog.tnote.kr/221020286684](http://blog.tnote.kr/221020286684)\n두바이 - 워터슬라이드\n영국 - 미끄럼틀\n\n## Library\n\n일본 츠타야 도서관\n이탈리아 베네치아 피렌체 도서관 바티칸 도서관\n영국 대영 도서관\n스위스 생 갈렌 수도원 도서관\n미국 뉴욕공립도서관\n독일 슈튜트가르트 시립도서관\n\n\n## 버킷리스트\n- 이탈리아에서 시에스타 즐기기\n- 하와이에서 여름 보내기\n\n[[Decision#여행지 숙소 고를 때 확인 사항]]\n[[Think#소풍을 갈 땐 준비를 잘 해가면 소풍이 즐거워진다]]\n[[Think#독서는 여행이다]]\n\n## 여행 계획\n\n교통편\n식사\n숙소\n\n#### 여행지 숙소 고를 때 확인 사항\n- 가구(침대, 옷장, 책상), 가전 (세탁기, 주방, 헤어 드라이기 +모니터)\n- 와이파이\n- 위치\n- 깔끔함\n- 가격\n- 기본 비품\n\n## Travel\n\n[해외여행](https://namu.wiki/w/%ED%95%B4%EC%99%B8%EC%97%AC%ED%96%89): [소매치기](https://namu.wiki/w/%EC%86%8C%EB%A7%A4%EC%B9%98%EA%B8%B0), [외국어](https://namu.wiki/w/%EC%99%B8%EA%B5%AD%EC%96%B4)를 고려하여 생환가방을 꾸려야 한다. 예를 들어 [복대](https://namu.wiki/w/%EB%B3%B5%EB%8C%80)를 추가하면 소매치기로부터 좀더 안전하다. 여권 분실을 대비하여 [여권](https://namu.wiki/w/%EC%97%AC%EA%B6%8C)사진 2장과 현지 [대사관](https://namu.wiki/w/%EB%8C%80%EC%82%AC%EA%B4%80) 연락처 또는 주소를 적은 메모를 방수포장하여 서로 다른 위치에 보관. 같은 방식으로 복대를 운영하더라도 신발 밑창이나 속옷, 양말사이에 신용카드나 비상금을 별도로 소지\n\n#### 유럽 여행\n\n독일은 쉥겐조약보다 한독양자협약이 우선되어서\n입국 시부터 90일 있을 수 있다\n입국 시부터 이기 때문에 워홀비자가 있어서 독일에 거주중이었더라도 독일 밖을 나갔다가 다시 돌아와야 90일을 계산할 수 있고, 그래서 그 계산이 쉽게 되려면 비행기 도장 같은 확실한 증명원이 있으면 좋다.\n그리고 주의사항은 재입국 후 90일만 있을 수 있고 쉥겐조약 국가들끼리 여행도 이 기간에 포함된다.\n워홀비자 있을때는 쉥겐조약 국가 이동이 자유롭다.\n\n## travel\n\n여행은 결과보다 과정이 더 즐거운 경우가 많다. 그럼에도 불구하고 결과가 좋을 때가 있는데\n- 도서관이나 박물관을 갈 때\n- 축구장을 갔을 때\n- 쇼핑을 할 때\n- 맛있는 것을 먹었을 때\n\n\n## 여행은 공간의 이동이 아닌 시선의 이동이라는 것을요\n> 이 외에도 정말 많은 카메라를 소유하고 바꾸고 하였지만 첫 카메라를 샀을 때 만큼\n좋았던 적은 없었습니다\n또한 피사체도 많이 변하게 되었죠\n차가 생기면서 이동 할 수 있는 곳이 많아지게 되어 혼자서 주말이면 카메라들고\n여행도 많이 다녔습니다\n서울에 살면서도 그 동안 자주 안가던 서울 곳곳을 스냅사진 찍겠다며 부지런히\n돌아다녔죠\n이 때 처음으로 느끼게 됩니다\n여행은 공간의 이동이 아닌 시선의 이동이라는 것을요\n항상 다니던 공간도 매번 다르게 보이기 시작합니다\n카메라를 통해 볼 수 있었던 것이죠.\n>> https://www.clien.net/service/board/use/15071147?od=T31&po=8&category=&groupCd=allreview\n\n"},{"headings":[{"value":"경영"},{"value":"기업의 가치"},{"value":"기존 업체와 스타트업"},{"value":"좋은 회사?"},{"value":"사업을 하는 이유"},{"value":"사업은 자신이 잘 아는 분야, 잘하는 분야에서 해야 한다"},{"value":"창업 계기"},{"value":"startup"},{"value":"스타트업이 아이템 구상하는 프로세스"},{"value":"애자일"},{"value":"피터 드러커 - 비즈니스의 목적은 고객을 창출하는 것이다"},{"value":"제품 문제점들"},{"value":"kb은행 앱들을 보며"},{"value":"국산화와 한컴의 문제"},{"value":"한국장학재단 앱"},{"value":"타이젠 os도 이제 구글 os로 대체된다"},{"value":"캐치"}],"fields":{"slug":"/business/"},"rawMarkdownBody":"\n## 경영\n\n#### 기업의 가치\n몇년 동안의 제품 개발 과정을 통해 상당량의 내부 지식을 축적한다\n\n#### 기존 업체와 스타트업\n기존 중소기업에 있었던 사람들은 중소기업을 거치는 단계로 생각하고 대기업을 가려고 한다\n스타트업에서는 대기업을 가려는게 아니라 원하는 기술과 자신이 회사와 같이 커가는 느낌을 받아서 거쳐간다기보다는 성장에 메리트를 느끼는 것 같다\n중소기업에서도 부품이 아니라 같이 성장하는 느낌을 줘야 사원들이 그 회사에 머물고 싶어할 것 같다.\n중소기업에서는 직원들이 나가는 것을 막기 힘들고, 메리트를 느끼지 못하고 있다\n\n#### 좋은 회사?\n미래에도 성장하는 회사가 좋은 회사일까\n좋은 비전과 좋은 사람이 있으면 좋은 회사가 될까\n\n#### 사업을 하는 이유\n사업가들의 인터뷰를 봐야겠다\n돈을 벌고 싶어서?\n내 기술이 시장에 먹힐 것 같아서?\n세상의 발전에 족적을 남기고 싶어서?\n남 밑에서 일하는게 답답해서?\n사업을 하면 내가 챙겨야 하는 사람이 생기고\n돈을 계속 투자 받아야 하고 나의 입지는 줄어들고\n내가 원하는 아이템 개발에 집중하기도 힘들고\n회사에 에너지를 쏟는 양이 커지는 반면 라이프의 비중이 줄어든다\n\n#### 사업은 자신이 잘 아는 분야, 잘하는 분야에서 해야 한다\n사업 아이템을 보고 하면 힘들 것 같다\n\n#### 창업 계기\n- 나의 문제를 해결해야하기 때문에\n- 자아실현 욕구\n- 다른 사람들에게 나는 뭐하고 잇지 라는 창업 욕구 불러일으킴\n- 남의 일을 하는 것에 대한 부족함 느낌\n- 내 것에 대한 갈망\n- 사업을 하면서 얻게 될 것에 대한 기대\n- 사람과의 연결, 위기 극복, 기술적성장, 다방면 경험\n\n창업을 하면 내가 원하는 것보다 고객이 원하는 것에 맞춰야 함\n\n#### startup\n아이템 확인\n- 글을 써서 사람들의 관심을 확인한다. 사람들이 많이 보는 사이트에 글을 올린다\n- 커뮤니티에서 관심을 확인한다\n아이템 검증\n- 제품 출시를 해서 구입해줄 소수의 인원을 구해 제품을 테스트하고, 피드백을 받는다\n- 처음 제품을 사용한 사람들에게 좋은 사용자 경험을 줄 수 있도록 아이템을 만든다\n초기 유저 모으기\n- 조금 더 많은 사람들에게 접근한다\n기존 업계와 연계, 제휴\n\n#### 스타트업이 아이템 구상하는 프로세스\n- MVP?\n- 아이데이션? idea 발생 단계 같은 느낌?\n- 가설 검증\n\n#### 애자일\n뼈대만 있는, 기능이 적은 것을 사용자가 처음 보게 된다\n> 방대한 기능에 질리는 것보다 하나씩 익혀가는 느낌으로 기능을 개발하고 공유한다\n\n예전에는 어느정도 퀄리티가 확보된 후에 출시를 했다면 지금은 최소 기능만 있고 피드백대로 발전해나가겠다는 느낌으로 나온다\n\n기능의 부족으로 싫어하는 사람도 있을 수 있다\n\n완전체\n그렇다고 기능을 많이 넣고 완전체로 출시해봤자 고객의 피드백은 들어온다. 문제점도 훨씬 많아질 것이다.\n\n\n#### 피터 드러커 - 비즈니스의 목적은 고객을 창출하는 것이다\n- 고객을 위한 무언가를 발명할 수 있을지를 생각\n- 제품보다 우선하는 것은 비즈니스. 레몬주스보다 음료유통 비즈니스\n- 마이클 포터의 다섯가지 힘 - 들어가도 되는 산업인지 판단하는 다섯가지 척도\n- 통합의 힘 <-> 전문화의 힘\n\t- 디커플링 책\n\n\n---\n\n## 제품 문제점들\n아이티몰의 제품 검색 로직이 느리다\n메인 페이지에 제일 먼저 쓰는 곳이라 중요한 것 같은데\n\n신세계몰의 검색은 글자를 다 치면 관련목록이 따라오는게 아니라 글자가 밀린다.\n네이버는 타이핑은 원활하게 되게 하는데, 신세계는 검색 로딩을 사용자가 겪는다\n\n#### kb은행 앱들을 보며\n모듈화를 하는 것은 좋지만 패키징도 잘해야 한다\n유저들은 여러 앱을 깔기를 원하지 않고 하나의 앱에서 다 할 수 있게하는 것도 중요한 기능이다\n\n#### 국산화와 한컴의 문제\n그리고 범용프로그램\n한컴은 한글문서라는 독자적인 문서파일을 만들어낸다\n이 한글문서는 다른 텍스트파일과 연동이 안된다\n독자적인 기술이 있지만 폐쇄적이다\n한국에서는 공공기관이나 학교 등에서 적극사용 권장되고 있다\n그래서 학생때부터 한글에 익숙해지게 되는데\n외국사람과 문서파일 공유를 하려고 하면 약간 문제가 생긴다\n국산화를 시도하고 국가에서 장려하는 것이지만 너무 폐쇄적인 것의 문제라고 볼 수 있는데\n그렇다고 모두가 word문서를 쓰는 것도 이상할 것이다\n각자의 문서파일을 묶는 하나의 편집기란 있기 힘들 것이지만\n이들을 잘 엮을 필요는 있다\n모두가 똑같이 쓰는 소프트웨어는 없지만\n외부와 단절된 소프트웨어는 좋지 않다\n\n#### 한국장학재단 앱\n공인인증서 시작할 때 인증했는데 끝날 때 한번 더 인증해야하는 것 불편\n문자 자동 인식 못하는 것 불편\n개발자가 편하면 사용자가 불편하다\n\n#### 타이젠 os도 이제 구글 os로 대체된다\n직접 구축한 생태계가 공용 생태계에 못 미쳐서 사라지는 경우가 많은데\n개인용 툴도 호환성 있는 툴을 사용하는게 결국 답일까 싶다\n\n#### 캐치\n가입 시 대학 입력을 강제한다\n이벤트 신청 시 알림 수신을 강제한다\n최악이다\n"},{"headings":[{"value":"창작자가 있는 분야"},{"value":"directer, creater, producer, executive producer, writer,"},{"value":"연출가는 드론을 직접 조종할 필요 없이 어떻게 찍으라고 알려주면 된다."},{"value":"카메라가 여러 대일때 슬레이트를 쳐서 정보와 싱크 지점을 만든다"},{"value":"편집"},{"value":"Elevator"},{"value":"가수는 무대 하나로 자신을 증명할 수 있다"},{"value":"디자이너, 가수, 연기자"},{"value":"작가의 초기 중기 말기"},{"value":"Artist"},{"value":"Paul rubens"},{"value":"에셔"},{"value":"인상주의"},{"value":"작가의 의도가 작품에 의도라고 생각할 수는 없다"},{"value":"computer science와 software engineer의 상관관계?"},{"value":"좋은 작품의 예"},{"value":"예술가와 엔지니어의 차이"},{"value":"스티브 잡스, 미야모토 시게루"},{"value":"예술가들에게 예술은 전쟁터에서 전쟁을 하는 것과 같은가"},{"value":"예술은 독자가 해석하기 나름이다"},{"value":"기술 예술 인문학"},{"value":"기술 예술 과학 인문"},{"value":"모르는 것을 알게 하는게 아니라 무심코 지나치던 것을 같이 한 번 들여다 보는 것이 예술"},{"value":"예술과 공학의 경계"},{"value":"문과 이과"},{"value":"영화 피아니스트"},{"value":"소포모어 징크스"},{"value":"abstract"},{"value":"추상"},{"value":"안톤 체호프"},{"value":"예술 작품 감상법"},{"value":"장범준 내 마음이 그대가 되어 노래 소개"},{"value":"장범준이 1집 앨범을 제작하면서 친구들끼리 힘을 합쳤지만"}],"fields":{"slug":"/creator/"},"rawMarkdownBody":"\n## 창작자가 있는 분야\n\n- Music -- song-writing, musical, concert\n- Construct\n- Art -- drawing, movie,\n- Directer\n- Author -- essay, novel\n\n예술\n관찰\n이해의 지평\n지평의 융합\n\n## directer, creater, producer, executive producer, writer,\n\n제작, 연출\n\n제작이 프로듀서, 기획자\n연출은 감독\n\n제작자가 연출에 깊게 관여할수도, 아닐수도 있다\n영화화에 대한 시도를 제작자가 할 수도 감독이 할 수도 있다\n\n총괄제작자가 있어 영화화 전반을 관리하고\n하위 제작자들은 영화화를 하는데 있어 필요한 주변 환경 구성을 도우는 경우가 있다 (인력, 소품, 제작비 조달)\n\n기획자가 따로 있을 수도 있다\n영화의 구상부터 촬영 전까지\n\n출판계에서는 편집자가 제작자와 비슷한 듯\n운동계에서는 프런트와 감독의 관계\n\n#### 연출가는 드론을 직접 조종할 필요 없이 어떻게 찍으라고 알려주면 된다.\n\n#### 카메라가 여러 대일때 슬레이트를 쳐서 정보와 싱크 지점을 만든다\n\nNG 후에 편집점을 위해 박수를 쳐서 편집점을 쉽게 찾게 한다\n개발에서 동기를 맞추는 힌트가 될 수 있을까\n\n#### 편집\n\n분류할 편, 모을 집\n\n공부의 왕도가 여기도 있었네\n\n#### Elevator\n\nHow to perfectly make elevator?\nCan It bring programming\n\n> 투명한 유리 속에 있는 엘리베이터를 보고\n\n#### 가수는 무대 하나로 자신을 증명할 수 있다\n\n#### 디자이너, 가수, 연기자\n\n이전의 기술을 몸에만 체득하고 있지 물리적으로 가질 수 없다.\n그럼에도 그들은 뛰어난 결과물을 만들어낸다.\n개발자도 이전의 코드를 계속 안고가려고 고집하기보다 기술적 성장을 목적으로 배우면 될까\n\n[[Think#개발의 목표]]\n\n#### 작가의 초기 중기 말기\n\n초기는보이는대로 표현하는거\n중기는 느낀걸 그려내는거\n말기는 느낀걸 내 세계로 가져와서 표현하는거\n\n- 천경자\n\n## Artist\n\n#### Paul rubens\n\n#### 에셔\n\n#### 인상주의\n\n빛의 위치에 따라 색이 달리 보이는 현상을 이용한 인상주의\n프로이트의 무의식에 영감 받아 초현실과 현실을\n\n#### 작가의 의도가 작품에 의도라고 생각할 수는 없다\n\n작품을 보고 질문을 한다면\n\n- 작품을 만들면서 무슨 생각을 했는지\n- 왜 그리려고 했는지\n- 작품을 보고 어떤 생각을 하시는지\n- 의도한것이 있는지\n\n## computer science와 software engineer의 상관관계?\n\n## 좋은 작품의 예\n\n- 시간이 지나도 좋아보이는 것(낡지 않고 세련된 것, 고전)\n- 한 장면도 여러 해석이 가능한 상황\n- 여러 번 봐도 새롭게 느껴지는 상황\n- 봐도 봐도 안 질리는 것\n- 오래될수록 가치있어 지는 것\n\n적고 보니 모두 고전이라고 불리우는 작품들의 특징이다. 고전이 아닌 것 중에 좋다고\n생각한 것들의 예가 추가되면 좋겠다.\n\n## 예술가와 엔지니어의 차이\n\n예술가는 내가 원하는 것을 만들고\n엔지니어는 고객이 원하는 것을 만든다\n관객은 예술가의 질문을 듣기 위해 작품을 찾고\n유저는 자신의 요구를 달성하기 위해 제품을 쓴다\n그렇다고 엔지니어가 작품을 만들지 말란 법은 없지\n기술과 예술의 차이가 있긴 있다\n\n기술 안에 예술을 담으면 좋겠다\n기술은 특별한 목적을 가지고 있다\n실제적인 문제 해결을 못하는 기술은 의미가 없다\n\n#### 스티브 잡스, 미야모토 시게루\n\n디자인 전공자가 기획을 하는 것\n개발자 출신 기획자와 다른 점이 있을까\n이과 감성과 문과 감성의 차이가 있을까\n소프트웨어를 하나의 예술작품처럼 만드는 것으로 생각한다면.\n\n#### 예술가들에게 예술은 전쟁터에서 전쟁을 하는 것과 같은가\n\n회사원들에게는 전쟁터에서 전쟁을 하는 것 같은 압박감이 안주어지고 현재를 넘기면\n되는 경우가 있다. 당연히 프로젝트의 중요한 순간은 있지만. 아 이것은 회사라는 큰\n방패막이 있기 때문에 가능한 것일까? 예술가들은 혈혈단신일 경우가 많기에?\n영화감독을 예로 들면, 필모그래피는 곧 그 사람이 받게 되는 평가지표가 되고,\n주위에서 평가가 가혹하게 들어온다. 누군가는 저 영화감독은 별볼일 없어 라는\n평가를 받기도 하고.\n단지 대중을 상대하는 직업이라 그런 것일 수도 있겠다.\n회사에 있으면 대중에게서는 한 발 멀어질 수 있으니\n\n#### 예술은 독자가 해석하기 나름이다\n\n코드를 예술적으로 쓴다면 다른 사람과 소통이 안될 수 있다\n코드는 기술적이되 결과물을 예술로 만들 수 있을까?\n글쎄...\n\n코드는 독자가 확보되있는 책이라서 독자에게 잘 가닿아야 한다\n근데 책이 되면 안된다. 책은 직관적이지 않아서 사이드이펙트가 생긴다\n\n#### 기술 예술 인문학\n\n물질 -> 비물질화(소프트웨어)\n소프트웨어로 예술을 하는 것이 미디어아트와 같은 것이 될 수 있을까\n\n어려워야 예술이 된다?\n가난하거나, 구하기 어려운 소재를 사용하던가?\n\n포스트 모더니즘\n메타적인 시각\n메타 - 추상\n\n예술은 질문, 기술은 답?\n예술은 자기 표현, 새로운 시각, 통찰?\n\n#### 기술 예술 과학 인문\n\n기술자 공학자 과학자?\n과학은 자연에서 기술을 발견하고, 공학은 기술을 응용해 사람들에게 주는 것이란다\n과학과 공학마저 나누어서 생각하려고 하는데 기술과 예술을 통합하는 것은\n어불성설인가?\n\n#### 모르는 것을 알게 하는게 아니라 무심코 지나치던 것을 같이 한 번 들여다 보는 것이 예술\n\n세상을 선명하게 보게 해준다\n개발자도 예술가일 수 있겠는데?\n\n#### 예술과 공학의 경계\n\n예술과 구현의 경계\n아이디어와 구현의 경계\n상상과 실천의 경계\n\n프론트엔드 엔지니어는 예술가인가\n디자이너는 예술가인가\n3d 그래픽은 예술인가\n백남준과 엔지니어\n조영남과 대작가\n\n#### 문과 이과\n\n문과와 이과는 정말 딱 갈리는 구분선이 명확한 것 같다\n근데 경영학과, 경제학과는 문과인가, 이과인가. 명확하지도 않네\n\n과거의 과목\n법학, 의학, 신학\n문법, 논리학, 수사학, 산술, 기하, 천문학, 음악\n일본에서 영국, 독일을 따라잡을 대상으로 보고 영어로 널리 퍼진 학문과 독일어로\n널리 퍼진 학문으로 나눠 문, 이과가 나뉘었다고 하는 얘기가 있다\n\n분류 함으로써 한 곳에 더 집중하게 하는 효과가 있을 수 있고,\n분류하지 않음으로써 시너지를 낼 수도 있다\n\n찰스 스노 - 두 문화\n\n#### 영화 피아니스트\n피아니스트에서 마지막 부분에 독일 장교가 예술인들에 대한 존중을 보여준다. 그\n전쟁통 속에서 예술인에게 존중을 보인다는게 잘 이해되지 않았다.\n예술의 무엇을 존중한 것인지 잘 모르겠다.\n\n다빈치에게 회화와 과학은 큰 차이가 없었다.\n- 미학오디세이\n\n그에겐 예술과 과학이 하나였다.\n#movie\n\n## 소포모어 징크스\n\n기술적 바탕이 없는 첫번째 작품이 성공할 수 있으나 계속 가기 힘들고\n기술을 습득하면 작품이 더 잘 써질 수도 있다\n반대로 기존 생태계에 묶여 밍숭맹숭해질 수도 있으나 그런 경우보다는 기술적\n성장으로 더 좋은 작품을 쓰는 경우가 더 많다\n운동계, 예술계\n\n## abstract\n\n- [ ] 추상 미술에 대해 알아보면서 추상화에 대해 힌트를 얻을 수 있을까\n- [과학과 추상미술](https://drive.google.com/file/d/19pachfgZJGI8OJIwpVD9saQ_e-5fprJX/view?usp=sharing)\n- [1913년 초기 추상 정의와 논쟁, 로베르 들로네, 말레비치](https://hri997.tistory.com/m/101)\n\n추상적인 것에 구체적 사례를 추가해야겠다\n\n#### 추상\n\n사람이 다루기 쉽게 하는것?\n사람이 이해하기 쉽게 하는것?\n필요한 부분만 뽑아내는것?\n\n#### 안톤 체호프\n\nhttps://namu.wiki/w/%EC%95%88%ED%86%A4%20%EC%B2%B4%ED%98%B8%ED%94%84\n\n미사여구를 구사하기 보다는 평이하고 단순한 일상어를 바탕으로 문장을 간결\n명료하게 구성하는 문체를 구사한다.\n\n#### 예술 작품 감상법\n\n흥미유발\n분석\n해석\n판단\n\n감상이 영어로 appreciate 였다. 감사하다고 할 때 쓰는 단어였는데, 진가를 알아보다는 그림의 단어였다\n감상이라는 말이 가치를 평가한다는 의미를 가지고 있는데,\n평가라는 것은 가치를 판단한다는 것이고\n가치는 인간의 욕구나 관심을 충족시키는 성질을 말한다고 한다.\n\n즉 작품을 감상한다는 것은 그 작품이 인간의 욕구나 관심을 충족시키는 성질을 나의 기준에서 잘 충족하느냐를 개인적으로 느끼는 것인 것 같다\n무엇인가를 판단하고 평가한다는게 멋대로 생각하는 것 같아 거부감이 있었는데, 평가 자체가 부정적인 것은 아니고, 무엇의 우열을 가린다던가 편견을 가지는 게 문제인 것 같다. 이를 주의하며 감상을 해야겠다.\n\n평가, 분석, 판단\n위에서 말하는 평가는 판단과 같은 의미로 쓰이고 있다.\n근데 이게 분석과도 비슷한 것 같지만, 분석과 판단은 또 다르다.\n\n형식\n\n해석을 반대한다 - 수전 손택\n교과서에 칸딘스키 등 추상화를 형식 중심으로 감상하는 방법을 예술 감상의 한 방식으로 제시하고 있었는데 형식을 본다는 게 와닿지 않았다.\n근데 예술작품이 무엇을 의미하는지 해석하려고 하기보다 형식 자체를 감상하자는 이야기가 있다. 사물의 반짝임을 그 자체 안에서 경험하는 것, 그대로의 사물을 경험하는 것이 중요하다는 것이다.\n지나치게 작가의 의도를 전달하여 감상의 폭을 제한하는 한 측면과 지나치게 해석을 해서 작품의 의미와 전혀 관계없을 수 있는 감상자의 입맛에 맞춘 해석을 하는 측면의 사이에 작가와 감상자의 적절한 밸런스가 필요할 것 같다.\n작품이 의미를 가져야한다고 생각했고, 일상을 뛰어넘는 추상의 세계, 의식의 세계에서의 표현을 예술작품에서 볼 수 있다고 생각했는데, 이것은 형식이 아니라 작품의 의미에 가까워서 형식을 본다는게 와닿지 않았던 것 같다.\n작가의 세계의 표현이나 느낌의 표현과, 나의 경험에 의한 감상이 모두 있으면 좋겠다.\n\n해석하기 위한 사고의 과정과 그 과정에서 버려지는 예술의 순수한 의미, 다양한 감정이 부정되고 버려짐을 경계하고, 고전 양식에 대한 배경지식과 미술사조에 대한 역사적 이해, 작가에 대한 정보, 작품에 대한 정보를 잘 받아들여 다채롭고 풍부하게 이해하고 감상할 수 있으면 좋겠다.\nhttps://www.jaeyongpark.net/updates/archives/1991\n\n@ 일정한 틀에 담으면 정리하는데 도움을 준다.\n@ 안목을 높인다\n\n@ 연결할 거리를 찾는다\n\n#### 장범준 내 마음이 그대가 되어 노래 소개\n\nhttps://www.youtube.com/watch?v=N1T5rnst3NI\n\n> 앨범 소개에 앞서 이번 앨범은 군대 가기 전 제 친구들의 노래를 녹음해서 사운드 클라우드에 올리려고 했었던 작은 계획에서 시작됐습니다.\n> 입대 날짜는 24일 크리스마스 이브였었고 친구들과 팬들에게 드리려고 했던 작은 깜짝 이벤트였습니다.\n> 그런데 12월 초에 아이를 갖게 되었고 다음 해 4월 사랑하는 여자와 결혼을 하기로 약속하면서 군대를 예정대로 갈 수 없게 되었습니다.\n> 그래서 저는 제대 후에 가지고 있었던 계획을 조금 앞당기기로 결정했고, 그 계획은 제가 프로듀싱하는 앨범을 만드는 것이었습니다.\n> 아이가 세상에 나오기 전에 꼭 앨범을 만들고 싶었고, 작업 중이었던 친구들의 노래를 프로듀싱을 통해 정식 음원으로 제작해보기로 결정하였습니다.\n\n처음엔 지하 합주실에서 주로 작업을 했으나 편곡이나 녹음 등 기술적인 부분에서 많은 한계에 부딪혔습니다.\n곡을 완성하고 싶은데 어떤 게 이 곡에 가장 잘 맞는 분위기인지 찾아가는 과정이 가장 어려웠습니다.\n지루한 부분이 있는데 가사를 잘 이해하면서 들을 수 있게 편곡하면 될 거 같은데 그건 어떻게 해야 하나?\n음은 안 맞는 거 같은데 기분이 좋은 부분은 우리만 좋은 건가? 사람들도 좋아할까?\n7080같은 느낌을 세련되게 만들려면 어떤 톤으로 표현해야 할까?\n멜로디보다 가사가 좋은 노래는 어떻게 해야 하나? 등등...\n\n전문가들과의 만남을 갖기로 하고 정말 섬세한 부분들 나누어 채워가며 다양한 음악선배들과 시간을 보냈습니다.\n선배 동료들과 곡이 가지고 있는 순수함을 해치지 않으면서 좋은 음악으로 완성되기 위해 함께 최선을 다해 작업했습니다.\n편곡이 끝나고 녹음에 들어가고 믹싱 했던 게 엊그제 같은데 벌써 마스터링이 끝났습니다.\n이제 곧 있으면 뮤직비디오부터 앨범디자인까지 마무리네요.\n\n이제 간단하게 앨범에 대한 소개를 하자면,\n이 앨범은 락페스티발을 상상하면서 만든 앨범입니다.\n브래드와 대니가 황금마티즈를 타고 여름 새벽에 서머나이트를 가장 좋아한다고 말했던 그 느낌입니다.\n남은 여름의 막바지에 이 노래들과 바다와 낙엽과 그 사이에 있는 기분을 느끼시길 바랍니다.\n\n밴드는 여름입니다. 어렸을 때 그린플러그드에서 칵스의 공연을 보며 한강이 너무 좋다고 느꼈었고, 지산락페스티발에서 코린베일리래를 보면서 정말 홀려서 뭐라 말할 수 없는 기분을 느꼈습니다.\n이번 앨범 제가 가진 색깔로 조금이나마 제가 동경했던 감정을 다른 사람에게도 전할 수 있다면 좋겠네요.\n\n제가 20대 초반부터 지금까지 정말 사랑해왔던 친구들의 노래들입니다.\n잘 들어 주시고 제가 무슨 생각을 하면서 앨범을 완성시켜 나갔는지 1주일 후에 앨범으로 이야기했으면 좋겠습니다.\n\n#### 장범준이 1집 앨범을 제작하면서 친구들끼리 힘을 합쳤지만\n\n음악적인 부족함을 느끼고 이게 잘 되고 있는지 알 길이 없었다고 한다\n추상적인 질문을 구체적인 편곡으로 소화해내는게 쉽지 않았다고 한다. 막연한 그림을 구체화하는게 정말 어려운 것 같다.\n개발을 하면서도 코프링 코드를 작성하면서 이것보다 더 잘 짤 수 있을 것 같은데 누군가 봐 줄 사람이 없고 알 수가 없었다고 아쉬움을 토로하는 동료의 말에 공감했다\n동작하는 코드는 만들어내지만 이게 정석적인 방법인지, 더 좋은 방법이 있을 건데 모르고 지나가는게 아닌지, 잘못된 습관이 계속 이어지면 어떡할지 고민이 된다.\n이럴 때 시니어의 경험에 따른 조언과 도움이 작품의 완성도를 높이고 나를 더 성장시킨다\n"},{"headings":[{"value":"Basic"},{"value":"접근성 챙기기"},{"value":"스크린리더가 네비게이션을 읽지 않도록 해야한다"},{"value":"텍스트로 만든 링크 자체가 의미가 가지게 만들어야 한다"},{"value":"컬러만으로 의미를 전달하려고 하면 색맹에게 불편하다"},{"value":"글자마크(글자로 되어있는 메뉴) 가벼운 그림으로 표시하는게 국가 상관없이 이해할 수 있겠다"},{"value":"Typography"},{"value":"Should have make fail return button"},{"value":"목록 창에서 페이징과 자동 로딩기능 필요"},{"value":"Color"},{"value":"Font"},{"value":"Darkmode"},{"value":"[[Video]]"},{"value":"in WEB"},{"value":"what is good?"},{"value":"side toc convert size"},{"value":"anchor offset"},{"value":"font-size"},{"value":"그림 속 색깔"},{"value":"웹페이지를 영화의 미장센처럼 꾸민다?"},{"value":"Reference"}],"fields":{"slug":"/design/"},"rawMarkdownBody":"\n## Basic\n\n#### 접근성 챙기기\n\n인터넷 상에서는 장애인과 비장애인의 경계가 없다 (커뮤니케이션에 있어서),\n접근성 기능이 제한되어 있다면 아예 접근할 수가 없게 된다.\n접근성은 최소기능이 아니라 필수기능이어야 한다.\n벽이 아니라 다리가되고, 다리보다는 평평한 길이 되어야 한다.\n\n- [W3C 접근성 검사기](https://jigsaw.w3.org/css-validator/)\n- [WAVE 접근성 검사기](https://wave.webaim.org/)\n- [네이버 접근성 센터](https://nuli.navercorp.com/education/disabilityType)\n- [명암비 조합 파인더](https://app.contrast-finder.org/?lang=ko)\n- [웹 접근성 가이드라인](http://web-accessibility.carnegiemuseums.org/code/navigation/)\n\n#### 스크린리더가 네비게이션을 읽지 않도록 해야한다\n\n#### 텍스트로 만든 링크 자체가 의미가 가지게 만들어야 한다\n\n#### 컬러만으로 의미를 전달하려고 하면 색맹에게 불편하다\n\n#### 글자마크(글자로 되어있는 메뉴) 가벼운 그림으로 표시하는게 국가 상관없이 이해할 수 있겠다\n\n#### Typography\n\n#### Should have make fail return button\n\n#### 목록 창에서 페이징과 자동 로딩기능 필요\n\n## Color\n\n텔레비전 모니터나 조명 등에서, 다른 색의 불빛을 겹쳐 새로운 색을 만드는 가산혼합의 삼원색은, 통상 빨강·초록·파랑의 삼색이다.\n그림물감 혼합, 칼라 인쇄로 색 잉크 감산혼합의 경우의 삼원색은, 시안, 마젠타·노랑이다.\n![Color](../img/origin_color.jpeg)\n\n가산혼합\n\n- 빨강 `#FF0000`\n- 초록 `#00FF00`\n- 파랑 `#0000FF`\n\n감산혼합\n\n- 시안 `#00FFFF`\n- 마젠타 `#FF00FF`\n- 노랑 `#FFFF00`\n\n## Font\n\n굴림은 산세리프. 꽉 찬 글씨. 둥글둥글한 글씨\n한글에서는 구리게 보인다\n똑같은 자음의 크기가 글자마다 달라진다\n가상의 동일한 사각형 안에 꽉꽉 채워 넣으려고 해서 글자 간격이 멀어진다\n마이크로소프트가 기본글꼴로 지정했었다\n기본글꼴이어서 너무 자주보는 것도 문제다.\n2008년 이후 윈도우 기본글꼴이 맑은 고딕이 되었다.\n복고 느낌, 가독성이 높다고 볼 수도 있다. 큼직큼직해서\n\n- [What are those system fonts?](https://css-tricks.com/snippets/css/system-font-stack/)\n\n## Darkmode\n\n- Don't use a perfect black\n- low 채도(Saturation), 명도(Brightness)\n- text, background contrast ratio minimum 15.1:1\n- depth, visual hierarchy\n- `background: #000; color: #fff;`\n\n## [[Video]]\n\n## in WEB\n\n#### what is good?\n\n- round vs non-round\n- shadow\n- font-size\n\n#### side toc convert size\n\n15\" full-size 1900 half-size 950\ncontent full-size 1170\nmiddle-size 750\nmobile-size 780\n\ngitlab convert line 990\nsubicura convert line 1100\nevan moon convert line 770\n\ni want when 15\" monitor half size view is ... index view is better?\n--> toc size 20%, screen < 1200\n\n#### anchor offset\n\n```\n:target::before {\n content: '';\n display: block;\n height:  180px;\n margin-top: -180px;\n}\n```\n\n- https://stackoverflow.com/questions/10732690/offsetting-an-html-anchor-to-adjust-for-fixed-header\n\n#### font-size\n\nfont-size 19 < x < 28\nmedium 21px mobile:18px\nbrunch\n\n- line-height\n\n#### 그림 속 색깔\n\n무채색 속 하나의 유채색을 집어넣으면 색이 더 부각되고 멋져보인다\n\n#### 웹페이지를 영화의 미장센처럼 꾸민다?\n\n사진처럼 꾸민다?\n인류가 가장 친숙한 2d 평면 시각체는 무엇?\n2d가 좋을까 3d가 좋을까\n\n시간, 공간적 특성을 담는다\n그리드로 다양한 환경에 구애받지 않도록 한다\n\n## Reference\n\n- https://csslayout.io/patterns/\n- [디자인 시스템을 구성하는 방법](https://medium.com/guleum/디자인-시스템을-구성하는-방법-beefa8214884)\n- [디자인 시각적 요소들](https://brunch.co.kr/@shaun/40)\n- [웹폰트](https://wit.nts-corp.com/2017/02/13/4258)\n- [안전하게 따라 할 수 있는 비주얼 디자인 규칙들](https://news.hada.io/topic?id=8573)\n"},{"headings":[{"value":"경기 사이클"},{"value":"자본주의 공산주의"},{"value":"일반 회사원은 1년에 세금을 얼만큼 낼까"},{"value":"연말정산 시 뱉어내는 기준"},{"value":"ISA"},{"value":"주택청약"},{"value":"프리랜서 세금"},{"value":"세금 종류"},{"value":"소유권이전"},{"value":"stock app"},{"value":"주식을 하는 기준"},{"value":"자본 이익 가격(시가총액)"},{"value":"Check date"},{"value":"Invest like vc company"},{"value":"Stock"},{"value":"배당주"},{"value":"주식 평가지표"},{"value":"다트들어가서 사업보고서 들어간 다음 감사의견이 적정인지 본 후"},{"value":"단기간에 시장의 유동성으로 액면가가 계속 바뀐다"},{"value":"10년에 한번 증여 비과세"},{"value":"주식 익절 시 세금 덜 내는 법. 1년단위로?"},{"value":"집 언제 살 것인가"},{"value":"집을 사고 전세를 주어서 그 돈으로 주식에 다시 투자"},{"value":"일본 버블"},{"value":"공매도 제한이 풀리면 주가가 떨어지지 않을까 (2월)"}],"fields":{"slug":"/economics/"},"rawMarkdownBody":"\n## 경기 사이클\n1. 경기 회복기\n\t- 주식,부동산 산다( 주식은 경제상태를 선행해서 보여준다 )\n2. 경기 호황기\n\t- 채권\n3. 경기 후퇴기(어디까지 떨어질지 모르고 불안한 상태)\n\t- 안전자산\n4. 경기 침체기\n\t- 현금(예금)\n\n#### 자본주의 공산주의\n- 생산 수단을 사적으로 소유할 수 있느냐 없느냐\n- 보수 진보\n- 세금 <-> 복지\n\n## 일반 회사원은 1년에 세금을 얼만큼 낼까\n어떤 항목으로 낼까\n- 원천징수세액\n- 근로소득세\n- 국민연금\n- 건강보험료\n- 고용보험료\n\n#### 연말정산 시 뱉어내는 기준\n- 소득공제:계산 전 금액 공제\n- 세액공제:계산 후 금액 공제\n\n총급여액의 25%를 초과하여 사용 시 초과분에 대하여\n체크 카드는 30% 신용카드는 15% 소득공제\n- 신용카드 사용금액을 먼저 계산하여 체크카드 공제금액이 더 많도록 해준다.\n- 총 급여 4000 -> 1000만원 초과분,\n      신용카드로 1500, 체크카드로 500 썼을 때 체크카드가 25% 미만일 때로\n      안잡혀야 체크카드 사용분 500이 모두 공제 가능하므로\n    - 신용 500, 체크 600을 쓰면 체크 100만원분만 계산이 된다\n- 총 급여 3000 -> 750만원 초과\n    - 신용 500, 체크 500 사용 시, 체크 250 * 30%, 75만원 소득 공제\n- 즉 신용카드는 총 급여의 25% 이상 사용할 필요 없음\n- 신용카드 사용분이 소득공제 항목에서 제외될 수 있음(2020 현재 3년 유예)\n- 총 공제한도 300, 총 급여 7천만원 이하 시.\n- 교통, 문화생활비 공제\n    - 초과분에 대해 계산, 다만 총 공제한도를 넘어서는 추가 공제 가능\n\n청약\n- 청약저축 240만원 한도의 40% 소득공제 -- 96만원\n    - 청약 점수 산정 시 10만원까지 인정이지만 소득공제는 20만원씩이다.\n    - 추후 납입?\n        - 선납 인정이 24회분 인정. 즉 연체 24회 됐으면 연체 상쇄할 수 있음\n        - 연체는 채점에서 불리하므로 24회 이상 연체되면 불리\n    - 민영주택은 1년 이상 방치해도 신청 전 한번에 넣으면 인정됨\n    - [ ] 2만원 넣은 적이 있으면 손해인가? 어차피 20살에 시작 안하면 뒤쳐지는 것 아닌가?\n    - 만 30세 이후부터 측정(이전 최대 24개월 인정), 300개월 만점\n        - 만 30세 확인하는 것은 무주택 기간인 듯\n    - 청약가점: 가점제, 추첨제 있는데 가점제에서 1순위 중에 가점 높은 사람을 뽑는 것\n    - 민영주택일 때 가점이 무주택 기간, 부양가족 수, 가입기간 보는 것\n    - 국민주택은 저축총액 또는 납입횟수를 본다\n\n전세 관련 공제, 300 한도, 원리금 40%\n연금계좌 세액공제\n    - IRP 가입 시 세액공제, 15%\n    - 700만원 한도\n[ ] 월세 납부액 10% 세액공제. 증명서류 필요\n\n#### ISA\n\n#### 주택청약\n국민주택은 24개월 24회 1순위. 1회 10만원까지 인정 (최대납입가능 금액은 50만원)\n국민주택은 1500만원 납입금액이 있으면 된다\n근데 150회의 횟수제한이 있어서 10만원씩 150회를 넣는게 유리\n\n소득공제가 있어서 240만원까지는 공제혜택 받을 수 있다\n\n민영은 납입횟수 제한 없이 금액과 기간이 중요\n\n근데 1순위는 기본조건이고 가점이 높아야 한다\n국민이든 민영이든\n무주택 기간, 가족 수, 가입기간\n\n가점제는 힘들고, 추첨제를 노려볼 수 있다\n\n즉, 10만원씩 꼬박꼬박 넣고, 민영이 되면 한번에 마저 넣으면 된다.\n\nhttps://www.cardif.co.kr/ko/life-stage/for-safe-start/my-dream-my-house-all-you-need-to-know-about-saving-for-house\nhttps://www.hankyung.com/finance/article/202008073368i\nhttps://blog.toss.im/2020/11/02/finance/life/for-housing-subscription/\n\n#### 프리랜서 세금\n기타소득 세금 8.8\n사업소득 세금 3.3\n\n## 세금 종류\n종합부동산세\n- 주택 등 일정금액 이상 금액으로 소유 시 일정금액 초과분에 대해 내는 세금 (19년 현재, 주택 6억 이상)\n증여세\n- 대가 없이 받는 재산에 대한 세금 (1억 이하 10%)\n상속세\n- 사망 시 양도되는 재산에 대한 세금 (1억 이하 10%)\n양도소득세\n- 재산 소유자가 재산을 양도했을 때 발생하는 이익에 대한 세금 (세율 쌤)\n종합소득세\n- 연말정산 시 계산되는 세금\n부가가치세\n- 재화 구매 시 발생하는 세금 (10%)\n\n## 소유권이전\n> 자녀에게 양도하려는 주택의 시가를 얼마로 정해야 하는지 혼란스럽다. 세법에서는 거래일 전후 3개월, 즉 6개월 동안의 매매사례가액을 시가로 정하고 있다. 만일 문씨가 자녀에게 양도하려는 주택이 아파트라면 같은 단지 내 유사한 아파트의 실거래가격이 기준이 된다.\n> - 출처: <https://news.joins.com/article/22289392>\n\n준비물\n- 등기부등본\n- 소유권 이전 등기신청서\n근저당권 말소?\n\n#### stock app\n- robin hood\n- stash\n\n#### 주식을 하는 기준\n세계는 점진적으로 개선되고 있다\n주식은 자본주의 체제에서 가장 잘 이용할 수 있는 도구다\n은퇴 전까지는 월급으로 살 수 있다\n\n기업 제품에 대한 영향 파악\n기업 재무재표 확인\n\n## 자본 이익 가격(시가총액)\n- 100억 자본으로 10억 벌면 ROE 10%\n- 100억 자본에 시가총액 비율 PBR\n- 이익 대비 가격 PER. PER = 주가 / EPS\n    - EPS = 이익 / 총 주식 수 = 주당 이익\n    - 시장 평균 PER 10정도\n    - EPS(주당 순이익) 높을 수록 좋다.\n\n매출액, 당기순이익, ROE, 부채비율, 유보율, PER, PBR\n- 부채비율 - 부채 / 자본. 낮을수록 좋다. 50% 이하 양호, 평균 40%\n- 유보율 - 잉여금 / 납입자본금. 높을수록 좋다. 500% 이상 양호\n> 출처: https://www.youtube.com/watch?v=E0StrcUoRuk\n\n#### Check date\n실적발표\n배당날짜\n\n## Invest like vc company\nTo know company goal\nCompany plan\nItem\nDirection\nCheck a ceo\n\nSell a little, buy a little\nDivide different invest\nMy work area\n\n매출액 = 영업이익 + 생산 비용 + 마케팅/영업 비용\n영업이익과 당기순이익이 차이가 크면 세부사항 확인 필요\n당기순이익은 순수하게 회사가 앞으로 쓸 수 있는 금액? 남는 금액?\n부채비율\n\n시장 전망\n직원 만족도\n투자 의욕\n\n#### Stock\n잘 아는 분야를 선택하고\n네이버 재무재표 정도만 확인하고\n그 기업의 제품을 써보기\n\n- 블록체인 : 세종텔레콤, 위메이드, 투비소프트, 한컴위드\n- 클라우드 : *KINX, 메가존클라우드(비상장), 이노그리드(비상장), *카페24, *가비아\n- 기술 : *다나와, *다날, x이스트소프트, 베스핀글로벌(비상장), *더존비즈온, *비즈니스온, *비트컴퓨터\n\n올드: 나무기술, 파수, 시큐브,  라온시큐어, 드림시큐리티, 케이사인, 갤럭시아컴즈\n      롯데정보통신, 엑셈, 솔트룩스, 코리아센터(쇼핑몰), 데일리블록체인,\n      유라클, 다우기술, 알서포트, 한빛소프트\n\n#### 배당주\n성장전망이 좋으면 배당 받기 좋다?\n배당률\n\n배당금\n수익률\n\n배당일\n배당지속성\n\n#### 주식 평가지표\n기업개요\n매출구성\n재무분석\n현금흐름\n\n#### 다트들어가서 사업보고서 들어간 다음 감사의견이 적정인지 본 후\n- 상장기업의 경우 cam이라고 감사인이 작성하는 회사의 내부재무이슈들을 정리.\n- md&a 라고 경영진이 작성하는 재무이슈들 있음\n- 거기에 붙은 주석들 찾아가서 읽어보면 재무제표 봤다고 해도 됨\n\n#### 단기간에 시장의 유동성으로 액면가가 계속 바뀐다\n언제 사고 팔아야 하는가\n파는 것은 필요할 때, 기업에 큰 위기가 왔을 때\n사는 것이 어렵다\n가격이 떨어지면 사라고 하는데 매일 볼 것도 아니고, 이슈가 있어서 떨어지는 것도 아닌 시장의 변화로 떨어지는데 떨어졌다고 바로 사는 것도 아닌 것 같고\n떨어졌는데 안 사는 것도 이상하다\n\n#### 10년에 한번 증여 비과세\n2천 2천 5천\n미주식\n\n\n#### 주식 익절 시 세금 덜 내는 법. 1년단위로?\n- 연간 2천 이상 시. 배당 포함. 국내,외 합쳐서. (종합과세)\n- 23년부터 5천?\n- ISA 는 200까지 비과세 (이건 기본 세금 15.4%를 비과세 해주는 것)\n- 해외주식은 연간 250까지.\n* 200+250 까지는 매년 수익실현하는게 좋을듯? ISA 만기 시 포트폴리오 재구성\n\n\n## 집 언제 살 것인가\n35살에 1억가지고 4억 대출하여 5억 집에서 살면 50살까지 얼마를 더 내고 살게 되는 것이고, 얼마씩 내면 되는가\n\n집에 돈을 쏟아부으면 투자할 돈은 없어진다고 보면 된다\n\n집으로 재테크하고 싶은 생각 없고 내 집만 살 수 있으면 되는데,\n지금 추세로 집값이 오르면 내가 살 집을 아예 못사게 되나?\n예전에는 부동산 안오른다고 한참 앓는 소리 했던 것 같은데, 다시 정체시기가 올까\n\n주식으로도 인플레이션만 이길 정도만 바라고 단타는 절대 하지 않는다\n\n#### 집을 사고 전세를 주어서 그 돈으로 주식에 다시 투자\n하는 방법도 있다\n\n#### 일본 버블\n은행에서 대출하는 금액은 어느 정도가 되면 위험해질까\n국가에 영향을 줄 정도는 얼마인가\n일본은 왜 집값이 떨어졌는가\n공실 증가로 부동산 업자들이 돈을 갚을 수 없게 되고 은행은 돈을 못돌려받아서?\n대출 규제로 부동산 업자들이 매물을 뱉어내고, 매물이 쏟아져서 부동산 하락\n\n#### 공매도 제한이 풀리면 주가가 떨어지지 않을까 (2월)\n그 이후에 떨어지면 사도 되고,\n안떨어진다면? 그래도 사야겠지?\n\n주가는 미래의 이익에 대한 기대감이 많이 반영하는 것 같다\n현재의 이익도 상당한 영향이 있고.\n- 공매도 제한이 풀리는 것이 연기되었다.\n- 5월, 부분 재개가 되었는데 막 급락하거나 그러지는 않았다. 제도도 개선되고 있다.\n"},{"headings":[{"value":"확장성"},{"value":"portable, universal"},{"value":"관리 편한 인프라"},{"value":"변하는 것과 변하지 않는 것 :vs:collection:"},{"value":"소프트웨어는 언제까지 확장되는게 좋을까"},{"value":"확장 -> 모듈"},{"value":"server architecture to using some company service"},{"value":"아키텍처 고민 사항"},{"value":"모듈"},{"value":"module"},{"value":"이 세상 모든 것은 연결되어있다"},{"value":"why module is worth"},{"value":"작은 것으로 쪼개어도 해결되지 않는 문제"},{"value":"모듈"},{"value":"프로젝트를 모듈로 구성"},{"value":"레고형 아키텍처 :module:"},{"value":"데이터 확장 모듈"},{"value":"기능을 잘게 쪼개면 전체를 조망하기 쉬워지지 않을까 :module:"},{"value":"포터블은 꼭 필요한 가치인가?"},{"value":"분산"},{"value":"이동통신 시스템이 분산 처리 시스템에서 잘 돌아가고 있는 사례인 것 같다"},{"value":"Multi Processing"},{"value":"분산 개발 환경의 해결책으로 ci가 나왔다"},{"value":"계층적인 것과 분산된 것"},{"value":"마이크로서비스의 해법을 다른 분산 시스템에서 얻고자 한다"},{"value":"라즈베리파이"},{"value":"설계"},{"value":"아키텍처 노하우"},{"value":"알림 시스템 설계"},{"value":"개발 시작부터 확장의 반복"},{"value":"A/S, after service"},{"value":"Design First is Good"},{"value":"3개의 의견"},{"value":"외부 라이브러리 분리"},{"value":"micro crud"},{"value":"마이크로서비스도 인터페이스를 만족하도록 구성하는 것이 좋겠다"},{"value":"business logic"},{"value":"input, logic, output의 구조 (레고 모델)"},{"value":"유한 상태 기계 state machine"},{"value":"library"},{"value":"라이브러리를 api 처럼 호출하기"},{"value":"아키텍처를 만들면서 구체적인 예제를 적으면서 해본다 :행동:"},{"value":"한 아키텍처에 너무 많은 것을 넣으려고 하다가 이도저도 아니게 되겠다"},{"value":"레고식 아키텍처"},{"value":"프로젝트 시작 시 꼭 필요한 것"}],"fields":{"slug":"/about_architecture/"},"rawMarkdownBody":"\n## 확장성\n\n50 유저를 상대로 운영하고 있지만 10만 유저를 상대할때도 문제가 생기지 않게\n염두에 두고 수정한다. 하지만 임시방편으로 해결할 때도 있다.\n그런 임시방편을 잘 리스트화해서 처리를 잘 해야겠다\n\n단일고장점이 없는 아키텍처라면\n새로운 기술을 도입하는 것이 쉽게 될 수 있겠다\n\nhdd로 구축된 서버에서 한대만 ssd로 교체해서 상황을 지켜보고, 문제가 있어도 다른\n서버에서 커버할 수 있다면 문제점 파악하는데에 도움이 되겠다\n\n소프트웨어 자체의 에러가 전체에 영향을 미치지 못하도록 하면 다른 것으로 교체하면\n그만이라서 관리하기 쉽겠다\n\n3대의 서버를 켜놓고 1대씩 리부팅을 해도 나머지 2대가 있어서 괜찮다면 오래 켜놔서\n생기는 문제를 막을 수 있듯이\n일부러 1대씩 계속 재부팅되도록 하고, 상태저장이 필요 없도록 하면 os의 문제에서\n조금은 자유로워지지 않을까\n재부팅하면 캐시가 다시 쌓여야하는 부분은 확인해봐야겠다\n\n3대의 서버를 한 묶음으로 추가 자원이 필요하면 이 묶음이 여러개가 되도록 하면\n확장성 문제도 해결되지 않을까?\n쿠버네티스에서는 이를 지원해준다\n\n쿠버네티스는 고가용성, 확장성, 배포를 바로 할 수 있게 해줘서 좋다\n서버는 필연적으로 고가용성과 확장성과 배포가 필요하다\n추가로 모니터링, 로깅도 세트다\n\n#### portable, universal\n\n새로운 기술이나 지식을 얻었을 때 우리의 업무에 바로 적용할 수 있는 자유로움\n\n회사의 상황에 맞추기보다 표준에 맞추는 방향\n\n데이터베이스를 커스터마이징하기보다 어댑터를 이용해 원본은 잘 지켜나가서 새로운\n것이 생겼을 때 바로 도입할 수 있는 환경\n\n#### 관리 편한 인프라\n- 기본 매커니즘이 단순하고 간결하고 명확한\n- 요즘 플러그인 방식\n- 간단한 형태를 유지하면서 변화에 유연한 서비스\n\n#### 변하는 것과 변하지 않는 것 :vs:collection:\n\n변하지 않는 것은 없지만 빠르게 변하는 것과 천천히 변하는 것은 나눠져 있다\n아키텍처를 구성할 때 천천히 변하는 것을 잘 분리하여 빨리 변하는 것에 더 집중하고\n천천히 변하는 것은 잘 유지할 수 있도록 하면 좋겠다\n\n아이폰의 뒷면\n\n#### 소프트웨어는 언제까지 확장되는게 좋을까\n\n무한정 소프트웨어가 비대해지면 관리도 힘들고, 또 그렇게 커질 필요도 없다\n네이버에서는 검색 기능은 다른 기능과 분리되어 있고, 팀도 따로 분리되어 있다.\n회사 팀 구조도 개발팀을 다른 팀과 분리하는 경우도 있고,\n기능별로 개발,디자인,기획을 같은 팀에 구성하는 경우도 있을텐데,\n어떤 경우에 어떤 구성이 좋을까\n\n#### 확장 -> 모듈\n\n각 서비스가 많은 트래픽을 감당할 수 있어야 하고,\n분산 처리 시스템처럼, 묶였을 때 트래픽 처리가 선형적으로 증가 되야 한다\n\n쉽게 교체할 수 있는 모듈의 형태로 구성되야 한다. 하지만 쉽게 교체할 수 있다는\n것이 진리는 아니다.\n\n기능별로 팀이 구성되 있을 때 그 팀에 오래 있던 사람이 나가고 새로운 사람이\n들어오면 새로운 사람이 대체하려면 아주 힘들다. 애초에 대체는 안되고 다른 역할이\n되겠지만.\n메뉴얼이 쌓여있어도 기존 작업을 100% 알 수 없다.\n기능별로 집중했기 때문에 깊고 많은 내용이 섞여있고, 그래서 기능적으로\n성숙해졌지만 새로운 사람에게는 따라가야 할 길이 멀어진다.\n이게 경험의 차이라고 불리워지는 것인 것 같다.\n기능별 팀에서의 문제가 아니라 인간세상의 문제였다.\n\n기능의 깊이가 어느정도 깊어지면 다시 분리해야 한다.\n근데 사람의 수는 한정적이어서 분리가 안된다\n\n#### server architecture to using some company service\n\n특정 서비스에 종속되는 것을 조심하고 다양한 기술을 써봐야겠다\n처음에는 특정기술에 의존하는 것이 영속성이 없어서 서버아키텍처에 포함하면 안되지\n않을까 싶었지만 기술적으로 파악하고 사용하고 종속되지 않도록 해야겠다\n앞으로도 새로운 기술을 계속 써야하기에 지금 있는 기술을 두루두루 다뤄봐야겠다\n그러나 내 서버 아키텍처는 단순하고 가벼웠으면 좋겠는데 여러 기술을 사용하면\n복잡해질 수 밖에 없는데 이를 계속 생각하고 있다\n- 가볍고 버전 의존성 적은 라이브러리를 선택하려고 해야겠다\n\n#### 아키텍처 고민 사항\n이런 관점에서 쿠버네티스, react, graphql, backend를 어떻게 구성해야하나?\n정책과 세부사항이 너무 많으면 기준점을 잘 지켜나갈 수 있을까?\n\n비즈니스 로직에서 추상화를 어디까지 하는게 좋을까\n과한 추상화는 실체가 없다는 느낌을 줄 수 있겠다.\n어디까지 추상화를 할지는 어떤 목적으로 프로그램을 만드느냐에 따라 조정된다\n모든 것이 추상화되고 가변적일 필요는 없다\nMysql tip 글에서 DB 모델링 시 지나친 추상화를 하지 말라는 조언이 있었다.\n- 언어를 넘어서는 추상화\n- 포팅을 쉽게 할 정도의 추상화\n\n\n## 모듈\n\n#### module\n\n부피가 아주 커지면 모듈화로 분리하는게 좋다\n\n작은 모듈은 무수히 많이 만들게 허용한다\n그 모듈들은 하나의 추상적인 객체가 된다\n\n- 스테이지 서버를 없애는 것\n\n#### 이 세상 모든 것은 연결되어있다\n\n소프트웨어에서도 **종속성**이 없을 수 없다\n**의존성**이 항상 필요하다\n\n효율적인 구성으로 족쇄가 되지ㄹ 않아야 한다\n\n그리고 모든 연결은 상호간 약속이 되있어야 소통이 원활해진다\nHTTP 프로토콜, ITU 주파수 대역 등의 규약은 제약이 아니라 통신을 원활하게 하기\n위한 약속이고, 이를 통해 효과적으로 통신할 수 있게 된다\n\n그룹을 대표하는 대표를 뽑아서 소통하는 것이 인류의 해답 - 간접 민주주의\n그룹의 대표가 그룹을 정말로 잘 이해해야 한다. 그것이 현실의 문제점\n\n#### why module is worth\n\n모듈을 안쓰면\n\n- 작은 수정에 많은 업데이트 시간이 걸린다\n- 동시에 여러 작업을 하기 어렵다\n\n#### 작은 것으로 쪼개어도 해결되지 않는 문제\n\n세계를 개인의 합이라고 생각할 수 있는데\n개인을 안다고 세계를 다 알 수는 없다\n개인이 모여 그룹이 되고 그룹이 모여 더 큰 그룹이 되면\n개인의 행동양식과는 다른 결과가 나올 수 있다\n\n경제학에서 개인의 경제행위를 연구하는 것만으로는 시장을 다 알 수 없어 거시경제라는 개념이 나왔다\n기업은 개인의 판단과 다른 판단을 할 수 있다\n\n작은 단위를 합쳐 크게 만들면 또 다른 변화가 만들어진다\n\n카오스 이론, 복잡계\n\n#### 모듈\n\n집에 살 때 한 부분이 고장났다고 집 전체를 바꿀 수 없는 것처럼 각 부분이 잘 분리되야한다\n집에 있는 가구들이나, 집 자체에 결함이 생기면 전체를 고치기보다 부품만 교체하기를 원한다.\n라즈베리파이가 100대 있으면, 각 역할별로 나눠져 있어도, 고쳐야하는 요소가 많아져서 번거롭다.\n\n#### 프로젝트를 모듈로 구성\n\n모듈은 한 팀의 인원정도만 사용\n기존 데이터 이용 필요시 CQRS를 응용해서 데이터쿼리용 저장소를 이용\n\n도메인의 스펙을 분석해서 적용하는 작업이 계속 될 수 있어야 한다\n\n각 프로젝트마다 모듈로 구성\n모듈의 개수는 팀원의 수 정도\n기존의 데이터가 필요하면 어떻게 가져오나\nCQRS를 응용해서 공통 데이터 저장소를 따로 둔다\n\n람다로 함수들을 만들어서 gcp와 aws에 이중화하고\n로컬 서버에서 로드밸런서로 비용안들게 호출하도록 할 수 있을까\n호출횟수를 모니터링해서 로드밸런서가 확인하도록\n\n각 세부 폴더에\n도메인로직, 데이터, 유닛, api, 외부 함수, 통신 로직를 넣으면\nmvc 패턴에서 구현하는 것을 모두 구현할 수 있나?\n\n#### 레고형 아키텍처 :module:\n\n레거시를 계속 쓰려고\n모듈화의 좋은 방법이라 생각\n응답과 결과의 형태를 통일해서 쉽게 교체가 가능할 것 같다\n처음에 완벽한 형태를 짜는 것이 불가능하기 때문에 변화하기 쉬운 형태로 짜놓는다.\n공통된 방식을 쓰면 변경이 쉽지 않을까.\n\n#### 데이터 확장 모듈\n\n아이디를 같이 쓰고 추가 데이터를 붙여서 호출할 수 있도록 하면 마이크로서비스에서\n데이터형식을 좀 더 자유롭게 쓸 수 있지 않을까\n\n블록들을 모아서 전체를 구성하는 것이 좋다\n재사용성이 늘고, 확인할 지점이 적절한 양이다. 작은 문제부터 접근하기 좋다.\n근데 블록들이 다 제각각이면 챙겨야하는 지점이 늘어난다.\n가져온 블록의 내부가 복잡하면 조치하기 힘들다. 간단한 것들로 많이 붙이면 겉잡을\n수 없이 커져서 오히려 하나 하나 확인할 수 없다\n\n점진적으로 변화할 수 있는 데이터 저장소가 있으면, 일단 저장해놓고 점점 살을 붙여\n나중에 잘 써먹을 수 있다\n\n지역성의 원리로 캐싱을 하면 이전 작업과 거리가 있는 작업을 하게 되면 캐싱을 새로\n해야한다. 이 점을 보완하고 싶다\n\n#### 기능을 잘게 쪼개면 전체를 조망하기 쉬워지지 않을까 :module:\n\n기능이 커지면 분리하는 방식은\n새로 접근하는 사람이 기능을 파악하는데는 도움이 될 수 있지만 하나를 파악해도\n파악하지 못한 나머지 기능들이 많아서 너무 많아 질리거나 본질에 접근 못한다는\n느낌을 받을 수 있겠다.\n'그건 내 잔상이다' 의 반복 같은 느낌\n\n#### 포터블은 꼭 필요한 가치인가?\n\n- 모듈화를 하면 포터블한 코드\n- 유연성이 확보돼있다\n\n---\n\n## 분산\n\n1인가구, 마이크로 서비스 아키텍처, 블록체인의 탈중앙화가 닮은 것 같다\n\n- 탈중앙화\n- 분산화\n- 민주주의\n- 분산 서비스\n- 고가용성\n- 마이크로서비스\n- 조직 구조도?\n\n확장은 필연적으로 복잡성을 만든다\n\n[[Technology#분산 대 탈중앙화]]\n\n#### 이동통신 시스템이 분산 처리 시스템에서 잘 돌아가고 있는 사례인 것 같다\n\n데이터베이스의 레플리카 기능과 샤딩\n일라스틱서치\n하둡\n\n#### Multi Processing\n\n분산 시스템의 고민과 비슷한 고민이 멀티 프로세스를 사용하려는 시도에도 있겠다.\n\nMPI라는 인터페이스가 있다.\n\n- https://operatingsystems.tistory.com/entry/High-Performance-Computing-MPI\n- http://hpcschool.kr/usc/wp-content/uploads/sites/10/2014/04/MPI.pdf\n\nApache의 MPM\n\n#### 분산 개발 환경의 해결책으로 ci가 나왔다\n\n분산 서비스간의 통합도 ci 같이 할 수 있을까\n\n일단 데이터를 통합하는 서비스를 이용한다던가\n\n#### 계층적인 것과 분산된 것\n\n중첩\n폴더 안에 폴더를 두는 구조는 유용하지만 복잡해져서 별로 안좋은 것 같다\n그래서 프로젝트 사이즈도 폴더 중첩이 없는 정도로 나누고 싶은데\n그러다보면 작은 덩어리가 많아져서 어디에 무엇이 있는지 모를 수 있겠다\n그래서 정돈이 필요한데, 이 정돈을 어떻게 할 수 있을까\n\n트리 구조의 깊이가 깊어지는 것과 넓이가 넓어지는 것은 비슷한 복잡도인가?\n\n넓이가 넓어져서 관리가 힘들 상황을 생각해보면, 놀이터가 넓으면 선생님이 주변에\n있는 아이가 아니면 어떤 일이 벌어지는지 알 수 없다\n\n복잡성을 염두에 두고 미리 뼈대를 만들어 놓는 것보다, 작게 분리하는 것이 복잡성을\n컨트롤 할 더 나은 방법 같다.\n자바의 폴더구조가 처음부터 중첩된 폴더를 미리 만들어 놓는 방식인데, 이런 부분이\n거슬린다. 폴더 안에 폴더가 들어가면서 깊어지면 컨트롤이 어려워질 것 같다.\n\n- 근데 go standard layout 에서 cmd 폴더 안에 메인 함수들을 폴더로 구성하게 하는\n  것을 추천해서 자바와 비슷한 구조를 베스트 프렉티스로 했다. 복잡한 서비스에서는\n  중첩이 최선인가. 3단 중첩은 필요한가\n\n[[About_Development#module]]\n\n#### 마이크로서비스의 해법을 다른 분산 시스템에서 얻고자 한다\n\n전체를 퉁쳐서 하나로 규정하려는게 아니라 기존의 문제점들을 확인하고 어떤 해법들이 있었는지 정보를 얻기 위해서\n\n#### 라즈베리파이\n\n라즈베리파이를 여러 대 두면 라즈베리파이가 하나씩 고장날 때마다 고쳐야 한다는 의미도 된다. 데스크탑 하나만 쓰면 전체가 한번에 관리된다. 물론 라즈베리파이 쪽이 싸게 처리되지만, 100대가 있을 때 매번 고치기는 힘들 것 같다. 대신 라즈베리파이 하나가 고장나도 시스템은 그대로 유지될 수 있다는 장점이 있다.\n\n## 설계\n\n#### 아키텍처 노하우\n\n- 변하는 것과 변하지 않을 것을 구분하기 위한 나열\n- 시나리오 전개\n- 완성본을 상상\n- 적재적소\n\n#### 알림 시스템 설계\n\n가상 면접 사례로 배우는 대규모 시스템 설계 기초\n- 인사이트\n\n10장 알림 시스템 설계\n\nkums의 설계와 매우 유사하게 구성되어있다\n신기하다\n\n#### 개발 시작부터 확장의 반복\n\n1. 가장 간단한 실행을 위한 설계\n2. 폴더 만들기\n   - note\n3. 구현해야 하는 것 적고 결과값 적기\n   - note/main_test.go\n4. 테스트 통과시키기\n   - note\n     - main.go\n     - main_test.go\n5. 기능 추가를 위해 설계\n6. 파일 추가\n7. 반복\n\n그러다가 어느 시점이 되면 아래 정도의 복잡성이 생긴다\n\nnote\n- logic1\n\t- main.go\n\t- data.go\n\t- adapter.go\n- logic2\n- api\n\t- http.go\n\t- grpc.go\n- lib\n\n이런 구조에서 더 복잡성이 필요해지면 분리하기 좋다는 신호다.\n그래서 저 코드 구조가 반복되면 확장이 된다.\n인프라는 저 구조를 쉽게 컨트롤하도록 구성된다.\n\n인프라 - 서비스 - 데이터의 구조로 한 인프라가 구성되고\n이것이 다시 프렉탈로 반복된다\n\n#### A/S, after service\n\na/s can announce to me that what I missed, and what can I grow.\na/s is just doing the same work. not to be known.\nsometimes when before the same work. it is good to evolve knowledge. but cannot control what I want.\nit makes me spent time a lot. and annoying.\na/s is need\n\n#### Design First is Good\n\nBut, Don't be loose. Quick Response. small thing first\n\n#### 3개의 의견\n\n서로를 견제하며, 지원하고, 공유하는 구조가 좋은 가치를 만들기에\n좋은 구조인 것 같다\n쿠버네티스를 이렇게 사용할 수 있을까\n\n#### 외부 라이브러리 분리\n\n외부 라이브러리를 분리하려고 하는데, 그러면 폴더 구조가 어떻게 되는거지\n\n```\n- cmd\n- lib1\n- ilb2\n- logic1\n- logic2\n```\n\n이런 식으로 되는 건가\n\n```\n- cmd\n- logic1\n\t- lib1\n\t- lib2\n- logic2\n\t- lib1\n\t- lib2\n```\n\n이것보다는 나은 것 같은데 위의 구조에서 라이브러리와 메인 로직의 구분이 안된다\n\n```\n- cmd\n- logic1\n```\n\n일단 내 로직이 메인이다\ncmd에서는 이를 한 눈에 보기 좋게 한다\n여기서 이제 라이브러리가 들어간다\n\n```\n- cmd\n- logic1\n\t- db_logic\n- db\n```\n\n이렇게 하면 메인에서 구현에 필요한 것을 db에서 받아서 실행하도록 해야한다\n\n외부 라이브러리가 여러 개 중에 하나를 선택할 수도 있다\n\n```\n- cmd\n- logic1\n\t- db_logic\n- db\n\t- redis\n\t- RDBMS\n```\n\n이렇게 하려면 db를 다시 추상화해야한다\n\n...\n\n```\n- db\n\t- redis/\n\t- RDBMS/\n\t- db.go\n```\n\n근데 이렇게 하면 외부 라이브러리를 구현하는 작업이 다시 되야 되서 별로다\n\n클라이언트 프로그램은 마이크로서비스일 필요 없을 거 같다?\n\n어차피 외부 라이브러리가 이상이 생겨 못쓰게 되면\n새로운 라이브러리에 맞게 구현해야한다\n\n그러면 외부 라이브러리 분리는 한 곳에서만 수정하도록 모으는 역할인가?\n그렇다면 외부라이브러리 안에 내부 구현을 호출하도록 해도 되겠다.\n내 코드에서 외부라이브러리를 호출하던 것을\n외부 라이브러리 구현 코드에서 내 코드를 호출하는 것으로\n왜냐하면 http를 쓰려다 보니 내 구현에서 http동작을 호출하는 것이 과한 추상화\n같았고, 구현하기도 매끄럽지 않았다\n\n메인로직을 서버에서 호출해서 쓰는지\n메인로직에서 서버로직을 호출해서 쓰는지 잘 결정해야한다\n\nhttp 서버가 grpc 클라이언트도 해야한다\n\n#### micro crud\n\nservice - crud-service - extension\n\ncrud : api <- logic <- library\n\ncrud를 해주는 엔드포인트만 나와있고, 내부는 감춰진다\n엔드포인트가 정해져있으면, 나머지끼리 통신하는데 이용한다\nlogic이 api안에 포함되고, logic은 api를 몰라도되고, 외부 라이브러리를 통한\n구현도 로직을 모르게 한다. 일방통행\n\ncrud 모델을 일반화해서 범용적으로 쓸 수 있도록 하고, extension을 붙여 확장한다\nID, Name, Date, Content, Tag 로 구성하고, Content에 다시 내용을 구겨넣는다.\n필요한 곳에서 알아서 쓴다?\n\n#### 마이크로서비스도 인터페이스를 만족하도록 구성하는 것이 좋겠다\n\n우리 회사의 api는 다른 기능이라도 같은 방식으로 동작합니다 라고 알려주면\n사용자가 다른 서비스에도 쉽게 접근할 수 있겠다\n\n스테이징 서버 테스트 시 본 서버의 데이터를 그대로 가져오면 너무 사이즈가\n커지니까 필요에 따라 기간을 정해서 가져올 수 있도록 구현하면 좋을 것 같다\n\n#### business logic\n\n비즈니스 로직의 함수는 추상적이면 좋겠지만 세부 구현도 비즈니스 로직에 들어가야\n한다. 외부 라이브러리에 비즈니스 로직이 안들어가기 때문에.\n함수 구현은 추상적으로 하고 test code로 세부를 테스트하면 될까?\n세부 구현은 어디서 해야하지?\n인터페이스에 추상이 남아있고, 구현은 세부적으로 하면 될까\n\n#### input, logic, output의 구조 (레고 모델)\n\ngo-kit, gRPC도 이런 구조로 구성하려고 했다. 이 방법이 먹히는 것 같다.\nopenfaas도 request, response 구조\n\n레고모듈이 완벽한건 아니지만 괜찮은 모델이다\n\n부족한 부분\n\n- 유기적인 얽힘이 되면 좋겠다\n\napi gateway에서 이걸 처리하고\n로직은 json만 대응하도록\n로직에서는 내가 필요한 데이터가 있는지 확인하는 발리데이션을 해서 로직 수행\n\n- json으로 입력받아 json으로 출력\n- http response로 출력\n\njson으로 필터링 해서 결과값 보내주는 어댑터(플러그인) 만들어서 쓰면 좋겠네\n\ngrpc로 이걸 하면 proto 파일에 모델, 함수 적고, 구현파일을 만들면 이런 형태가\n만들어 질거 같다.\n여기에 grpc gateway를 써서 http로 받을 수 있게 하고, documentation 되는지 확인\n\napi는 연결부위 설계를 잘 해야겠다. input값, output값\n\n- 메인로직을 만들고 컨테이너화해서 배포하면, 사이드카가 api routing해주고,\n  데이터 보관하도록 만들고 싶다. 메인로직의 input과 output만 잘 유도하면 될 것\n  같은데, fastapi와 python 머신러닝 api화 해주는 서비스가 있던데 확인해봐야겠다.\n\n#### 유한 상태 기계 state machine\n\ninput -> output 으로 가는 구조인데\n수학적 안정성을 가진 구조\n\nif - else 로 관리하기 힘든 상태관리를 안정적으로 할 수 있게 해준다\n\n오토마타 = 유한 상태 기계\n\ninput output 구조가 수학적으로 안정성을 가질 수 있다는 것이다.\n\n#### library\n\n모든 코드를 라이브러리화 하면 각 라이브러리를 호출하는 어댑터를 만들게 되고 너무\n비대해진다.\n그렇다고 어댑팅 안하면 라이브러리 수정 시 여기 저기서 바꿔야 된다.\n그렇다고 라이브러리를 일관된 형태로 유지하자면 그것도 쉽지 않다\n\n```\nlib1\n- file\n\nsource1\n- main\n- lib1-adapter\n\nsource2\n- main\n- source1-adapter\n- lib1-adapter\n```\n\n이런 구조가, 라이브러리 변경 시\n\n```\nlib1\n- file-v2 // 변경\n\nsource1\n- main\n- lib1-adapter // 변경\n\nsource2\n- main\n- source1-adapter\n- lib1-adapter // 변경\n```\n\n수정이 전체에 영향을 미치면 안된다.\n\n#### 라이브러리를 api 처럼 호출하기\n\n모놀리스에서 다른 모듈 간 데이터 불러올 때 임포트 해서 함수로 호출한다\n마이크로서비스에서 api로 호출하는게 일반적이겠지만\n임포트 라이브러리를 만들어서 직접 api에 접근하는게 아니라 라이브러리를 통해서 접근하게 하면 전환이 쉬울 것 같다\n\nProduct\nPurchase\n\nPurchase\nImport product\nProduct = product.getName\nPurchase.product = Product\n\n근데 내부 서비스는 외부와 격리되있고\n조합해서 호출하는건 별개의 서비스에서 했으면 좋겠다\n그러면 호출은 어디서 하지?\n\n메인 함수에 어떤 api 사용하는지 나타내는 방식으로 해서\n서버에 올릴 때 메인 함수의 api 응답 시간을 확인만 하면 되도록 하면 좋겠다\n프로젝트 메인이 아니라 라이브러리 메인을 체크해야겠다\n\n| api | -- | business logic | -- | data crud\n| business logic2 |\n| 3 |\n| 4 |\n| 5 |\n\n이렇게 구성 돼있다면 data crud는 공통 로직으로 쓰는 역할(share library)\n비즈니스 로직에서는 api로 crud를 제어한다.\naggregation api를 따로 만든다\ndata crud는 index단위로 같은 로직으로 여러개를 만든다\ngrpc로 만들어서 쓴다\n컴퓨팅 로직은 서버리스로 배포해서 api로 쓴다\n인프라 코드가 각 비즈니스로직을 접근할 수 있도록 사이드카를 장착한다\n\n데이터베이스 crud 서비스로 레포지토리를 모을까?\n호출할 때는 어떻게 구분하지?\n\n데이터 불러오는 곳도 각 서비스마다 구현을 해야하는데, db 종류에 상관없이\n받아들이는 부분도 있어야하는데.. 그러면 데이터베이스 쪽만 2단계가 되서 마음에\n안든다\n\n![msa](msa.png)\n\n#### 아키텍처를 만들면서 구체적인 예제를 적으면서 해본다 :행동:\n\n예제가 있어서 내용이 길어지는 부분은 트레이드오프...\n\n#### 한 아키텍처에 너무 많은 것을 넣으려고 하다가 이도저도 아니게 되겠다\n\n처음에 집중할 목표를 잡고 작게 작게 처리해 나가야 하겠다 :행동:\n\n개인이 제작하는 프로그램에는 규모의 한계가 있다\n프로토타입 수준의 프로그램이 제작될 따름인데 개인 프로젝트의 의미는 무엇일까?\n스스로 기술 발전을 할 수 있다. 기술 발전을 해서 무엇을 하나. 기술 협력을 통해\n기술 발전에 기여한다.\n회사가 아닌 다른 기술 발전 기여 통로를 만들어야겠다\n\n작은 양의 코드를 수정하는데도 정리가 안되어 무엇을 건드려야 할지 막막해지는\n순간이 있었다. 작은 크기로 함수들을 쪼개놓았는데 그 함수들이 여러개가 되다 보니\n길을 잃은 것 같다. 어떻게 길을 찾아야 할까\n\n#### 레고식 아키텍처\n\n```go\ntype Lego struct {\n    Name string\n    ID string\n}\n\ntype Request struct {\n    content string\n}\n\nfunc Attach(r Request) Lego {\n    result := Lego{}\n    return result\n}\n```\n\n입력, 로직, 출력 형태로 함수들(또는 api endpoint)을 제작하면 모듈로 쓰기 좋을 것 같다\n\n일관된 형태를 갖고 있어서 레고처럼 갖다 붙이기 좋을 것 같다\n\n입력과 출력을 모두 json형태로 받으면 유연하게 데이터를 받고 쓸 수 있을 것 같다\n\n이런 형태로 이미 구현되어 있는 것이 gRPC인 것 같다.\n\n언어에도 유연하고, 형태도 명확해서 gRPC 기반으로 개발을 하고, 변형하면 좋을 것 같다\n\nREST로 변경해주는 api도 있다.\n\ngRPC를 이용하되, gRPC에 묶이지 않아야 한다.\n\n```go\n// feature.proto\npackage feature\n\nservice Feature {\n\trpc GetFeature(Request) returns( Feature) {}\n\trpc RecordRoute(stream Request) returns (RouteSummary) {}\n}\n\nmessage Request {\n    string content = 1;\n}\n\nmessage Feature {\n    int32 id = 1;\n    string name = 2;\n}\n\n// server.go\nimport (\n    \"net\"\n    \"log\"\n    \"context\"\n\n    \"google.golang.org/grpc\"\n    pb \"github.com/example/feature\"\n)\n\ntype server struct {\n    pb.UnimplementedFeatureServer\n}\n\nfunc (s *server) GetFeature(ctx context.Context, request *pb.Request) (*pb.Feature, error) {\n    return &pb.Featrure{id: 1, name: \"sam\"}, nil\n}\n\nfunc main() {\n    lis, err := net.Listen(\"tcp\", \":9000\")\n    s := grpc.NewServer()\n    pb.RegisterFeatureServer(s, &server{})\n    if err := s.Serve(lis); err != nil {\n        log.Fatalf(\"faield to serve: %v\", err)\n    }\n}\n\n```\n\n```\nprotoc --\n```\n\n이것이 요청을 받아 출력을 해주는 gRPC의 뼈대다.\n\n이것을 매 프로젝트마다 만드는 것은 다소 귀찮은 부분이 있다.\n\n조금 간소화해서 Feature와 메인 로직만 구현하면 되도록 할 필요가 있다.\n\ngo의 마이크로서비스 섀시인 micro와 go-kit에서 이를 구현해놨다. ㅋ\n\nawesome grpc에 정보가 모여 있다.\n\n이걸 모델과 로직을 입력해서 결과는 /feature 호출하면 feature를 리턴해주는 api 역할을 해야한다.\n\n필터 역할 하는 api라면\n\n{name:\"sam\", age:\"10\"}, {name:\"kim\", age:\"15\"} 이라는 값을 입력으로 넣으면\n\n정렬해서 정렬된 값을 리턴해주는 api가 만들어져야 한다\n\n\n#### 프로젝트 시작 시 꼭 필요한 것\n\n모델 정의\n\n모델 정의한 것을 서버리스로 배포.\n그러면 각 모델의 연결은 어떻게?\n람다로 한다면 제품 등록은 하나의 모델에 업데이트 하면 되는데, 불러올 때는 정보들이 묶여있는 상태로 불러야 호출 횟수를 줄일 수 있다.\n근데 또 등록할 때 유저의 상태도 업데이트 하려면 등록도 두 개의 호출을 해야하긴 한다"},{"headings":[{"value":"어떻게 학습을 할 것인가"},{"value":"왜 자료를 모으나?"},{"value":"자료 수집 전에 전략 설정을 하라?"},{"value":"Keyword"},{"value":"자료 모으기"},{"value":"키워드 잘 뽑는 방법"},{"value":"신중한 시작보다 변화에 대응하기 쉽게하는 쪽으로 해보자"},{"value":"처음 접근할 때"},{"value":"'What i need to know' is meta core knowledge"},{"value":"자료를 모으는 것은 아무렇게나 되지만, 정리할 때는 개인의 색깔이 드러나게 된다"},{"value":"자료와 기초 지식의 부족, 어설픈 사유 능력과 시간의 부족"},{"value":"생각 후 레퍼런스 확인"},{"value":"레퍼런스를 참고한다"},{"value":"새로운 영역에서 알아볼 때 이 3가지 범위를 확인하면 큰 그림이 잡히지 않을까"},{"value":"새 기술 도입하고 싶은 경우 조사하는 것들"},{"value":"정보를 잘 찾기 위해 어떻게 작성할 것인가"},{"value":"정보 습득을 어떤 방식으로 할 것인가"},{"value":"하나를 하기 전에 잠시 전체적으로 훑어본다. 어떻게 훑으면 잘 훑을 수 있는가"},{"value":"처음 접한 개념을 일반화하지 못하는 것은"},{"value":"알아가는 방법"},{"value":"노트앱을 찾고 있을 때 데본씽크는 모르고 있었다"},{"value":"학문 분야에서의 자료 모으는 법"},{"value":"연구법"},{"value":"논문 찾는 법"},{"value":"논문 찾는 법"},{"value":"체계적 문헌고찰"},{"value":"한 번에 많은 정보가 들어오면 감당하기 힘들다. 외울 수도 없고."},{"value":"정보 공유"},{"value":"과학자"},{"value":"논문 규격"},{"value":"연구"},{"value":"연구"},{"value":"실험의 결과가 과학적 사실로 받아들여지려면"},{"value":"지식 검증"},{"value":"논문 작성 순서"},{"value":"레포트 작성 시 (1)자료조사, (2)기존제품과 비교"},{"value":"논문을 쓰는 건 기존 연구에 새로운 논의를 덧붙이는 것"},{"value":"기타 자료 모으는 법"},{"value":"집단지성 이용법"},{"value":"집단지성"},{"value":"커뮤니티 장점"},{"value":"잘 정리된 글을 잘 이용하는 방법"},{"value":"정보 찾을 때 쓰기 좋은 검색어"},{"value":"사람들이 최근 검색하는 것을 찾을 수 있는 곳"},{"value":"공부"},{"value":"쉬운 것부터 해야한다"},{"value":"작고 쉬운것부터 해야하는 이유"},{"value":"어려운 책을 여러 번 반복해서 읽다보면 조금씩 모르던게 보인다"},{"value":"반복을 통한 암기"},{"value":"기술 공부"},{"value":"공부법"},{"value":"안다고 생각해도 알기 힘들다"},{"value":"모르는 것을 모른다는 것을 아는 것"},{"value":"모르는 내용을 알때까지 공부한다"},{"value":"경험의 뿔"},{"value":"임기응변"},{"value":"경험이 많아지면 이론적으로 배웠던 것들의 빈틈을 알게되고 그것을 이용하는 여유가 생긴다"},{"value":"측정가능한 목표"},{"value":"좋은 배를 만드는 방법"},{"value":"Knowledge is in books. and Wisdom in nature."},{"value":"연결도를 보여주는 클라우드 트리를 보여주는 서비스를 이용"},{"value":"깊게 생각하기"},{"value":"문제 해결법, 선택법, 공부법"},{"value":"정보의 발견"},{"value":"질문"},{"value":"질문을 할 때"},{"value":"안드로이드 매크로 영역에 사람들이 많이 쓰는 명령어들이 있을텐데"},{"value":"지금 내가 경계해야 할 것"},{"value":"알고 싶은 추상적인 것을 찾을 키워드"},{"value":"XY 법칙"},{"value":"엘리코딩에서 신입사원이 이렇게 질문했을 때 좋았다라고 한 것"},{"value":"원인을 어디서 찾아야할까 어디까지 찾아야할까"},{"value":"잘못의 원인을 바로 직전의 상황으로 판단하는 것"},{"value":"단일 진실의 원천 SSOT"},{"value":"모르는 것을 볼 때"},{"value":"기억"},{"value":"생각의 구멍"},{"value":"하나의 정보를 알아볼 때 꼼꼼하게 근저의 정보를 알고 싶다."}],"fields":{"slug":"/exploration/"},"rawMarkdownBody":"\n## 어떻게 학습을 할 것인가\n\n- 자료를 모은다.\n- 정리한다.\n- 시작점을 잘 선택한다.\n- 반대 의견을 잘 듣는다.\n\n#### 왜 자료를 모으나?\n깊은 지식과 무언가를 결정하기 위해. 견문을 넓히면 기분이 좋다. 재밌게 기술을 익힐 수 있다.\n\n- 이 글에서는 자료를 모으는 것에 대한 내용에 대해 주로 다룬다.\n- 자료를 모은다는 것이 연구와도 비슷한 결이라 연구, 정보에 대한 내용도 다룬다.\n- 정리에 대한 내용은 다른 주제로 분리한다. 자료 조사와 공부가 분리 된 주제가 아닌 것 같다.\n\n#### 자료 수집 전에 전략 설정을 하라?\n\n#### Keyword\n\nsearch, information, decision, deconstruct\n\nHistory, Background, Trade-off, Revision, behind story\n\nstudy, analyze, seize, perspective\n\n## 자료 모으기\n\n1. 시작점을 찾는다 (내부에 들어가기 전에 내 생각을 먼저 확인한다)\n2. 단어를 모은다 (측정 가능한 기준을 세워서 범위를 잡는다)\n3. 정보를 쌓는다 (인용이 많이 된 것들은 좋은 글일 확률이 높은 것 같다)\n4. 정리한다\n5. 검증한다\n\n#### 키워드 잘 뽑는 방법\n\n- 배경지식\n- 내가 원하는 문장 분해\n- 대학생이라는 큰 범위부터 재학생, 복학생이라는 작은 범위로 체계적으로 검색\n\n#### 신중한 시작보다 변화에 대응하기 쉽게하는 쪽으로 해보자\n\n단순한게 지속가능성이 좋다. 시작점 체계 흥미\n\n#### 처음 접근할 때\n\n- 목표, 핵심 키워드, 레퍼런스를 기준으로 찾아보면 금방 전체 그림이 파악이 되지 않을까\n\n> Practice something, firstly, Deconstruct skill set\n\n#### 'What i need to know' is meta core knowledge\n\nMaybe everything is in the past\n\n- History\n- Reference\n- What is similar\n\n#### 자료를 모으는 것은 아무렇게나 되지만, 정리할 때는 개인의 색깔이 드러나게 된다\n\n기준이 세워지거나, 편향적이거나, 무질서하지만 의도가 느껴지거나,\n\n예술에서는 개인의 색깔을 찾는 것이 이것이 되겠고\n연구에서는 자신의 연구의 특색이 이것이 되겠다\n\n정리하면서 색깔이 안드러나는 것도 문제일 수 있겠다. 무색무취의 그저그런 작품이 된다는 것이니까\n\n공산주의의 통제 속에 정권 비판 서적이 설 자리가 없어지는 것도 정리할 때\n안좋아지는 방향으로 가는 사례가 되겠다.\n\n#### 자료와 기초 지식의 부족, 어설픈 사유 능력과 시간의 부족\n수학사에 관한 책을 찾는데 오래걸린 이유를 이렇게 꼽으셨다\n> 내게 다가온 수학의 시간들 - 장우석 #book\n\n#### 생각 후 레퍼런스 확인\n- 목적을 정한 후 레퍼런스 확인\n- 레퍼런스를 확인하지 않는 것은 과거의 유산을 이용하지 못하는 한계가 있다\n- 발상의 전환, 과거에 메이는 것을 방지하기 위해 고정관념을 가지지 않기 위해 사전정보 없이 고민 후에 레퍼런스를 확인한다\n- 과거 회고 작업을 한 것을 바탕으로 다음 작업을 하면 좋겠다.\n- 이전 작업을 쌓아서 현재를 만들어야 한다\n- 과거의 작업을 계승할 필요는 없지만 그 기반 위에서 작업.\n- 여러 공통된 비슷한 작업을 찾을 수 있는 것이 후대 작업자에게는 큰 힘이 된다.\n\n#### 레퍼런스를 참고한다\n- 업계 분위기 파악\n- 기존의 컨텐츠에 물들어버린다?\n- 수학문제의 답을 보는 것과 다른 점\n- 그 업계에 담겨져 있음으로써 나오는 컨텐츠\n- 그 업계를 전혀 모르기 때문에 나오는 컨텐츠\n\n#### 새로운 영역에서 알아볼 때 이 3가지 범위를 확인하면 큰 그림이 잡히지 않을까\n\n- 기존의 전통\n- 다수의 의견\n- 개인의 판단\n  > 열 두 발자국 중 #book\n\n\n#### 새 기술 도입하고 싶은 경우 조사하는 것들\n\n#collection\n\n- 문제 되었던 사례\n- 바랐던 모습\n- 바뀐 모습\n\n#### 정보를 잘 찾기 위해 어떻게 작성할 것인가\n\n#collection\n\n- 정보 입력이 편리한가\n- 나중에 찾아볼 때 효율적으로 찾을 수 있는가\n\n#### 정보 습득을 어떤 방식으로 할 것인가\n\n#collection\n\n- 검색에 의한 접근\n- 도서관에서처럼 분류되있는 것을 전체적으로 훑어보면서 찾는 방법\n- 전문가를 찾아서 그 사람의 서적을 찾아보고, 기회가 닿으면 직접 만난다.\n\n#### 하나를 하기 전에 잠시 전체적으로 훑어본다. 어떻게 훑으면 잘 훑을 수 있는가\n\n노트에 적기? 걱정되는 부분 확인?\n\n#### 처음 접한 개념을 일반화하지 못하는 것은\n\n그 개념에 내가 모르는 뭔가가 있는지 없는지 모르기 때문이고 그것을 알기 위해서 그\n세부 구현을 파악해야 한다.\n\n#### 알아가는 방법\n\n- 가진 것을 잘 이용하는 법 -> 반복\n- 모르는 것을 아는 것 -> 질문을 잘하는 방법\n- 수많은 것 중 원하는 것을 찾는 법 -> 데이터 통계\n\n#### 노트앱을 찾고 있을 때 데본씽크는 모르고 있었다\n어떤 앱을 찾을 때 사람들의 입에 오르내리는 것들을 다 써보고 싶었는데 쉽게\n찾아지는 앱도 있는 반면 잘 안 찾아지는(하지만 잘 사용되고 있는) 앱들이 있다. 늘\n그런 것들을 찾기 위해 시간을 더 쓰고 있었고 기한 없이 찾기만 하고 있었다.\n게다가 개발자들이 소소하게 만드는 앱들도 있다보니 지금 쓰는 것보다 더 좋은 게\n있을 것 같다는 마음이 계속 들어 또 시간을 하릴없이 쓰게 된다\n\n---\n\n## 학문 분야에서의 자료 모으는 법\n\n#### 연구법\n\n가설을 세우고 검증한다\n\n#### 논문 찾는 법\n\n논문 리뷰는 관련 논문들을 모아서 정리한 것이라 큰 흐름을 읽기 좋다\n논문을 작성 하기 위해 이전에 비슷한 내용의 연구가 있는지를 찾아본다\n문헌연구라고 한다. 이전 연구가 있으면 내 연구는 어떤 개선점이 있는지 알 수도 있다\n또 비슷하지 않더라도 관련 분야 연구를 찾아보고 나의 작업을 더 단단하게 할 수 있다\n\n구글 스칼라, RISS에서 검색\n\n- 키워드를 나열하여 원하는 자료가 있는지 확인\n- 인용횟수, 작성일자 참고\n\n관련 있을 것 같은 사람을 기준으로 찾을 수도 있다\n\n키워드로 다른 키워드를 얻는다 -> 자주 보이는 키워드, 사람이 있다\n-> 사람을 검색해서 다른 소스를 찾는다 -> 새로운 키워드 -> 확장\n\n논문 저널 구독\n\nimpact factor?\n\n팀 버너스 리가 생각한 연구자료 공유가 이런 논문검색사이트였던걸까\n다른 방식이 있을까\n연구자료는 파일로 있을 수도 있는데 이것도 공유하려 하지 않았을까\n그러면 각 연구실의 컴퓨터에 자료를 올려놓고 접근하는 방식으로 했을까\n그러면 자유롭게 정보를 찾는게 아니라 특정 연구실을 염두에 두고 찾아야 하는 벽이\n있다\n\n논문 정리용 노트 프로그램 Roam Research\n\n한국 연구진이 미국 연구진과 인터넷으로 자료교환이 가능하긴 하게 됐다\n\n#### 논문 찾는 법\n\n#scrap\n\n\"논문 업데이트에 하루에 1시간 이상 쓰신다면, RSS리더를 쓰시면 많은 수의 저널을\n쉽게 관리할 수 있습니다. 일일이 들어가는 방법은 10-20개 이내일 때는 가능하겠지만\n100개 넘어가면 매우 힘이 들죠. 웹 기반으로는 Feedly, Theoldreader같은 것 많이\n쓰는데, Reeder같은 앱을 써서 웹서비스에 연결해서 쓰는 게 손에 착 붙습니다.\n\nbioRxiv와 pubmed나 google scholar에 키워드 알림이나 저자 알림 설정을 해 두는\n것도 좋습니다. 의외의 저널에 나오는 경우가 있어서 빠지지 않고 볼 때 도움이\n됩니다. f1000 같은 사이트도 그런 걸 좀 제공해주긴 하는데, 유료 구독 없으면 좀\n불편합니다.\n\nLatest news류의 알림을 여러 군데서 받으시면 본인 연구분야 외의 트렌드를 파악할\n수 있어서 큰 흐름을 파악하기 좋습니다. 저널의 뉴스 말고도 블로그로 운영되는 곳이\n많이 있으니까 한 번 찾아보세요. 블로그들은 앞에서 말씀드린 RSS리더로 같이 읽을\n수 있습니다.\n\n말씀하신대로 관련 분야 유명인들의 트위터를 구독하는 것이 인터넷을 통해 얻을 수\n있는 소식 중에선 가장 빠릅니다. 주요 몇 명만 가지고 시작해도 리트윗과 댓글들을\n보면 금세 다른 사람들로 확장하실 수 있습니다.\"\n\n> > https://m.ibric.org/miniboard/read.php?Board=isori&id=103071#:~:text=논문%20업데이트에%20하루에,확장하실%20수%20있습니다%2E\n\n#### 체계적 문헌고찰\n\n#scrap\n\n기존의 문헌을 검토해 명확한 질문을 만들어내는 것\n\n- 명백하고, 반복 가능하며, 최소한의 바이어스를 가진 방법론을 사용\n- 연구질문에 관련된 근거를 검색, 식별, 선정, 평가, 종합한다.\n- 출판되지 않은 문헌도 포함하는데, 최신이며, 출판의 편향성이 적기 때문이다.\n\n유형\n- 질적 고찰\n- 양적 고찰\n- 메타분석\n\n연구계획서 작성(protocol)\n\n- [PRISMA](http://www.prisma-statement.org/Translations/Translations) 지침을 따른다.\n- 주요 목표, 방법론, 결과에 대해 정의\n\n출처: https://www.editage.co.kr/insights/a-young-researchers-guide-to-a-systematic-review#\n\n(protocol을 맞춰놓고 통신하는 정보통신의 방식이 생각난다.)\n\n#### 한 번에 많은 정보가 들어오면 감당하기 힘들다. 외울 수도 없고.\n\n정보가 많아지면 좋은데 그것을 어떻게 해야 잘 익히고 활용할 수 있을까\n\n- 과거의 정보를 이용하여 새로운 이론이나 학문을 증진시킬 방법\n  - 논문을 통한 이론 개선\n  - 학회\n- 방대한 연구자료들을 인터넷으로 공유해서 정보를 취합하는 것은 힘들다.\n  그리고 원하는 정보만 얻어내는 것은 더 힘들다.\n  단순 검색이 아닌 연관 자료를 찾는 것. 분석기가 필요하다.\n  - 컴퓨터가 막 개발되기 시작하던 때에 연구자들은 컴퓨터로 뭔가를 해보기를\n    원했을텐데 어떻게 데이터를 가공할지 막막했을 것 같은데,\n    지금은 어떻게 하고 있을까\n\n#### 정보 공유\n\n서로 어떤 일을 하는지 몰라서 같은 연구가 여러 곳에서 이루어지는 경우가 더러\n있다.\n정보가 공유가 되었으면 더 나은 연구가 되었을 수도 있었을텐데 아쉽다\n메인스트림에만 데이터가 몰리는게 아니라 주변에서 정보가 돌아다닐 때도 있는데\n그런 정보들이 잘 공유가 되려면 어떻게 해야 할까\n모두가 메인스트림에 접근하면 양이 많아져서 보석이 숨겨질 수도 있다\n\n근데 사람들은 모두 생각이 다르기 때문에 같은 것을 연구하더라도 조금씩 다른\n부분을 볼 수 있다. 애초에 겹치지 않도록 뭔가를 한다는 것은 말이 안되고, 서로\n보완하고 힘을 싣는 것이 될 수 있다.\n\n#### 과학자\n\n박사 연구실에서 연구할 때는 어떻게 사람들 간 정보의 비대칭을 해결하지?\n소프트웨어 개발도 누구나 할 수 있는 메뉴얼에 따른 일보다 연구실에서 연구하는\n과학자들처럼 해도 되지 않을까?\n\n#### 논문 규격\n\n#### 연구\n\n대학원생이고 지도교수에게 자신의 연구를 이야기 할 때\n지도교수는 큰 방향과 흐름, 그동안의 경험을 통해 전체적인 부분을 조율해주지만\n나의 연구에만 신경 쓰지 않을 뿐더러 세부적인 부분은 모를 수 있는데\n직접 연구하는 내가 '어떤 동기와 가설을 가지고 어떤 실험을 통해 할 것인지' 논리를 가지고\n지도교수님에게 이야기하면 좋은 조언을 받을 수 있지 않을까\n진행 후에도 다시 가설, 실험, 연구, 지도교수님의 조언을 받으며 계속 반복해서 진행가능\n동기, 가설, 계획, 연구\n\n연구실에서는 사수에게 실험테크닉을 배운다고 한다\n실험테크닉.\n실험 -> 연구결과 == 개발 프로세스 -> 소프트웨어?\n개발 프로세스 테크닉도 알려주면 좋겠다\n코드를 받고, 테스트하고, 풀리퀘하고, 배포하는 것\n메뉴얼로 만들고, 빠르고 효율적으로 하는 것도 알려주면 좋겠다\n\n#### 연구\n\n이론적 조망, 연구방법론을 통해 근거확보와 엄밀한 방식 탐구\n\n학술지에 등재되기 위해 거치는 검증을 통해 그 학술지의 권위가 생긴다.\n\nSSCI, KCI\n\n#### 실험의 결과가 과학적 사실로 받아들여지려면\n\n- 누가 실험해도 같은 결론 - 객관성\n- 반복해도 같은 결과 - 신뢰성\n- 측정하고자 하는 것을 제대로 측정했는가 - 타당성\n- 그 결과를 일반화 할 수 있는가 - 표준화(비교가능성)\n\n자연과학적 방법론이 객관성을 띄고 이 객관성으로 사회를 설명할 수 있다고\n생각했고, 심리학도 인간의 심리를 객관화할 수 있다고 생각했지만 20세기 후반,\n하이젠베르크나 아인슈타인 시대에 이미 객관성보다는 상호 주관성이 더 사회를 잘\n설명할 수 있다고 생각하게 되었다.\n\n#### 지식 검증\n\n- 전문가\n- 여러명\n- 반대의견 확인\n\n#### 논문 작성 순서\n> - 나는 이런 문제를 풀거야 (abstract> - 사실 이 문제는 이런 동기에서 연구가 시작된건데 (introduction)\n> - 관련해서 이런저런 접근들이 있었지 (related works)\n> - 난 이런 새로운 방식으로 접근해보려고 하는데 (method)\n> - 정말 이게 잘 먹히는지 실험도 해봤어 (experiment)\n> - 이를 통해 이런 사실도 알아냈지만 한계점도 있지 (discussion)\n> - 마지막으로 귀찮은 너를 위해 요약 (conclusion)\n> - 출처: <[http://gradschoolstory.net/terry/readingpapers/](http://gradschoolstory.net/terry/readingpapers/)>\n\n#### 레포트 작성 시 (1)자료조사, (2)기존제품과 비교\n\n#### 논문을 쓰는 건 기존 연구에 새로운 논의를 덧붙이는 것\n레포트는 기존 연구를 정리한 것\n\n## 기타 자료 모으는 법\n\n#### 집단지성 이용법\n\n키워드를 잘 적어서 관심 레이더에 잘 포착되게 한다\n관심 있을만한 사람들이 있는 곳을 찾아간다\nex)community, football-fmkorea\n\n- 실시간으로 정보공유를 받고 싶은 것이 있을 때\n\n#### 집단지성\n\nImageNet이라는 이미지 인식 관련 머신러닝 대회를 열어서 서로의 기술을 더 낫게\n만들어졌는지 확인하고 다른 사람들도 확인할 수 있다.\n\n- 경쟁과 열린 공간을 이용한 좋은 방식\n\n#### 커뮤니티 장점\n\n#collection\n\n- 댓글로 티키타카가 되어 부족한 정보가 메꿔진다\n\n#### 잘 정리된 글을 잘 이용하는 방법\n\n정리된 글을 보면 나는 뭔가 빈틈이 있을 것 같아서 개운하지 않게 느낀다.\n하지만 정리된 글은 상당한 가치가 있는 글이다.\n하나의 좋은 시작점이 될 수도 있고, 그 자체로 충분할 수도 있다\n\n- 시작점으로 사용하는 방법\n- 여러 번 읽어서 틀을 잡는다\n- 의문이 드는 지점을 찾는다\n- 개선시켜본다\n- 문제점을 찾는다\n- 반박한다\n\n#### 정보 찾을 때 쓰기 좋은 검색어\n\n#collection\n\n- awesome\n- 101\n- step by step\n- ultimate\n- advanced\n- first 1000\n\n#### 사람들이 최근 검색하는 것을 찾을 수 있는 곳\n\n#collection\n\n- [google trends](https://trends.google.com/trends/?geo=KR)\n- [keywords everywhere](https://keywordseverywhere.com/)\n- [pinterest](https://www.pinterest.co.kr/ideas/food-and-drink/918530398158/)\n\n## 공부\n\n#### 쉬운 것부터 해야한다\n\n잘하는 사람의 플레이를 보면 그것을 따라할 수 있고, 실력의 상승으로 이어진다\n자신의 수준보다 높은 것만 보는 것이 못따라가면 실력 상승은 없고 지쳐서 하기\n싫어진다.\n그러나 수준 높은 것을 아예 안보면 더 나아지는 것 없이 갇히게 된다.\n\n쉬운 것부터 해야한다\nvs\n큰 물에서 놀아야 한다\n\n한단계 높은 것을 두드려보고 안되면 단계를 낮춰서 한다\n한번씩 높은 단계를 시도해본다\n\n똑같이 취미로 요리를 3년 한다고 했을 때\n어떤 시도를 해봤느냐에 따라 실력이 달라진다\n\n괜히 무리하게 높은 단계를 흉내만 내다가 소화를 못한다\nvs\n높은 단계를 따라하면서 체득이 되어 실력이 상승한다\n\n#### 작고 쉬운것부터 해야하는 이유\n\n학습곡선이 가파르면 시간이 더 오래 걸린다\n\nhttp://m.egloos.zum.com/agile/v/1762301\n\n#### 어려운 책을 여러 번 반복해서 읽다보면 조금씩 모르던게 보인다\n\n철학 요약서를 읽으면 그 요약서의 저자의 생각을 처음에 받아들이게 돼서 그 생각에\n갇힐 수 있다고 주의를 주는 사람들이 있다. 그래서 원전을 먼저 읽으라고 하지만,\n접근하기 쉽지 않다. 쉬운것부터 시작하되 비판하면서 읽도록 해야겠다.\n\n철학 학부생도 읽기 힘든 원서를 문외한이 읽기 힘드니\n2차 저작물 중 좋은 것을 보는게 낫다는 이야기도 있다\n\n#### 반복을 통한 암기\n\n언어를 배우는 것도 계속 반복이다.\n\n언어를 배우는 것 처럼 노트를 반복해서 인지하면 될까\n\n- 잘 가르치는 사람은 좋은 방법을 많이 참고해서 그 기반 위에서 가르치는 사람인 것\n  같다.\n\n#### 기술 공부\n\n기술이 어떻게 나오게 되었는지에 대한 역사를 알면 그 기술에 대해 이해력이 높아지고 기억이 잘 된다\n\n- 링크드리스트\n\n기술의 단점을 확인하고 대체 기술을 확인한다\n\n- json\n\n내가 안쓰는 기술이라도 그 기술의 큰 특징은 알아두면 좋겠다\n\n- 스프링, 안드로이드, 프론트엔드 프레임워크\n\n#### 공부법\n\n공부법 : 본다 정리한다 생각한다 다시 본다\n\n지식습득을 변증법적으로 하는 것이 좋겠다\n\n알고리즘 공부나 수능 공부는 레퍼런스를 모으는 식으로 하기보다 해결하기 위한 노력이 필요하다\n재미만으로 해결할 수 없고, 오래 생각해야 한다\n어떤 알고리즘을 써야할지에 대한 것은 레퍼런스를 모으는 접근법으로 할 수 있겠다\n\n일단 뽑고, 연결된 것들을 찾아 나간다\n요새는 관련 커뮤니티에 들어가서 입문용으로 추천을 받아서 거기서 시작하는 방법도\n있다\n\n#### 안다고 생각해도 알기 힘들다\n\nhttps://m.fmkorea.com/best/3797889470\n\n- 기억에 의존해서 대기업 로고 그리기 실험\n\n#### 모르는 것을 모른다는 것을 아는 것\n\n제목을 딱 읽으면 아 궁금하다. 어떻게 저런 생각을 했지 하는게 있다.\n그것에 대해 구체적으로 궁금해본적은 없지만 보는 순간 궁금해진다.\n존재조차 모르지만 알게 되면 일리가 있게 느껴지는게 있다.\n\n#### 모르는 내용을 알때까지 공부한다\n\n말은 쉽지만 안다는 게 쉽게 설명 가능해야 하고 주변지식도 파악해야 한다라고 하면 굉장한 노력이 필요하다\n\n#### 경험의 뿔\n\nDale이란 과학자가 제시한 경험의 뿔이라는 것이 있다.\n\n#### 임기응변\n\n#book\n#standard\n\n> 의도가 원하는 결과를 맺는 경우는 생각보다 많지 않다\n> 임기응변은 규범에 맞추어 자신을 제대로 세울 수 있는 경지를 완수한 사람에게나 가능한, 최후의 경지 - 공자\n> 이사야 벌린은 철학적 일원론이 초래할 정치적 파국을 경계하기 위해서 융통성 있는 정치적 판단을 강조했다\n>\n> - 우리가 간신히 희망할 수 있는 것(김영민)\n\n쉽게 설명한 글이라는 것도 그 전반적인 지식을 다 알고 나서 그것을 쉽게 설명해야 좋은 정리가 되는 것이지\n쉬운 부분만 조금씩 익혀서 정리한다고 정리가 되는 것이 아닌 것 같다\n\n메뉴얼을 따르는 것도 메뉴얼에 대한 숙지가 되있는 상태에서 자유도를 더해 더 생산적이 될 수 있겠다.\n메뉴얼을 꼭 지켜야하는 억제장치로 쓰는게 아니라 (족쇄가 아니라), 같은 것을 공유하는 지식의 공유장소로 활용하도록 하는 것이 좋겠다\n메뉴얼을 운운하면서 다른 작업을 막는 것이 아니라 더 나은 메뉴얼을 만들기 위해 마음껏 변경할 수 있도록 하고,\n그 변경이 단순히 누군가의 의견이 좋아보이면 따라가는게 아니라 메뉴얼을 숙지한 상태에서 한발 더 나아가는 것이 되어야 한다\n\n#### 경험이 많아지면 이론적으로 배웠던 것들의 빈틈을 알게되고 그것을 이용하는 여유가 생긴다\n\n#### 측정가능한 목표\n\n- '이번 시험에서 80점 이상을 맞아야해'는 정량적이지만 와닿지 않는다\n- 숫자에는 의미가 없어서 직관성이 떨어진다 숫자는 비교가 되기 때문에 직관성이 높다\n- 정량적 데이터는 축적되면 정보가 되는데 정성적 데이터는 축적되면 과거의 정보가 희미해진다\n- 정량적 데이터는 회사 발전에 도움이 되겠다. 어떻게 정성적 데이터를 관리해야할까 - 연결\n- 정량적으로 한다고 단순 수치를 적는건 의미없다. 와닿는 숫자여야 한다\n\n#### 좋은 배를 만드는 방법\n\n작은 배를 오래 타다보면 고칠 곳이 생기고 부족한 부분이 보이고 결국에는 그 부분을\n고려한 새로운 배를 만들게 된다 새 배를 만드는 두 부류가 있겠다. 배를 타면서\n직접 느꼈던 것을 토대로 배를 만드는 사람, 이론적인 지식을 쌓아서 배를 만드는 사람\n\n좋은 배를 만드려면 두가지가 다 되면 좋겠다.\n그러려면 배를 좋아해서 배를 계속 사용하다가 이론적인 부분도 채우는 사람이 좋은\n배를 만들 수 있겠다.\n\n> 배를 만들고 싶다면, 사람들을 시켜 나무를 모으고\n> 역할을 나누고 명령을 내리면서 북을 칠 것이 아니라,\n> 거대하고 끝없는 바다를 갈망하게 만들어라.\n>\n> - 생텍쥐베리\n\n#### Knowledge is in books. and Wisdom in nature.\n\n#### 연결도를 보여주는 클라우드 트리를 보여주는 서비스를 이용\n\n좋은 논문을 찾는 방법, 처음 그 분야에 접근할 때 사용하는 방법 중에 인용 횟수와\n피인용 횟수를 보는 것이 있다. 이것처럼 처음 그 분야에 전반적으로 알아볼 때 많이\n참조된 것을 찾는 것이 유용할 것이다.\n\n그래서 연결도를 보여주는 클라우드 트리를 보여주는 서비스를 이용하면 좋겠다.\n분야명을 입력하면 참조가 많이 된 것이 한 눈에 들어오는 식으로.\n\n#### 깊게 생각하기\n\n- 왜 이렇게 구성했는지 생각하기\n- 배경 파악하기\n- 나라면 어떻게 했을지 생각하기\n- 트레이드 오프 생각하기\n- 계속 개선할 부분을 찾기\n- 하나 하나에 집중하고 한개에서 여러개로 생각을 뻗치기\n- 리스트화해서 빼먹지 않기\n- 내가 좋아하는 분야에서라면 더더욱 하나의 문제에 깊이 고찰하고 사유하기\n- 부족한 부분을 계속 찾으면서 연습한다\n- 하나하나에 최선을 다하기\n- 전략은 세워놓되 외부의 변화를 지속적으로 확인하고 받아들여야 한다\n\n#### 문제 해결법, 선택법, 공부법\n\n절대적인 것은 없다.\n안풀리는 것에 억지로 매달릴 필요는 없으나 집중해서 파고들어 길을 찾아야 한다\n어떤 복잡한 문제라도 잘게 쪼개어 풀 수 있다. 복잡한 것을 단순하게 만드는 것\n아주 쉽게 설명이 되야 정말 잘 이해한 것이다\n심플하지만 다양해야한다\n어떤 변화가 이루어질때 변화의 안좋은 점을 확인하고 염두에 두면 그 안좋은 점도 커버할 수 있는 결과를 낼 수 있다\n주먹구구보다 전체적인 그림을 그리기\n나의 기준을 세워놓되, 외부에는 열려있기\n\n[[About_Development#기술 공부]]\n\n#### 정보의 발견\n\n만약 독일을 가게 된다면 그곳에서의 정보를 얻기 위해 한인회에 접근하게 될 것이다.\n그러면 한인회는 그 지역에 온 한인들의 정보를 쉽게 모을 수 있고, 독일의 한인에\n대해 문의를 하려면 한인회에 물어보면 금방 전체적인 정보를 알 수 있을 것이다.\n\n## 질문\n\n질문을 할 때 왜 물어보는지 말하고 물어보면 더 원하는 대답을 얻을 수 있지 않을까\n\n- [ ] 김창준님이 질문하는 방식이 효과적인 것 같은데 다시 찾아봐야겠다.\n\n#### 질문을 할 때\n\n틀린것을 지적하고 따지려고 하면 안되고\n더 나은 것을 위해 나아가는 방향으로 가기 위해 질문을 한다\n시너지를 일으키도록\n\n#### 안드로이드 매크로 영역에 사람들이 많이 쓰는 명령어들이 있을텐데\n\n어떻게 찾아야 할까\n\n- 이 글을 이용해 찾는다\n\n#### 지금 내가 경계해야 할 것\n\n아는 것과 모르는 것을 구분하고\n아는 것을 안다고 그냥 넘어가면 안되고 정말 아는 것인지 확인해야 한다\n모르는 것은 당장 알지 못하더라도 조금씩 익혀가야 한다\n\n#### 알고 싶은 추상적인 것을 찾을 키워드\n\nOCP 를 잘 적용하는 노하우에 대해 알고 싶었다\nOCP 잘 지키는 법\nOCP 이렇게 하면 신경 안써도 된다\n\naws를 로컬에서 제대로 확인(테스트)하는 방법\n\n#### XY 법칙\n\nhttps://hut.mearie.org/xy-problem/\n\n#### 엘리코딩에서 신입사원이 이렇게 질문했을 때 좋았다라고 한 것\n\n#collection\n\n#### 원인을 어디서 찾아야할까 어디까지 찾아야할까\n\n아이스크림을 떨어뜨린 아이의 이야기\n5whys\n\n#### 잘못의 원인을 바로 직전의 상황으로 판단하는 것\n\n아이가 아이스크림을 떨어뜨린 이유를 그 이전의 상황에서 찾으려고 하지 말아라는 예제였는데\n히로시마 원폭 피해자가 원폭 개발자에게 사과를 요구하는 상황은\n일본이 전쟁을 일으키고 선제공격을 했기 때문이라 원폭 피해자에게 사과하는 것이 아니라 일본이 사과해야 하는 상황이라고 생각이 든다.\n전후과정이 명확하기 때문일까? 인과관계가 명확하기 때문일까\n\n#### 단일 진실의 원천 SSOT\n\n![ssot](../img/ssot.png)\nhttps://coffeewhale.com/kubernetes/gitops/argocd/2020/02/10/gitops-argocd/\n\n한동안 찾던 건데 여기 있었다\n\n이건 정보통신쪽에서 복붙 대신 참조를 하자는 의미로 쓰이는 것 같다\n이 글에서는 배포 방식을 단일화해서 충돌을 막고자 이 의미를 이용했다\n\n문서관리영역에서 사용할때는 위키를 이용하는것처럼 자료를 한 곳에 모아두고 등록/수정하게 하는 것을 말한다. 데이터를 한 곳에 모아두고 거기를 기반으로 작업해야한다고 하는 방법론\n\n> 단일 진실 공급원(SSOT)이란 모든 비즈니스 데이터를 하나의 공간에 저장하는 것을 말합니다\n>\n> - https://experience.dropbox.com/ko-kr/resources/source-of-truth\n\n#### 모르는 것을 볼 때\n\n\"이럴 때는 억지로 두 번, 세 번 읽는 것보다 약간의 배경지식을 살짝 안 뒤에 다시 읽는 게 효과적이다\"\nhttps://namu.wiki/w/%EB%AF%B8%ED%95%99%20%EC%98%A4%EB%94%94%EC%84%B8%EC%9D%B4\n\n#### 기억\n\nhttps://blog.storyg.co/%ED%95%99%EC%8A%B5%EB%B2%95/%EB%91%90%EB%87%8C/%EB%91%90%EB%87%8C%EA%B3%BC%ED%95%99/2018/02/20/what-make-memory\n\n#### 생각의 구멍\n\n새로운걸 배우다가 어느정도 알게되면 더 이상 배울게 있을까 싶을 때가 있다. 혼자 공부할 때는 이 벽을 깨기 어렵다고 생각했는데 회사에서 일을 하다보니 매일 배울게 생긴다. 근데 이제는 배우는 것의 범위가 일정하지 않아서 구멍이 생기는 것 같은 느낌이 든다.\n\n한번씩 다른분야에서는 어떻게 이 구멍을 채울까 궁금해지는데 의료분야에서나 응급상황이 발생할 때 대처에 구멍이 있으면 일정한 서비스를 해줄 수 없을 것 같은데 의료분야는 이론적으로 공부하는 양이 많긴 하지만\n암묵지가 아직 이론화되지 않은게 있을거라는 걱정이 있다. 암묵지를 잘 공유하는 방법이 있을까.\n\n간호사들은 매일 교대때마다 인수인계를 하면서 자신이 아는 정보를 다음교대인원이 알 수 있도록 인수인계를 어떻게 할지 고민한다고 한다.\n\n인간의 지식에도 구멍이 있다고 생각되는데, 원소단위까지 알게 된 인간의 탐구가 양자까지 도달한 것도 이미 놀랍지만 만약 물질로 설명 안되는 식의 아예 생각지 못한 것이 발견되어 인간의 사고를 뒤집을 수 있고 지금은 단지 부재를 알지 못하는게 아닐까 하는 생각을 하곤 한다.\n\n오펜하이머를 보고 실험을 통해 이론이 발견하지 못한 것을 발견을 통해 먼저 찾을 수 있다는 것을 다시 떠올렸다.\n\n- 인수인계\n- 지식\n- 전달\n- 생각\n- 이론과 실험\n\n#### 하나의 정보를 알아볼 때 꼼꼼하게 근저의 정보를 알고 싶다.\n#Reference #todo #Collection\n큰 그림을 그려서 더 넓게 정보를 이해하고 싶다.\n전혀 모르는 분야의 정보를 얻을 때 어떻게 찾으면 좋을까\n\n예를 들어 직급 호봉 체계에서 군필 남자들이 2호봉을 추가로 받는 것을 1호봉으로 바꿔야 되지 않겠냐는 의견을 들었을 때\n회사 내규 확인, 왜 2호봉이 추가되는지, 노동법, 중기청 등 소속 기업 관리 관청\n확인, 다른 회사 내규 확인\n\n다른 나라는 어떻게 하는지, 직급 호봉 제도에 대한 이해, 회사 사람들의 의견, 여론\n\n관련 키워드 : 군대, 호봉, 인사\n"},{"headings":[{"value":"기본"},{"value":"개발자의 기본은 어떤 것이 있을까"},{"value":"기본이란 무엇인가"},{"value":"가방의 본질은 수납"},{"value":"피드백을 해달라고 할 때 해줄 수 있는 여유"},{"value":"개발자는 이직을 하면 그 빈자리가 큰 구멍이 될까 아니면 누군가 대체할 수 있을까"},{"value":"작업 하다가 쉬고 싶을 때 집중력이 높은 상태에서 깨지는 것이 안좋지만,"},{"value":"데이터 엔지니어도 재밌겠다"},{"value":"개발 대회 입상"},{"value":"블록체인 회사에 들어가서 일을 하게 되면"},{"value":"30살까지 프로그래머로서 달성하고 싶은 것들"},{"value":"개발자는 멋진 직업이다"},{"value":"음악이나 수영 등 각 분야에서"},{"value":"개발자가 게임의 테마와 진행방식, 어떤 점에 중점을 줄지 생각하지 않고 기획자가 하게 된다"},{"value":"Is developer an engineer?"},{"value":"한 곳만 깊게 파는 개발자와 넓고 얕게 파는 개발자에 대하여"},{"value":"스페셜리스트, 제네럴리스트"},{"value":"넓게 두루두루 하려는 개발자 vs 한 곳만 깊게 파는 개발자"},{"value":"다음 세대는 모두가 프로그래밍을 할 수 있는 세대가 될 것이다."},{"value":"프로그래머라고 이야기하면 수학 잘한다고 생각하는 경우가 있는데"},{"value":"페어 프로그래밍"},{"value":"이미 나와있는 기술은 써먹으면 된다"},{"value":"리눅스라는 운영체제가 공개되어 있는 상황에서"},{"value":"개발자는 다른사람이 읽기 쉽도록 코드를 짜야하고"},{"value":"같이 일하고 싶은 개발자"},{"value":"같이 일하고 싶은 개발자"},{"value":"코드 줄 수가 적을수록 관리할 포인트가 줄어든다"},{"value":"다양하지만 넘치지 않는 함수"},{"value":"세부적인 개발"},{"value":"작업 처리라는게 이전에 8시간 만에 되었다고 다음에도 8시간에 되는 것이 아니다"},{"value":"피드백 소프트웨어"},{"value":"월간윤종신"},{"value":"프로그래머의 취미를 프로그래밍으로 하는 것에 대하여"},{"value":"단순한 것을 연결하는 것이 우아하다"},{"value":"데이터베이스 정규화"},{"value":"어떻게 하면 서비스하기 좋은 소스를 작성할 수 있을까"},{"value":"키네시스"},{"value":"개발"},{"value":"가려움을 해결한 방법 1"},{"value":"develop"},{"value":"개발을 하는 경우"},{"value":"Safety programming"},{"value":"테스트 케이스를 처음부터 최대한 적으려다 포모도로 프로젝트가 망했다."},{"value":"글쓰기"},{"value":"프로그래밍과 [[글쓰기]]의 상관관계"},{"value":"Refactoring is like a revision"},{"value":"program is different with journaling"},{"value":"코드는 절차지향에서 객체지향으로 오면서 책과 쓰이는 방식이 달라졌지만"},{"value":"인쇄를 통해 정보를 많은 사람이 전달 받을 수 있게 됐다"},{"value":"문맥"},{"value":"글쓰기 가이드"},{"value":"퇴고의 끝, 출판의 시작"},{"value":"개발하면서 생길 수 있는 미래를 구축하는 문학"},{"value":"Regacy"},{"value":"기존 리소스 활용 최대화"},{"value":"레거시의 가치, 소중함과 한계"},{"value":"original program vs new program"},{"value":"Regacy"},{"value":"생각난걸 바로 만들고 점점 개선시키려면"},{"value":"구글은 그들의 사이드 프로젝트를 어떻게 관리하나?"},{"value":"쿠팡이 자체적으로 만든 서킷브레이커와 api gateway"},{"value":"그동안의 리소스를 이용하는 것 vs 리소스와 별개로 새로운 것을 만드는 것"},{"value":"CRUD"},{"value":"ETC"},{"value":"어떻게 정보를 공유하고 확산하는 것이 효과적일까"},{"value":"why I choose this company"},{"value":"이 회사에서 할 수 있는 것"}],"fields":{"slug":"/about_development/"},"rawMarkdownBody":"## 기본\n\n#### 개발자의 기본은 어떤 것이 있을까\n\n주호민의 위펄래쉬를 보면 정말로 기본이 안된 만화들이 나온다\n주호민작가가 말하는 만화의 기본은 말풍선, 폰트, 정렬, 채색, 스토리텔링, 연출 등인데 가독성을 위한 부분이다.\n어떤식으로 연출하느냐에 대한 세부가 아니고 독자가 알아볼 수 있나 없냐의 부분만 얘기해주는데 정말 응모자의 고유영역은 안건들이고 잘 설명한다\n기존의 만화에서 사용되던 관용표현을 쓰는 것을 기반에 두지만 하나씩 변화하는 것을 좋게 보는 점도 있다.\n말풍선의 위치는 독자들이 원래 읽는 방식대로 하는 걸로 하는게 맞고 바뀌면 안좋다는 부분 공감.\n독자의 시점에서 어떻게 보는지를 생각한다.\n\n개발자의 기본은 어떤 것이 있을까\n개발단.\n개발된 프로그램의 독자는 유저\n코드단.\n코드의 독자는 개발자\n개발자들이 공통으로 생각하는대로 코드를 짜면 코드 이해하기 좋을 것이다\n\n#### 기본이란 무엇인가\n\n대학 커리큘럼?\n사람들이 자주 쓰는 것들?\n제작자의 가이드?\n기술의 기반과 역사?\n의도\n혼합된 개념을 이루는 단일 개념\n\n프로운동선수는 프로데뷔무대에서 기라성같은 선수들과 비슷한 퀄리티를 가진 채로\n무대에 선다\n\n개발자는?\n\n#### 가방의 본질은 수납\n\n수납하기 위해 만들어졌다\n\n개발자는? 컴퓨터는?\n컴퓨터는 계산을 위해 만들어졌다. 인간이 귀찮게 안해도 되도록\n개발자는 소프트웨어를 만드는 사람\n인간이 귀찮게 안해도 되도록 컴퓨터가 일하도록 만드는 프로그램을 만드는 사람\n소프트웨어란\n\n처음 만들어진 소프트웨어는 수학문제를 풀기위한 것\n문서 작업용으로 많이 쓰였었고\n지금은 여러 물리적 공간을 연결해서 접근이 쉽게 해준다(배민, 우버)\n공간, 시간의 제약을 줄이는 것에 뛰어나다(인터넷 예약)\n계산을 빨리 해준다(머신러닝)\n\n중요할 때 이상동작 하지 않는 신뢰성, 안정성\n고장나면 바로 교체할 수 있는 모듈화\n망치에 고무를 둘러서 사용성을 증가시키는 것\n\n\n#### 피드백을 해달라고 할 때 해줄 수 있는 여유\n\n주니어가 도메인에 대한 정보, 업무 노하우, 관련지식, 여태의 경험을 공유해달라고 할 때\n딱 정리해서 알려줄 수 있도록 하면 좋겠다\n\n#### 개발자는 이직을 하면 그 빈자리가 큰 구멍이 될까 아니면 누군가 대체할 수 있을까\n\n내가 없으면 안돌아가도 문제고\n누구나 나를 대체할 수 있어도 문제다\n\n사람이 100% 대체되는 것은 불가능 하지만.\n\nGeeknews에서 나를 대체 가능하게끔 일을 하자는 글을 봤는데 아주 마음에 들었다.\n내 지식을 문서화하고, 내 경험을 다른 사람과 나눔으로써 나에게도 객관적인 지식이\n쌓이고, 회사에도 객관적인 지식이 쌓인다는 태도였다.\n\n- https://news.hada.io/topic?id=4442&utm_source=weekly&utm_medium=email&utm_campaign=202125\n\n#### 작업 하다가 쉬고 싶을 때 집중력이 높은 상태에서 깨지는 것이 안좋지만,\n\n고장 난 테스트를 작성해서 다시 돌아 왔을 때 시작지점이 되게 할 수 있겠다\n\n#### 데이터 엔지니어도 재밌겠다\n\n데이터 관련 작업을 취미로 해보자\n\n데이터는 계속 쌓이는 거라서 데이터 없는 작업을 해볼까 생각해봤지만 수파리를 내가\n의미있게 생각한다면 처음의 쌓는 과정이 필요한 것은 거부할 수 없다.\n즉, 데이터는 필요하다. 그리고 그 쌓은 데이터를 파하는 작업도 할 수 있으니 데이터\n관련 작업은 재밌는 작업이 될 것이다.\n쌓아두는 것보다 나눠주는 것을 더 좋아하려고 했으나 나눠주려면 쌓아야 하는 것도\n있다.\n쌓는 그 자체가 목적이 아니라 그 다음을 위해 쌓아야 한다.\n\n정보를 기반으로 가설을 세우고, 검증하고. 피드백을 혼자서 만들어 낼 수 있다?\n\n#### 개발 대회 입상\n\n경력 개발자는 대학생들 대회에서 입상을 할 수 있을까? 글쎄,\n입상을 한 사람은 입사 후에도 개발을 잘할까? 글쎄,\n근데 그럼에도 한 영역에서 자신만의 접근법을 가지고 훌륭한 결과물을 만들어냈으면\n그 접근하는 능력으로 개발도 잘 할 수 있다.\n\n\n#### 블록체인 회사에 들어가서 일을 하게 되면\n\n관리보다 코어 프로그램을 발전시키기 위한 개발을 하게 될텐데\n내가 아는 지식으로 기존의 프로그램보다 더 나은 알고리즘을 만들 수 있을까?\n수학적인 지식 없이?\n블록체인에서 자원을 얻어가는 것만을 방지하기 위해(자발적인 참여를 위해) 코인같은 보상이 나오게 되었는데\n보상 대신 다른 방법이 없을까?\n\n#### 30살까지 프로그래머로서 달성하고 싶은 것들\n\n오타니의 8개 구단 드래프트 1순위와 같은 추상레벨로\n\n- 나는 오타니 만다라트에서 구체적이고 명확한 목표에 끌렸었다\n  논리력, 연상력, 기초, 깊이를 어떤 목표설정을 할 수 있을까\n\n프로그래머의 가치를 소프트웨어의 가치와 접목시킬 수 있을까\n\n\n#### 개발자는 멋진 직업이다\n\n코드를 어떻게 짜면 좋을지에 대한 추상적인 탐구로 코드의 질을 높일 수 있다\n하지만 실제 코드를 짜면서 그것이 모두 되지 않는다는 것 또한 실전에서 바로 느낄 수 있다\n이상적인 그림도 크게 그릴 수 있고\n현실적인 경험도 할 수 있는,\n책을 통해 발전 가능하지만 책에만 갇혀있지 않는 실존적인 직업임이 멋지다.\n\n다른 개발자의 후기나 경험담이 인터넷에 자료가 많다\n나도 잘 공유해야지\n\n#### 음악이나 수영 등 각 분야에서\n\n잘못 습관을 들인 경력자보다 생초짜를 새로 가르치는게 쉽다고 한다.\n나는 야생의 개발자에 속하는데 잘못된 습관 때문에 다른 사람에게 피해를 안줬으면 좋겠다\n\n#### 개발자가 게임의 테마와 진행방식, 어떤 점에 중점을 줄지 생각하지 않고 기획자가 하게 된다\n\n그러면 개발자의 역할은 무엇일까\n개발과 기획을 나누는게 맞을까, 큰 서비스를 할 때는 나뉘게 되겠지만 개발자가 기획을 하지 못하는 것은 아니다\n엔지니어의 영역\n\n구현하려는 것을 깔끔하게 구현하기 - 여기서 개발자의 의견이 더해질수는 있지만 메인은 아니다\n구현한 것이 오류를 일으키지 않게 하기\n\n사람과 기계를 연결하는 일\n기계 - 컴퓨터 - OS - 작업환경\n사람이 할 수 있는 것을 쉽게 하게 해주는 일\n사람이 할 수 없는 것을 하게 해주는 일\n\n주고 싶은 가치는 따로 있을 것 같다\n사람의 편의, 효율을 늘리는 것\n효율을 크게 늘릴수록 좋은 소프트웨어인가?\n\n전체 소프트웨어 레벨에서는 효율성 증가를 목적으로 두고 각 소프트웨어는 각 기계처럼 각자의 목표가 있겠다\n하나의 소프트웨어는 하나의 기계와 같다\n식기세척기는 식기를 잘 세척하는 것이 목표다\n앨런튜링\n리누스토발즈\n리차드스톨먼\n\n소프트웨어는 커널, OS, 프로그래밍 언어, 화면에 종속된다 + 네트워크 + 사용하는 서비스 + api\n\n#### Is developer an engineer?\n\n[[Creator#예술가와 엔지니어의 차이]]\n\n- 실제 문제를 해결해야 한다\n\n구글 엔지니어가 일하는 법 이라는 책에 우리는 software engineer라고 이야기하고 있다.\n그리고 이건 개발을 포함하는 큰 범주의 개념이라고 이야기한다.\n\n#### 한 곳만 깊게 파는 개발자와 넓고 얕게 파는 개발자에 대하여\n\n예술적으로 소프트웨어를 만들고 싶은 개발자와 공학적으로 소프트웨어를 만드는 개발자\n\n#### 스페셜리스트, 제네럴리스트\n\n한 도메인에 오래 있어서 전문가가 되는거라면 나는 전문가가 안되겠다.\n한 분야의 스페셜리스트보다는 제네럴리스트가 되겠다.\n예전부터 스페셜리스트, 제네럴리스트에 대한 얘기는 있었는데 도메인에 묶인\n전문가의 얘기를 듣고 그럴싸하게 생각해버렸다\n\n어디에 둬도 애매한 사람이 아니라 어디에 둬도 잘하는 사람이 되야겠다\n\n#### 넓게 두루두루 하려는 개발자 vs 한 곳만 깊게 파는 개발자\n\n백엔드도 제대로 못하면서 이것 저것 다 하려고 한다 vs 여러 분야를 다 내가\n신경쓰고 싶다\n풀스택 개발자를 말도 안되는 것이라고 한다\n백엔드와 프론트엔드만 하는 사람들보다 못하는 이도 저도 안되는 사람이라고 한다\n엉성하다고 한다\n기획자와 개발자를 나눔으로써 더 큰 소프트웨어가 된단다\n좁은 곳에 집중해야 깊게 팔 수 있단다\n\n개발자가 제품에도 신경을 써야 한다\n코딩만 하면 안된다고 한다\n\n그러면 기획자와 개발자는 나눠도 되고 코딩과 일련의 작업은 나누면 안되는 것인가?\n그럴리가 없다\n\nT자 커리어가 개발자들 사이에서 나오고 있다. 깊이 하나를 박아놓고 양 옆도 넓히는\n것\n좁고 깊은 것이 효율적이라는 일련의 공감대가 있기 때문에 이런 이야기가 나온\n것이겠지\n좁게 깊게 파되, 넓이도 가져갈 수 있는 방법은?\n\n좁은 영역이라는 것의 경계는?\n글씨를 잘 써서 글씨만 대신 써주는 사람이 있다고 한다\n사람은 경계가 없고 모두 개별적으로 인식해야 할 것 같다\n\n말을 아끼는 것이 좋다고 생각했었는데 자기 어필은 해야 할 것 같다\n아는 것을 떠벌리고 싶진 않은데 내가 할 수 있는 것은 알려야 한다\n\n원하는 것이 있을 때 정확히 원하는 것을 얻지 못할 때 타협하는 것이\n도망치는 것이 아니라 쫓을 수 없는 완벽이라는 지향점을 놓아주는 것이어야 한다.\n\n현재에 충실하되, 미래를 대비\n\n#### 다음 세대는 모두가 프로그래밍을 할 수 있는 세대가 될 것이다.\n\n그렇다면 직업적 프로그래머와 그들과의 차이점은 무엇이 될 수 있을까\n원하는 프로그램을 구상하고 구현하는 것은 코딩교육과 노코드 프레임워크로 어느정도 구현할 수 있을 것이다 (물론 더 나은 교육이 나올 수 있지만)\n대규모 엔터프라이즈는 개개인이 접근할 수 없으니 이 영역만 남게 될까?\n퀄리티의 차이를 논할 수는 없을 것이다.\n프레임워크가 발전하면서 오히려 더 깔끔한 코드가 나올 수도 있기 때문에.\n\n#### 프로그래머라고 이야기하면 수학 잘한다고 생각하는 경우가 있는데\n수학은 전혀 못하지만 컴퓨터를 좋아하면 프로그래머가 될 수 있는 것 같다\n컴퓨터에서 뭔가를 내가 만들어 동작시킨다는 것이 재밌기 때문이다\n\n#### 페어 프로그래밍\n- 짝 코딩을 하면 딴짓을 못하기 때문에 하루 8시간 중 7시간을 코딩과 업무 분석에 집중할 수 있었다.\n- 핵심은 쉬지 않고 계속 말을 하는 것. 심지어`int i = 0`이런 걸 쓸 때에도 계속 말하는 것이 핵심이다. \n- 그냥 코딩만 해서는 의도 전달 효율이 매우 낮다. 말하면서 타이핑해야 하고 설명하면서 코딩해야 한다.\n- 짝에게 계속 생각을 노출해야 한다.\n\n#### 이미 나와있는 기술은 써먹으면 된다\n- 근데 FC의 기술은 분석하고자 한다\n- 분류가 다른가? FC를 분석하려는 목적, 종착지는 어디인가\n- 써먹기 위해 분석이 필요한데, 이 FC 분석은 클론코딩을 하고 거기에 개선을 하기 위해서였다\n\n#### 리눅스라는 운영체제가 공개되어 있는 상황에서\n\nos를 바닥부터 만들필요없이 원하는 부분만 바꿔서 자신의 시스템에 도입하면 된다  \nos 에서 한단계 추상화가 생긴것이다  \n리눅스를 쓰고 싶지 않아하는 사람들도 있을 것이기에 리눅스를 보고 그것과 다른 무엇인가를 만들 수 있다  \n그렇다고 해도 그것은 리눅스가 공개되어있기에 가능한 것이다  \n이렇게 한 분야의 추상화 단계를 높이는 작업물을 만들어낸다면 세상의 발전에 기여하는 것이 되는 것 같다\n\n#### 개발자는 다른사람이 읽기 쉽도록 코드를 짜야하고\n\n비슷한 컨벤션 속에서 산다  \n같아지기 위해 노력하는 것처럼도 느껴진다  \n나만의 개성과 느낌을 살리려면 어떤 포인트를 살릴 수 있을까  \n기술직은 예술적이면 안되나?  \nart of programming 의 목차를 보자\n목차만 봤을 때는 컴공입문공학서적같다\n해커와 화가나 임백준님의 글을 다시 보자\n#behavior\n\n소프트웨어는 객체로 이루어진다\n\n소프트웨어는 객체로 남아있어도 되는 것인가?\n객체가 주체가 되려면 어떻게 해야하나. 인공지능을 가지고 스스로 뭔가를 하면 주체가 되겠지..\n\n#### 같이 일하고 싶은 개발자\n- 사람을 잘 이해하는 개발자\n- 배움을 계속 하는 사람\n- 대화가 잘되는 사람\n- 문제해결을 잘하는 사람\n- 긍정적인 사람(건강한 사람)\n- 다른 영역도 잘 이해하는 사람\n- 읽기 좋은 코드를 쓰는 사람\n- 서비스에 애착이 있는 사람\n- 코드에 이유가 있는 사람\n\n#### 같이 일하고 싶은 개발자\n\n예)\n신뢰를 잃지 않기\n나를 신뢰하는 거래처를 스무 군데 이상 발굴한다\n고객이 평가하는 신용 평가에서 A 등급을 획득한다\n주어진 업무를 데드라인 1시간 전까지 마무리한다, 미팅 시간 10분 전에 참석한다\n\n지배가치 : 같이 일하고 싶은 개발자\n장기 목표 :\n중간 목표 :\n세분화 :\n일을 하기 전 계획을 세우고 일을 하고 나서 돌아보는 작업을 꼭 하고 싶다\n-> 캘린더에 작업을 작성하고\n-> 작업 내용을 공유한다\n근데 업무가 딱 끝나는 경우는 없고 여러번 봐야한다\n\n#### 코드 줄 수가 적을수록 관리할 포인트가 줄어든다\n\n1000페이지의 코드보다는 100페이지의 코드가 관리하기 쉽다\n하지만 압축적이고 은밀한 코드를 남발하는 것보다는 풀어 쓰는 편이 낫다\n추상화를 잘 쓰면 좋지만 난독화가 되지 않아야 한다\n의미가 감추어지면 안된다\n추상화 속에 전제조건이나 종속성이 숨을 수 있겠다\n테스트코드를 먼저 적고 테스트 코드만 통과할 정도의 함수만 작성하고 문제가 생기면\n추가하는 방식으로 한다\n\n#### 다양하지만 넘치지 않는 함수\n\n다양한 케이스를 커버할 정도로 추상화시켜야 하지만 요구받지 않은 사항까지\n예상해서 만들면 안된다\n\n한 함수가 여러 상황은 커버하지만\n당장은 필요없는 함수는 만들 필요 없다라고 하면 좀 쉽네\n\n제네릭 프로그래밍과 정적 타입 언어가 동적 언어와 비슷한 걸 하려는 것 같다\n\n#### 세부적인 개발\n\n예를들어 ejs에서 html로 렌더링 하는 방법 같은 것은 아주 구체적인 부분이지만 딱\n그 영역에만 쓰이고, 기억에서도 금방 사라진다.\n그래서 구체적인 개발은 하다보면 되는거고 구조를 생각하는게 더 낫겠다고 생각해서\n지금의 공부를 하게 되었는데,\n\n이는 경험을 무시하는 것이 되었다.\n경험이라는 것이 그 분야를 익히는데에 성장을 많이 시켜주는데 세부적인 것은 까먹더라도 뭔가 남는다.\n\n한 곳을 깊게 파면 경험이 남는다\n근데 그 경험을 잘 남기는 방법도 생각해야겠다. 그냥 구현에 급급하면 경험마저 날아간다.\n\n#### 작업 처리라는게 이전에 8시간 만에 되었다고 다음에도 8시간에 되는 것이 아니다\n\n7시간 동안 생각하다가 1시간만에 구현되도 8시간이고, 1시간 생각 후 2시간 동안\n구현하다가 망해서 다시 3시간 생각하고 3시간 구현을 다시 해야 할 수도 있다.\n\n업무에 분명히 데드라인이 있으면 해결의지가 강해져서 완수될 가능성은 높아지지만\n안풀려서 데드라인 앞에서 급하게 정리한다고 적당히 수습해야 할 때도 있다\n\n적당히 수습을 잘하는 것이 능력일까? 데드라인을 잘 설정하는 것이 능력일까?\n둘 다 능력이 아니고 맞춰나가는 것이다.\n\n마무리는 없으니 짧은 단계를 순환시켜서 계속 발전시키는 방향으로 가면 좋겠다\n\n공수에 맞추지 말고 사이클 마감 시간의 기준으로 설정하면 되겠다\n8시간 공수면 한 사이클에 끝날수도 있고 3 사이클을 돌릴 수도 있고.\n\n일정 산출 기준을 이전 작업으로 잡고 할 수도, 내 기준으로 할 수도.\n\n#### 피드백 소프트웨어\n\napi 서버에서는 원하는 요청에 대해 기대하는 결과값을 설정해두고, 피드백 소프트웨어에서 확인하여 원하는 결과값이 안나오면 조절해주는 방식을 구현해보자\n\n#### 월간윤종신\n\n나만의 소프트웨어도 월(년)마다 내도록 계획하고만 있다\n\n#### 프로그래머의 취미를 프로그래밍으로 하는 것에 대하여\n\n프로그래머는 개발하는 것을 재밌어 해서 일 외에도 개인적으로 프로젝트를 하곤 한다\n\n신입으로 들어갔을 때 회사의 스택에 빨리 적응하기 위해 집에서 공부를 하는 경우도 있다\n\n하루의 대부분을 하나의 작업을 계속 하는 것이 다소 답답하게 느껴진다\n공간의 분리처럼 일과 생활의 분리, 관심사의 분리가 가져오는 장점이 있을 것이고,\n하나에만 집중함으로써 깊게 파고드는 것의 장점도 있을 것이다\n\n좋아하면 하게되고 하다보면 새로운 것을 알게되고, 더 깊게 알게 되고, 알게 된 것들을 내 방식대로 바꿔보기도 하고, 새로운 것을 만들어 보기도 한다\n\n퇴근 후에 개발을 하지 않아도 모든 경험이 개발과 연관될 수 있으니까 쫓길 필요 없다. 단지 생각난 것을 개발로 바로 나타내고 싶을 때 바로 접근할 수 있도록 해야겠다\n\n삶과 개발이 나란히 있는 삶이 되어, 무엇을 하든 상관 없어지는 경지가 되면 좋겠다\n\n#### 단순한 것을 연결하는 것이 우아하다\n\n유닉스의 철학처럼 단순한 것들을 연결(파이프)하여 복잡한 것을 구현하는게 우아하다\n특정한 상황을 위한 복잡한 것을 만들어내는 것은 우아하지 않다\n그래서 코드짤때 너무 한 작업이 커지면 찝찝해졌던 것이다.\n\n#### 데이터베이스 정규화\n\n검색이 쉽도록 정규화를 하는 방식이 정리되어있는 컨벤션이 있다\n\n#### 어떻게 하면 서비스하기 좋은 소스를 작성할 수 있을까\n\nnpm 에 올라가 있는 라이브러리들을 참고해서 사용하기 좋은 코드형태가 있을지 확인해봐야겠다\n종류가 다양하게 있을 것이긴 하다\n- golang 라이브러리 참고\n- axios\n\n#### 키네시스\n- 파티션은 나누고 청크를 천개로 하면 좋을까?\n- 지금 입력 실패하면 재시도 하나?\n- 근데 처음에 시도했던게 파티션을 나눈 건데, 이건 on demand의 용량을 초과해서 그런가? 각 메시지의 크기가 커서 그런가?\n- 키네시스가 입력받을 수 있을 때 입력하게 할 수 있을까?\n- 업데이트 실패 시 다시 시도할 수 있는 상황\n- 발송완료 상태로 업데이트가 안됐으면 다시 검색할 때 걸리나?\n\n\n## 개발\n\n#### 가려움을 해결한 방법 1\n\n프로그램이 세이프티하게 돌아갈 수 있느냐에 대한 확신이 없었다\n분명히 동작을 하다가 안전하지 않은 상황이 닥칠 것 같다는 불안감이 있었다\n그리고 프로그램이 깔끔하게 잘 짜졌다는 생각이 전혀 들지 않았다\n이런 문제들이 계속 나를 압박하고 있을 때…\n리팩토링을 다시 생각하게 되었고,\n안전에 대한 부분은 문제가 될만한 부분들을 예측해서 에러가 발생하게 되면 초기상태로\n최대한 돌리는 방식으로 프로그램을 수정하기로 했다.\n일단 해야될 것들을 다 작성한 후, 리팩토링을 지속적으로 해서 더 나은 프로그램을 만들어야 한다\n한번에 작성되는 프로그램은 없는 것 같다\n기존 프로그램은 동작 중 에러가 발생할 경우 초기상태로 되돌리는 코드가 있었으며,\n동작 전에도 위치를 확인함으로써 제품의 불량이 나는 것을 최우선적으로 막은 것 같다\n이를 계속 신경써야 하고, 리팩토링도 열심히 해야한다.\n\n#### develop\n\n- 어떻게 구동되는지\n- 어떻게 효율화할건지\n- 어떻게 보기 좋게할건지\n- 어떻게 피드백이 잘 되게 할건지\n\n#### 개발을 하는 경우\n\n일단 재밌어 보이면 해보는 경우\n목차화를 해서 전체 흐름을 잡고 해보는 경우\n해야할 목표가 있어서 그것을 해야할 경우\n문제해결을 위해 문제정의를 하고 처리하는 경우\n\n#### Safety programming\n\n- Inner network only is safe? Every service has lots problem\n- And it has used to user and responsive complain\n- After that. Service is better than previous one.\n- How to make program to same as it.\n- Only accept have a certificate paper user system. Is it security?\n\n[[Coding]]\n\n#### 테스트 케이스를 처음부터 최대한 적으려다 포모도로 프로젝트가 망했다.\n\n필요한 기능을 확인하는 용도로 먼저 쓰고, 살을 붙여 나가는 방식으로 하자\n\n함수는 하나의 동작\n클래스는 하나의 변경 이유를 가진 객체\n폴더는 하나의 의미\n프로젝트는 하나의 목표\n\n## 글쓰기\n\n#### 프로그래밍과 [[글쓰기]]의 상관관계\n\n코드를 읽는 것은 책을 읽는 것과 비슷한 것 같다. 한 줄 씩 읽다보면 내용이 보인다\n그런데 요즘의 프로그래밍 흐름은 책 읽는 방식과 달라지고 있다. 함수형\n프로그래밍의 대두와 객체지향형 프로그램에서 부터 시작된 코드의 클래스화, 모듈화,\n소형화가 코드의 가독성을 좋게 해주고 유지보수에 이점이 있다고 받아들여지고 있다\n\n프로그래밍을 문학적으로 표현하면 위험하다\n평소에 사람들이 느끼지만 언어로 표현하지 못했던 것을 작가의 특별한 언어로 그것을 떠올리게 해주는 것이 내가 좋아하는 문학적 표현인데, 이런 문학적 표현이라면 코드를 읽으면 뭔지 느낄 수 있어서 괜찮겠다 싶기도 하다. 이 문학적 표현은 현학적 표현은 아니니까\n\n이걸 생각하다보니 예술, 문학이 관찰과 발견의 기능을 할 때가 좋은 것 같다. 예술의 목적이 이것뿐인건 아니지만 일단 이런 발견의 순간은 대체로 짜릿했던 것 같다.\n\n#### Refactoring is like a revision\n\n#### program is different with journaling\n\nprogram haven't finish, journaling is.\nso program is need refactoring anytime.\nit is no defeat. it is strength.\n\n#### 코드는 절차지향에서 객체지향으로 오면서 책과 쓰이는 방식이 달라졌지만\n\n읽기 좋아야 한다는 점은 여전히 중요한 가치다\n\n읽기 좋은 코드는 책처럼 쓰여진 코드가 아닐까\n객체화 된 코드를 어떻게 책처럼 읽히도록 할 수 있을까\n\n코드는 파일, 폴더, 프로젝트의 구조로 되어있다\n참조해야 되는 객체가 있는 파일은 같은 폴더에 있을 수도, 외부에 있을 수도 있다\n\n#### 인쇄를 통해 정보를 많은 사람이 전달 받을 수 있게 됐다\n\n그리고 웹을 통해 더 많은 전달\n\n#### 문맥\n\n문맥을 알아야 내용을 잘 이해하는 것은 코드나, 언어나 마찬가지인데, 어떻게 하면 문맥을 잘 공유할 수 있을까?\n\n#### 글쓰기 가이드\n\n개발자를 위한 글쓰기 가이드 목차 체크리스트로 활용\n\n명확성 간결성 일관성\n\n독자를 정한다  \n깊이 조절  \n어조 분위기  \n주제  \n문서의 종류\n\n#### 퇴고의 끝, 출판의 시작\n\n창작을 할 때도 퇴고를 하다가 계속 할 수는 없고 출판을 해야하는 순간이 있다\n하루키는 출판이 되면 이제 더 바꾸고 싶어도 독자에게 넘긴다고 한다\n\n개발할 때도 설계 단계에서 처음에 생각난 것에서 살을 붙이는 것을 전제로 하더라도\n처음 생각난걸로 바로 시작하기 보다 설계를 좀 더 다듬고 시작하려고 한다\n근데 아무리 좋은 설계도 수정할 부분이 생기기 마련이라 애자일이 요즘 방식으로 쓰이고 있다.\n그렇다고 최초 설계를 짧게 가져가고 바로 시작하는 것도 다소 아쉬운 부분이 있는데,\n최초 설계의 기간을 어느정도로 잡는게 좋을까\n하다보면 좋은게 생각날 수 있음은 분명하지만, 방향설정은 필요한가\n이번 개발에서 메시지, 메시지 히스토리를 구상한 것 자체가 의미 있는 것이었나, 그 세부 컬럼도 오래 생각한 것이 도움이 되었나?\n얼마나 생각하고 시작해야 하나\n\n생각은 하루를 넘기지 않는게 좋지 않을까\n\n하루가 중요한건 아니긴 함\n\n쭉 나열해서 일어날 상황을 그려보는 작업은 필요할 듯\n\n#### 개발하면서 생길 수 있는 미래를 구축하는 문학\n\n짜여진 틀에 맞추는 것에 대한\n\n의문문으로 책을 전체로 해서\n\n억지인 부분이 있지만\n그래도 내가 꺼내놓지 못할 것들을 꺼내도록 도와주는 장치로 틀을 이용하는 점을 부각\n틀이 책에서 목차의 역할이라고 볼 수도 있다\n목차를 상정해놓고 글을 쓰면 흐름이 잡힐 수 있다\n정해진 내용만 쓰는게 아니라, 이렇게 정해놓지 않았으면 꺼내지 못했을 이야기를 꺼낼 수 있도록 끌어내주는 역할\n\n기획과 개발에 대해 이런식으로 스토리텔링하는 것들은 있었다\n#todo\n\n\n\n\n## Regacy\n\n#### 기존 리소스 활용 최대화\n\n프로젝트 관리 툴 있다\n고객 관리 대시보드 있다\n회사 직원 관리 대시보드 있다\n깃헙 관리 대시보드 있다\n프로젝트들을 관리하는 대시보드도 있다\n\n프로젝트를 하면서 쌓인 리소스를 활용하고 싶다\n메타 프로젝트 관리 툴도 분명 있을 것이다\n근데 없다. 잘 안찾아진다\n소스코드도 활용하고, 서비스로 만들어진 것도 다시 활용할 수 있고\n기존 서비스에 접근해서 쓸 수도 있고\n간단한 함수를 가져와서 쓸 수도 있고\n설정파일 가져와 쓸 수 있고\n컨테이너 이미지 가져와 쓸 수 있고\n\n#### 레거시의 가치, 소중함과 한계\n\n개발자는 방금 작성한 코드도 모두 레거시로 느껴진다\n\n기존의 프로그램을 개선하는 것보다 아예 새로 짜는 것을 좋아한다\n하지만 새로 짜는 것이 기존 코드를 넘어서기는 아주 힘든 일이 될 수도 있다\n새로 짜는 것은 자기 마음껏 할 수 있는 부분이 늘지만 기존의 문제 해결을 모두\n따라가야 하는 작업량의 압박도 있다.\n모든 것을 새로 시작하는 것은 깔끔하고, 얽매는 것도 없어 마음이 편하다는 밝은\n면이 있지만, 또 다른 레거시를 쌓는 작업이 될 수 있다.\n\n레거시는 계속 쌓이게 되고, 그래서 처음부터 클린 코드를 염두에 두고 짜는 것이\n좋은 소프트웨어를 위해서는 필요하다.\n\n소프트웨어 개발에서 프로그래밍은 여러 축 중 한 축이고 코딩은 프로그래밍의 한 축이다\n코딩이 프로그래밍의 전부는 아니지만 중요한 부분이고, 잘해야 되는 부분이다.\n코더라고 비난하기도 하지만 코딩이라도 잘하는 사람이 더러운 코드를 짜는\n아키텍처보다는 나을 수도 있겠다\n코딩에만 몰두하고 디자인에는 신경 안쓰는 것도 문제지만 코드를 쉽게 생각하고,\n코드도 못짜면서 다른 부분을 하려고 하냐고 하는 것은 개발에 대한 회의를 일으킨다\n\n#### original program vs new program\n\n어떤 것을 위해 프로그램이 만들어지면 그것에서 더 필요한 기능을 느끼고 새로\n기능을 추가하여 프로그램을 만들어 기존 프로그램보다 매력적이게 된 프로그램이\n있고\n원래 프로그램이 믹강한 기술을 가지고 있어 새로 생긴 것들이 영향력을 못 일으키는\n경우도 있다.\n\n전자인 경우에서 새로운 기능을 가진 프로그램을 어떻게 찾고 어떻게 기능을 써볼 수\n있을까? 계속 모니터링 할 수도 없는 노릇인데... 키워드로 알림을 만들어 놓아야\n하려나\n\n#### Regacy\n\n기존양식 사용하는게 마음에 안드는 이유\n내가 필요해서 만든 항목이 아니 와닿지 않는다\n\nSWOT같은 분석 방법론이 마음에 안드는 이유\n그 안에 들지 않은 더 중요한 내용을 놓치고 있는 것 같아서\n\n공통\n일일이 기억할만큼 통찰력 있는 내용이 아닌 것 같아서\n#collection\n\n\n#### 생각난걸 바로 만들고 점점 개선시키려면\n\n바로 만드는 것이 빨라야 한다 -> 템플릿\n개선 -> 변화하기 쉬운 간단한 형태여야 한다\n\n#### 구글은 그들의 사이드 프로젝트를 어떻게 관리하나?\n\n그냥 사람들 입소문으로 전달하나\n레포지토리에 묶여있나\n새로운 툴을 만들어서 관리하나\n\n검색 시 너무 많은 데이터가 문제라면\n필터를 많이 만들어서 노이즈를 제거하고 필터를 조금씩 푼다\n\n적은 데이터라면 비슷한 영역을 캐치한다\n\n#### 쿠팡이 자체적으로 만든 서킷브레이커와 api gateway\n\n직접 만든 사람들이 관리할 때는 잘 돌아가겠지만 사람이 바뀌면 기존 서비스보다 잘 돌아갈지는 의문이 든다\n메뉴얼이나 구조가 잘 만들어져있으면 더 쉽게 관리가 되겠지만.\n\n에러 감지 시스템에서 반복되는 오인식은 정인식이 되었을 때 무심코 넘기게 하는 사람이라서 생기는 문제가 있다\n기계의 문제 + 사람의 문제이긴 하다\n\n사람이 유연한 대처가 가능하지만 사람에게 어느 역할까지 맡겨야 좋을지는 모르겠다.\n사람과 기계가 잘 상호작용이 이루어져야 할텐데\n\n#### 그동안의 리소스를 이용하는 것 vs 리소스와 별개로 새로운 것을 만드는 것\n\n쌓고 쌓는 방식은 혼잡성을 증가시키고 옛날 것이 묻힌다\n\n모듈 방식은 마이크로서비스. 이 또한 혼잡성을 증가시킨다\n\n- 내가 kustomize를 안쓰고 싶어하는 이유가 기존의 리소스를 활용하지 않고 독자적인 것으로 만들어져서 너무 국소적이고, 나만 쓰게 될 것 같고, 새로운 것을 외워야하는 느낌이 들어서인데, 회사용 툴을 만들게 되면 이런 느낌을 주지 않을까\n\n#### CRUD\n\n기존에는 생성, 수정, 삭제, 조회 모두 API로 요청을 받아 처리하고 응답을 보내고 있었습니다. 하지만 분리를 하며 다음과 같은 이유로 조회를 제외한 나머지 동작들은 모두 이벤트로 동작하도록 수정했습니다.\n\n- 조회 외에는 응답을 받을 필요가 없다.\n- 조회 외에는 실시간으로 처리가 될 필요가 없다.\n- 이벤트 방식으로 구현하면 외부 서비스의 의존성을 격리 시킬 수 있다.\n  https://blog.dramancompany.com/2022/01/java-기반의-알림-서비스로-msa-전환기/\n\n#### ETC\n\nhttps://news.hada.io/topic?id=9723\n소프트웨어 개발의 가장 어려운 점은 코딩이 아니라 요구사항\n\nai 가 잘 할 수 있는 것. 잘 모른다. 데이터로 할 수 있는 것. 많은 시간이 필요한 것?\n\n세부적인 디테일이 아니라 큰 범위에서의 디테일도 있을 수 있다?\n\n- 프로덕트 디자이너는 \u001e프로그램 내부를 알 필요 없이 자신이 아는 추상화된 부분에서 작업을 한다\n\n소프트웨어에서는 한 동작을 바꿀 때 다른 동작이 영향을 적게 받게 하는 것이 좋다\n\n#### 어떻게 정보를 공유하고 확산하는 것이 효과적일까\n\n건물 붕괴 사고 후 법이 개정되면 하도급 업체까지 그 정보를 다 알 수 있을까?\n새로운 무엇인가가 나오면 그것에 대해 어떻게 알 수 있을까? 관리자가 따로 있다면\n그 사람은 새로운 것을 계속 확인해야하니까 알 수 있다고 해도 일반 노동자들이 그\n새로운 정보를 계속 확인하지는 않을 것 같다. 그렇다고 정부 사이트에 새로운\n소식들을 계속 올린다면 정부페이지만 확인하면 된다는 인식을 가지고 확인할 수\n있겠지만 정부 사이트에 올라오는 글들이 너무 많아지면 정작 자신에게 필요한 정보를\n못 찾을 수도 있다.\n\n\n\n\n\n#### why I choose this company\n- vision can growth with me\n- skill set is what I want to improve\n    - large scale traffic\n- industry is interest to me\n- 내가 원하는 기술을 쓰는 회사\n- 내가 해보고 싶은 것을 하는 회사\n- 좋은 아이템과 좋은 사람을 가지고 있는 회사\n- 좋은 사람은 공유하는 글, 채용 프로세스(사용하는 기술도 여기 있다)로 파악, 좋은 아이템은 회사 소개에 항상 있다\n- 좋은 실적까지 있다면 금상첨화\n[[Economics]]\n\nwhat is the condition that selects the company state?\n1. trendy\n2. I want to challenge a pair programming\n3. I want to manage a lot of people used service\n4. I want to deploy for big traffic stream infra\n- 회사가 가진 매력을 알고 싶다\n- 같이 일할 팀원들이 어떻게 일하는지 알고 싶다\n- 회사의 분위기\n\n#### 이 회사에서 할 수 있는 것\n\n일을 처리하는 능력 (계획 실행 확인)\n주변사람의 장점을 파악해서 그 장점을 내 습관으로 만들고 안좋은 점은 피하는 삶을 산다\n\n존경할만한 사람이 있는 회사에 취직해라\n\n- 지금 직장은 존경하고 배울것이 많은 회사이다.\n  형들과 얘기를 많이 하면서 많은 것을 가져와야겠다.\n  배울 수 있는 것들을 최대한 이끌어 내야 한다.\n\n- 회사의 지식과 정보를 다 데이터화 시켜놓자\n- 홍보는 제품을 소개하면서 회사도 소개시켜야 한다\n- 글을 볼 때 글을 쓴 사람을 알게 되면 내용에 더 집중하게 된다\n"},{"headings":[{"value":"TOP 8"},{"value":"8가지 개발 요소"},{"value":"개발자의 8가지 체격훈련"},{"value":"넷플릭스 no rules rule"},{"value":"대화 8가지"},{"value":"나의 장점"},{"value":"개선할 점"},{"value":"하고 싶지 않은 말"},{"value":"조크"},{"value":"자기중심적과 중심이 없는 것"},{"value":"사기가 일어나는 분야를 찾아보자"},{"value":"영화나 드라마에서 악당의 보스를 따르는 충실한 부하들의 동기 조사"},{"value":"오셀로의 이아고처럼 정직한 '척'하는 사람을 어떻게 구별할 수 있을까"},{"value":"사람들의 인식을 확 바꾸게 된 사건들은 무엇이 있을까"},{"value":"궁금했지만 찾을 수 없던 것들"},{"value":"최초가 시장을 지배하는 사례"},{"value":"한쪽이 독점해서 대체제가 힘을 못쓰는 경우"},{"value":"신우석 감독 인터뷰"},{"value":"good app"},{"value":"오덕후들 모음"},{"value":"same area word"},{"value":"[[Math]]"},{"value":"[[Software]]"},{"value":"가로, 세로"},{"value":"review"},{"value":"국내 전자기기 리뷰 커뮤니티 (매일 게시물이 올라오는)"},{"value":"kind of sort"},{"value":"filter"},{"value":"리스트를 보여줘야 한다면 편의성을 위해 반드시 필요한 것"},{"value":"태그를 잘 활용해보자"},{"value":"아카이빙 시스템"},{"value":"text manipulation"},{"value":"업데이트 알림 봇"},{"value":"별점 > 좋아요"},{"value":"suggestion"},{"value":"스토리 없는 단순 나열은 아무리 핵심만 담겨있다고 해도 쓸모가 없다"},{"value":"중간단계를 추가함으로서 이득을 보는 경우"},{"value":"경계"},{"value":"엣지 케이스를 찾는 방법"},{"value":"예외상황을 모으고 싶다"},{"value":"major architecture"},{"value":"어려운 문제"},{"value":"자연스럽게"},{"value":"자연을 신경써야 하는 스포츠"},{"value":"사람의 한계"},{"value":"비동기"},{"value":"awesome snippet"},{"value":"facebook 설치 시 가입할 커뮤니티"},{"value":"코로나"},{"value":"한 브랜드를 분석하여 A-to-Z를 알아볼 수 있는 잡지"},{"value":"투자가 필요하지만 좋은 툴들"},{"value":"좋은 이름의 기준 s.m.a.r.t"},{"value":"대발견"},{"value":"marketing"},{"value":"쓰고 있는 서비스"},{"value":"회원가입 된 서비스"},{"value":"하루 일과 카테고리"},{"value":"토론에서 잘 진행하는 방법"},{"value":"VS"},{"value":"자연의 프랙탈"},{"value":"실제 물체의 속성으로 구현하는 게 좋을까 (테트리스의 블록을 구현) (추상화)"},{"value":"바퀴 재발명 vs 자체 기술 구축"},{"value":"타이어를 다시 발명할 필요는 없다"},{"value":"가비지 컬랙터"},{"value":"직군별로 나눈 팀과 소프트웨어 단위로 나눈 팀"},{"value":"소프트웨어의 단순성과 완전성"},{"value":"컴퓨터가 기존 인간 시스템(휴지통) vs 컴퓨터 자체의 새로운 시스템"},{"value":"개인정보보호 vs 데이터활용"},{"value":"stable"},{"value":"업무 중 문제가 발생했을 때 해결이 안되면"},{"value":"전담팀 vs 융합팀"},{"value":"규모별 대응법이 다르다?"},{"value":"국가와 회사는 다르다"},{"value":"전체적으로 떠오른 것이 생기면 기능 상관없이 구현하는 방식"},{"value":"소프트웨어에서 창의성이 발휘되어야할 영역"},{"value":"철저한 계획 vs 상황에 맞추기"},{"value":"내성 vs 늘 새로운 고통"},{"value":"얕보이면 안되는 경우"}],"fields":{"slug":"/collection/"},"rawMarkdownBody":"\n## TOP 8\n\n#### 8가지 개발 요소\n\n모듈화\n확장성\n복구가능성\n변화대응\n응집성\n일관성\n추상화\n\n#### 개발자의 8가지 체격훈련\n\n야구선수에게는 체력, 구질관리, 운.\n개발: 논리력, 연상력, 문해력, 관찰력, 집중력, 호기심\n\n#### 넷플릭스 no rules rule\n- 넷플릭스의 9가지 가치 기준\n\t- 판단\n\t- 호기심\n\t- 소통\n\t- 혁신\n\t- 효과\n\t- 용기\n\t- 열정\n\t- 정직\n\t- 이타적 행동\n\n#### 대화 8가지\n\n- 비판 대신 진취적 개선 - 아까 본 박명수의 모자란 형이 있으면 도와주라는 짤과 일맥상통한다\n- 다른 사람의 감정을 살피자 공감 후 내 생각 말하기\n- 남의 장점을 잘 말해주기 - 칭찬봇이 되자\n- 좋은 문장을 외워두기\n- 양해를 구하고 얘기를 시작한다. 낮은 자세\n- 멍청해보이는걸 두려워하지 말자\n- 고정관념을 피한다\n- 그림 그릴 수 있게 직관적으로 쉽게 표현한다\n\n#### 나의 장점\n\n- 휩쓸리지 않음\n- 침착함 - 이슈해결을 적절하게 잘한다. 근본원인을 찾으려고 하고 대처를 빠르게 한다\n- 일확천금보다 꾸준함을 선호함 - 인생의 경험을 축적하고자 함\n- 계획적이지만 유연함\n- 최소한의 자원으로 해결하려 함\n- 낙관적으로 세상을 바라본다 - 세상이 점진적 개선할 것이라 생각함\n- 다른 입장, 사람을 이해하려고 한다\n- 정적인 것, 동적인 것 다 적당히 즐김\n\n#### 개선할 점\n\n- 여유를 가져야함 - 얕보이면 분노함\n- 저열함 - 사람의 급을 나눔\n- 남의 시선이나 평가에 의연함 - 라고 생각했으나 많이 눈치를 보고 있다. 원래 눈치를 많이 본 거 같다\n- 회피하려고 할 것 같음\n- 행동부터 하는거\n- 섬세하지 않은거\n- 잘 안알아보고 일단 쓰고보는거\n- 근거없이 기술적 결정 내리기\n\n#### 하고 싶지 않은 말\n\n어쩔 수 없다\n불가피하다\n그냥\n어쨌든\n하는 수 없이\n좋았다라는 표현 대신 다른 표현을 하고 싶다\n\n#### 조크\n\n말이 해를 보면  \n그냥 해본 말이에요..\n\n혀가 거짓말을 하면  \n전혀 아닌데요?\n\n부엉이가 헤엄칠 때 어케 하는지\n첨부엉 첨부엉\n부엉이가 물에 빠진 이유는?\n덤부엉대서\n\n스님이 항상 희망을 갖고 살아야하는 이유는?\n안그러면 절망하니까\n\n## 자기중심적과 중심이 없는 것\n자신이 기준이어야 하는 것\n- 상대방에 맞추기 위해 행동할 필요 없음\n- 나의 가치\n- 선택\n- 다른 사람의 이상한 모습\n- 감정\n- 죽음\n- 예술\n- 다른 사람에게 향하는 질투 => 목표치 설정은 자신의 기준으로 가야한다\n- 나의 플레이를 해야한다\n- 그 나이에 해야하는 행동이라고 사회에서 얘기하는 것\n\n남이 기준이어야 하는 것\n- 대화\n- 감정\n- 상대방도 노력하고 있음을 알아야함\n\n## 사기가 일어나는 분야를 찾아보자\n\n- 거래\n\n## 영화나 드라마에서 악당의 보스를 따르는 충실한 부하들의 동기 조사\n\n#### 오셀로의 이아고처럼 정직한 '척'하는 사람을 어떻게 구별할 수 있을까\n\n## 사람들의 인식을 확 바꾸게 된 사건들은 무엇이 있을까\n\n## 궁금했지만 찾을 수 없던 것들\n\n- 아에로플로트 모바일 보딩패스 사용가능한지\n  - 사라매테예보공항 새벽에 (8시 비행기) 교통 수단 원활한지\n- lg유심을 끼우면 아이패드에 락이 걸릴 수 있나?\n  - lg가 아닌 기기에 끼우면 부작용이 있나?\n  - 통신사별 유심 호환\n  - 아이폰 안드로이드 유심 호환\n\n## 최초가 시장을 지배하는 사례\n\n- 의약품\n\n반대사례\n\n- 애플\n\n#### 한쪽이 독점해서 대체제가 힘을 못쓰는 경우\n\n카카오톡?  \nspc?  \n유튜브?\n\n#### 신우석 감독 인터뷰\n\n[https://publy.co/content/2711?fr=chapter-text](https://publy.co/content/2711?fr=chapter-text)  \n기존의 생태계를 따르지 않은 예제  \n그렇지만 영상매체라는 것의 생태계에는 접해있다\n#collection [[Standard]]\n\n## good app\n\n- netflix - valuable content\n- goodnote, notability\n- grammerly\n- bear\n- fotmob\n- korailtalk\n- what is good?\n- design\n- useful\n- function\n- easy\n\n## 오덕후들 모음\n\n20년간 애니메이션 음향효과를 담당한 전문가\n\n- 음향의 덕후\n\n## same area word\n\n#### [[Math]]\n\n명제\n정리\n론\n설\n이론\n법칙\n\n#### [[Software]]\n\n요소\nelement\n인자 argument\n객체 오브젝트 object\n애트리뷰트 attribute\ninstance\nclass function interface struct\nproperty\n속성\n파라미터\nentity\nscheme\n\n#### 가로, 세로\n\n- row, column\n- horizontal, vertical\n- width, height\n- 종, 횡. 자주 사용하는 표현이 가로 세로 순서가 반대로다. 통일하려면 횡,종이 된다\n- 오, 열도 반대네\n\n#### review\n\n고찰, 리뷰, 사용기, 후기,\n\n는 입니다\n\n- 펜\n- 블루투스 키보드?\n\n#### 국내 전자기기 리뷰 커뮤니티 (매일 게시물이 올라오는)\n\n클리앙\nunderkg\n기글하드웨어\n미니기기코리아(meeco)\n퀘이사존\n\n그 외 커뮤니티 내 게시판\n개드립\n펨코\n루리웹\n뽐뿌\n\n사이트\n더기어\n노트포럼\n블로그\n유튜브\n쇼핑몰(다나와, 11번가, 지마켓)\n꿀리뷰\n\n#### kind of sort\n\n- most viewed\n- most related\n- 이미지별 정렬\n- 태그별 정렬\n- 각 속성값별 정렬\n- 큐레이션\n- 유의어\n- 시간\n  - most new\n  - created\n  - updated\n- 공간\n- 알파벳순\n- 길이순\n\n단순 나열은 데이터로서의 가치만 있다\n정보전달을 위해서는 필터링을 해야 한다\n특히 짦은 시간 안에 전달하려면 더더욱\n\n#### filter\n\n- google search filter\n  - `\"<keyword>\",<keyword1> | <keyword2>, -<keyword>, <keyword> * <must keyword>`\n  - `<2020>..<2021>`\n- 노션의 데이터베이스 필터\n- 빅데이터 대시보드의 화면 구성\n- cncf 전체 조망도 사이트인데 필터링이 잘 되있다\n  - https://landscape.cncf.io/card-mode?grouping=no&license=open-source&sort=first-commit\n\n#### 리스트를 보여줘야 한다면 편의성을 위해 반드시 필요한 것\n\n전체 개수 알려주기\n필터로 검색할 수 있게 하기\n\n#### 태그를 잘 활용해보자\n\n태그 활용 사례들을 살펴보자(aws, bear)\n태그를 잘 활용하도록 돕는 서비스를 찾아보자\n\n#### 아카이빙 시스템\n\n방송국, 경찰서, 법원, 출판업계\n\n#### text manipulation\n\n- gpt3를 이용해서 원하는 주제의 책을 검색할 수 있을까\n- 베이지안 필터로 제목을 읽어 카테고리를 설정할 수 있다\n- 구글에서 인덱스, 링크 가중치,\n\n#### 업데이트 알림 봇\n\n신간 알림\n소프트웨어 업데이트 알림\n최저가 알림\n재고 알림\n등 알려줘야 할 것들이 많은데 이를 한 곳에서 관리하고 쉽게 추가할 수 있는 것이\n필요하다.\n개인마다 추가를 할 수 있도록 하고, 플러그인으로 기능을 추가할 수 있어야겠다.\n\n- [쿠팡 가격 하락 알리미](http://m.ppomppu.co.kr/new/bbs_view.php?id=social&no=25567)\n- [신간 서적 알림 봇](https://github.com/overworks/aladin-newbook-notifier)\n\n#### 별점 > 좋아요\n\n별점은 정보가 부족하다. 좋아요보다 선택지가 많음에도.\n\n#### suggestion\n\n- recently update document\n- related document with this document\n- related document with interests\n\n#### 스토리 없는 단순 나열은 아무리 핵심만 담겨있다고 해도 쓸모가 없다\n\n#### 중간단계를 추가함으로서 이득을 보는 경우\n\n외부 api 호출 시 호출하는 부분을 감싸는 경우\n\n#### 경계\n\n우주와 지구의 경계 카르만 라인(80~100 정해진 것 없음)\n\n#### 엣지 케이스를 찾는 방법\n\n경계선 확인\n\n#### 예외상황을 모으고 싶다\n\n색맹\n시각\n청각\n언어의 차이\n문화의 차이\n사용 환경의 차이\n배경 지식의 차이\n업무 배경의 차이\n전기\n인터넷\n\n#### major architecture\n\n노하우들을 잘 공유해주는 업체\n\n- line\n- netflix\n- instagram\n- airbnb\n- naver d2\n- nexon ndc\n- kakao\n- spoqa\n- google?\n\n#### 어려운 문제\n- 급증하는 복잡성\n- 복잡한 이해관계\n- 양립할 수 없는 가치관에 따른 상황 (가족이 먼저냐, 국가가 먼저냐)\n- [[#개발#프로그램에서 어려운 문제]]\n\n## 자연스럽게\n\n비규칙적\n사는데 적당한 온도가 있다\n싸이클\n프랙탈 구조\n작은 것이 모여 큰 하나를 이룬다 (원자 - 생명체)\n\n- 소프트웨어도 0과 1이 모여 하나의 소프트웨어가 된다\n\n숲, 물, 하늘\n풀, 나무, 초록색의 이미지가 있다\n\n춥지도 덥지도 않은 따뜻함\n자연에서 찾는 중용\n차갑지도 뜨겁지도 않은 따뜻함, 시원함\n\n리듬을 글에 싣는다\n음악은 자연스러운가?\n예술은 자연스러운가?\n[[Journal]] [[../Develop]]\n\n#### 자연을 신경써야 하는 스포츠\n\n양궁\n골프\n\n#### 사람의 한계\n\n까먹는다\n감정이 들어간다\n외면한다\n\n[[About_Development#VS#자연의 프랙탈]]\n\n#### 비동기\n\n큐\n동시작업\n우체국\n\n코드리뷰 풀리퀘스트\n\n- 작업이 밀리면 지치게된다\n- 나중에 몰아서 하려면 힘들다\n- 놓치고 지나갈 수 있다\n- PR이 너무 많은 내용을 담고 있으면 보기 힘들다\n\n#### awesome snippet\n\n```\n// internal function to find the correct place for a node in a tree\nfunc insertNode(node, newNode *Node) {\n if newNode.key < node.key {\n  if node.left == nil {\n   node.left = newNode\n  } else {\n   insertNode(node.left, newNode)\n  }\n } else {\n  if node.right == nil {\n   node.right = newNode\n  } else {\n   insertNode(node.right, newNode)\n  }\n }\n}\n```\n\n> wow...\n\n```\n# 먼저 조건을 확인하고 (제약사항 체크), 실제 해야할 동작을 쓰는 패턴\nif (condition1) return (doSomething1)\nif (condition2) return (doSomething2)\nif (condition3) return (doSomething3)\nif (condition4) return (doSomething4)\n\ndoWorking\n```\n\n#### facebook 설치 시 가입할 커뮤니티\n\n- [ ] https://www.facebook.com/groups/earlyddorai/\n      awskrug\n      opentutorials\n      ...\n\n---\n\n:행동:input:\n\n[[About_Development#VS]]\n\n#### 코로나\n\n헬스\n도서관\n축구\n모임\n\n#### 한 브랜드를 분석하여 A-to-Z를 알아볼 수 있는 잡지\n\n매거진 B\n\n#### 투자가 필요하지만 좋은 툴들\n\n데본씽크\n1Password\n\n#### 좋은 이름의 기준 s.m.a.r.t\n\n- search\n- mix\n- agree\n- remember\n- type (typing)\n  #develop\n\n#### 대발견\n\n우주밀도, 우주의 질량이 우주팽창속도를 없앨 정도로 크지 않다는 것이 현재까지의 관측.\n만약 우주를 채우는 물질이 새롭게 발견된다면 큰 변화가 된다\n\n강력,약력,전자기력의 양자역학, 중력의 상대성이론을 통합하려는 시도. 이것이 성공하면 우주 탄생의 신비에 한 발 다가갈 수 있다\n\n#### marketing\n\n마케팅의 4P\n\nproduct, price, place, promotion\n\n#collection\n\n#### 쓰고 있는 서비스\n\n회사\n\n- 구글 드라이브\n- 아사나\n- 컨플루언스\n- 재플린\n- axure\n\n개인\n\n- 구글 드라이브\n- 텔레그램\n- 카카오톡\n- 지메일\n- 네이버메일\n- 구글 캘린더\n- 트위터\n- 깃헙\n- 구글 애널리틱스\n- 구글 킵\n- IFTTT\n- rsync\n- 구글 포토\n- 원노트\n- CloudFlare\n- Netlify\n- 포켓\n- 피들리\n\n쓰기 좋을만한 툴\n\n- 브라우저 확장 프로그램\n- GIPHY\n- 사진 생성기\n- toggl\n\n#### 회원가입 된 서비스\n\n구글\n네이버\n페이스북\n애플\n페이팔\n\n#### 하루 일과 카테고리\n\n업무\n여가\n계발\n소비\n생활\n\n#### 토론에서 잘 진행하는 방법\n- 이기는게 아니라 같이 이야기를 진행시키는 방향?\n- 최악의 케이스와 최상의 케이스의 중간 정도의 의견 제시\n- 변증법, 상대에 대한 배려, 다름을 인정\n- 생각하는 동안 쓸 수 있는 멘트 기계처럼 튀어나오면 좋겠다\n- 곤란한 상황에서 빠져나오기 급급하게 말하기보다는 새로운 화두를 제시\n- 반대입장에 이입하여 반대의견을 제시해서 논파\n\n\n## VS\n\n#### 자연의 프랙탈\n\n소프트웨어는 자연의 섭리대로 따라가는게 좋을까\n소프트웨어의 장점인 인조적인 것을 쭉 밀고가는게 좋을까\n\nOS가 처음 만들어질 때 사람 기준으로 구성하는 것과 새롭게 컴퓨터 자체 기준을\n정립해나가는 것이 대립되었었고, 지금에서는 휴지통, 내 폴더 등 사람 기준이 널리\n사용되고 있다.\n\n#### 실제 물체의 속성으로 구현하는 게 좋을까 (테트리스의 블록을 구현) (추상화)\n\nvs 분해해서 나열하는 것이 좋을까 (테트리스의 모든 속성을 쭉 코드화)\n\n#### 바퀴 재발명 vs 자체 기술 구축\n\n#### 타이어를 다시 발명할 필요는 없다\n\n관심분야에 집중한다\n하나에 온전히 집중할 필요가 있다\n[[Exploration#레퍼런스를 참고한다]]\n[[Standard#manual의 장점]]\n\n#### 가비지 컬랙터\n\n가비지 컬랙터에게 맡겨놨던 짐들은 언젠가 다시 내가 감당해야 한다\nvs\n추상화를 통해 신경 쓸 부분을 줄임으로써 더 나은 프로그램이 된다\n\n#### 직군별로 나눈 팀과 소프트웨어 단위로 나눈 팀\n\n대기업에서는 파트가 아주 세부적으로 나눠져 있다\n\n- 차에서 브레이크를 담당하는 팀이 있고, 엔진을 담당하는 팀이 따로 있을 것이다.\n  데브옵스의 통합과 세부적인 전문화는 대척점에 있는 것인가? 둘 다 공생 가능한\n  것인가?\n\n자원이 쌓이면 모니터링 할 지표도 많아지고 알람도 많이 오는데 어떻게 감당하지?\n\n- 그래서 조직이 커지면 각 영역이 분리되고 고도화된다\n\n#### 소프트웨어의 단순성과 완전성\n\n#### 컴퓨터가 기존 인간 시스템(휴지통) vs 컴퓨터 자체의 새로운 시스템\n\n#### 개인정보보호 vs 데이터활용\n\n개인정보를 개방해서 회사에서 활용하게 하는게 나을까\n정보를 잘 숨기는게 나을까\n\n회사에 내 개인정보를 넘긴다는게 거부감이 들고 신뢰가 생기지 않을텐데\n\n데이터가 있어야 맞춤형 서비스가 가능해진다\n개인정보를 어떻게 받을 수 있을까\n\n#### stable\n\n안정적인 프로그램 구동을 위해 라이프 사이클을 파악해서 무조건 그 라이프 사이클\n안에서 돌게 하면 한 라이프 사이클만 안정성이 확보되면 나머지도 안정성이 생긴다\nvs\n그 라이프 사이클 자체가 제대로 구별된 것이 맞는지도 알 수 없고, 한 라이프\n사이클이 맞다고 나머지도 다 맞다고 할 수도 없다\n\n#### 업무 중 문제가 발생했을 때 해결이 안되면\n\n다른 업무를 일시 정지하고 다같이 해결하기\nvs 각자 해결하기\n다같이 해결하면 다른 사람들이 그 문제에 대해 알게 되고, 문제를 더 키우지 않을 수\n있다\n대신 작업이 중단되기 때문에 손실이 생긴다.\n\n각자 해결하고 레포트를 작성한다면 그것을 모르는 사람이 있을 것이고, 같은 문제를\n반복하게 된다.\n\n도요타에서는 생산라인에서 다같이 해결하는 방식을 쓴다고 한다.\n생산라인이라는 환경에만 효과적인 방법일까?\n\n#### 전담팀 vs 융합팀\n\n데브옵스는 되고 풀스택 개발자는 안된다?\n\n팀이 기능별로 나누어져 있다면 기능이 커지면 팀이 다시 분리된다\n외부 툴을 이용하다가 그 기능이 한 팀이 다룰 수 있을만큼 회사의 규모가 커지면 직접 개발한다\n싱어송라이터, 제작/촬영 감독을 같이하는 것처럼 개발도 여러 영역을 맡을 수 있다\n현업에서 한 포지션을 맡고 있지만 다른 분야에 조언을 잘 해주는 사람들도 있다.\n\n근데 영세한 회사에서 풀스택을 고용해 노동착취를 한다는 시선도 있다.\n사이즈가 작을 때는 둘 다 할 수 있긴 하다.\n\n농심에서 면, 스프팀 따로 있는 것\n\nsm의 잘하는 사람이 잘하는 것을 하고 한 곳에 집중하는 방식과 아이유처럼 노래를 하다가 작곡도 하고 작사도 하는 방식.\n제네럴리스트와 스페셜리스트 사례는 많은 영역에서 같이 있는 고민인 것 같다.\n음악 측에서는 작곡이라는게 절대적 우위가 있는게 아니라서 가수가 작곡을 충분히 할 수 있을 거 같다고 생각하는데, 소프트웨어도 마찬가지일 것 같다.\n문제는 큰 기업에서는 규모 문제로 집중화가 불가피할 것 같다는 것인데.\n\n#### 규모별 대응법이 다르다?\n\n스타트업과 대기업은 일하는 방식이 달라야 하고, 팀의 구조도 다르다?\n간단하게 구축 가능한 서비스를 큰 아키텍처를 미리 생각해서 구상할 필요 없다?\n닭 잡는 칼로 소를 잡을 수 없다?\n휴대폰 충전 케이블로 노트북을 충전할 수 없는 것처럼?\n\n기술이 발전하면서 노트북 충전기가 간소화되거나 휴대폰 충전기가 발전해서 둘 다를\n만족시키는 충전기가 나올 수 있다.\n스타트업이 상대하는 고객과 대기업이 상대하는 고객은 다르지 않다.\n절묘하게 하나로 통합되는 경우도 있고, 각 케이스가 완전히 구분되서 합쳐지지 않는\n경우도 있다.\n\n#### 국가와 회사는 다르다\n\n이를 역이용해서 사회에서는 안되는데 회사에서는 되는 점을 이용하면 좋겠다.\n라인의 사내 오픈소스 기여 행사를 참고하여 회사의 개발 프로세스를 바꾸면 사회에서는 잘\n안되었던 소스공유를 회사에서는 잘 되게 할 수 있지 않을까\n\n#### 전체적으로 떠오른 것이 생기면 기능 상관없이 구현하는 방식\n\nvs 한 작업에만 집중하여 개발하는 방식\n둘 다 되게 하려면?\n\n\n#### 소프트웨어에서 창의성이 발휘되어야할 영역\n\n원래 사용자들이 사용하던 방식, 기대하는 방식은 유지되어야 한다\n뒤로가기를 누르면 이전 페이지로 가야 하고, 메뉴의 위치와 생김새는 기존의 틀과\n다르면 유저가 헷갈려 한다\n\n#### 철저한 계획 vs 상황에 맞추기\n\n철저한 계획이 있어도 중간에 바뀌게 되면 그 틈 속으로 변수가 침투하기 쉬워진다.\n철저한 규칙 속에서 정확하게 움직이는게 좋은 작업이 있고 유연한 규칙이 필요한 작업이 있다\n그런데 철저한 규칙이라는게 존재할 수 있나. 그동안 생각한 바로는 상황에 맞추는 것이 최선의 결과를 내는 것이라 생각했다\n\n운동을 하는것도 프로세스가 짜여있지만 트레이너는 상황에 맞춰 적절하게 조절하는 것이 역할이고, 사람 일이라는게 다 상황에 맞춰가야 하는 것이라 보는데\n\n1q84에서 아오마메에게 생필품을 공급하는 배달부들은 규칙대로 철저하게 움직여야\n최고의 결과가 나온다. 한 여름에 생필품을 챙기는데 겨울에 필요한 것까지 생각해서 준비하는 뛰어난 준비성. 시뮬레이션 능력. 정해진 현실을 확실히 준비하는 것. 이 또한 굉장하다\n\n#### 내성 vs 늘 새로운 고통\n\n내성이 생기는 것\n- 안하다보면 조그만 자극에도 못버틴다\n- 하다보면 는다\n- 힘든일도 내성이 생길까 (이별, 죽음, 고통)\n\n프리다이빙은 스쿠버다이빙과 비슷하지만 장비 없이 숨을 참고 하는건데\n숨을 참는 연습을 하다보면 이산화탄소 포화상태를 견디는 내성이 생겨서 숨을 더 잘 참을 수 있게 된다고 한다\n#vs\n\n#### 얕보이면 안되는 경우\n학교 선생님이 학원강사보다 못가르친다고 분위기가 형성되면 학생들이 수업에\n집중하지 못할 것 같다. 학생이 학원에서 배운 것이 더 나은 대답이 나올 때\n수긍하면 그런 분위기가 형성되지 않을까?\n#collection\n"},{"headings":[{"value":"Why me?"},{"value":"내 생각들을 담은 앱을 만든다"},{"value":"[[-Resume]]"},{"value":"대외활동보다"},{"value":"회사가 뽑고 싶은 개발자"},{"value":"내가 데브옵스 신입을 뽑는다면 어떤 자격을 원할까"},{"value":"회사에 질문"},{"value":"경험"},{"value":"사용자에 맞게 확장 가능한 아키텍처를 클라우드 환경, 온 프레미스 환경에서 구축 가능"},{"value":"내가 할 수 있는 것"},{"value":"Container"},{"value":"개발자의 편의를 개선하는 작업"},{"value":"나의 개발 성향"},{"value":"깊이 있는 경험"},{"value":"주절 주절"},{"value":"Top Personal Question"},{"value":"Technical interview"},{"value":"리액트 기본 면접 질문"},{"value":"Reference"},{"value":"Interview"},{"value":"Experience 1"},{"value":"Experience 2"},{"value":"두나무"},{"value":"바로고"},{"value":"메이크스타 면접 회고"},{"value":"채팅 시스템 설계"},{"value":"제출물"},{"value":"설계과정"},{"value":"다이어그램"},{"value":"25/02/12 1차면접"},{"value":"전화면접 문제"}],"fields":{"slug":"/developer/"},"rawMarkdownBody":"## Why me?\n\n데브옵스로서 개발자가 코드에만 집중하고, 배포 된 서버의 안정적인 구동까지 단순화하는 것을 할 수 있다\n\n#### 내 생각들을 담은 앱을 만든다\n- 모으고 정리 (편집)\n- 변증법적인 개선 (Evolve, Flexible, Cycle, Feedback)\n\n#### [[-Resume]]\n- [ ] 나를 세일즈\n\t- 인터뷰는 서로가 서로를 알아가는 과정이다. 쫄면 안되고 질문에 대답만 하려는 태도도 안되고 내가 뭘 해줄 수 있는지 어필해야 한다\n- [ ] 상대방이 원하는 것을 알아보고 그것에 맞는 사람임을 어필\n- [ ] 상대가 뽑을 이유가 있게 만들어야 한다\n- [ ] Add Experience solve a problem\n- [ ] Add achivement\n- [ ] Delete don’t explain project\n- [ ] 무엇을 했고, 어떻게 했고, 결과는 어땠는지\n    - **y를 구현해서 x를 성취했고, 그 결과 z를 이루었다**\n    - 분산 캐시를 구현해서 오브젝트 렌더링 시간을 75% 줄였고, 그 결과 로그인 시간을 10% 경감할 수 있었다. windiff에 기반한 새로운 비교 알고리즘을 구현한 결과, 평균 비교 정확도를 1.2에서 1.5로 개선했다\n- [ ] 쿠버네티스를 이용한 개발환경을 구성하고 있는데 까지만 적고 어떤 문제를 해결하기 위해 뭘했는지를 적어야 한다\n- [ ] 이력서를 보고 관심이 가고, 목적에 부합하고, 호기심이 가고, 회사와 맞을 거 같다는 느낌이 들어야 한다\n- [ ] 그림을 잘 그리는지 보기 위한 테스트에 맞춰 결과를 생각하는 것보다 어떻게 하면 새롭게 그릴 수 있는지 보기 위한 테스트에 맞춰 생각하는 것이 더 좋은 결과를 만들어 낼 것 같다\n    - 결과에 집중하기보다 과정을 즐겨야 한다는 상투적인 말이 생각난다\n- [ ] 내 업무가 파악이 바로 되는가?\n- [ ] 내 역량이 파악이 되는가?\n    - 어떤 경험을 했고 어떤 마음을 가지고 있는지 잘 어필하고 싶다\n- [ ] 기업별 맞춤 지원 내용, 제안을 서머리에 적자\n- [ ] 서류에는 이제까지 회사에서 진행했던 프로젝트를 상세히 썼고, 거기서 내가 수행한 역할과 책임을 작성했다. 자소서 부분은 '문과생'이었던 내가 회사에 들어오기까지 얼만큼 노력했고, 들어오고 나서도 어떠한 노력을 하고 있는지 작성했다.\n- [ ] 문장이 길어지면 첫 문장을 읽고, 뒷 문장을 읽고 싶게끔 되야 한다.\n- [ ] 내가 할 수 있다는 것을 어떻게 어필하지?\n- [ ] 코딩테스트 통과 가능?\n- [ ] 깃헙을 보면 내 활동 파악 가능?\n- [ ] 대답을 구조화해서 사례를 들면서 한다\n- [ ] 이런 일을 했고, 이런 문제가 있었고, 그래서 이렇게 해결했다는 과정을 중요하게 봅니다.\n- [ ] 경험이 아닌 경력위주로\n- [ ] 회사의 요구사항을 조사해서 내가 그걸 할 수 있다는걸 어필해야 할 것 같다\n\n\n> 제가 신입이라면 시리즈 B이상 투자받은 스타트업을 리스트 업하고 그중에 내가 쓰는 서비스나 마음에 드는 서비스를 고른뒤 그 서비스중 기능하나를 구현해서 포폴만든다음 링크드인 주소와 함께 깃허브 주소 첨부해 보낼거에요.\n> - 어딘가에서 본 내용\n\n#### 대외활동보다\n대외활동보다 중요한 것은 뭔가를 했고, 그것을 통해 어떻게, 얼마나 성장했는가이다.\n왜 했고, 어떻게 했고, 무엇을 얻었고, 어떤 생각을 했고, 어떻게 되었는지를 잘 정리하는게 중요하겠다.\n- 그럼에도 대외활동은 신청부터 완료까지 사이클을 경험할 수 있고, 프로젝트도 명확해서 도움은 될 것 같다. 자기가 혼자 생각한 것을 개발해서 성과를 얻을 수도 있지만 오히려 쉽지 않다.\n- 나이를 먹으면서 성장하게 되지만, 회사에서 일하면서 더 성장하게 되는 것 같다.\n\n#### 회사가 뽑고 싶은 개발자\n- 쓰고 있는 기술에 경험이 있는 사람\n- 회사 상황에 대한 경험\n- 인간적인 매력\n- 얼마나 깊이 생각했는가\n- 구체적인 구현 능력\n- 신규 기술에 대한 접근법\n    - 신규 기술을 도입하는 회사 -> 신규 기술에 대한 접근법을 잘 전달해야겠다\n\n[[About_Development#같이 일하고 싶은 개발자]]\n\n#### 내가 데브옵스 신입을 뽑는다면 어떤 자격을 원할까\n\n#### 회사에 질문\n경력직 사수에게서 무엇을 배웠는가\n- 실무적으로 안정적인 운영을 위해 리스크를 줄이는 노하우\n- 기술적으로 겪었던 경험에 대한 공유\n- 기술에 대한 시선, 가치관\n- 인프라적으로 남아있는 코드 5개 채득하자\n- 코드적으로 남아있는 코드 5개 채득하자\n\n면접관에 궁금한거\n- 나도 개념은 알고있지만 그걸 설명하려면 이직준비를 하면서 공부를 따로 해서 말할 수 있는건데 면접관들은 어떻게 알고 잘 말하는 것일까\n- 그러고보니 팀장님들은 다들 어떻게 그렇게 개념을 잘 기억하고 계실까\n\n들어가는 회사에 질문\n- 팀 커뮤니케이션 어떻게, 어떤 프로그램\n- 메뉴얼 있는지, 목차 확인\n- 린트 체크, 테스트 하고 있는지\n- 팀 단위, 팀 구성 어떻게 되있는지\n- orm을 쓰면서 한계를 느낀 경험 있는지?\n- 조직의 경험을 어떻게 축적하고 있는가? 신입이 문서를 보고 배우나?\n    - 개발 프로세스 등\n\n이직사유\n- 지금 퍼플아이오에서는 개발하면서 인프라를 다루는 경험을 해봤으니 다음 회사에서는 인프라에 대한 깊이를 가질 수 있으면 좋겠다. 커뮤니케이션 부분은 고민\n\n회사의 인프라에 어떤 개선점을 만들었는가\n- 이걸 만들어야 한다. 이직 전 반드시.\n- CI/CD 환경? 오래걸리고 에러가 뜨는 상황이 종종 발생한다\n- 배포본의 가시성 확보?\n\n그동안 해온 일에서 내가 추구해온 가치\n- 쉽고 가볍고 의존성 없고 단순한 프로그램 -> 변화에 대응하기 쉬운 프로그램\n\n그동안 프로젝트 경험을 통해 잘 할 수 있는 일\n- container를 이용한 서비스 개발과 운영\n- 원하는 기능이 필요할 때 적합한 툴을 찾고 사용해서 요구사항을 실현하는 일\n\n나는 앞으로 어떤 일을 하고 싶은가\n- 스케일이 커지는 경우에도 간단한 형태를 유지하면서 변화에 대응할 수 있는 서비스를 개발하는 것\n\n일하고 싶은 회사는 어디인가\n- 사용자에게 가치를 전달해주는 것에 가치를 두는 회사. 내가 관심 있는 영역에 맞는 회사\n- 문제해결에 있어서 정신적 지원을 해주는 회사. 문제발생의 원인을 해결하려고 하지 문책을 하려고 하지 않는 회사\n\n이전 경력에서 무엇을 배웠나\n- 백엔드 개발자로 입사했는데 회사가 데브옵스 문화를 지향하기도 하고 인프라에 관심 많은 것을 도와줘서 인프라 관련 업무도 같이 할 수 있도록 맡겨주었음\n- 회사에 내가 배울만한 전문가가 있었고 그 분이 어떻게 일하는지를 관찰할 수 있었다\n\n전체적인 구성을 익히고 조금씩 발전시나가는걸 좋아하는데 이 회사에서 그걸 한 경험이 있는가?\n\n\n------------------------------------------------------------------------\n\n## 경험\n\n쿰스에서의 경험\n- 대용량시스템 아키텍처 설계 및 운영\n- 1년 1억건 이상의 데이터가 쌓이는 환경\n- 100만 사용자에게 발송되는 메시지 발송 시스템\n- 람다와 메시지큐(키네시스)를 이용하여 비동기 메시징 시스템 구현\n- 분당 10만건 발송\n- 람다가 받을 수 있는 트래픽의 한계를 확인하고 더 많은 처리를 위해 어떻게 해야하는지에 대한 경험\n- 람다로 대용량 데이터 처리 경험\n\n코몰\n- 100만 사용자가 이용하는 이커머스 쇼핑몰\n- 자바, nextjs, aws 이용\n\nerp를 구성하면서 힘들었던 점\n- ERP 개발을 하면서 container를 이용한 서비스 개발과 운영, 원하는 기능이 필요할 때 적합한 툴을 찾고 사용해서 요구사항을 실현하는 경험을 쌓았다\n- 이전 직장에서는 사내 ERP 서버를 구축하고 개발하는 업무를 혼자 맡았다. 제가 그만두면 서버가 유지가 안되는 상황을 우려해서 최소한의 기술 스택을 유지하면서 안정적인 운영을 할 수 있도록 하는 점에 중점을 두어 Docker 외에는 인프라 도구를 도입하지 않음.\n\n#### 사용자에 맞게 확장 가능한 아키텍처를 클라우드 환경, 온 프레미스 환경에서 구축 가능\n- terraform, ansible로 반복되는 아키텍처 관리 작업을 코드로 관리\n- 초기 스타트업의 환경\n- 사용자가 늘어가는 환경\n- 대용량 아키텍처\n\n인프라를 바닥부터 가벼운 상태로 최적화하여 구축할 수 있고, 현실의 데이터를 전산화하여 사용하였음.\n필요한 도구들을 직접 개발하여 사용하고 있음\n아무것도 없는 상황에서 요구사항에 맞게 적합한 도구를 선택하여 구축할 수 있음\n필요한 기능을 설계하고 개발하여 피드백을 통해 개선하는 작업을 계속 했음\n\n#### 내가 할 수 있는 것\n- 가볍고 범용적인 인프라\n- 컨테이너를 이용한 효율적인 시스템 구축\n- 실전 경험이 없어서 우려하는 점을 어떻게 풀어나갈까\n    - 시행착오가 일어날 것이다\n    - 느릴 것이다\n- 나만의 킥\n- 남들 한거 따라가는데 그치면 안되고, 내 필요를 추가해야한다\n- problem solving ability\n    - I've maintain machine before being developer. that's always been occurred error. and error have core cause, I have found 5 years. and then I think I have major of solving problem.\n\n#### Container\n가볍게 os를 쓸 수 있게 해준다. 여러 환경에서 일관성 있는 환경으로 쓸 수 있고 클라우드 등 배포 시에 이식이 용이하다.\n하지만 개발하면서 컨테이너 위에서만 작업하는 것은 불편함이 있을 수 있고, 그래서 모든 개발자에게 컨테이너 위에서 개발하라고 하는 것은 힘든 부분이 있다\n(데이터 이동의 번거로움, 서비스 연결의 번거로움, 깨끗한 환경 유지에 대한 압박, 새로 개발 시 설정 필요, 매번 연결해야 하는 번거로움)\n그래서 컨테이너의 일관성과 자연스러운 개발환경을 모두 만족시키기 위해 신경을 써야겠다\n\n#### 개발자의 편의를 개선하는 작업\n리소스를 한 곳에 모으고 쉽게 접근 가능한 웹페이지\n검색의 확장을 위한 유의어 단어 사전\n마이크로서비스에서 반복적으로 필요한 crud api 패키징\n프로젝트 생성부터 배포까지 커맨드 하나로 셋팅하는 클라이언트 툴\n\n## 나의 개발 성향\n\n전체적인 개발철학은 충섭님에게 공감\n오버엔지니어링을 피하고 관리하기 쉽고 많이 사용되는 걸 최소한으로 사용한다\n\n인생을 살면서 배움이 없이 살 수 없다. 그렇다면 즐겁게 배울 수는 없는가? 있다.\n그래서 개발자라는 직업이 매력있다. 개발을 공부하는 것은 공부가 아니라 놀다보면\n습득되는 것이고 보람찬 작업이다.\n\n사람 중심 개발\n\n#### 깊이 있는 경험\n\"제한된 시간에 모든 걸 공부하는 건 불가능하기 때문에 몇 가지를 깊이 이해하는 것이 중요합니다. “내가 시간이 없어서 그렇지 깊게 파면 이렇게 잘할 수 있다!”라는 걸 어필할 수 있다면, 회사 입장에서도 “뽑은 다음에 키우면 되겠다”라고 생각할 수 있습니다.\"\n https://subicura.com/2021/06/27/study-guide\n\n현업에서 문제는 수없이 많고 고도화된 뭔가를 개선하는 임무는 단기간에 미션이 주어진다고 바로 해결할 수 있는 건 아니다. 문제가 닥쳤을때 하나씩 개선해보면서 결과적으로 하나씩 바꿔나가는거지 한번에 다 해결할 수도 없고 그러길 원하지도 않는다. 과제가 주어졌을 때 엄청난 뭔가를 만들려고 하지말고 기본적인 걸 잘 챙기도록 해야겠다\n\n\n#### 주절 주절\n\n정리하는 것이 좋습니다. 물건 정리에서부터 지식 정리 등을 포함하여 정보를 쌓고 핵심만 추려서 남기는 작업을 좋아합니다. 물건으로서는 미니멀하게 갖고 있는 물건을 줄이며 효율성을 높이고, 물리적 데이터를 전산화하는 작업을 통해 자료를 집적하고, 관리하고 있습니다. 인프라 개발자는 소프트웨어에서 정리를 하는 직업이라 생각하고, 기존에 두 단계로 거치는 작업을 한 단계로 정리하는 작업에서 많은 기쁨을 느꼈습니다. 인프라를 개선하면서 개발자들이 메인 비즈니스 로직에만 집중할 수 있는 환경을 만들기 위해 고민하고 있습니다. 정리하는 것은 가치 있습니다. 기술적으로 효율성을 높일 수 있고, 사람들에게 직관적으로 다가가기도 좋습니다.\n\n개발자는 책 편집자처럼 편집의 역할, 영화감독의 전체를 관리하는 역할, 그리고 작가의 상상을 쌓고 자신의 것만 남기는 정리 작업을 실체적 구현으로 하는 작업이 가능합니다. 개발자로서 이전보다 더 나아지기 위해 고민하고 실제로 구현을 해서 개선시키는 작업이 좋습니다. 영화를 보면서 떠오른 생각을 개발과 연관시키고, 다른 분야에서의 훌륭한 결과물을 보고 개발과 연관시킬 수 있는 이 개발자라는 직업이 좋습니다.\n\n미니멀리즘에 대해 관심 있게 지켜보고 있습니다. 미니멀리즘은 적게 가지는 게 아니라 더 뺄 게 없을 때까지 고민하고 알아가서 줄여나가는 과정이라는 것에 공감했습니다. 그래서 미니멀과 소프트웨어를 같이 고민할 수 있는 것이 무엇이 있을까 고민하다가 인프라 관리 영역이 딱 맞다고 생각하게 되었습니다. 예전에는 인프라 관리를 위해 수많은 툴들을 설치하고 관리했어야 했습니다. 그리고 시간이 흘러 컨테이너가 등장하면서 쿠버네티스라는 적절한 툴이 인프라 관리를 한 단계 추상화해주었습니다. 또 테라폼 등 코드로 인프라를 관리할 수 있게 되어 한층 더 효율적으로 된 것 같습니다. 이제 인프라 관리에 이것저것 섞인 형태가 아니라 쿠버네티스를 잘 관리하면 인프라 관리가 되겠다고 가능성을 보았고, 개인적으로 쿠버네티스를 구축해 사용하고 있었습니다. 그리고 이 교육과정을 보게 되었고, 그동안 못 해봤던 실제 운영 환경에서 다루는 경험을 해보게 되는 것이 저를 성장시켜줄 수 있을 거라 생각해 지원하게 되었습니다.\n\nDevOps, 인프라 엔지니어로 계속 성장해 나가고 싶습니다. 현실 세계를 탐구해나가면서 생활과 밀접한 다른 분야에서의 좋은 점을 배우고 소프트웨어에 적용해 나가고 싶습니다. 지금도 테라폼, 쿠버네티스 등 기가 막힌 툴들이 있지만, 저도 인프라 관리를 쉽게 하는 통찰력 있는 툴을 만들어봤으면 좋겠습니다.\n\nQA, data science, ml, design, server, architecture, test\n데브옵스로서 역할에 대한 공부 뿐 아니라 개발자들의 편의를 위해 각 분야의\n사이클을 경험함으로써 와닿는 경험 개선을 줄 수 있다고 생각했다. 트레이드 오프로\n데브옵스의 일에만 집중하여 기술적 고도화를 이루는 것은 뒤로 미뤘는데, 고도화된\n경험은 직접적인 경험을 통해서 개선시킬 수 있다고 생각하고, 실제로 일을 하면\n공부해왔던 것과는 다른 경험을 하게 될 것이라는 생각이 있었다. 내가 혼자\n시뮬레이션하는 것도 의미있지만 실제로 업무 중에 겪는 경험을 따라갈 수 없다고\n생각. 그래서 실제 경험을 하게 될 때의 시행착오를 줄이는 방법을 연구하고 전체적인\n흐름을 파악하는 것에 집중하여, 실제 문제 상황이 닥쳤을 때 유연하게 생각할 수\n있는 능력을 길렀다고 생각한다.\n\n\n## Top Personal Question\n1. What is the biggest failure you’ve had?\n\t- I’ve made many same failure. I didn’t think deeply each failure. I would have remind my failure.\n\t- Worst failure is I didn’t made backup. And I lost my server everything. Especially updated code lost is very annoying.\n\t- If i didn’t use docker. Maybe It was can’t recovery... after these time. I’ve always think backup.\n\t- Server need snapshot, drive backup, DB backup, source backup like that.\n2. What is your greatest achievement?\n3. Can you explain your experience?\n\t- [[blog/Deploy_ERP_server_story]]\n\t- I've build internal ERP server for 40 employees\n4. Why you apply this position?\n5. Why you come in Berlin?\n\t- to know how people work in here\n\t- to improve my skill to face to big problem\n\t- I want to work with variety people, and new environment challenge.\n6. What you can bring benefit for company? Why we choice you\n\t- I like make system organize and cleaning.\n\t- I will make all system automatically and easy take feedback.\n\t- benchmark, test, feedback.\n\t- I'm wondering how improve my skill and system make easy.\n\t\t- every node connection, control, feedback.\n\t- I'm gonna make developer work with keep focusing on development and easy to upgrade your business logic.\n7. What about the software appeals to you? Do you like programming? If yes, why?\n\t- can program self-check and self-upgrade\n\t- universal used\n\t- no matter age\n\t- can 1 person make many thing\n\t- and small group can make many thing\n8. how did the problem relate to advancing in the dev process and the final product?\n9. What do you do when an application stops working?\n\t- check the log, find situation, mock test, fix it\n\t- if the log not exist, remove code to as skeleton, and simulation, and then\n\t  add some code and simulation when find the bug.\n10. Tell me about the largest scale development process problem that you or your team have faced and worked through.\n\n\n## Technical interview\n- how to make pipeline\n- which tool to use\n- how to choice a new tool\n- about docker, kubernetes, cloud\n- devops going to be reduce that system switching annoying.\n- make easy add new program. but consist minimum program.\n- What’s the difference between SOAP and REST?\n- OOP (what is good, why use this)\n\t- oop의 문제점\n\t- 객체에 데이터를 감추는 캡슐화를 중요시하지만 언젠가는 객체의 데이터 접근이 필요할 것이다. 동일한 호출이 매번 다른 결과를 생성할 수 있다.\n\t- 수학적이지 않다. 상태가 가변적이라서.\n\t    - go로 배우는 함수형 프로그래밍\n- when cache is not useful, and even dangerous\n    - 새로운 데이터만 계속 들어오면 캐시미스가 발생.\n- mvc problem\n    - too large controller\n    - view, model이 많아질수록 복잡해져서 추적이 어려워진다\n\n[[Coding#SOLID]]\n[[Software#Concurrency]]\n[[Architecture#Database]] [[Architecture#Distributed Systems]]\n[[Computer_Architecture#Process, Thread]]\n[[Computer_Architecture#memory management]]\n\n[[Software]]\n[[Data_Structure]]\n[[Teamwork]]\n\n\n#### 리액트 기본 면접 질문\nhttps://velog.io/@_woogie/%EC%B7%A8%EC%97%85-%EA%B7%B8-7%EC%A3%BC%EA%B0%84%EC%9D%98-%EC%9D%BC%EC%A0%95\n\n기술관련\n리액트가 어떻게 작동되나요?\nvirtual Dom은 무엇인가요? 어떻게 만들어지나요?\nHook의 조건은 무엇이 있나요?\n리액트 github에서 소스를 살펴보셨나요?\n- 리액트 작동방식에 대해 설명해주세요\n\nredux-thunk와 redux-saga의 차이점은 무엇인가요?\nredux-saga에서 generator에 대해 설명해주세요\nimmer와 같은 불변성라이브러리의 원리는 무엇인가요?\nimmer와 redux의 shallowEqual을 같이 사용했을 때 얻는 이점은 무엇인가요?\ncontext api를 통해 redux를 대체할 수 있는데 왜 사용하셨나요?\nfront에서 CORS를 어떻게 해결할 수 있을까요?\n- Back-end에서 처리할 수 없을 때 front에서 어떤 방식을 사용해야 할까요?\n\n렉시컬 스코프와 다이나믹 스코프의 차이점에 대해서 알려주세요\n크로스 브라우징이란 무엇인가요? 해보셨나요?\ncss-in-js에서 왜 00를 사용하셨나요?\nES5, ES6, Typescript를 연결해서 설명해주세요\n빌드된 파일이 너무 크다면, 줄이기 위한 방식은 어떤 것이 있나요?\n\n\n#### Reference\n- https://github.com/arialdomartini/Back-End-Developer-Interview-Questions\n- https://wonny.space/writing/work/engineer-resume\n\n---\n\n# Interview\n## Experience 1\n우리 회사에 대해 아는게 있니\n너의 여태까지의 경험을 얘기해줘\n- 여기서 챌린징을 하고 공부하려는 의지를 더 보일 수 있게 했어야 했다\n왜 데브옵스에 지원했니\n- 완전 버벅였다.\n5년 후에 어떤 모습이 되있을거 같니\n- 완전 횡설수설 했다\n- 회사의 변화를 얘기하고, 내 변화도 얘기했으면 좋았겠다\n\n질문있니\n연봉은 얼마나 원하니\n\n## Experience 2\n어떤 개발 문화를 만들고 싶나\n자기소개\n힘들었던 경험, 어떻게 이겨냈나\n제일 어려웠던 문제, 고난\n왜 개발자가 되었나\n우리 제품 알고 있나\nci/cd에 대해 알고 있나\n어떤 것을 가져다 줄 수 있나(뽑을 이유)\n커뮤니케이션 스타일\n좋아하는 기술\n리팩토링 경험\n\n회사에 대해 좀 물어봤어야 했다\n의사소통이 느리다고 했을 때 대표님은 호탕하시니 저도 호탕해질 수 있다고 하면 좋았겠다\n얘기만 잘 통하면 저의 신중한 부분과 시너지를 낼 수 있다고도.\n독일 간 이유에 대해 좀 더 잘 말했으면 좋았겠다\n\n내가 성장할 수 있는 회사일까에 대해서 의문이 든다\n\n\n## 두나무\n지원동기\n- 인프라적인 측면에서 대규모 트래픽 서비스와 실시간 서비스를 경험해보고 싶은 점과 데브옵스 엔지니어로서 개발팀이 서비스에 집중할 수 있도록 하는 작업을 할 수 있다는 점과 데브옵스 팀에 대한 존중이 있는 것 같아서 지원하게 되었습니다.\n\nDevOps 직무 전향에 대한 동기\n- 두가지 측면이 있습니다. 하나는 코드 자체보다는 인프라를 구성하는 것과 구성된 인프라를 관리하는 것에 흥미가 있는 것이고 하나는 같이 일하는 동료들이 더 편하게 일하게 해줄 수 있는 환경을 만들어 주는 것에 가장 큰 보람을 느낀다고 생각했습니다.\n\n질문들\n- 개발을 시작하게 된 계기와 어떤 개발 경험을 해오셨는지\n\t- 그 과정에서 특히 기억에 남거나 의미 있었던 경험\n- 도커가지고 어디까지 해보셨는지\n- 쿠버네티스는 어떻게 접하게 되었는지\n- 쿠버네티스를 어느 정도까지 스케일링 해봤고 스케일링 하는 과정에서 어떤 의사결정이 있었는지 그리고 어떤 애로사항이 있었는지\n\t- 두배 정도 띄워놓는 것에 대해서는 기술적으로 어떻게 해결하셨는지\n- 현재 회사에서 담당하고 계신 데브옵스 관련 업무를 전반적으로 설명\n- 데브옵스 문화 중에 적용하거나 신경 쓰는 부분이 있었는지\n- 개발자에서 데브옵스로 전향하려는 이유가 뭔지\n- 현재 담당하고 계신 업무 외에 관심을 가지거나 배우고 싶은 데브옵스 관련 분야\n\t- 만약에 있다면 어떤 흥미를 가지게 되었고 현재 이거를 배우기 위해서 어떤 노력을 하고 계시는지\n- GET과 POST의 차이. 보안성에 차이가 있는지\n- 상황 - 과도한 요청이 오는데 데브옵스로서 취할 기술적 방법에 어떤 것이 있는지\n- 보안적으로 고려해서 뭔가 뭐 인프라를 만들거나 개발하시는 부분이 있다면 뭐 최근에 적용한 사례라든가 이런 게 있다면 알려주시면 좋을 것 같습니다\n\n\n## 바로고\n- 이력서 위주의 질문\n\t- 시스템 구성이 어떻게 되어있는지\n\t- kubernetes cluster 업그레이드 할 때 트래픽 관리 어떻게 했는지\n\t- cni는 어떤걸 쓰는지\n\t- ingress에서 service로 통신하는 방식과 service에서 pod로 통신하는 방식 차이\n\t- secret 관리는 어떻게 하는지\n\t- loki가 어떤 파이프라인으로 동작하는지\n\t- ci/cd 어떻게 구성되어 있는지\n\t- 장애 경험과 어떻게 해결했는지. 근데 발견을 할 때 어떻게 했는지 1~2가지\n\n\n## 메이크스타 면접 회고\n\n대화는 잘 진행된거 같다 잘 맞춰주신건지 뭔진 모르겠지만\n- 회사 소개 팀 소개 해주시고\n- 자기소개 간단하게 하고\n- 과제 객관식으로 한거 리뷰\n\t- 간단한 문제였긴 했고 간단한 인프라 관련 cs 지식을 보면서 입을 풀 수 있었던 듯\n- 과제 아키텍처 리뷰 - 설명 - 우려했던 것보다 매끄럽게 흘러가긴 함 준비를 좀 해서 그런가\n- 문제 풀이 - 알고리즘 문제 풀기 - 푸는 과정을 상세하게 설명했으면 좋았을 듯 그치만 쉬운 문제였음\n\t- 피보나치 문제였는데 재귀와 꼬리재귀를 언급했으면 좋았을 듯\n- 회사에 있었던 거 어떻게 같이 해결해나갈지 시뮬레이션 - 이건 aws에 있던 리소스를 gcp로 이전하던 상황에서 어떻게 해결할지를 같이 고민해보면서 마이그레이션 능력을 보려고 한 듯\n- 이력서를 보고 물어보신거\n\t- 인프라 관리가 무슨 의미인지\n\t- 배포 작업이 뭔지\n\t- 스크립트 작업은 어떤걸 했는지\n\t- Aws서비스는 어떤 프로젝트에서 어떻게 왜 사용했는지\n- 답을 잘하려고 태도는 신경 못쓴듯 개발팀장님은 목소리에 힘이 있으셨다.\n\t- 어미를 좀 잘 말하면 좋겠다\n\t- 아키텍처에는 그리 확신이 없는데 이 능력도 키워야할 듯\n\n\n## 채팅 시스템 설계\n다양한 서비스에서 사용할 수 있는 채팅 시스템을 설계해 봅니다. 채팅 시스템의 주요 기능은 다음과 같습니다:\n- 사용자는 1:1 채팅 및 그룹채팅을 사용할 수 있습니다.\n- 사용자는 모바일 앱 및 웹 앱에서 접속할 수 있습니다.\n- 글로벌 유저에게 최상의 유저 경험을 제공할 수 있도록 합니다.\n- 감당 가능한 트래픽 규모는 클수록 좋습니다.\n- 텍스트 메시지 외에, 미디어 파일을 첨부할 수 있습니다.\n- 사용자의 접속 상태를 표시할 수 있습니다.\n\n시스템을 설계할 때 다음 사항을 고려하세요:\n- 프런트엔드 프레임워크와 백엔드 언어는 중요하지 않습니다. 세부적인 사항은 적당한 가정을 사용하여 워크플로를 설계하기만 하면 됩니다.\n\n#### 제출물\n- 워크플로가 포함된 아키텍처 다이어그램\n![[chatdiagram.jpg]]\n\n#### 설계과정\n1. 특이 고려 사항\n\t1. 글로벌 유저\n\t2. 트래픽은 제한 없이\n\t3. 미디어 첨부 가능\n\t4. 접속 상태 표시\n2. 기본 아키텍처\n\t1. 웹소켓을 이용한 채팅 서비스 -> 정적 html에 람다로 웹소켓 통신\n\t2. 유저를 이용해야 하므로 aws cognito 사용\n\t3. 글로벌 유저 서빙을 위해 cdn 활용\n\t4. 접속 상태는 redis나 dynamodb 활용\n3. 데이터 관리\n\t1. 채팅 이력을 모두 관리하기 위해서 rds를 써야할까 dynamodb로 충분할까\n\t\t1. bedrock 예제에서는 토큰 제한도 있어서 오래되고 큰 데이터를 저장할 필요는 없는데 지속가능한 채팅 서비스를 원하면 rds를 써야할 수도 있다\n4. 확장\n\t1. 미디어 첨부 기능을 위해 특별한 서비스가 있을까\n\t2. 채팅 시스템 설계 사례 한번 확인해보기\n\t\t1. https://jjingho.tistory.com/161 대규모시스템설계라는 책에 이 사례가 그대로 있는 듯\n\t\t2. 통신방식이 주요 고려사항 중 하나인듯 -> HTTP 기반의 웹소켓\n\t\t3.\n\t3. 그룹채팅이라는 점도 유의미하게 설계과정에 들어가야 하는 듯\n\t\t1. 그룹채팅이라서 달라져야하는 점은?\n5. 궁금증\n\t1. 웹소켓이 1대1 통신만 되는건 아니겠지? -> 아닌듯, 다른 예제에서도 다 웹소켓 씀\n\t2. 채팅 서비스의 확장으로 알림까지 해주는 것도 고려해야할까? -> 일단 빼자\n\t3. 서버가 처리해야하는 로직들은 어떤게 있을까\n\t\t1. 유저목록?\n\t\t2. 채팅이력?\n\t4. 람다로 다 처리 가능하지 않을까? -> 실시간이랑은 안맞다\n6. 아키텍처 설계 시 방향성\n\t1. 변경 가능하게\n\t2. 관리 쉽게\n\t3. 단일 고장점 없애기\n\t4. 채팅 서비스로의 특성 : 실시간,\n\t5. 무상태\n7. 예상질문\n\t1. dynamoDB에 저장된 데이터와 RDS에 저장되는 데이터는 어떻게 다른지\n\t2. 람다가 어떤 것들을 처리하는지 / 서버는 어떤 것들을 처리하는지\n\t3. 람다가 웹소켓 통신을 쭉 이어서 처리할 수 있는지\n\t4. 왜 주기적으로 RDS에 저장하는지\n\t5. 1:1 통신을 할 때의 흐름 설명\n\t6. 그룹통신을 할 때의 흐름 설명 -> 데이터 순서 꼬이지 않나요?\n8. 데이터\n\t1. 채팅 이력\n\t2. 채팅방 정보\n\t3. 유저 정보\n\t4. 접속 여부\n\n설계를 왜 그렇게 했느냐\n- 기획부터 운영까지 고려하는 아키텍처링을 하고 싶었고 그래서 운영에서 중요하다고 느꼈던 점 중에 관리 포인트를 줄이는 점을 위해 클라우드 매니지드 서비스로 구성하려고 했습니다. 그리고 비용 효율적인 측면을 위해 서버리스를 최대한 활용하려고 했습니다.\n- 기본 요구사항을 모두 만족 시키고 제가 만든 제약사항을 기준으로 설계했습니다\n\t- 채팅 서비스 -> 실시간 서비스\n\t- 글로벌 유저 -> 정적 페이지를 최대한 활용하고 cdn을 이용한다\n\t- 트래픽 제한 없이 -> 서버리스, 오토스케일링\n\t- 미디어 첨부 가능 -> s3에 미디어 첨부 후 주소를 dynamodb에 채팅 데이터와 저장 - 람다로 처리\n\t- 접속 상태 표시 -> 현재 접속한 유저에 대한 정보 디비에 업데이트 - 람다로 처리\n\t- 그룹 채팅 -> 이게 좀 고려가 안됐는데\n\t- 그리고 개인적으로 만든 기준\n\t\t- 채팅 서비스는 인스턴트 성격이 강하고 각 유저별로 독립적인 환경에서 운영한다고 생각했습니다 -> 람다로 가능하겠다\n- 그런데 아키텍처를 제출하고나서 계속 생각해보다가 람다가 부적합한 서비스라고 생각되서 v2, v3를 만들어봤습니다. v2에서는 람다를 대체해서 fargate를 쓰도록 했고, v3에서는 fargate를 쓰게 된다면 eks를 쓰지 않아도 될 것 같아서 큐, eks, rds 영역을 제거하고 fargate에 redis pub/sub을 둬서 dynamodb가 하는 역할을 하게 하고 dynamodb는 rds를 대체해서 고정 데이터를 저장하도록 했습니다\n\t- 람다가 부적합한 서비스라고 생각한 이유\n\t\t- 실시간을 처리하기 위한 용도로는 쓰기 어렵다 -> 연결 유지가 안될 수 있고, 처음 시작 시 지연 시간이 있고, 이를 해결하기 위해 계속 켜놓으려면 비용이 과다해져 람다를 쓰는 의미가 없다\n\t\t- fargate를 쓰는게 대안이고 redis pub/sub도 써서 메시지 브로드캐스팅용으로 쓰기를 제안한다\n\t- rds를 dynamodb가 대체 할 수 있을까\n\t\t- 당근 채팅 아키텍처에서 참고를 했는데 인덱스 키 설계를 잘 하는게 중요한데 이것만 잘하면 운영상 이슈가 없었다고 한다\n\t\t\t- 채팅목록의 키는 PK는 채팅방 ID를 쓰고, \bSort key는 생성시간으로 하면 될 것 같다\n\t\t- 채팅 서비스는 여러 테이블 간의 복잡한 참조와 연결을 최대한 배제한 설계가 가능할 것이라는 제약조건을 둠\n- 설계를 함에 있어서 완벽하게 바로 설계할 수는 없고 안정적으로, 변경하기 쉽게 하는게 최선이지 않을까 싶은데 설계했던 것에서 람다를 fargate로 바꾸는 작업은 모놀리스를 마이크로서비스로 바꾸는 작업보다 굉장히 수월한 작업일 거 같아서 서버리스 서비스에 매력을 더 느끼게 된 것 같습니다\n- 채용공고를 보니 AWS에서 GCP로 마이그레이션 하고 계신다는걸 봤는데 변경 가능한 아키텍처로 구성되어있어서 마이그레이션을 과감히 시도하는 것인가 싶어 흥미롭고 혹시 제가 그 작업을 하게 된다면 많은 도움이 될 수 있을 것 같습니다\n\t- 테라폼으로 개인적으로 aws 환경과 gcp 환경에서 k8s를 구성하는 연습을 했었는데\n- 데이터를 어떻게 쓰는지에 따라 아키텍처가 결정된다고 볼 수 있을 거 같은데 채팅서비스는 nosql로 처리가 가능한 것 같고 이번에 찾아보니까 당근에서는 dynamodb와 redis cluster로 구성을 했다고 하더라\n- 데이터베이스는\n\t- 실시간 메시지 전송은 Elasticache\n\t- 채팅 로그 단순 저장은 DynamoDB, (유저 정보도 여기 저장하지 못할 이유가 없다)\n\t- 채팅방/유저 데이터 관리는 RDS\n\n\n#### 다이어그램\n\n유저 - route53 - cdn - api gateway - lambda  - queue(?) - lb - server\n              s3                           dynamodb                          rdb\n\n## 25/02/12 1차면접\n자기소개\n이직사유\n백엔드는 어느정도 한다고 보면 되는지?\n데브옵스로서 커리어패스\n왜 데브옵스가 되려는지\n블로그를 봤는데 노트정리에 대해 파악한거처럼 장단점 고려해서 뭔가 선택한 사례가 있는지\n키네시스 sqs 어떻게 고르게 되었는지\n카프카나 래빗mq 같은건 고려 안했는지\n여러 환경에서 ci를 했는지\nCi cd 경험\nCi cd 최적화 경험\n스프링 ci 했던 과정\n스프링 서비스 배포과정 설명 (코드부터 고객 접속하는 것 까지)\n로드밸런서 왜 필요한지\n커뮤니케이션 어떻게 하는지\n개발하면서 이슈있을 때 해결한 경험\n\n\n## 전화면접 문제\n구글에서 주소 입력 이후에 과정\ntls의 동작 순서\nhttp1.1 과 2의 차이\nvm과 컨테이너의 차이\n서브넷 프라이빗과 퍼블릭 차이\nL4, L7 로드밸런서 차이\n쿠버네티스 api 통신은 어떻게 동작하는지\n쿠버네티스 팟들의 통신 - 팟들끼리 네트워크를 어떻게 찾는지\n쿠버네티스 cpu 제한을 왜 사용하는지\n서비스 메시 사용 이유와 어떨 때 사용하는지\n스프링의 콜드스타트를 개선하기 위해 데브옵스로서 어떤 것을 해줄 수 있을지\nnextjs와 스프링을 쿠버네티스에 띄울 때 관리 측면에서의 차이\n\n\n\n![[IMG_0440.jpg]]\n\n\n![[Pasted image 20240525094542.png]]\n\n- AWS 네트워크\n\t- Public/Private 분리\n\t- VPC 서브넷팅 진행\n- Bastion 서버\n\t- Public 영역에 설정\n\t- Security Group 설정\n- Kubernetes\n\t- EKS 및 기타 사용 가능\n\t- Private 영역 설정\n\t- Bastion 서버와 Admin 통신 가능\n- CI/CD 파이프라인\n\t- CI/CD 자동화 완성\n- Simple Application 배포\n- IaC 활용\n- 심플한 애플리케이션 추가 기능 개발\n- 과제 수행 과정 설명 문서 제출\n\n---\n\n7. 네트워크 설정\n\t- CIDR 설정은 일단 1/2\n\t\t- 10.10.4.0 ~ 10.10.5.255\n\t\t- 10.10.6.0 ~ 10.10.7.255\n8. bastion 서버 설정\n\t- security group 은 ssh만 허용으로 놔두면 될까\n\t- bastion 접속 테스트\n\t- ec2 생성 시 eip 할당 안해놔서 수동으로 진행\n\t- vpc에 igw도 수동으로 연결해줘야 하나 -> 해줌\n\t- ssh 접속 안됨\n\t\t- subnet의 routing table을 설정 안해줬었음\n\t\t- public routing table에 igw 연결해주니까 됐음\n9. eks 세팅\n\t- terraform으로 진행하자\n\t- 기본 예제에 vpc만 하드코딩\n\t- subnet id 수동 - subnet-01a47c30e19f0b895 (private), subnet-07a1df2de3f8bccb3 (public)\n\t- bastion에서 명령어를 실행시키도록 하면 되는데 괜히 엑세스키를 만들었군\n\t- terraform 실행을 bastion에서 해야하나 -> 터널링을 써도 될까\n\t- 로컬에서 terraform 실행 시 권한이 없다 bastion은 권한이 될까?\n\t- eks를 만드려면 AZ 가 2개 이상 있어야 하는데 subnet을 1/2로 해놔서 subnet을 더 못만든다\n\t- 다시 만들어야 할듯.. - private만 /24로 다시 만듬\n10. argocd로 ci/cd 만들자\n\t- bastion에서 ssh로 접속해서 kubectl 명령어를 날려야하나?\n\t- https://velog.io/@aylee5/EKS-Bastion-%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-Private-Cluster%EC%99%80-%ED%86%B5%EC%8B%A0\n\t- node group을 수동으로 생성해줘야 하나\n\t- 생성했는데 node가 빨리 안뜬다. ec2에서 생성은 됐는데 계속 creating 상태\n\t- 생성 실패!\n\t- iam role을 바꿔서 다시 생성해본다\n\t\t- 실패!\n\t- 유저 그룹에 테라폼 권한을 추가해서 실행해본다\n\n`curl --silent --location \"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\" | tar xz -C /tmp`\n\n`eksctl create cluster --name exam-eks2-pgd-d-guest-002 --version 1.29 --region=ap-northeast-2 --managed`\n"},{"headings":[{"value":"확장 가능하고 변경이 쉬운 환경 구축하기."},{"value":"kubernetes cloud host"},{"value":"digital ocean 으로 쿠버네티스 구축"},{"value":"확장 가능한 최소한의 인프라"},{"value":"개인 서버 구축"},{"value":"Tool"},{"value":"버전 확인해서 업데이트 필요"},{"value":"docker compose 대신 minikube를 개발환경으로 쓰면서 연습?"},{"value":"미니큐브 개발환경 셋업"},{"value":"2025 세팅 다시하기"},{"value":"07-24"},{"value":"07-23"},{"value":"09-10"}],"fields":{"slug":"/my_space/"},"rawMarkdownBody":"\n## 확장 가능하고 변경이 쉬운 환경 구축하기.\n\n배포는 인프라에서 처리한다.\n\n## kubernetes cloud host\n\n월 5천원 정도만 쓰는 인스턴스 하나 구해서 페이팔 연동, 피씨에서 접속\n어떤 호스트, 어떤 인스턴스를 쓸지\n네트워크, 디스크 가격은 어떻게 되는지 확인.\n쿠버네티스 돌려서 테스트 하는 것까지 블로그 글 작성\n\n1. aws, gcp\n2. cpu, ram\n3. 네트워크 설정\n4. 쿠버네티스 구동(단독형으로 쓸까...)\n\n클라우드 페이팔 연동해서 n26 매달 빠져나가게 설정\n한달 5유로 정도면 100개월 사용 가능\n\nprice of 3 nodes\naws(RAM 1G): 0.72\ngcp(f1-micro RAM 0.6): 1 free, 2 0.36\ngcp(e2-micro RAM 1G): 0.60\n\n- network more. disk 1G free\n\nHow many pod can run in 1 cpu 512 ram\n\n- kubernetes use 1GB ram\n\nBuild Kubernetes server hybrid\n\n- Check cloud fee\n- Run Logging monitoring app\n- kubernetes test\n- 롤링 업데이트 롤백 테스트\n- 카나리 배포 테스트\n- 기본 디플로이먼트 실행 후 스트레스 테스트 - cpu 500m, ram 500m 설정 시 nginx 성능 테스트\n- auto scaling 배포 후 스트레스 테스트 - 위의 디플로이먼트를 auto scaling 할 시 중단이 없는지 테스트\n- 쿠버네티스 성능 테스트\n  - 블로그 포스트 작성\n- 페일오버, 이중화 확인\n- Mlops 서버에 배포\n  - 모델 바꾸고 푸시하면 바로 업데이트 되도록\n- 고 gRPC 서버 배포\n  - 푸시하면 배포\n\n#### digital ocean 으로 쿠버네티스 구축\n\n필요한 정보\n\n- do api token\n- 스페이스를 만들어야 한다\n- s3 endpoint, region\n\ncompute instance가 droplet 이라는 명칭으로 되어있다. aws에서 ec2 인것처럼\nblock storage는 뭐지\n\nTLqkf space access key가 안맞다고 계속 에러난다\n\n- Tlqfk .terraform 에 데이터가 저장되어있어서 그랬다. 삭제 후 진행하니 된다\n\n테라폼 13 버전 위부터 provider 에서 required_provider로 바꿔야하고,\n14버전에서는 source=\"digitalocean/digitalocean\" 으로 설정해줘야 한다\n\nkubernetes를 DIY로 하는 것은 3노드를 사용하면 15$/month\nkubernetes 서비스를 제공하는 것을 사용하면 10$/month\n자체 쿠버네티스 서비스를 사용할 때 추가요금 내는게 없는지 확인해봐야겠다\n\n- 한 노드당 10$였다.. ㅋㅋ\n\nprovision file 에서 ssh key 퍼미션 400으로 바꿔줘야 한다\nansible에서 로컬 네트워크로 전달이 안된다\n\n- python interpreter 설정 해줘야 한다\n\n- [x] argocd 깔고,\n- [x] 모니터링 깔고,\n- [x] 로드밸런서 깔고,\n\n1. 모니터링으로 상태 확인 해야한다.\n2. 모니터링 서버는 로드밸런서로 접속 잘되게 설정한다\n3. argocd로 배포할 때 상태를 본다.\n\n마스터 서버를 hosts에 등록해놔야겠다\n로드밸런서를 cloud에서 생성 안해도 로드밸런서가 켜질까?\n\ngrafana를 구동하는데 리소스가 많이 든다\n\n- grafana가 문제가 아니라 k3s를 돌리는 것만으로도 0.9G 메모리를 먹었다.\n\ntraefik이 디폴트로 깔려있다.\n\n- dashboard를 쓰도록 configmap을 설정한다\n- scale을 0으로 했다가 1로 해서 리스타트한다.\n- port forwarding을 해주니까 로컬에서 localhost로 접속이 된다??\n  - kubectl port forwarding 은 입력하는 호스트를 인식해서 실행되나보다\n\ngrafana 올린거에 service를 찾아서 ingress 붙여주니까 잘 된다\n\n- traefik으로 name based routing을 하니까 접속은 되는데 사진은 못받아왔다\n  - grafana도 잘되는 걸로 봐서는 ingress가 단일 주소만 받아오는건 아닌듯\n- [x] digital ocean dns 세팅해서 휴대폰으로 접속 확인\n\n  - cloudflare 를 terraform으로 올려서 dns를 쓰도록 해야겠다\n\n- [ ] 상태 모니터링 알림 추가\n- [ ] 배포 시 상태 추적해서 오버로드 발생하면 바로 알림 오는지 확인\n- [ ] 알림 받으면 바로 롤백하는 것도 해본다\n\n내부 시스템은 내부적으로만 traefik으로 설정해놓으면 되겠다\ngrafana.system 정도로 /etc/hosts만 다 설정해주면 로컬용으로 쓸 수 있겠다\n\n- [ ] golang으로 api 서버 만들어서 telegram 보내는 것도 등록\n  - 추상화 잘 해서 telegram을 바로 slack으로 대체 할 수 있도록\n- [ ] jenkins 설치 후 pr 테스트\n\n#### 확장 가능한 최소한의 인프라\n\n3노드 쿠버네티스\n로드밸런서\n로그 수집\n모니터링\napi\nfeedback\nci/cd tool\n\n- 사용하는 서비스\n  kafka, redis, mongodb, hadoop, rdbms\n\n#### 개인 서버 구축\n\nIaac로 되어야 한다\n원할 때 접속, 배포가 쉽게 되어야 한다\n재구축이 바로 되어야 한다\n서버를 돌리고 있는데 서버가 지저분해져서 다시 쌓아올리고 싶을 때 원하는 상태로 바로 만들 수 있어야 한다 - vagrant kubernetes setting need too many time\n쿠버네티스 안에서 돌리고 에러 한눈에 확인 필요\n쿠버네티스는 어디서 돌리지? 일단 베이그런트로\n카오스 몽키가 로그 서버도 멈추게 할 수 있나?\n각 앱들을 쿠버네티스 파일로 만들고 IaaC가 되도록\n로컬, 클라우드 확인\n\n## Tool\n\nk3s\n\n- tool\n- service\n- infra\n\ntool\n\n- n8n\n- tailscale\n\nservice\n\n- note server - redis\n- wiki - postgres\n- searching - elasticsearch\n\ninfra\n\n- grafana\n- prometheus\n- traefik\n- argocd\n\n\n#### 버전 확인해서 업데이트 필요\n- eks\n- nginx\n- autoscaler\n- terraform\n- lb controller\n\n---\n\n나의 Kubernetes 시스템 운영\n\n- mcp 돌리고\n- langconnect 라는거 돌려볼까\n- n8n 돌리고\n- 버전 관리 계속 체크하게 해보고\n- keda\n- karpenter\n- grafana loki prometheus\n- 키값 vault로 관리\n- argocd 또는 spinaker 테스트 환경\n\nEKS는 클러스터 운영비만 최소 월 $72 라서 무리가 있다\n여기에 ALB도 달면 월 20달러가 더 나온다\neksctl을 쓰면 간단한 yaml로 eks를 띄울 수 있다\n\n```yaml\n# cluster.yaml\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\n\nmetadata:\n  name: my-cluster\n  region: ap-northeast-2\n\nnodeGroups:\n  - name: ng-1\n    instanceType: t3.small\n    desiredCapacity: 1\n    volumeSize: 20\n```\n\n- 내가 쓰는 툴의 버전 업과 변경 사항을 알려주는 ai 알림\n  - my_space의 항목들을 모니터링 하면 되겠네\n  - terraform\n  - eks\n  - nodejs\n  - kubernetes\n  - grafana / loki / prometheus\n- 서비스 초창기에는 ECS를 쓰다가 사이즈가 커지면 EKS로 옮기면 안되나? EKS가 해주는게 뭐지\n  - kubernetes 설정\n  - 내 환경은 kubernetes여야 다루는 걸 익힐 수 있다\n- EKS 버전 업 시 테스트 전략 1. 테라폼으로 테스트 클러스터 생성 2. 현재 워크로드 복제 - `kubectl get all --namespace={app} -o yaml > backup.yaml` - `kubectl apply -f backup.yaml --namespace {app}` 3. 테스트 자동화 실행 - k6나 curl healthcheck, e2e 테스트 4. 업그레이드 시뮬레이션 - eksctl upgrade cluster 5. addon 호환성 확인 - vpc-cni - coredns - kube-proxy - ebs-csi - kubectl plugin 중에 convert라는게 있는데 버전 업그레이드 시 manifest를 변경해주는 커맨드 - kubescape라는 클러스터 검사 프로그램도 있음\n  kubectl\n  X\n  kube-apiserver\n  X\n  controller-manager, kube-scheduler\n  X-1\n  kubelet, kube-proxy\n\n#### docker compose 대신 minikube를 개발환경으로 쓰면서 연습?\n\n그러면 docker는 아는데 kubernetes를 모르는 개발자들은 접근이 힘들다.\n\n- 데브시스터즈에서는 관리페이지를 만들어서 클릭으로 쉽게 접근 가능하게 했다.\n  - https://www.slideshare.net/seungyongoh3/ndc17-kubernetes\n  - 근데 과제를 받아서 이걸 바로 실행할 수 있게 제출하려면 도커 컴포즈가\n    간단하다. 컴포즈를 써야하는 경우와 아닌 경우를 어떻게 구분할까\n- 카카오에서도 관리페이지에서 요청해서 중앙 자원을 사용하는 식으로 개발 인프라를 구성\n- 개발 시에도 AWS 자원을 써야하니까 중앙 요청식이 관리에도 수월하지 않을까\n\n오픈소스로 공유할 때 이미지만 만들어놓고 yaml 설정파일만 있으면 쿠버네티스를\n안쓰는 사람이 쉽게 접근할 수 있을까?\n\n- 쿠버네티스를 쓰더라도 Dockerfile은 필요하니까 compose를 굳이 제공하지 않아도\n  괜찮을까\n- 내가 compose 명령어 쓰는게 편해서 쓰려는거지 모두에게 편하지는 않을 수도 있다.\n\n이게 DevOps에서 오히려 멀어지는 길이 아닐까\n\n- Kubernetes를 익혀야하나 말아야하나가 큰 경계선일 것 같다. kubernetes는 도구일 뿐인데...\n- spinnaker를 쓰면 개발과 운영의 환경을 모두 관리할 수 있을까\n- 회사에서 구축한 것을 이용하는 느낌보다는 집에서 혼자 구축해도 똑같은 환경을\n  만드는 것이 의미가 있겠다.\n- db, kafka가 필요할 때 쉽게 추가하는 환경이 필요한거지 kubernetes가 필요한건\n  아니다.\n- 웹화면에서 이미지를 클릭해서 주소를 얻으면 끝. 추가 설정을 넣을 수 있어야 한다.\n\n근데 kubernetes는 그 세세한 부분을 설정할 수 있어서 사용되는데, 웹화면에서는\n간단한 것만 요청하게 된다. 그걸로 충분할까?\n\n자꾸 운영과 개발을 분리해 생각하려고 하면 안되고 DevOps 직무의 역할은 개발자가\n운영을 쉽게하는 환경 그 자체를 만드는 것일 것 같다.\n\n- 전체적인 환경을 개선하는 것에 신경을 쓰는거지, 전체 환경을 구축해서 그 안에서\n  활동하게 하도록 하는게 아니다. 미묘하다.\n\ngithub action은 github에 종속적이다. CI/CD도 범용적일 필요가 있다.\n코드로 파이프라인을 구성할 수 있는 점은 좋지만 스크립트를 쓰는게 더 범용적일\n것이다. 근데 그럼에도 각 서비스마다 제공하는 기능을 활용해야 할 때도 있다.\n\n- docker는 의존적이지만 추상화할 생각을 안해봤다. 무슨 차이일까. 결과물은\n  image라는 범용적이고 공통적인 것이라서? 그렇다면 CI도 빌드 결과물은 같다.\n- git, docker는 되고 jenkins, kubernetes는 안되나\n- terraform을 선택하면서 ansible, chef와 비교했는데 왜 terraform 이 선택됐나\n\n#### 미니큐브 개발환경 셋업\n\n원래 docker compose에서 디폴트로 스니펫 만들어서 쓰던걸 변환하는 작업부터\n시작해서 볼륨 붙이고 내부 접속, 외부 접속하는 것까지 확인\n\n운영 환경과 미니큐브를 유동적으로 사용할 수 있는지 확인\n\n도커 이미지는 어차피 만들어야 하는데, yaml에서 끝내면 더 좋겠다\n\n\n## 2025 세팅 다시하기\n#### 07-24\n\n- 모니터링 서버 띄우기까지만 일단 해보기\n- 내일은 ssl 설정 해봐야겠다. cert-manager를 설정해야함. 일단 주석처리.\n- ingress controller 부터 안뜨는데\n\t- rbac에서 pods 리소스 get 권한이 없었다고 함.\n\t- 근데 terraform으로 업데이트 안되서 kubectl patch로 수정됨\n\t- 아하. 노드가 부족하니까 거기서 계속 왔다갔다하면서 시간도 오래 걸리고 동작도 막힘\n- 리소스가 적으니까 되게 다 막히고 잘 안된다\n- 그냥 k3s 를 띄워서 하는게 나을수도\n\n\n#### 07-23\n\n- kube config 추가하기\n\t- `export KUBECONFIG=~/.kube/config:~/.kube/my-k8s-kubeconfig.yaml`\n\t- `kubectl config get-contexts`\n\t- `kubectx` 로 추가된거 선택\n\t- `k get node` 로 확인\n- 앱을 띄우는걸 argocd로 할까 아니면 terraform으로 그냥 할까\n\t- n8n 같이 내가 소스 관리 안하는건 그냥 terraform으로 해도 될 듯\n- https://github.com/digitalocean/container-blueprints/tree/main/DOKS-CI-CD\n\t- 이거도 해볼만 할듯 tekton을 CI로, argocd를 CD로, knative로 serverless\n- 로드밸런서 추가\n- 모니터링 telemetry 추가\n- ha 추가할 때 비용 드나?\n\t- controlplane ha 는 $40 든다\n- autoscale은 지원해주는데 안쓰려다가 일단 쓰고 모니터링 해본다\n\t- 이거 autoscale 옵션은 어딧지?\n\t- 이것도 terraform으로 설정하면 됐음\n- nginx ingress controller는 따로 marketplace에서 깔아줘야한다\n- signoz 설치\n\t- clickhouse도 설치해야하고 좀 리소스를 많이 먹는 듯 싶다\n- nginx ingress controller로 설정하고 쓰는게 loadbalancer 1개로 쓸 수 있고 설정도 용이해서 좋음\n\t- ingress controller도 리소스를 쓰는거다\n- dns 설정은 수동으로 해줘야겠지? -> 테라폼으로 확인\n- ingress 경로 맞춰주기\n- 내일은 노드들이랑 파드들 한눈에 모니터링 할 수 있게 해보고 싶다\n\n#### 09-10\n- kubernetes 환경을 적당하게 돌리려면 인프라 유지비용이 월 5만원 이상 든다. 이건 좀 과한 듯. minikube로 연습을 하되 서버리스로 잘 관리하는 걸 연마해야겠다. kubernetes의 운영적 문제를 따로 잘 확인해봐야겠다."},{"headings":[{"value":"Fail Experience"},{"value":"nvme 를 사서 호환성이 떨어진다"},{"value":"내가 생각한 것을 내 삶에 적용 못시키고 있었다"},{"value":"백업 전략을 세워야 한다"},{"value":"마음에 걸린다"},{"value":"일을 큰 그림에서 바라보기"},{"value":"problem solving"},{"value":"Uncategorized"},{"value":"이곳은 1년 이상 보관하지 말자. 옮길 수 없으면 지운다."},{"value":"도서정가제 하는이유 반발하는 이유"},{"value":"메시와 보드진. 구단의 영역에 대한 과도한 침범 vs 정당한 불만 표출"},{"value":"정부가 무난하게 성적을 내면, 투명성을 요구하게 되고,"},{"value":"듀랑고는 과금정책을 줄이고 컨텐츠에 집중하는 이상향을 꿈꿨지만 유저들은"},{"value":"닌텐도 게임은 버그가 없나?"},{"value":"08-11"},{"value":"[[ㄴㄴ]]"},{"value":"글이 되기 전 꼭지"},{"value":"자기 PR vs 과시"},{"value":"자기 PR의 시대 (Public Relation)"},{"value":"자기 자랑 vs 자기 PR"},{"value":"말을 할 때와 안할 때"},{"value":"천천히 시작하기의 장단점"},{"value":"11-18"},{"value":"11-05"},{"value":"11-03"},{"value":"10-28"},{"value":"10-27"},{"value":"10-21"},{"value":"09-24"},{"value":"정적 페이지 자동 호스팅"},{"value":"s3 비용은 어떻게 과금되는가"},{"value":"백엔드에 구현하는게 좋을까 프론트에 구현하는게 좋을까"},{"value":"08-26"},{"value":"몽키 세팅"},{"value":"08-18"},{"value":"08-12"},{"value":"몽키"},{"value":"람다로 배치 돌리기"},{"value":"06-25"},{"value":"05-15"}],"fields":{"slug":"/fail_experience/"},"rawMarkdownBody":"\n# Fail Experience\n\n- Before setting check state\n  - Time is enough\n  - If had problem, there's haven't backup. Big problem\n- Two more thing I do at once. It is hard. Don't do that\n- 내용을 안보고 복붙만 했다\n- 데이터를 신경을 안썼다\n- 테스트 후 원복을 제대로 안했다\n- 코드 수정 후 확인을 하지 않았다\n- c 드라이브에 있던 mx 드라이브가 포맷으로 날라갔다\n  - onetab also dropped..\n    > 또 멍청...\n- I have removed onenote document directory. then can't sync onenote.\n- 방울토마토를 떨어뜨렸다. 걸쳐진 물건이 움직이는 것을 신경안쓰는 탓..\n- go wasm 테스트하다가 붙여놓은 코드 제대로 확인안하고 돌려서 컴터 뻗음\n  - whenever import external library go to freeze\n- forgotten food's expire date\n\n#### nvme 를 사서 호환성이 떨어진다\n\n기존 노트북과 새로 살 노트북에 모두 사용하기 위해 m.2를 찾은 것인데\nnvme와 sata의 차이를 찾아보고 둘의 작동방식이 다름을 알았음에도 이렇게 호환이\n안될 것이라고는 생각하지 못했다. 무언가 어댑터가 있을거라는 막연한 생각만 있었다\n역시 또 끝까지 생각 안하고 막연하게 나둬서 문제가 되었다.\n\n#### 내가 생각한 것을 내 삶에 적용 못시키고 있었다\n\n알고리즘에 대한 지식을 쌓길 바랬으면\n알고리즘에 대해 자료를 모으고\n측정가능한 목표지점을 세웠어야 했는데 전혀 그러지 않았다\n\n## 백업 전략을 세워야 한다\n\n오늘 미디어 폴더가 날아갔다\n앞으로 이런 사태가 일어났을 때 이를 되돌리는 방법을 만들어야 한다\n미디어 파일은 용량이 너무 커서 백업을 하면 디스크를 두배로 먹게될 것이다\n두배로 먹되 최신의 백업만 남겨도 될 것이다\n개발용 폴더는 수시로 백업이 되야하고 최신 뿐만 아니라 일정 기간별로 기록도 남아 있어야 한다\n워크스페이스는 github에 저장하고 drive에도 백업한다\n개발환경파일 등은 어떻게 관리해야 할까\n\n#### 마음에 걸린다\n\n벽에 벽지가 약하다는 것을 간과하고 양면테이프로 돼있는 걸이를 벽에 걸어서 벽지가 찢어졌다\n\n음식물쓰레기를 버리는 곳에 뒀는데 다음 날 그 봉투가 뜯어져서 바닥에 널려있었다. 근데 내가 뜯은게 아니라고 그냥 모르는 척 했다. 내가 챙겼어야 할 부분이었다.\n\n#### 일을 큰 그림에서 바라보기\n\n상황: 분명 잘 동작하는 건지 확인하는 질문을 받았음에도, 다시 확인해보지 않고 직감적으로 맞다고 얘기하고 그냥 넘어갔다\n\n잘못된 점: 질문에 제대로 고민을 하지 않고 대충 답하고 넘어감\n\n고칠 점: 질문을 받으면 고민을 하고 확인을 하고 대답한다.\n\n일에만 몰두하지 말고 주변을 돌아보기\n\n## problem solving\n\n- faced problem\n- return to before change\n- change each one\n- find exactly problem\n- solve\n\n[[blog/Deploy_ERP_server_story#missed items]]\n\n\n\n# Uncategorized\n\n\n## 이곳은 1년 이상 보관하지 말자. 옮길 수 없으면 지운다.\n\n\n#### 도서정가제 하는이유 반발하는 이유\n하는이유\n할인을 할 힘이 있는 대형유통사 때문에 지역서점이 망할 수 밖에 없다\n가격할인 경쟁으로 이어지면 창작자가 피해를 보게 된다\n\n반발하는 이유\n시행 후 지역서점이 살아났느냐? 아니다\n지금을 보면 전체적인 판매량은 감소하고 책 값은 상승했다\n책을 많이 보지 않는 현실과 함께\n책이 팔리지 않음으로써 인쇄를 적게 하고 그럼으로써 단가가 상승하게 되었다\n\n자본주의 시장에서 지역서점이 경쟁력을 갖추지 못하면 도태되는 것인가\n대기업의 경쟁력을 지역서점을 이길 수 없는 한계가 있는 것인가\n\n대형·온라인 서점이 도서 매입가는 정가의 50~65% 수준이지만, 중·소형 서점은 이를 70~75%에 매입한다\n\n작가들은 도서정가제를 응원하는 쪽\n> “내 첫 번째 정체성은 작가가 아니라 독자다. 도서정가제 없는 세계를 겪어봤기에 당시로 돌아가는 게 무섭다”면서 “도서정가제가 없었던 때는 베스트셀러 순위에 느닷없이 그날 많이 할인된 책들이 올라가기도 하고 생태계가 완전히 붕괴됐다. 출판사는 신작을 내는 데 부담을 겪고 그렇게 다들 몸을 사리다 보니까 젊은 작가들, 뭔가 다른 것을 말하고 싶은 출판인들이 설 땅이 점점 좁아졌다”고 돌이켰다. “다 무너지고 있다고 생각될 때 도입된 게 도서정가제”라며 “그 제도를 만들어놓으니까 신기하게도 1인 출판, 모험적인 책들, 대안적 목소리들, 작가들, 서점들이 자발적으로 살아났다. 지금 정부는 시민의 자발성에 빚지고 있는데, 자라날 수 있는 씨앗이 좀 더 길게 자라도록 해야 한다”고 강조했다.\n>> 도서정가제에 대한 한강 작가의 입장\n\n#### 메시와 보드진. 구단의 영역에 대한 과도한 침범 vs 정당한 불만 표출\n바르셀로나의 보드진은 몇년마다 투표를 통해 선출된다\n지금 선출된 보드진은 결과를 안좋게 보여줬고 감독은 계속 교체되었다.\n심지어 팀내 프랜차이즈 스타가 보드진에 불만을 품고 이적을 요청하기에 이르렀다\n감독은 계속 바뀌고 선수단도 안정적으로 꾸리지 못한(아르투르를 피아니치와 스왑딜을 한 것에 팬들의 불만) 보드진이 현재 상태에 대한 책임을 왜 지지 않는 것일까\n보드진의 삽질이 없었다면 메시라는 선수 한 명이 구단을 좌지우지하는 상황이 구단을 운영하는 보드진에게 영향을 끼칠 수 없다는 반론이 재기될 수도 있겠으나 지금까지 보드진은 과도한 보호막 안에 있었다는 생각이 훨씬 크다\n\n#### 정부가 무난하게 성적을 내면, 투명성을 요구하게 되고,\n투명성은 다시 성적을 낮추고, 다시 숨긴채 일이나 잘하라고 한다\n\n테러감시라는 명목하에 감시를 하게 된다\n\n주요인물을 조사하면 그 관련된 사람을 조사하고 다시 또 관련된 사람을 조사하면 수가 엄청나다\n그 사람들은 찾기 전에는 그냥 모래였지만 찾겠다는 의도가 생기면 검색망에 걸리게된다\n\n#### 듀랑고는 과금정책을 줄이고 컨텐츠에 집중하는 이상향을 꿈꿨지만 유저들은\n게임이 망한 후 재미없다고 한다. 서버문제와 노가다식의 게임진행방식이 문제가 있었고 리니지는 과금으로 욕먹지만 잘나가고 있다\n온라인게임에서는 모두를 위한 평등한 게임은 모두를 만족시킬 수 없는 환상에 불과한 것일까\nhttps://m.fmkorea.com/best/2991103061\n\n#### 닌텐도 게임은 버그가 없나?\n예전 콘솔게임은 업데이트도 안되는데 버그를 어떻게 잡았나?\n- 버그가 없지 않다\n- 하지만 이 버그를 이용해 게임 매니아들이 또 다른 컨텐츠로 이용한다.\n\n\n---\n\n1학년 입학하는 아이에게는 어떤 말이 도움이될까 어떤게 의미없을까\n- 별거 없다\n\n해방\n무엇에 대한 해방\n나는 해방되어있나?\n내가 무엇의 노예일까\n\n밸런스를 찾고 지금 하던것을 계속 하고 일을 은퇴할때까지 하면 충분히 먹고살고 할수 있다\n그런데 그렇게 살면 충분할까\n밸런스를 쫓는 삶 그걸로 충분할까\n그냥 살다보면 조금씩 성장하는 삶 그걸로 충분할까\n\n인간경험이 많은 것에 자격지심\n연애에 자격지심\n있는걸 인정하고 넘어서면 된다\n\n개똥이라는 이름에서 다정함을 느끼는 황인찬\n\n정보과잉 속 영어를 배움으로써 얻는 정보량\n책을 읽음으로써 얻는 정보량을 생각하면 영어를 배우지 말아야 할 것은 아니다\n\n남성다움과 자상함\n\n농담은 상대방이 진짜 결핍을 가지고 있는것에는 하면 안된다\n상대방이 잘할거같은걸 괜히 놀리는건 농담이 된다\n근데 그러려면 상대를 알아야 한다\n\n\nSQS 속성, 특징 값 확인\nDynamoDB 속성, 특징 값 확인\n\n\n\n\n## 08-11\n\n\n\n#### [[ㄴㄴ]]\n##### 글이 되기 전 꼭지\n자기 PR vs 과시\n과시와 자기 pr은 뭐가 다를까\n말하지 않아서 서운할 수 있는 경우\n\n##### 자기 PR vs 과시\n과시와 자기 pr은 뭐가 다를까\n\n과시는 우쭐대는 것처럼 보이고 자기pr은 정보를 준다\n과시는 가진것을 드러내는 것이고 자기pr은 자신을 드러내는 것\n베니스의 상인에서 금궤 고르기 장면\n애플의 디자인\n미즈노 러닝슈즈\n\n그릇이 크다는건 자신을 과시하지 않아도 드러나는 것이라고 생각했다. 근데 맞나?\n\n디자인만 다른 상품, 조잡함, 번지르르\n\n겸손과 브랜딩\n관종과 셀럽\n있어빌리티\n\n##### 자기 PR의 시대 (Public Relation)\n면접에서의 자기소개와 자기PR - 사실나열과 강점활용\n\n##### 자기 자랑 vs 자기 PR\n수치심\n내가 가진 장점을 어필\n진정성\n표현과도 얽혀있군, 표현력\n\n권력욕, 인정욕구\n나는 그래서 사실은\n내가 얘기 안해도 나의 업적을 다른 사람이 말해서 알아줬으면 좋겠다\n내 업적을 다른 사람이 또 다른 사람에게 얘기해주면 기분이 짱 좋다\n나도 다른 사람 업적을 다른 다른 사람에게 말해줘야겠다\n\n진광불휘 - 참된 빛은 번쩍이지 않는다\nhttps://www.kihoilbo.co.kr/news/articleView.html?idxno=1029105\n\n나는 어떻게 자기 PR을 하면 되는지 알지 못하는데 이걸 본문에 주요 내용으로 담으려고 했다\n그러니까 글이 안써지지.. 그러면 이걸 알아가는 과정을 본문에 담고 어떤 차이가 있는지 확인하는 것까지 내가 할 수 있는데 그것만으로는 하나의 글이 되기엔 부족하다. 이걸 어떻게 마무리지으면 좋을까\n\n#### 말을 할 때와 안할 때\n대화할 때 얘기를 어디까지하고 어떤 건 안 할지에 대한 것을 자기 PR과 연관지어 생각했었는데 자기PR과는 완전 다른 영역이었다. 자기 PR은 강점을 드러내는 것이고 대화할 때는 그러기 위해 하는게 아니다. 그냥 말하다가 흘러나올 수는 있지만 그러기 위해 하는게 아니다. 그렇다면 대화는 뭘까\n\n말 안하기의 장단점\n장점\n- 무슨 생각을 하고 있는지 알 수 없다\n- 말한게 잘못 됐을 때 비난의 구실은 없다\n- 섣불리 말하지 않아서 생각을 더 할 수 있다\n단점\n- 무슨 생각을 하고 있는지 알 수 없다\n- 아무 얘기도 안해서 비난의 구실이 될 수 있다\n- 말할 타이밍을 놓쳐서 더 말 할 기회가 없을 수 있다\n\n\n몸을 사리는 것\n말을 아껴서 다른 사람이 나에 대해 말하는 것을 막기\n말을 해서 다른 사람이 내 이야기를 다른 사람에게 하는 것\n나를 낮추었더니 다른 사람이 나를 깎아 내리는 경우\n말을 해서 내가 다른 사람과 연결 되는 것\n\n잘난척을 하지 않으려고\n아는 척 하지 않으려고\n아는게 있어도 말하지 않았다\n그럼 무엇을 말 할 수 있을까\n\n짝짓기를 하는 대부분의 동물 사회에서 과시는 해도 괜찮고 하지 않아도 괜찮은 선택의 문제가 아니라 필수다.\nhttps://economist.co.kr/article/view/ecn202002020016\n\n처음 봤을 때 대시는 성공률이 낮지만\n어느 정도 안면이 트고 난 후에 기회가 있을 때 단숨에 대시하는 건 천천히 하는 것보다 효과가 좋을 것 같다\n\n\n#### 천천히 시작하기의 장단점\n시간이 없어서 단번에 하려고 하면 일이 잘 안된다\n천천히 하나씩 시작하면 토끼와 거북이처럼 결과가 더 나아진다\n관건은 처음 시작할 때 하는 양을 늘리는 것? 다시 한번에 하려는 것처럼 되버릴 수도 있다\n\n\n---\n\ninstagram shnohshnoh\n\n슬랙에는 깃랩 연동되는게 이미 만들어져있을거같은데 찾아봐야겟다\n\n\n운영배포하는거 한번 보고\n언젠가는 자동화할수 있을지..\n\n\n## 11-18\n- [ ] export\n\t- api 호출이 가능한 html 만들기\n\t- https://dev-bak.tistory.com/40\n\t\t- html에서 호출은 가능할 거 같다.\n\t- 템플릿을 html 화 하면서 한번에 바꿔주는 라이브러리도 있지 않을까\n\t- html 을 만들어놓고 거기에 변수만 넣어주고\n\t- api도 html로 호출할 수 있게 해서\n\t- s3에 템플릿이랑 변수를 합쳐서 업로드하게 하면\n\t- 되지 않을까\n- 템플릿을 만들어서 템플릿 페이지로 이동시켰을 때 화면구성이 뜨도록\n\t- 뼈대가 있고\n\t- 안에 switch로 템플릿을 선택하고\n\t- 값들을 변수로 넣는다\n- serverless nextjs 를 써서 그냥 라우팅 쓰는게 낫지 않을까\n\t- serverless nextjs가 next13 부터는 지원을 안해줘서 대안이 필요\n\t- sst 라는게 있다\n\t- https://sst.dev/examples/how-to-create-a-nextjs-app-with-serverless.html\n\n## 11-05\n\n- [x] 메인 배경화면 띄우기\n\t- 리로드 되면 styled component 값이 바뀌어서 image 링크랑 연결이 안됨\n- [ ] export 폰트 파일 막기\n- [ ] 버튼 누르면 코드로 export 시키기\n\t- next export를 코드로 실행시키는 코드가 17년도꺼라 지금은 임포트가 안되는데 뭔가 임포트할 방법이 있을 거 같은데 찾아보는중\n\n## 11-03\n\nserverless-nextjs 를 쓰면 api도 람다로 자동으로 배포해주나?\nhttps://github.com/serverless-nextjs/serverless-next.js\n\n## 10-28\nTODO\n- [x] s3 주소 스테이징과 연결하기\n- [ ] 프론트 -> html -> s3 -> 호스팅 확인\n\t- renderToHtml nextjs 서버에 요청하는 듯\n\t- ReactDOMServer 리액트 기능인듯\n![[Pasted image 20231028130238.png]]\nhttps://react.dev/reference/react-dom/server/renderToStaticMarkup#rendering-a-non-interactive-react-tree-as-html-to-a-string\n\n![[Pasted image 20231028152718.png]]\nhttps://github.com/vercel/next.js/issues/2954\n- next export를 코드로도 할 수 있는 듯\n\n프론트 작업\n- [x] s3 업로드\n\t- cors에 막힘\n\t- s3에 cors 설정 추가해줬지만 에러 계속 뜸\n\t- 버킷 이름을 잘못 입력해줘서 그런거였다\n- 프론트에서 백엔드 api 호출\n\t- 무료 호스팅 서버는 CNAME 설정이 유료라서 설정을 못해서 thingdong.kr 에서 리다이렉트 되게 했는데\n\t- react fetch를 쓰면 리다이렉트 되는 응답은 받기가 힘들다\n\t- 터미널에서 리다이렉트 응답을 받을 수 있는지는 확인해보니 된다\n\t\t- `curl -L https://sta.thingdong.kr`\n\t- 운영에서는 필요없는 동작이지만...\n\t- 에러에 cors가 뜬다. 백엔드에 cors 설정 추가해주면 될듯.\n\t- 근데 cloudfront에서 header에 뭔가 넣어줘서 해결할 수 있을까?\n\n- [x] s3에 각각의 파일을 숏 url 주소로 매핑하는거 확인\n- cloudfront에 origin access를 추가하니까\n- 생성된 cloudfront에 origin 설정이 s3가 뜬다\n- https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/tutorial-s3-cloudfront-route53-video-streaming.html\n1. cloudfront에서 origin access 추가\n2. cloudfront - distribution 추가\n\t1. s3를 선택하고 위에서 만든 origin access를 연결\n3. another domain name 등록 후 route 53 에 연결\n\n\n\n## 10-27\n\ns3 주소 dns와 연결\n- 가비아로 주소 구매\n- route 53의 ns 주소를 가비아에 연결\n- s3 버킷이름을 도메인주소로 만들어서 route 53에 연결\n- 권한 설정 해줘야 함 403 에러 발생\n- 그래도 일단 가비아 ns가 aws걸로 변경된 것 자체는 확인이 된 듯\n- `{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"PublicReadGetObject\", \"Effect\": \"Allow\", \"Principal\": \"*\", \"Action\": \"s3:GetObject\", \"Resource\": \"arn:aws:s3:::wedding.thingdong.kr/*\" } ] }`\n- policy 이걸로 해주니 접속 잘됨\n\n\nwww 주소 연결 안됨\n- nhost로 띄운 사이트의 주소로 CNAME으로 연결 시 접속이 안됨\n- alb로 redirect 시켜주도록 설정해봤으나 안됨\n- 왜 안되지?\n- nslookup 으로 찔러보면 같은곳을 가르키긴 함\n- s3 로 리다이렉트 된다고 해서 리다이렉트 되는 주소로 버킷을 만들어서 해봤는데 s3가 route 53에 안뜸\n- cloudfront로 s3를 연결해서 해봤지만 cloudfront 리소스도 안뜸\n- cloudfront 주소를 cname으로 바로 연결해봤지만 안됨\n- DNS_PROBE_FINISHED_NXDOMAIN 에러 뜸\n- https://docs.aws.amazon.com/ko_kr/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html\n- cloudfront 에서 another domain names를 thingdong.kr로 설정하니까 뜬다.\n- 루트 도메인과 서브도메인 각각 등록 필요\n\t- `thingdong.kr`\n\t- `*.thingdong.kr`\n\n\n## 10-21\n- liquibase diff 적용\n\t- intellij에 gradle 설정을 intellij use 로 바꾸고\n\t- plugin 설치하니까 된다\n- [x] redoc 적용 및 사용 예제 만들기\n- [x] db 에러 없애기\n\t- dialect 바꿔주니까 됨\n\t- 스테이지는 비밀번호 리셋하니 됨\n\n\n`OpenAPI spec`는 RESTful API 설계를 위한 업계 표준 사양을 나타내고\n`Swagger`는 OpenAPI Spec 에 맞게 디자인하고 문서화하고 빌드하기 위한 도구들의 모음\n(open api 로 띄어쓰면 공공 api를 뜻함)\n\n> `OAS(OpenAPI Specification)`는 REST 명세 포맷으로 널리 사용되고 있는 포맷 중 하나이며, 프로그래밍 언어에 종속되지 않습니다. OAI(OpenAPI Initiative)에서 만들어졌고, [OAS(https://openapis.org)](https://openapis.org/)에서 커뮤니티가 주도적으로 만들어가는 명세 포맷입니다.\n\n`OAS(OpenAPI Specification)`는 json 이나 yml 형식으로 기술해야 하며 OAS 파일을 읽어서 디플로이 해주는 도구(Ex: swagger-ui)를 사용하면 아래와 같이 브라우저에서 편리하게 API 문서를 볼 수 있습니다.\n\n`OAS(OpenAPI Specification)`는 예전에는 Swagger spec으로 불렸으며 3.0부터 [OpenAPI 3.0 Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md)라는 이름으로 표준화되었습니다.\n\nSwagger 3.0 접속 주소 : [http://localhost:8080/swagger-ui/](http://localhost:8080/swagger-ui/)  \nSwagger 2.0 접속 주소 : [http://localhost:8080/swagger-ui.html](http://localhost:8080/swagger-ui.html)\n\n- @Tag(name, description) - 컨트롤러 설명\n- @Operation(summary = \"\", description = \"\") : 특정 API의 요약과 설명을 지정합니다.\n- @ApiResponse : API 결과에 따른 코드와 설명을 추가합니다. (with @ApiResponses)\n- @Parameter(name = \"loginId\", description = \"로그인 유저 ID 값\", example = \"3\", required = true)\n- @Length(max = 20, message = \"사용자 닉네임은 20글자 이하로 입력해야 합니다.\")\n\n\nswagger 주소 : http://localhost:8080/swagger-ui/index.html\nredoc 주소 : http://localhost:8080/dist/redoc/index.html\n\nhttps://hogwart-scholars.tistory.com/entry/Spring-Boot-SpringDoc%EA%B3%BC-Swagger%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-API-%EB%AC%B8%EC%84%9C%ED%99%94-%EC%9E%90%EB%8F%99%ED%99%94%ED%95%98%EA%B8%B0\n\n\n```\n// springdoc  \nimplementation(\"org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2\")\n```\n\n```kotlin\nimport io.swagger.v3.oas.annotations.OpenAPIDefinition  \nimport io.swagger.v3.oas.annotations.info.Info  \nimport org.springdoc.core.models.GroupedOpenApi  \nimport org.springframework.context.annotation.Bean  \nimport org.springframework.context.annotation.Configuration  \n  \n@OpenAPIDefinition(info = Info(title = \"띵동\", description = \"Wedding Invitation API 명세\", version = \"v1\"))  \n@Configuration  \nclass SpringDocConfig {  \n@Bean  \nfun openApi(): GroupedOpenApi {  \nval paths = arrayOf(\"/v1/**\")  \nreturn GroupedOpenApi.builder()  \n.group(\"띵동 API v1\")  \n.pathsToMatch(*paths)  \n.build()  \n}  \n}\n```\n\n```html\n<!DOCTYPE html>  \n<html>  \n<head>  \n<title>ReDoc</title>  \n<!-- needed for adaptive design -->  \n<meta charset=\"utf-8\" />  \n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">  \n<link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\">  \n<!-- ReDoc doesn't change outer page styles -->  \n<style> body { margin: 0; padding: 0; } </style>  \n</head>  \n<body>  \n<div id=\"redoc-container\"></div>  \n<script src=\"https://cdn.redoc.ly/redoc/latest/bundles/redoc.standalone.js\"></script>  \n<script>  \nwindow.onload = function () {  \nvar url = window.location.origin + \"/v3/api-docs\";  \nRedoc.init(url, { scrollYOffset: 50 }, document.getElementById('redoc-container'))  \n}  \n</script>  \n</body>  \n</html>\n```\n\n```kotlin\nimport org.springframework.context.annotation.Configuration  \nimport org.springframework.web.servlet.config.annotation.EnableWebMvc  \nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry  \nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer  \n  \n  \n@Configuration  \n@EnableWebMvc  \nclass WebMvcConfig : WebMvcConfigurer {  \noverride fun addResourceHandlers(registry: ResourceHandlerRegistry) {  \nregistry.addResourceHandler(\"/webjars/**\").addResourceLocations(\"classpath:/META-INF/resources/webjars/\")  \nregistry.addResourceHandler(\"/*.worker.js\").addResourceLocations(\"classpath:/static/\")  \nregistry.addResourceHandler(\"/js/**\").addResourceLocations(\"classpath:/static/js/\")  \nregistry.addResourceHandler(\"/fonts/**\").addResourceLocations(\"classpath:/static/fonts/\")  \nregistry.addResourceHandler(\"/css/**\").addResourceLocations(\"classpath:/static/css/\")  \nregistry.addResourceHandler(\"/favicon.ico\").addResourceLocations(\"classpath:/\")  \n// index.html 파일 경로  \nregistry.addResourceHandler(\"/dist/**\").addResourceLocations(\"classpath:/dist/\")  \n}  \n}\n```\n\n## 09-24\n\n## 정적 페이지 자동 호스팅\n\n사전작업\n- s3 버킷 생성\n- 해당 페이지 html 생성\n\t- 일단 완성된 html을 만들수는 없으니 글자만 있는 html을 가져와서 전달\n- 필요 시 route53에 s3 연결 (s3 주소를 route53 주소와 맞춰야 함)\n\n1. 버튼 누르기\n2. s3에 정적호스팅 사용으로 html 업로드\n3. db에 주소, 만료시간, 숏링크 저장\n\n#### s3 비용은 어떻게 과금되는가\n저장공간 GB 당 $0.023\n데이터 송/수신 GB 당 $0.09\n토이프로젝트 수준에서는 월 1GB 사용이 거의 안나올거라 없다고 봐도 될 듯\n\n\n#### 백엔드에 구현하는게 좋을까 프론트에 구현하는게 좋을까\ns3에 업로드하고 db에 데이터 저장\n어차피 프론트, 백엔드를 거쳐야하는데\nhtml을 생성하고 업로드 하는건 프론트에서 하는게 편하겠다\ndb에 저장하는건 백엔드에서 하는게 정석이긴 하다\n\n\n\n## 08-26\n\n#### 몽키 세팅\n개발 환경 docker로 올릴 수 있게 세팅\n스테이지 프리티어 찾아서 서버 올리고 주소 확보\n\n- 디비 연결\n- 테스트 디비 설정\n- 자바 메모리 과다사용 확인\n\t- https://community.fly.io/t/deployment-of-java-spring-api-using-dockerfile/6708/3\n\n\n## 08-18\n디비스터디\n\n데이터 모델링의 이해\n데이터 모델의 성능\nSQL 기본\nSQL 활용\nSQL 최적화 기본 원리\n\n\n\n\n## 08-12\n- 몽키\n- AWS DA\n- SQLD\n- 상태체크\n\n#### 몽키\n- rds\n    - docker\n- ec2\n- 배포관련 세팅\n    - 스테이지 있이 ㄱㄱ\n- 레퍼런스 조사\n\n배포 파이프라인\n- 개발\n\t- 로컬에서 도커 띄워서 실행\n- 스테이지\n\t- EC2 프론트, 백엔드, RDS, CDN, ecs 를 써보면 좋겠다. fargate도 있네\n\t- ec2만 쓸 때랑, ecs를 쓸 때 비용 비교\n\t- fargate \n\t\t- ecs를 ec2에 띄울 수도 있고 fargate로 띄울 수도 있다\n\t\t- 동일한 리소스를 사용하면 fargate가 더 비쌈\n\t\t- fargate는 운영에서 사용한만큼 사용되게 하고 스테이지는 ec2 최소사양으로 구성?\n\t\t- 네트워크에 제약이 있는 듯 하다\n\t- ecs 위에 있는 것을 개발자가 쉽게 볼 수 있을까?\n\t\t- 존재하는 리소스 : 이미지, 컨테이너\u001e\n\t- code deploy를 써야할까? github action으로 하자\n\t- 프론트는 서버를 띄우지 않고도 사용할 수 있을 거 같은데\n\t\t- 메인페이지는 정적페이지\n\t\t- 에디터화면은... 필요하겠다\n\t- terraform vs cdk typescript\n\t\t- https://tech.inflab.com/202202-aws-cdk-to-terraform/\n\t\t\t- 실제 리소스와 비교 방법이 cdk에 약하다?\n\t\t\t- cdk로 구성하면 더 복잡하다?\n\t\t- https://tech.inflab.com/202202-aws-cdk-to-terraform/\n\t\t\t- terraform만 aws에서 코드로 import가 가능하다?\n\t\t- https://www.linkedin.com/pulse/5-reasons-why-startups-should-choose-aws-cdk-over-terraform\n\t\t- cdk를 typescript로 작성할 수 있다는 점에서 매력적이었지만 aws에 종속적이라는 점에서 별로다\n\t\t- terraform에서 sg, vpc 만드는 부분을 모듈을 쓰면 간단하게 될까\n\t\t- https://wan2.land/posts/2022/09/30/aws-cdk-to-terraform/\n\n![[Pasted image 20230812134203.png]]\n\nk8s를 위한 cdkk8s라는것도 있다\ngcp는 cdk가 따로 없는 듯 하고 cdk for terraform을 이용해서 terraform을 거쳐서 사용은 할 수 있는 것 같다\ncdk for terraform 은 terraform에서 만든 건가 보다\n\n#### 람다로 배치 돌리기\n람다가 디비에 접근해서 배치를 실행시켜주면 배포가 편해질까?\n\n\n## 06-25\n\n- [ ] 캠페인 연동 시 문제가 생길만한 부분이 있을까\n\t- 캠페인 모니터링 로직\n\t- 캠페인이고, lastSendAt이 이전시간이고, 메시지상태 3000, 메시지리절트 상태 1000\n\t- 이렇게 되면 캠페인이 연동이 됐는지 여부는 알 수가 없다\n\t\t- 그래서 연동이 안된걸 몰랐다\n\t\t- 연동이 되야하는걸 다 됐는지 알려면?\n- [ ] CKA 자격증 \n\t- kuberntes cheat sheet\n\n\n## 05-15\n\ndocker dagger plus\n\nnextjs - tailwind\nhasura\nrds\nbeanstalk\n\n\n어따 배포하지\n- docker container\n- 데이터\n\t- minio 를 거쳐 s3?\n\t- postgres rds\nhttps://free-for.dev/#/?id=docker-related\n\n자바를 jar로 배포하는게 나을까 docker로 배포하는게 나을까\njar를 container로 감싸게 되는데\n실행하는 코드를 dockerfile 안에 넣어놓을 수 있다\n\n\n인프라를 코드로 관리하는 것이 꼭 필요한 것이 아닐 수 있다\n- 관리 차원에서 관리해야하는 부분이 많아진다고 꺼려할 수 있다\n\t- 근데 장기적인 관점에서 관리를 한 곳에서 할 수 있어서 좋을텐데\n\ngitlab에서 eb client 쓸 방법\nhttps://suuntree.tistory.com/331\n\n"},{"headings":[{"value":"Disclaimer"},{"value":"문제해결법"},{"value":"조건을 단순하고 명확하게 정리"},{"value":"조건과 관련된 정보를 찾아 연결"},{"value":"근거없는 무엇이 개입되지 않아야 함"},{"value":"처리 완료"},{"value":"jupyter notebook"},{"value":"linux wifi hard blocked after suspend(lid off)"},{"value":"raspberry pi network TODO"},{"value":"vagrant coreos"},{"value":"Github officially support https"},{"value":"vagrant"},{"value":"!sdcard cant recognized problem"},{"value":"terraform init"},{"value":"! Kibana error"},{"value":"ansible"},{"value":"ubuntu bluetooth multiple device connect problem TODO"},{"value":"my server terraform GCP AWS"},{"value":"Jenkins"},{"value":"AWS API"},{"value":"grafana prometheus"},{"value":"gatsby troubleshooting"},{"value":"WSL REACT"},{"value":"이클립스"},{"value":"python lambda korean broken"},{"value":"! wasm rack"},{"value":"vimwiki"},{"value":"! docker 실행 안될 시 hypervisor 끄기"},{"value":"! Docker wsl <-> window 통신 하려면 추가 필요"},{"value":"! GitHub Pages is temporarily down for maintenance."},{"value":"! docker 8080 cannot access"},{"value":"! golang test not working"},{"value":"! chsh -s not working"},{"value":"! git - error: ref does not point to a valid object"},{"value":"go"},{"value":"keyboard setting was initialized in zshrc sometimes"},{"value":"npm global permission denied"},{"value":"docker로 클라이언트 테스트"},{"value":"go grpc"},{"value":"kubernetes"},{"value":"kubernetes ingress TODO"},{"value":"kubernetes helm"},{"value":"kubernetes execute tty"},{"value":"Trouble Shooting"},{"value":"! Inactive registered OAuth URIs for your project"},{"value":"! golang fatal"},{"value":"k3s"},{"value":"ubuntu 22 업데이트 후 문제점"},{"value":"ETC"},{"value":"github id/password 로그인 막힌 문제"},{"value":"docker react 404s will fallback to /"},{"value":"golang server TODO"},{"value":"리눅스 부팅 안될 때"}],"fields":{"slug":"/troubleshooting/"},"rawMarkdownBody":"\n# Disclaimer\n\nThis page has a lot of different area's problem. \\\nYou should search your specific trouble with `Ctrl+F`.\n\n## 문제해결법\n\n#### 조건을 단순하고 명확하게 정리\n\n#### 조건과 관련된 정보를 찾아 연결\n\n#### 근거없는 무엇이 개입되지 않아야 함\n\n## 처리 완료\n#### jupyter notebook\n\n- install not working\n- `pip3 install jupyter` -> jupyter notebook not working\n- `sudo apt-get install jupyter-notebook` done\n- ! tensorflow numpy version\n- pip install \"nump<<1.17\"\n- https://github.com/tensorflow/tensorflow/issues/30427\n\n#### linux wifi hard blocked after suspend(lid off)\n\n- `/etc/default/grub`\n  - `GRUB_CMDLINE_LINUX_DEFAULT=\"acpi_osi=! acpi_osi='Windows 2009' quiet splash\"`\n- `sudo grub-mkconfig -o /boot/grub/grub.cfg`\n- https://www.reddit.com/r/MSILaptops/comments/8vk878/ubuntu_wifi_hardware_disabled_after_suspend/e2t1f67/\n\n#### raspberry pi network TODO\n\n- can't connect wifi\n- seem to be a hardware problem, when I used to a raspbian occurred the same problem.\n  cannot access wifi before connecting ethernet\n\n#### vagrant coreos\n\n- clone\n- assign etcd url\n- user-data setting\n- config setting\n- http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter15/02\n- ! vagrant-iginition version with fog-core\n- `wget -c https://releases.hashicorp.com/vagrant/2.0.3/vagrant_2.0.3_x86_64.deb`\n- `sudo dpkg -i vagrant_2.0.3_x86_64.deb`\n- conflicting dependencies fog-core (~> 1.43.0) and fog-core (= 1.45.0)\n- https://github.com/dotless-de/vagrant-vbguest/issues/292\n\n#### Github officially support https\n\n- ! Unavailable for your site because your domain is not properly configured to support HTTPS\n- change dns\n- 185.199.108.153, 185.199.109.153, 185.199.110.153, 185.199.111.153\n- or recreate CNAME file\n- https://github.community/t5/GitHub-Pages/The-quot-Enforce-HTTPS-quot-Button-Isn-t-Working/td-p/11050\n\n#### vagrant\n\n- ! uid not match\n- `rm -r .vagrant`\n\n- If want access each other. Set private network\n\n#### !sdcard cant recognized problem\n\n- `diskpart`\n- `select disk <disk number>`\n- `clean`\n- Using SDFormatter, format\n\n#### terraform init\n\n- ! if storage exist. but occurred error bucket doesn't exist\n- `terraform init -reconfigure`\n- https://stackoverflow.com/questions/59053993/failed-to-get-existing-workspaces-querying-cloud-storage-failed-storage-bucke\n\n#### ! Kibana error\n\n- default host cannot found\n- Need elasticsearch environment docker. setting\n- elasticsearch read only problem\n- maybe hdd space not enough then lock.\n- cannot install sample\n\n#### ansible\n\n- how to prevent to try kubectl init twice\n- ! Failed to get information on remote file (./join-command): sudo: a password is required\n  - `become: false`\n- ! E:Malformed entry 1 in list file /etc/apt/sources.list.d/kubernetes.list.list (Component), E:The list of sources could not be read\n- repo: deb https://apt.kubernetes.io/ kubernetes-xenial main\n- space bar check...\n\n- ! Vagrant access\n  - /etc/ansible/hosts\n    `<ip> ansible_user <> ansible_pass <password>`\n  - apt install sshpass\n- ! Install denied\n  ```\n  # Ansible_book.yml\n  become: true\n  become_method: sudo\n  ```\n- Install docker\n\n#### ubuntu bluetooth multiple device connect problem TODO\n\n- https://www.martinrosselle.com/bluetooth-connectivity-issues-on-ubuntu-and-how-to-fix/\n- fail\n\n#### my server terraform GCP AWS\n\n- Letsencrypt need IP test, it means I need to change DNS before server change\n- Letsencrypt\n- ! failed authorization procedure\n- my mistake. my DNS to set to Cloudflare\n\n- ! Github page build failed\n- site directory some problem -- nono\n- tags file don't allow -- delete tags file (ctags file by gutentags)\n\n#### Jenkins\n\n- ! when plugin install occurred ioexception error\n- image `jenkins` -> `jenkins/jenkins`\n- https://github.com/jenkinsci/docker/issues/785\n- make easy pipeline\n- github -> jenkins -> docker\n- use http? and ssh?\n\n#### AWS API\n\n- Error: Error creating API Gateway Integration: BadRequestException: Invalid HTTP endpoint specified for URI\n- `\"\"` delete\n- Error: Error creating API Gateway Method: ConflictException: Method already exists for this resource\n- https://learn.hashicorp.com/terraform/aws/lambda-api-gateway\n- {\"message\":\"Missing Authentication Token\"}\n- need aws signature\n- https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-use-postman-to-call-api.html\n\n- ! API cannot access\n- using `{proxy+}` all access\n- but root access need more method, integration\n- ! lambda update\n- need s3 to recreate\n- ! s3 notification access fail\n- SNS topic policy name. I had change s3 bucket name, need to change policy\n\n#### grafana prometheus\n\n- prometheus not working\n- ! err=\"opening storage failed: found unsequential head chunk files 194 and 257\"\n- prometheus docker-compose cannot volume folder, need each file\n\n#### gatsby troubleshooting\n\n- ! WebpackError: Minified React error #130; visit https://reactjs.org/docs/error-decoder.html?invariant=1 30&args[]=object&args[]= for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\n- gatsby-ssr.js problem\n\n#### WSL REACT\n\ndocker compose volume 안되는 현상\nln -s /mnt/c /c\ncp -R myproject /c/Users/myproject\npermission deny\n/etc/wsl.conf\n`enabled = true \\ options = 'metadata,umask=22,fmask=11'`\n[https://github.com/docker/for-win/issues/2151](https://github.com/docker/for-win/issues/2151)\nserver nodemon error\nDockerfile에 막아뒀던 copy를 안풀었음3000 포트로 접속 안됨\nvm에서 포트포워딩 해줘야 함\n또는 docker ip로 접속 (192.168.99.100)\nserver로 접속 시 에러\n버튼 누르면 동작\n\n#### 이클립스\n\n점 찍어서 자동으로 안뜨면\nWindow-preferences-java-editor-content assist-advanced-java proposals 활성화\n\n#### python lambda korean broken\n\n- sns -> lambda -> sqs -> lambda2\n- sns -> lambda ok\n- lambda ok\n- lambda -> sqs (?)\n- lambda log in cloudwatch\n- yes, this send unicode.\n- when it sends sqs. ascii broken\n- problem in receive list -> convert string\n- receive body is string, so I've tried string split, but it need json dump\n- sqs -> lambda2 ok (send message test ok)\n- lambda2 ok (korean input test ok)\n\n#### ! wasm rack\n\n- if i want to add package (ex. grpc, aws-cli), go wasm not working. cpu over\n  usage and freezing.\n\n#### vimwiki\n\n- tag\n- ! `[[ ctrl+x ctrl+o` enter not working, instead using `ctrl+o,n`\n- wiki autocomplete enter not working\n- shift+enter working\n- previous link get\n- `nnoremap <leader>l i<c-r>=\"[\" . expand(\"#\") . \"]\" . \"(./\" . expand(\"#\") . \")\"<cr><esc>`\n- https://www.reddit.com/r/vim/comments/f5gi2g/vim_notetaking_automatic_link_creation_between/\n- omnicomplete(autocomplete) enter not working\n- instead using `<S-CR>`\n- Down arrow select content\n- `:inoremap <Down> <C-R>=pumvisible() ? \"\\<lt>C-N>\" : \"\\<lt>Down>\"<CR>`\n\n#### ! docker 실행 안될 시 hypervisor 끄기\n\n- `bcdedit /set hypervisorlaunchtype off`\n- 파워셀에서 명령어를 실행해야 하고 관리자 모드여야 한다\n\n#### ! Docker wsl <-> window 통신 하려면 추가 필요\n\n```\nexport DOCKER_HOST=tcp://192.168.99.100:2376\nexport DOCKER_TLS_VERIFY=1\nexport DOCKER_CERT_PATH=\"/mnt/c/Users/shdke/.docker/machine/machines/default\"\nexport DOCKER_MACHINE_NAME=\"default\"\nexport COMPOSE_CONVERT_WINDOWS_PATHS=\"true\"\n```\n\n#### ! GitHub Pages is temporarily down for maintenance.\n\nit's really just temporarily down\n\n#### ! docker 8080 cannot access\n\n- docker-compose command go run server.go --> run is ok. but can't connect\n- different command and run server.go in docker --> run and connect ok\n\n#### ! golang test not working\n\npackage name\nfolder\ngo env\ngopath\n\n- `import . \".\"` problem\n\n#### ! chsh -s not working\n\n- don't need sudo. but need password.\n\n#### ! git - error: ref does not point to a valid object\n\n```\ngit for-each-ref --format=\"%(refname)\" | while read ref; do\n    git show-ref --quiet --verify $ref 2>/dev/null || git update-ref -d $ref\ndone\n```\n\nfrom https://stackoverflow.com/questions/6265502/getting-rid-of-does-not-point-to-a-valid-object-for-an-old-git-branch\n\n#### go\n\n- ! vim-go binary install failed, could not find 'golangci-lint'\n  - golangci not support go get\n- disable lint check\n- ! could not find gopls -> reinstall gopls\n- wasm function not defined\n  - cache clear\n\n#### keyboard setting was initialized in zshrc sometimes\n\nis it sudo's problem? no\nwhen timeshift run, it's initialized\n\n#### npm global permission denied\n\n```\nmkdir ~/.npm-global\nnpm config set prefix '~/.npm-global'\n```\n\n#### docker로 클라이언트 테스트\n\n172.17.0.1로 통신하면 로컬호스트로 되는데 포트 통신이 안된다.\n\n- `--net=\"host\"` 옵션을 run 시에 넣어준다\n- `docker run --net=\"host\" alpine sh`\n- https://stackoverflow.com/questions/31324981/how-to-access-host-port-from-docker-container\n\n! alpine에 go binary 실행 안되는 문제\n\n- `CGO_ENABLED=0 go build client.go`\n- 또는 `-tags static netgo` 를 넣어준다\n\n#### go grpc\n\n`protoc --go_out=. *.proto` 기본 proto 파일을 이용해 grpc 코드를 생성하는 방법\n근데 이렇게만 하면 에러가 난다\nproto 파일에 `option go_package = \"<grpc package 경로>\"` 입력해주고,\n명령어에 `--go_opt=paths=source_relative` 붙여줘야 한다.\nopt 안붙이면 경로를 현재 폴더 기준에서 새로 생성해버린다\n\n## kubernetes\n\n! kubernetes 접근이 안된다. api 서버가 나간건지, 서버 자체가 문제가\n있는건지 확인해야겠다. ssh 접속이 안된다.\n\n- do 관리창에 서버 cpu, memory 상태는 계속 잘 출력되고 있다.\n- 관리창에서 콘솔로 접근하니 outofmemory 에러가 떠있다.\n  - 로그를 추가로 확인하는 방법을 찾아봐야겠다.\n  - aws, gcp에서는 cloudwatch, stack driver가 에러를 보여준다\n  - digital ocean도 모니터링 서비스가 있다.\n- **outofmemory에 대해**\n  - out of memory가 발생하면 메모리 확보를 위해 프로세스를 killing하는데,\n    이 작업은 프로세스 생성시간, 메모리 사용량, 우선순위를 확인해서\n    제거한다\n    - https://medium.com/@EJSohn/out-of-memory-killer-%ED%9A%8C%ED%94%BC%ED%95%98%EA%B8%B0-9efc65f88c92\n- **linux 시스템 log 확인 방법**\n  - 어떤 자원이 메모리를 많이 먹었는지 확인\n  - /var/log/syslog\n  - dmesg - 부팅하는 동안의 메시지\n- 일단 쿠버네티스 자원들을 제거해야겠는데, api server가 접속이 안되는데\n  어떻게 정지시킬 수 있지?\n  - 쿠버네티스 자체를 정지하는 방법. (정지 후 빨리 접속해서 다 딜리트 시킨다)\n  - 마스터를 껐다 켜서 api server를 다시 돌게 할 수 있다\n- k3s 서버를 찾아야하고, k3s 를 꺼도 다시 켜진다...\n  - k3s kill all script가 k3s 설치 시 깔린다. `/usr/local/bin/k3s-killall.sh`\n- kubernetes가 메모리를 많이 차지하는 것은 맞는데, 그러면 어떻게 해야하나\n- 어떤 리소스가 많이 썼는지를 확인해야 한다.\n  - `kubectl top pod --all-namespaces`\n- istio monitoring을 위해 모니터링 서비스를 너무 많이 킨게 문제였던 것으로\n  보인다. promethus가 메모리를 많이 사용한다.\n  - argocd를 삭제해서 여유가 생긴 것도 있어서 argocd가 사용한 양이 얼만지\n    확인해봐야겠다.\n    - 메모리를 사용한 로그가 있나?\n      - 메모리 자원 같은 로그를 남기려면 트래킹하는 서비스를 이용해야한다.\n    - describe로 확인하려면 없애지 말았어야 한다.\n- [x] node-1 이 unknown 상태다. 확인 필요\n  - describe node 로 확인\n  - cpu 사용량이 과도했다. 리부팅을 하면 되나? 리부팅 하지 않아도 살릴\n    방법을 찾아야 한다.\n    - `systemctl daemon-reload`, `systemctl restart kubelet` 실행할 수 있다\n  - kubelet 의 로그를 확인해 볼 수 있다\n    - `journalctl -u kubelet`\n\n#### kubernetes ingress TODO\n\n- ! `external-ip <pending> lock`\n\n#### kubernetes helm\n\n- cannot connect traefik dashboard in vagrant\n- ! Error: unknown flag: --service-account\n- tiller was removed helm version 3\n\n#### kubernetes execute tty\n\n- ! Error from server: no preferred addresses found; known addresses: []\n\n#### Trouble Shooting\n\n재설치\n\n```\nkubeadm reset\nsystemctl stop kubelet\nsystemctl stop docker\nrm -rf /var/lib/cni/\nrm -rf /var/lib/kubelet/*\nrm -rf /etc/cni/\nifconfig cni0 down\nifconfig flannel.1 down\nifconfig docker0 down\nip link delete cni0\nip link delete flannel.1\n```\n\n마스터 IP 변경되어 재설정\n\n- `/etc/kubernetes` 및 관련 디렉토리 삭제\n- `kubeadm reset`\n\n마스터 IP 변경 시 삭제 후 실행했는데 IP 못 찾는 경우 발생\n\n- `mkdir -p $HOME/.kube`\n- `sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config`\n- `sudo chown $(id -u):$(id -g) $HOME/.kube/config`\n  출처: <https://github.com/kubernetes/kubernetes/issues/50295>\n\nkubectl get 시 connection refuse\n\n- init 시 connection refuse\n\n미니큐브 삭제\n\n```\nminikube stop\nminikube delete\ndocker stop (docker ps -aq)\nrm -r ~/.kube ~/.minikube\nsudo rm /usr/local/bin/localkube /usr/local/bin/minikube\nsystemctl stop 'kubelet.mount'\nsudo rm -rf /etc/kubernetes/\ndocker system prune -af --volumes\n```\n\n출처: <https://github.com/kubernetes/minikube/issues/1043>\n\nconnection refuse 8080\n\n- `sudo cp /etc/kubernetes/admin.conf $HOME/`\n- `sudo chown $(id -u):$(id -g) $HOME/admin.conf`\n- `export KUBECONFIG=$HOME/admin.conf`\n  출처: <https://github.com/kubernetes/kubernetes/issues/44665>\n\nconnection refuse 6443\n\n- `sudo -i`\n- `swapoff -a`\n- exit\n- `strace -eopenat kubectl version`\n  켜지는 시간 걸린 거였음\n  출처: <https://discuss.kubernetes.io/t/the-connection-to-the-server-host-6443-was-refused-did-you-specify-the-right-host-or-port/552/4>\n\nconnection refuse 10248\n\n- `kubeadm reset`\n- add `Environment=\"KUBELET_EXTRA_ARGS=--fail-swap-on=false\"` to\n  `/etc/systemd/system/kubelet.service.d/10-kubeadm.conf`\n- `systemctl daemon-reload`\n- `systemctl restart kubelet`\n- `kubeadm init`\n  출처: <https://github.com/kubernetes/kubernetes/issues/53333>\n\n[WARNING IsDockerSystemdCheck]: detected \"cgroupfs\" as the Docker cgroup driver. The recommended driver is \"systemd\". Please follow the guide at [https://kubernetes.io/docs/setup/cri/](https://kubernetes.io/docs/setup/cri/\"\n\nport 10250 in use\n\n- node에서도 kubeadm reset 을 해줘야 한다\n\nmount fail 발생\n\n- path를 맞게 안해줬다\n\napply 해줘야 새로 할당된 자원을 잡음\n\npod 이름 검색 쉽게하는법\n\n실시간으로 올라가는거 확인\n\n- `watch kubectl get pods --all-namespaces`\n  출처: <https://docs.projectcalico.org/v3.10/getting-started/kubernetes/>\n\n네트워크 연결이 이상함\nflannel과 weave가 겹친것 때문인지..\nreset 해본다\n\ncoredns 연결 안됨\n\n- flannel 에서 안됨 > 재설치 후 weave 사용\n\ndb 생성이 안됨\n\n- 3서버에 glusterfs 설치\n\nkubernetes에서 deployment로 만든 pod 에서 image가 이상한 곳에서 불러짐\n이미지를 삭제하고 다시 만들었더니 이미지를 다른 곳에서 불러옴\n\n웹 연결 안되는 현상\n\n- 일단 오픈된 서버에서 앱으로는 들어가진다\n- web과 db가 연결이 안된다\n  - label 추가\n  - `app.kubernetes.io/part-of:<name>` 를 전체에 추가\n\ndb 레플리카를 두개로 하면 데이터는 어떻게 되는가\nreplica 2로 하고 접속 시 db와 연결 안됨\n\nweb db 연결 안됨\n\n- selector 설정함\n- selector , template.metadata.lables.app 이 같아야 함\n\n노드 NotReady\n노드 리셋했다\n\nweb 접속 시 the database system is starting up\ndb 데이터 손상 재설치..\n\n노드 추가 후 기존 노드에 있는 POD 옮기기\n\n- `kubectl cordon     <node-name>`\n\n노드에 포드 할당 안하도록 설정\n\n- kubectl drain\n- 안됨.. 기존 노드 삭제 했음\n\ndocker pull 안될 시\n\n- 고정 ip 설정 시 dns 설정 안한 것이 원인 `dns-nameservers 8.8.8.8`\n\n한번에 한 서버에만 들어가야 하는데 두 서버에 분산해서 신호가 들어간다\n블루-그린 배포를 하면 해결은 되겠지만 롤링 업데이트를 테스트 해봐야 한다\n\n내용 편집 중에 업데이트가 실행되어 서버가 옮겨지면 불안정하지 않은가?\n\n블루-그린 배포시 배포하는 위치를 신경써야 하나?\n\nfilestore 도 공유가 되어야 한다\n\n- 볼륨 되는 방식 확인\n\npostgresql/data - kubernetes/postgres\n\n새로 만들 때는 포드 안의 데이터가 밖으로 나오는 것인가\n새로 만들 때도 기존 데이터가 포드안에 들어가는 것인가\n새로운 포드를 만들면 기존 데이터가 붙는 것인가\n새로운 포드에서 데이터를 지우면 기존의 데이터가 없어지는 것인가\n상위 폴더 하위 폴더 영향이 있는가\n\n- odoo/filestore, odoo/session 이 필요하면 odoo만 가져오면 되는가 두개를 다 명시해 줘야 하는가\n\n- 권한 설정 해줘야 한다\n  root로 실행하거나 `runAsUser: 0`\n  파일을 odoo 에게 권한을 주거나 `chown odoo:odoo`\n\n2 서버가 다운되면 1서버로 들어가져야 한다\n\n재부팅 후 node 가 NotReady 상태가 됨\nswapoff -a 하니까 됨\n\n## ! Inactive registered OAuth URIs for your project\n\napi oauth 창에서 redirect로 설정해놓은 주소들이 만료되었나보다.\n현재 안쓰는 주소들이었고, 제거해줬다.\n\n### ! golang fatal\n\n- [x] elasticsearch가 처음 시작이 오래걸려서 서버가 커넥션을 못한다\n      커넥션을 못하면 서버가 중지되고 docker에 의해서 재시작 되었으면 좋겠는데\n      log.Fatal이 있어도 로그만 남기고 그냥 가만히 있는다\n- Fatal은 되는데 docker가 정지하지 않는다\n  - go run 으로 하면 도커가 꺼지지 않고, build해서 실행파일을 실행시키면 꺼진다.\n\n## k3s\n\n    - cgroup memory 에러 발생\n        - sudo vi /boot/firmware/cmdline.txt\n          Add cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1 into end of the file.\n        - https://github.com/k3s-io/k3s/issues/2067\n\n#### ubuntu 22 업데이트 후 문제점\n\n한 영 할 때 팝업이 뜸\n\n- gnome extension 에서 이를 막아주는 게 있음\n- https://extensions.gnome.org/extension/4559/quick-lang-switch/\n\ncaps lock 을 ctrl로 바꾼 설정이 동작 안함\n\nside terminal 동작 안함 deprecate 됨. 새로 찾아야 함\n\n## ETC\n\n#### github id/password 로그인 막힌 문제\n\nhttps 로 받은 패키지들 ssh로 받아야 ssh로 인증됨\n\n#### docker react 404s will fallback to /\n\n일단 `docker-compose.yml` 에 `stdin_open: true` 넣어주면 되긴 된다\n\n#### golang server TODO\n\n버그가 있다.\n\n- [ ] 새로 고침 하다보면 결과값을 못 받아올 때가 있다.\n- [ ] es 서버는 패닉이 자꾸 뜬다\n- git 폴더 onedrive에 있는 거 로컬이랑 똑같은지 확인\n  - 다르다... 어떡하지\n\n#### 리눅스 부팅 안될 때\n\nfsck /devsdb5\n전부 y\n하고 reboot\n"},{"headings":[{"value":"사람을 구할 때"},{"value":"신용할 수 있는 사람"},{"value":"좋은 사람"},{"value":"개발자들이 이직하려는 이유"},{"value":"개발자 능력"},{"value":"신입 사원이 왔을 때"},{"value":"신입사원과 신인 선수"},{"value":"입사 후 할 것"},{"value":"일본 스시 장인 다큐를 보고"},{"value":"천재의 밑에서 배우는 평범한 제자는 천재스승을 뛰어넘을 수 없는 것일까"},{"value":"주 4일"},{"value":"페이스북은 팀을 본인이 선택한다고 한다. 2014년 이야기"},{"value":"해외 기업이 외국인을 채용하는 이유는?"},{"value":"GS그룹이 혁신을 이끄는 방식이 꽤 유효한 것 같다"},{"value":"일"},{"value":"업무 퀄리티 높이기"},{"value":"일 하다가 중간에 다른 일 하는 경우가 왕왕 있다."},{"value":"요구사항에 대해 깊게 생각한다"},{"value":"KPI기반의 목표"},{"value":"KPI와 다른 OKR은 어떤게 다를까"},{"value":"예외 상황을 잘 다뤄야 실력이고 프로의 자세"},{"value":"프로페셔널"},{"value":"프로는 마지막 한 끗이 좋아야 한다"},{"value":"약속한 시간을 철저하게 지키는 것으로 프로의 가치를 입증"},{"value":"일잘러가 되고 싶다"},{"value":"정해진 요구사항을 빠르게 구현하는 것도 프로그래머의 능력 중 하나겠다"},{"value":"일을 하면서"},{"value":"능력 향상을 위한 투자"},{"value":"업무 처리 능력 상승을 위한 스킬 하나 익히기"},{"value":"왜 일을 더 열심히 해야 하는가"},{"value":"일하면서 느낀 부분"},{"value":"업무 능률 끌어올리기"},{"value":"검토 검토 또 검토"},{"value":"꼼꼼함과 빠른 처리"},{"value":"반복"},{"value":"보고"},{"value":"막히는 문제가 있을 때 도움 요청하는 방법"},{"value":"일 못하는 사람"},{"value":"전문가"},{"value":"전문가는 암묵지를 고객에게 잘 건드려줌으로써 신뢰감을 얻게 된다"},{"value":"덕후, 딜레탕트, ㅈ문가, 아마추어,"},{"value":"덕후질"},{"value":"경력"},{"value":"경험이 중요한 이유"},{"value":"일하는 방법"},{"value":"종립님께 배우는 일 잘하는 법"},{"value":"일과 코딩"},{"value":"\bWork Log"},{"value":"업무가시성"},{"value":"코넬식 필기 작성법처럼 업무일지 적기"},{"value":"정리"},{"value":"작업 전 확인"},{"value":"작업 중"},{"value":"작업 후 회고"},{"value":"LLM과 함께 일하며 업무일지 정리"},{"value":"업무일지에 들어갈 내용"}],"fields":{"slug":"/일/"},"rawMarkdownBody":"\n## 사람을 구할 때\n\n진취적인 것만 있으면 어떤 일도 같이 할 수 있지 않을까\n근데 진취적이라는 것을 어떻게 증명하고 확인하지?\n3-8명이 한 팀으로 뭉쳐서 전문적인 것은 학계의 도움을 받아 프로젝트 형식으로 진행하면 원하는 것을 달성할 수 있지 않을까?\n\n#### 신용할 수 있는 사람\n\n- 정직하고 남을 생각하고 착한 사람이면 신용할 수 있는 사람인가\n- 일을 잘 처리하는 사람이 신용할 수 있는 사람인가\n- 정직한 것이 변질되는 것이 쉬운가\n- 일을 잘 처리하는 사람이 변하는 것이 쉬운가\n\n#### 좋은 사람\n\n- 계속 호기심을 갖는다\n- 대화를 친밀하게 한다\n- 현실감각\n- 추진력\n- 방향성\n- 틀린 것을 인정하고 빨리 받아들이기\n- 상황을 빨리 파악하고 전반적으로 파악하기\n\n#### 개발자들이 이직하려는 이유\n\n- 같이 일하는 사람\n- 더 큰 세계를 경험하고 싶다\n- 업무에 무뎌졌다(도전적인 걸 하고싶다)\n- 돈이 부족하다\n\n사람을 붙잡을 때 이 부분을 채워주면 붙잡을 수 있을까\n\n#### 개발자 능력\n\n- 기술적 커버리지 및 지식\n- 실세계의 문제를 인식하고 이를 구체화\n- 정확한 목표를 설정해서 문제를 해결\n- 크리티컬 싱킹\n- 다른 사람의 실수/삽질을 사전에 막아내고, 타인의 학습 속도/생산성을 올리고,\n\t- 주니어 개발자는 모방을 통해서 성장하고 성장을 위해서는 주변에 실력자가 있어야\n\n#### 신입 사원이 왔을 때\n\n어떤 사람은 이 신입이 나한테 새로운 영역에 대한 경험도 줘야하고, 스스로 잘 좀 배웠으면 좋겠는데 안그래서 답답합니다. 라고 하는 사람이 있다면 정말로 그 신입이 금방 그만둘 사람일 수도 있지만, 본인이 신입에게 폭탄이 되어서 그런 것일 수도 있다\n\n회사를 그만둘 때 회사가 마음에 안든다고 떠나면 정말로 회사가 안좋은 것일 수 있고, 자신이 잘못한 것을 회사탓을 하는 것일 수도 있다\n\n이 구분을 어떻게 할 수 있을까\n\n진짜 사람을 착취하는 회사일 수도, 그 순간 최선을 다한 회사일수도 있을텐데\n\n보통 남을 비난하는 사람은 사실 본인이 문제다.\n근데 진짜 문제점을 지적한 것일 수도 있다\n상자 밖의 사람에서 본바로는 본인이 상자 밖에 있을 수 있으면 남의 문제를 지적하기보다 좋게 변화하려고 하는게 맞다고 보였는데.\n\n그렇다고 노동착취를 하는 회사에서 변화를 만들어내는 것은 체력소모가 심할 것 같다\n\n원리원칙을 지키려는 초임에게 현실을 알려주는 선임\n책과 현실의 차이를 알려주는 선임\n\n#### 신입사원과 신인 선수\n\n- 스포츠에서 베테랑이 없어서 팀이 불안정하다는 얘기\n- 젊은 팀은 위기상황에서 쉽게 흔들린다는 얘기\n\n#### 입사 후 할 것\n- 입사 첫날은 인터넷을 쓰게까지 시간이 걸릴 수 있어서 메모와 펜이 필요할 수 있다\n- 입사 후 과정을 정리해서 공유. 다음 신입을 위해\n- 문제점 확인 후 개선\n- 멘토를 찾는다\n- 회사에 대해 파악\n\t- 팀과 프로젝트 파악\n\t- 프로세스 문서 파악\n\t- 제품을 쓰면서 파악\n- 다음 레벨의 잡 디스크립션을 확인\n\n\n#### 일본 스시 장인 다큐를 보고\n\n스시 장인이 제자를 두고 잡일만 시키는 것처럼 보인다\n제자는 그저 잡일만 따라하는 것으로는 성장하지 못한다\n장인이 하는 것을 가까이 보는 것 자체가 배움의 기회이고\n잡일을 하면서도 혼자서 본 것, 느낀 것들을 연습하면서 성장할 수 있는 것 같다\n훌륭한 스승은 좋은 경험을 제공해 주는 것 같다.\n경험과 기술..\n\n#### 천재의 밑에서 배우는 평범한 제자는 천재스승을 뛰어넘을 수 없는 것일까\n\n만약 뛰어넘는 제자가 있다면 그도 천재였기 때문에 뛰어넘을 수 있었다 라고 얘기가 되어지지 않을까\n사실 그는 천재의 밑에서 큰 깨우침을 얻은 평범한 사람이었을 수 있을텐데\n천재는 태어나는 것이기도 하지만 되어질 수도 있는 것일까\n틀을 깨트리는 것이 도약의 길이다\n\n#### 주 4일\n\n금요일 오전부터 회고하는 시간을 가져서 회사 토픽을 공유하고 개선하는 시간을 갖는다?\n이 회고 시간이 길어지면 금요일은 일을 안하는 날처럼 되고 회고도 함으로서 도움이 되지 않을까?\n평일에 일어난 토픽들을 공유받아서 금요일에 이야기할 것들을 미리 정해놓고.\n\n#### 페이스북은 팀을 본인이 선택한다고 한다. 2014년 이야기\n\n부트캠프에서 코드베이스, 사내문화, 프로세스 등을 배우고 나면 신입직원은 자기가 일할 팀을 본인이 선택합니다.\n\n릴리즈 엔지니어가 따로 있어서 커밋들을 모아 빌드한다고 한다.\n이 때 커밋을 한 개발자의 그동안의 빌드 시 문제점을 일으켰는지를 체크한다.\n\n- http://swprocess.egloos.com/m/3009704\n\n#### 해외 기업이 외국인을 채용하는 이유는?\n\n- 다양성(창의성)을 더 확보하려고\n- 그 국가의 시장을 공략하기 위해서\n- 나는 해외시장과 국내시장의 차이점을 인지하고 해외에서 한국으로의 성공적 상륙을 한 업체에 대해 조사할 필요가 있다\n- 좋은 제품을 만드는 다른 기업에서 어떻게 일하는지 일하는 방식을 알고싶다\n\t- 교육을 잘 받고, 업무 집중도가 높은 사람, 그사람의 경험과 지식을 얻기위해 - 지식 공유\n\n\n#### GS그룹이 혁신을 이끄는 방식이 꽤 유효한 것 같다\n- 이노베이션 팀이 있고 팀장으로 구성되어있다 + 디지털 전문가\n- 각 그룹사 및 팀들은 본인들의 문제를 문제은행에 등록한다 마구마구\n- 등록된 문제를 해결가능한 인원들이 들러붙어서 해결한다\n- 퍼널식의 구성을 노렸다\n    - 일단 모수를 엄청 늘리고 거기서 어차피 귀중한건 소수일 것이다 그래서 일단 많이 모으는 환경을 만든다\n    - 첫화면 진입자는 많은데 구매로 가는 고객은 적은 것처럼 퍼널 구조다\n- 고객 페르소나를 만들어놔서 고객 사례를 대화로 물어보면서 경험할 수 있다\n- 찐 현장 경험이 많은 사람들을 뽑아서 ai를 공부하는게 it전문가가 현장 경험 갖는거보다 쉬울것이다\n- 그리고 다시 원래 팀으로 돌아간다\n- 바이브코딩으로 만들고 나면 실제 업무는 이제 보안문제나 안정성 검증, 운영 시 효율성 어떻게 내면 될지를 연구하는 쪽으로 집중하면 된다\n\n\n---\n\n## 일\n\n- [ ] 업무 퀄리티를 위한 업무 플랜, 진행, 마무리\n\t  - 가설을 세우고 검증한다.\n- [ ] 플랜\n    - 큰 문제를 잘게 쪼갠다\n    - 큰 그림을 그린다\n- [ ] 진행\n    - 레퍼런스를 모은다\n    - 테스트 케이스를 생각한다\n\n#### 업무 퀄리티 높이기\n\n- 우선순위 외의 업무는 중간중간 하려고 하지 않는다\n- **우선순위 업무 3개**를 선정해서 그것에만 최대한 집중한다\n- 하나의 업무를 **3가지 시선**으로 다시본다.\n\t- 일단 빠르게 개발자의 시선에서 구현\n\t- 고객의 시선에서 검증\n\t- 사용자의 시선에서 검증\n- **반례를 잘 체크한다**\n\t- 반대편이 되어서 생각해본다\n- 히스토리를 잘 남겨놓고, 잘 활용할 수 있도록 정리해놓는다.\n- 손흥민이 토트넘만을 위해 열심히 성과를 내는 것이 아니라 자신의 커리어를 위해 하다보니 토트넘도 같이 이득을 본다\n- 일을 할 때는 아래를 봐서는 안된다. 못했던 것을 생각하며 현재를 무마하지 말고 잘된 것을 생각하여 더욱 정진해야 한다\n- 안보이니까 괜찮겠지 보다 안보이는곳까지 최선을 다해야 한다. 하지만 코드를 짤때에는 모든 곳을 잘 보이게 해야 한다\n- 어디에서 일을 하냐가 중요하다. 아무리 많은 경험과 기술이 있어도 회사마다 다르기 때문에 어떤 기술을 할줄 아느냐보다 어떻게, 어떤 방식으로 해왔느냐가 더 중요한 것이다\n- 문제 해결을 위해 탐구하고 고민했던 부분이 도움이 될 것이다\n- 내가 더 발전할 수 있는 곳에서 나보다 뛰어난 사람들과 일을 하면서 나 자신의 삶을 살아가고 싶다\n\t- 나 또한 나중에 나같은 사람과 일하면서 가르쳐 줄 수 있으면 좋겠다\n- 직원들에게 자유로운 문화를 누리게 해주려고 생긴 문화가 아니라 성과를 만들어내는 사람이 일을 가장 잘 할 수 있는 방법을 찾다보니 만들어진 것\n- 1차원 높은 생각\n\t- 아이유는 그저 노래만 부르는게 아니라 연예계 시스템을 이해하고 자신의 사단을 꾸려서 동반자로 이끌어가고 노래에 대해서도 다양하게 접근한다. 80년대 노래를 리메이크하면서 과거를 학습하고\n- 실세계의 문제를 인식하고 이를 구체화하고, 정확한 목표를 설정해서 문제를 해결해 나가는 부분\n- 크리티컬 싱킹\n\t- [같이 일하는 사람들에게 듣는 이야기](Archive#같이%20일하는%20사람들에게%20듣는%20이야기)\n\n\n#### 일 하다가 중간에 다른 일 하는 경우가 왕왕 있다.\n이거하다가 막히면 다른걸 하면서 생각을 다시 하는 방식으로 일하고 있다.\n막히지 않을 때도 갑자기 생각난 걸 하러 가려고 할 때가 있다.\n한 포모도로에 하나의 업무를 지키려는 방식을 취해봐야겠다.\n\n#### 요구사항에 대해 깊게 생각한다\n- 리스트에 있는 것을 꼼꼼하게 챙기는 시간이 필요하다\n- 나중에 챙겨야지 생각했다가 늦어버렸다\n- 내가 애매하게 생각하면 풀고 가는게 좋다\n\t- 문구 하나도 중요할 수 있다. 신경을 좀 더 써야한다\n- 업무를 받으면서 요구사항을 구체화한 후에 그것에서 내가 살을 더 붙여서 진행하기\n\t- 의도한 요구사항과 다른 이야기를 하는 경우가 있다. - 개선 필요\n- 확실하지 않은 것은 한번 더 확인한다\n- 걱정되는 부분이 있으면 그걸 확실히 테스트하고 넘어가야한다\n\n#### KPI기반의 목표\n- https://blog.shiren.dev/2022-03-07/\n- KPI기반의 목표가 내려온다\n\t- \"유저의 A 화면에서 B 화면으로 전환하는 클릭률을 20% 높인다\"\n\t- 처음 이 목표를 봤을 때는 우리 상황과 안맞다고 생각했는데 다시 생각해보니 저렇게 내려오면 내가 무엇을 해야할지 스스로 고민해볼 수 있어서 더 넓은 관점에서 일을 할 수 있을 것 같다\n\t- 세부적으로 내려오는 태스크는 그냥 받아치더라도 저런 식의 목표를 고민해서 일을 만들어내도 될 것 같다.\n- 할 업무를 그리게 되면 그것을 참여할 사람도 직접 구한다\n- 성과를 많이 내고 임팩트가 있는 일에 사람이 몰리게 된다\n- 첫 업무는 성과를 어떻게 측정할 것인가, 어떻게 검증할 것인가에 대한 문서작업\n\t- A/B 테스트를 통해서 최종적으로 적용할지 말지 정한다는데\n\t- 이건 A가 이미 있다는 전제 하에 이루어지는 거\n- 성과 지표\n\t- 프로젝트 영향력\n\t- 엔지니어링, 서비스 전반\n\t- 피플\n\t- 리더쉽\n\n#### KPI와 다른 OKR은 어떤게 다를까\n\n#### 예외 상황을 잘 다뤄야 실력이고 프로의 자세\n\n- 기능구현을 넘어 예외상황 고려를 하는 것이 일\n- 일반적인 상황에서는 필요없는 것들이 특수한 상황에서 항상 뭔가를 만들어낸다. 하지만 시간은 한정적이라 욕심내지말고 범위와 한계를 정하고 하는게 좋겠다\n- 어려운 문제일수록 작게, 점진적으로 풀어가야하는데 알고리즘 문제를 이렇게 풀어보고 싶다\n\n#### 프로페셔널\n\n- 몸이 재산\n- 일에 투자를 아끼지 않는다\n- 개인적 감정 < 돈?\n- 프로페셔널한 사람\n\t- 이병헌\n\t- 레반도프스키\n\t- 강호동\n\n[[Feedback#프로페셔널과 선순환]]\n\n#### 프로는 마지막 한 끗이 좋아야 한다\n\n섬세한 마무리가 필요하겠다\n\n아마추어처럼 굴다\n\n#### 약속한 시간을 철저하게 지키는 것으로 프로의 가치를 입증\n\n한달의 휴식을 갖고 그 뒤에 뭔가를 하려고 하면 정작 한달 뒤에는 또 다른 생각이 들 수 있다. 계획을 세우는 것은 미래를 예측하는 것만큼 틀릴 수 있다. 그렇기에 프로는 약속한 시간을 철저하게 지키는 것으로 가치를 입증할 수 있겠다\n\n> 영향력이 있는 인물일수록 원인과 결과를 고려해 말하는 이들이 존경받는 듯하다 자신을 프로라고 생각하고 프로답게 행동하자.\n> - 종립님 블로그 참고\n#### 일잘러가 되고 싶다\n\n- 신입사원의 코드든 시니어의 코드든 운영 중인 소프트웨어에 들어가는 것은 똑같다 안정되게 돌고 퀄리티도 비슷해야 한다.\n- 시스템이 완벽한 회사는 없다. 시스템에 맡기기보다 잘 진행되도록 잘 이끌어가야 한다.\n- 일 처리를 확실하게 하는 사람들을 보면 어떻게 하는지 알아보자. 상황에 대한 고려를 많이 한다. 나중에 문제가 생기지 않도록 확인한다.\n- 완급조절\n- 업무 능력 향상을 위해 애쓰면 내 성장이 된다\n- 일을 믿고 맡길 수 있는 사람이 되고 싶다\n- 업무에 탁월함을 더하고 싶다\n\n#### 정해진 요구사항을 빠르게 구현하는 것도 프로그래머의 능력 중 하나겠다\n고객의 어렴풋하고 추상적인 계획을 구체화 시킬 수 있어야 한다\n- 요구사항\n- 다이어그램\n- 테스트코드\n- 동작하는 함수\n\n#### 일을 하면서\n\n내가 시니어라고 남이 생각하게 만들면 좋겠다.\n한번씩 피드백을 받는 기회를 잡고, 일을 해온 것에 대해 구체적으로 검증을 받으면 좋겠다.\n\n#### 능력 향상을 위한 투자\n\n오타니가 실력향상을 위해 최신기술을 도입하면서 투자를 아끼지 않는 것처럼 나도 뭔가 투자를 아끼지 않아야하지 않을까 싶다. 강의를 듣는다든지, 환경을 더 좋게 만든다든지\n\n\n#### 업무 처리 능력 상승을 위한 스킬 하나 익히기\n- 이런 것들을 익히고 나서 계속 확인할 수 있을 방법은?\n- 믿을 만한 사람이 되고 싶다\n- 같이 일하고 싶은 사람이 되고 싶다.\n\n#### 왜 일을 더 열심히 해야 하는가\n- 글로벌 기준으로 실력이 평균 이상이면 좋겠다\n- 앞으로 맡게 될 업무에 퍼포먼스를 내야한다\n- AI 시대에 퍼포먼스가 증가하면서 실제로 일을 더 잘하게 됐는가?\n\n#### 일하면서 느낀 부분\n업무에서 아쉬운 부분을 생각하고 지금 생각했을 때 어떻게 하면 그 아쉬운 부분을 채울 수 있었을지 생각하면 다음에 같은 상황에서 같은 아쉬움이 없을 수 있을\n\n#### 업무 능률 끌어올리기\n8시간의 업무 시간.\n그 외에는 개인 시간\n투잡을 뛴다고 하면 업무 시간에 효율을 못낼거 같다고 생각해서 투잡을 안해야겠다고 생각하면서 그렇다면 업무 시간에 효율을 잘 내려면 어떻게 해야 하나 생각하니 업무 시간을 지금은 그저 흘러가는 시간으로 쓰고 있는데 그러면 안되고 시간 내에 아웃풋을 더 잘내도록 계속 만들어야 하는 것이고 그러기 위해서는 아웃풋이 어떻게 퀄리티를 높일 수 있는지를 봐야 한다.\n\n\n#### 검토 검토 또 검토\n- 시간과 꼼꼼함 중 하나를 확실히 택한다. 지금은 느리면서 놓치는것도 많은 것이 고민..\n\t- 속도를 높여서 피드백을 빨리 받던지 천천히 하더라도 나에게 만족할 수 있을만큼 하던지\n- 일을 세분화하고 완료를 확인한다. 더 세분화할 수 없을만큼 세분화해서 관리해보자\n- 내가 작성한 부분을 돌아보고 이것이 미치는 영향을 고려하고 이것이 바뀌면 같이 바뀌어야하는게 없는지 확인하고\n- 계속 전자쪽이 낫다고 생각했지만 계속 빼먹는 모습을 보이는 것도 힘들고, 방해를 자주하는 것 같다. 전자쪽으로 가려면 실수를 공개하고 다음에 그 실수를 안하기 위한 방법을 메뉴얼화하여 누적된 데이터를 만들 수 있으면 좋겠다. 아마존이었나? 실수할거리를 찾아내서 그 실수를 다른 사람이 안하게 될 것이라 생각해서 보상을 해주는 회사가 있었다. 내가 지금까지 한 실수들을 잘 정리해서 공유하고 나도 같은 실수를 반복하지 않도록 하면 좋겠다.\n- 일을 세세하게 나누고 일 한 것을 다시 돌아본다는 것을 해야겠다고 생각했었지만 막상 하기 쉽지 않다\n- 놓친 부분이 있는지 확인하려면 어떻게 하면 좋을까\n\n#### 꼼꼼함과 빠른 처리\n- 꼼꼼해지고 싶다. 꼼꼼해져야 하나? 적어도 허술해서는 안된다.\n- 근데 린 스타트업은 일단 만들고 보자는 취지다. 완벽한 것은 없기 때문이고, 한번에 할 수 있는 것에는 한계가 있고, 사용자 반응을 확인하기 위함인데, 그러고보니 빠르게 초기버전을 만들어내더라도 그 초기버전 자체의 완성도는 갖추어야 한다. 린 스타트업에서 완성도는 어떻게 관리할까\n- 복잡성을 염두에 두고 미리 뼈대를 만들어 놓는 것보다, 작게 분리하는 것이 복잡성을 컨트롤 할 더 나은 방법 같다.\n- 자바의 폴더구조는 처음부터 중첩된 폴더를 미리 만들어 놓는데, 이런 부분이 거슬린다. 폴더 안에 폴더가 들어가 깊어지면 컨트롤이 어려워질 것 같다.\n- 근데 안드로이드 프로젝트는 분리된 아키텍처가 가능한가? 한 패키지 안에 있어야 패키징을 해서 앱을 만드는 거 아닌가?\n- 안드로이드 앱도 서버를 마이크로 서비스로 하고, 앱 자체는 웹앱으로 가볍게 만드는 구조이려나?\n\n#### 반복\n- [ ] 같은 것을 여러 번 볼 때 안다고 생각하고 대충 보고 지나가게 되는데  같은 것을 반복해서 보는 좋은 방법이 있을까\n\t- 시간의 텀을 둔다? 그래도 안다고 생각하고 넘어가는데..\n\n#### 보고\n\n- 안심 첫 문장\n\t- 어떤 건으로 어떤 내용을 얘기하려고 한다고 첫 문장을 꺼낸다\n- 상대가 원하는 것을 주려고 해야한다\n\t- 근데 상대가 원하는게 뭔지 알 수 없다. 그래서 처음에 원하는 것을 알아가도록 해야한다\n\n#### 막히는 문제가 있을 때 도움 요청하는 방법\n\n- 문제를 정확하게 설명\n- 어떤 방법을 써서 어디에서 막히는지 설명\n- 시도했던 방법들을 설명\n- 정확하게 어떤 부분에 도움이 필요한지\n\n\n#### 일 못하는 사람\n\n1. 세상일 혼자 다하는것같이 힘들어함\n2. 일 순서 엉망임\n3. 효율은 버리고 시간만 녹여서 일함\n4. 일에 고집이 셈\n5. 업무 공유 없음\n\n- 맨날 혼자 억울해함\n- 본인이 일 제일 많이 하는줄 알고있음\n- 업무시간에 딴짓하고 야근함\n- 기억도 못하면서 메모도 안함\n\n#### 전문가\n\n국과수에 다니는 사람은 어떻게 전문가가 되었을까\n\n- 쌓아온 경험(전공지식)\n- 선임의 경험\n- 연구\n- 관련 분야 논문 꾸준히 읽기\n- 실무 경험\n\n외부인도 지식은 쌓을 수 있지만 전문가와의 차이는 경험인가보다.\n\n#### 전문가는 암묵지를 고객에게 잘 건드려줌으로써 신뢰감을 얻게 된다\n\n그동안 잘못된 실험 이후에 전문가들이 그 실험결과에 대한 원인을 끼워맞추는 것을 보고 불신이 쌓였었다.\n미디어에 자주 나오는 전문가들이 나중에 비과학적인 이야기를 많이 했다는 사례들을 보고 불신이 쌓였었다.\n하지만 그럼에도 참고할만한 내용이 있으면 잘 걸러내서 써야한다.\n결국 현재의 모든 연구는 과거의 연구를 토대로 이루어지고, 모든 것을 의심해야 하고, 그래서 스스로 내용을 검증하고 확인해야 하는 것도 연구의 일부분이므로\n\n#### 덕후, 딜레탕트, ㅈ문가, 아마추어,\n\n체계적으로 공부하고 한 주제에 대한 정보를 쌓은게 아니라서 내가 IT 업계의 전문가라고 할 수 있을지에 대한 의문이 많이 든다. 그 일을 몇년이나 했으면 누구나 전문가라고 할 수 있는 것일까? 글쎄...\n\n#### 덕후질\n깊게 파고드는 것은 즐거워야 할 수 있다\n\n베텐을 남에게 알려주고 같이 재미를 느끼려면 겉으로 나와있는 정보 말고 여태 있었던 에피소드에 따른 그들 사이에 이루어지고 있는 대화주제나 분위기를 알아야 한다. 진입장벽은 없지만 숨겨진 재미가 있다. 이것이 이스터 에그인가\n\n#### 경력\n\n경력이라는게 '이걸 이렇게 해도 되나?' 싶을 때 그걸 대답해주는 경험을 쌓는 것 같다\n신입 때는 애매할 때가 많은데 그럴때 항상 선임에게 물어봐야 한다. 그리고 경력이\n쌓일수록 그런 애매한 부분에 대한 결정에 괜찮은 대답을 해줄 수 있는 능력이 발달되는 것 같다.\n\n- 능력이 발달된다기 보다 그런 상황에 대한 경험을 통해 알게 되는 것인 것 같다.\n- 경력이 오래되었다는 것 자체는 장점이 아니고 어떤 일을 할 수 있는지를 어필\n\n#### 경험이 중요한 이유\n직접 경험하기 전엔 와닿지 않는다\n세부적인 부분을 알 수 있다\n암묵지로 구성된 부분이라 공유가 되지 않은 정보가 있다\n\n#### 일하는 방법\n\n- 불가피한 선택 보다는 의도한대로 구성하고, 불가피한 선택들은 기록해뒀다가 반드시 처리한다\n- 단순함이 완벽한 동작보다 우선하기 때문에 이런 식으로 우선순위에 따라 결정한다. 복잡성을 줄이기 위해\n- 이미 보내진 것을 지우는 것은 고려하지 않고, 변경 이후에 가는 알림이 정확한 동작을 하도록 하게 한다.\n\n#### 종립님께 배우는 일 잘하는 법\n- **원인과 결과를 고려해 말한다**\n- **다른 사람들이 자신의 똑똑함을 나에게 드러내게 하자**\n- 새로운 도구를 이해하는 것보다 매일 사용하는 도구를 이해하는게 중요하다\n- [종립님 블로그에서 인상깊었던 내용들](Archive#종립님%20블로그에서%20인상깊었던%20내용들)\n\t- 주니어일 때 엄청 즐겁게 봤었고 다른 주니어들에게도 도움이 많이 되겠다\n\n#### 일과 코딩\n- 업무 기획 시나리오가 코드에 잘 녹여져 있으면 좋겠다\n- 이전에 고려했던 것이 시간이 지나서 다른 변경사항에 영향을 받을 수 있는데 이걸 잘 확인할 수 있으면 좋겠다\n- 비즈니스 로직과 테크니컬 로직이 구분되면 좋겠다\n- 서버의 정상 상태를 측정해서 스케일 아웃이 잘 되도록 확인\n- 개발자가 개발에만 집중하도록 업무 프로세스 파악 후 개선\n- 테스트 코드는 이미 짜여진 코드의 안정성을 높여준다\n\n\n## \bWork Log\n\n#### 업무가시성\n- 내가 하는 일을 내가 보면서 일을 해야 한다. 그걸 남에게도 보여줄 수 있다\n- 업무일지노트의 큰 타임라인이 필요할듯\n- 업무가 끝나면 회고하는 것도 필요할듯\n- 검색 용이하게\n- 인박스를 비우는 식으로 처리? 비웠다고 생각했는데 다시 돌아봐야 할 수도 있고 처리하기 애매한 것도 생긴다\n\t- 인박스보다는 --지우기-- 이걸 더 활용해보자\n* 고민의 과정과 실제 한 일을 분리하고 싶다\n\t* 문제상황과 해결방법을 따로 빼놓고 싶다.\n\n#### 코넬식 필기 작성법처럼 업무일지 적기\n- 특정한 작업을 할 때 한쪽에 그 작업에 대해 생각할 거리들을 계속 띄워놓고 작업을 하면 좋을 것 같다. 예를 들어 글쓰기를 한다고 하면 글쓰기할 때 지키면 좋은 것들의 리스트를 한쪽에 띄워놓고 docker 문서 작성을 한다고 하면 docker 요약한 것을 한쪽에 띄워놓고\n\t- 즉 요약, 총 개괄을 한쪽에 띄워놓으면 한눈에 할 일의 전체를 볼 수 있고, 효과적일 것 같다\n\t- 요약과 개괄이 그러고 보니 다른 내용이다\n- 할 일에 대해서 미리 크게 정해놓고 그것도 띄워놓고, 그 분야에 대한 내용도 띄워놓으면 되겠다\n\t- 코넬식 필기 작성법을 보고 생각\n- 왼쪽에 아사나를 띄워놓고 태스크를 만들면서 일처리하고\n\t- 오른쪽에 노트를 두고 생각할 거리들을 적어놓는다\n\t- 일을 세세하게 나누고 일 한 후 돌아본다\n\t- 놓친부분을 찾기위해 반대편이 되어 생각해본다\n- 근데 한 화면에 너무 많은게 띄워져 있으면 정신이 산만해진다. 적절한 배치가 필요할 듯\n\n아사나의 태스크와 깃랩 링크가 연결되어있지만 한 눈에보기 어려움\n아사나에는 요구사항이 있고 깃랩에는 그에 해당하는 코드가 있어서 준비물은 준비되어있다\n이를 잘 보여주면 리뷰에 좋을 듯\n코드 작성 전에 반드시 글을 쓰게된다. 요구사항이라도\n\n#### 정리\n\n- 작업 전\n\t- 목표 설정 (KPI)\n\t- 요구사항 확인\n\t- 기간 산정\n\t- 계획\n- 작업 중\n\t- 태스크 관리\n- 작업 후\n\t- 복기\n\t- 후기\n\t- 문서화\n\t- 피드백\n\n#### 작업 전 확인\n\n- 업무 시간의 퀄리티를 높여서 업무의 퀄리티를 높인다\n- 하루에 처리해야하는 업무를 정의해놓고 업무가 종료되면 업무를 마감한다\n\t- 그걸 점점 빠르게 해결해나가서 업무 시간을 줄이기 위해 열심히 하는 동기를 만든다\n\t- 업무를 빠르게 해결하기 위해 어떻게 해야할지 계속 연구할 수 있게 한다\n\t- 결과적으로 업무를 퀄리티있게 빠르게 처리하는 상태가 된다\n- 기간을 기준으로\n\t- 끝내야하는 지점을 정해놓고 퀄리티 있게 마무리 짓고 걸린 기간을 확인하고 다음엔 더 빨리 할 수 있도록 최적화한다\n- 업무 기간 산정\n\t1. 파악하는 시간\n\t2. 실행하는 시간\n\t3. 정리하는 시간\n\n#### 작업 중\n\n- 업무일지는 업데이트 단위로 한 페이지를 작성하고 업데이트 이후 한 페이지의 내용을 재검토해야 한다\n- 실제로 사용해보면서 테스트해야 한다\n- 하지만 업데이트 후 기존동작도 이상없는지 확인해야 한다 사이드이펙트가 없도록 설계하는 것이 좋겠다. 관계있는 부분을 바로 알 수 있으면 좋겠다\n\t- 업데이트 후 체크리스트를 잘 관리하면 일이 수월해 질 것이다\n\t- 커밋할 때 빔으로 켜서 Todo에서 메모하던걸 붙여넣으면 좋겠다\n- 업무 노트\n\t- 위 아래로 분리해서 위에는 큰 리스트만 적어놓고 밑에 새 문서 만들어서 상세한 업무 내용 쓰기\n- 개발 - 검토 - 반영의 흐름을 태스크에 표시하기\n\n\n#### 작업 후 회고\n\n- 예상 시간을 생각해보고 오늘 마감 상황을 정의한다\n- 업무 종료 후 상황을 확인한다\n- 어떻게 개선할지, 유지할지 재정의한다\n- 회고가 중요한데~ 업무 정리하고 시작해보자\n\n\n#### LLM과 함께 일하며 업무일지 정리\n- 인풋은 여러개 -> 아웃풋은 하나\n- 컨플루언스 문서로 마감처리\n- 다시 문서를 읽어서 인풋으로 집어넣기\n- **와우 피드백 루프**\n- 사용하는 툴들을 다 mcp로 연결해놓고 관리\n- 찾아본것, 코드 결과물, 요구사항 다 정리, google 문서까지도\n- 연결할 툴\n\t- gitlab\n\t- google drive\n\t- asana\n\t- confluence\n\t- slack\n\t- 대화내용\n\t- 노트\n\n\n#### 업무일지에 들어갈 내용\n\ngpt\n- 주요 업무 내용\n- 성과 및 산출물\n- 문제, 이슈 사항\n- 다음 계획\n- 향후 참고될 정보\n\nclaude\n- 주요 작업\n- 완료사항\n- 진행사항\n- 이슈/도전\n- 사용 도구 - 오늘 사용한 도구, 접속한 웹사이트, 검색한 내용들 (오호라)\n- 배운점\n"},{"headings":[{"value":"한 대의 PC로 10만 접속자 유지가 가능한가 (에코 서버의 경우)"},{"value":"왜 10만인가"},{"value":"소켓, 포트, 커넥션이라는 용어가 헷갈린다"},{"value":"TCP의 성능?"},{"value":"정리"},{"value":"100,000 user load test"},{"value":"상황1. 에코를 잘 반환하는지 테스트"},{"value":"상황2. 10초 간 켜져있는 서버에서 클라이언트 접속 유지 시 테스트"},{"value":"상황3. HLS 서버로 테스트"},{"value":"성능 최적화"},{"value":"진행 중 확인한 것들"},{"value":"서버 성능별 벤치마크"},{"value":"추가로 테스트 해봐야 할 것들"},{"value":"동시 접속"},{"value":"os parameter"},{"value":"http option"},{"value":"reference"}],"fields":{"slug":"/100k_concurrent_server/"},"rawMarkdownBody":"\n⚠️  이 글은 의식의 흐름대로 작성되었습니다.\n\n\n## 한 대의 PC로 10만 접속자 유지가 가능한가 (에코 서버의 경우)\n안된다면 최소 몇대의 PC가 필요한가 (사양)\n\n#### 왜 10만인가\n토트넘 경기 SPOTV 유튜브 동시접속자 수를 봤을 때 10만명대였다. 물론 훨씬 많아질\n수 있지만 해외 축구 경기 시청자가 이 정도는 된다.\n\n\n## 소켓, 포트, 커넥션이라는 용어가 헷갈린다\n커넥션 마다 소켓을 65535개를 만들 수 있다고 한다\n- https://www.ibm.com/support/knowledgecenter/en/SSLTBW_2.3.0/com.ibm.zos.v2r3.hala001/maxsoc.htm\n\n커넥션은 뭐고 소켓은 뭔가? 포트 - 커넥션 - 소켓?\n- 포트는 65535 까지 열린다\n    - 왜 포트는 65535가 최대인가?\n      - tcp connection spec에서 source 쪽에 16bit, dest쪽에 16bit가 규격으로 정해져있다\n      - https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure\n\n포트 안에 커넥션이 65535가 다시 되는건가?\n- 커넥션은 발신지 IP:PORT와 수신지 IP:PORT를 가진 것을 말한다.\n  - 소켓이 이것이라고 하는 사람도 있다. 그러면 소켓과 커넥션이 같은 것인가?\n  - https://serverfault.com/questions/639027/increase-nginx-active-connection-more-than-65535\n  - 구체적으로 들어가니까 커넥션이 16bit 규격이라는 출처가 없어서 헷갈려졌다\n- 즉, 수신지가 한 곳(포트)이라면, 포트 수 제한에 따라 클라이언트 한 대에서 커넥션은 65535개가 한계다.\n\n클라이언트를 따로 둔다면 서버에서는 한 포트에 65535 이상의 소켓을 만들 수 있나?\nulimit 할 때 100,000으로 해도 100,000개의 접속이 안된다는 이야기인가\n- ulimit은 프로세스 자원 한도\n- 이게 소켓도 포함한다는 이야기도 있다\n- 리눅스 등 유닉스에서 소켓이 파일과 같은 취급을 받는다고 한다\n\n~~아니면 소켓 하나에 커넥션을 65535를 만들 수 있다는 것인가?~~\n- 10만 유저를 원하는 것이니 10만 TCP 소켓을 받아들이는 것이 되므로, 여기서 소켓=포트=커넥션이 된다.\n- 소켓 하나에 여러 유저를 담는다는 것이 가능한가?\n\n즉, 소켓은 포트를 할당 받고, 커넥션은 포트마다 식별되기 때문에\n모두 다른 의미이지만, 일반적으로 소켓, 포트, 커넥션의 상한은 모두 같은 것 같다.\n- 서버측에서는 클라이언트 포트와 상관없이 소켓만 열어주기에 포트와 소켓의 상한이\n  달라진다. 클라이언트와 다르게 서버는 65535 커넥션 이상을 받을 수 있다\n\nTCP 소켓 하나당 HTTP 연결 하나만 하나?\n- HTTP/1 에서는 그랬으나 HTTP/2에서는 하나의 TCP에 여러 HTTP가 가능하다고 한다\n- 하지만 10만의 각 유저를 받아들인다는 것은 별개의 소켓을 연다는 의미다.\n  - 일단 웹소켓은 고려하지 말고 TCP 소켓으로 가능한지 확인\n  - 그러면 10만 소켓을 열고 유지하는게 가능하다면 그것만 먼저 테스트해봐야겠다\n\nopen - bind - listen - close\n- 소켓은 수신자, 송신자가 각각 열고(open), 수신자는 포트를 바인딩(bind) 하고,\n접속을 받는다(listen).\n- 송신자는 연 소켓을 이용해서 접속을 한다.\n\n하나의 포트로 여러 소켓을 열 수 있다\n- 프로세스가 통신을 위해 포트를 할당 받는데 이 포트로 여러 소켓을 연다\n- 송신쪽은 하나의 포트에 하나의 소켓을 할당해서 접속하지만 수신쪽은 하나의\n  포트에 여러 소켓을 열어서 접속을 받는다.\n\n수신 쪽 뿐 아니라 송신 쪽도 당연히 소켓을 열어야 한다\n그러면 내가 테스트할 때는 1/2 만 테스트 할 수 있는 것인가?\n- 연결 시 송신 포트가 열리는게 맞다\n- 근데 서버에서는 포트 하나로 받고, 소켓을 여러개 연다.\n- 내부에서 성능 테스트 할 시 vm을 이용해서 추가 접속자를 만들어야 한다.\n\n서버에서 접속자를 받아들이기 위해 소켓을 열고\nTCP를 통해 포트 간 연결로가 만들어지고\n사용자는 포트를 지나 소켓 하나에 접속하게 된다\n\n포트 하나를 유지하는데 메모리 필요량은?\n- sysctl net.ipv4.tcp_mem 에서는 92724 123633  185448로 되있다\n    - tcp_wmem, tcp_rmem은 tcp_mem과 어떤 연관이 있나\n    - wmem + rmem = mem 인가, 아니면 최대치를 제한하는건가\n- wmem,rmem은 개별 소켓값, mem은 전체 소켓 사이즈에 대한 값이라고 한다\n- mem은 byte 단위가 아니라 페이지 단위다. (1 page = 4KB)\n- buffer size가 소켓의 사이즈\n\n> https://meetup.toast.com/posts/53\n- 속도를 늘리기 위해 window scaling을 활성화 시켜서 받을 수 있는 크기를 키우고,\n  소켓의 버퍼 사이즈도 늘린다고 한다.(한번에 많은 데이터를 처리 가능하므로)\n- net.core, net.ipv4.tcp 에서 메모리 사이즈가 별도로 있다\n- net.core는 커널 자체 소켓의 버퍼 크기, tcp는 tcp 소켓의 버퍼 크기\n- rmem은 읽기용, wmem은 쓰기용 버퍼\n- 내 경우에는 테스트를 원활하게 하려고 사이즈를 최대한 줄이지만, 실제 사용시에는\n  속도를 위해 넉넉하게 잡아야겠다\n\ntcp_rmem값 설정 시 2048 4096 185448 이런 식으로 되있는데\n평소엔 가운데 값을 사용하다가\ntcp_mem값의 중간 값에 해당되는 값보다 높아지면 min값을 쓰게 된다\n\n\n내 메모리가 4기가 남았고, 네트워크 대역폭이 300Mbps라면\n4kB의 소켓으로 4kB의 데이터를 보내는 것은 (300*10^6) / (4000*8) = 9375 만큼 동시에 할 수 있다\n- 이 숫자를 보니 i/o timeout, connect reset, host unreachable이 된 것이 네트워크\n  문제였겠다 싶다.\n\n랜카드 성능이랑 네트워크 대역폭을 어떻게 확인하지?\n- RTL8723BE 라는 랜카드 사용 중이고, 300Mbps 까지 동시에 처리 가능한 것 같다\n- 인터넷 대역폭은 100Mbps 인가\n    - `iperf`로 확인 가능\n    - 로컬 - 로컬 29.1Gb. TCP window size 서버 128KB, 클라이언트 2.5MB\n    - 로컬 - vagrant 405Mb\n    - vagrant - vagrant 1.67Gb\n    - 초당 128KB를 405Mb는 (405 * 10^6) / (128*8*10^3) = 395\n    - https://dejavuqa.tistory.com/306\n- 3276 byte 미만\n\n\n#### TCP의 성능?\n- TCP 소켓 연결까지 걸리는 시간 (접속자가 많아지면 응답이 느려지나?)\n- TCP는 연결된 시간에 따라 최대 속도를 늘려나간다. 처음에는 제한되있다가\n  확인응답을 받으면 제한 속도를 점점 풀어준다.\n  급작스러운 부하와 혼잡을 방지하기 위해서고, 신뢰성을 그만큼 신경쓴다는 얘기다.\n- 확인응답은 연결의 신뢰성을 위해 있는데, 보낼 데이터에 실어서 같이 보냄으로써\n  효율적으로 보내려고 하지만, 이 때문에 보낼 데이터를 찾는 지연시간이\n  정해져있다.\n\n웹 연결 시 TCP 소켓을 열어 HTTP 데이터를 교환하는데 TCP 소켓은 교환 중에\n계속 열려 있나, 보낼 때 따로 받을 때 따로 여는가?\n- 아니다. 연결 한 상태로 주고 받는다.\n- 그렇다면 웹사이트에 접속되있는 시간이 오래 되면 커넥션은 계속 유지된 상태인가?\n  아니면 각 요청마다 새로 연결하는가?\n    - 타임아웃도 설정되어있고, 유지하려면 유지할 수도 있다.\n    - 기본 설정은 유지 상태로 있지만 오래 사용 안하면 닫힌다.\n- 일반적인 블로그라면 페이지를 요청할 때만 접속하고 해제할 것 같고, 모니터링\n  웹사이트처럼 화면을 업데이트 해줘야 하는 사이트라면 서버에서 pull을 하던지\n  해서 접속을 유지할 것일 것 같다.\n  pulling 하는 것은 계속 접속 된 상태를 유지하기 위해서인가? 아니면 접속을\n  새로 하기 위해서인가?  커넥션을 유지하는게 속도에서 효율적일 것 같은데\n- keep-alive는 어떻게 동작?\n    - keep-alive는 1.1에서는 지속 커넥션으로 구현되었고,\n\n#### 정리\n포트는 65535의 제한이 있다\n소켓은 한 포트에 여러 소켓이 가능하다\n커넥션은 수신IP:수신PORT+송신IP:송신PORT의 구조를 가져서 포트 수에 제한된다\n소켓은 제한이 없다\n- 커넥션당 소켓이 65535가 최대라고 하는 IBM 페이지는 무슨 뜻이지\n\n한 서버에서 받을 수 있는 연결은 서버에서 한 포트로, 클라이언트는 여러 곳에서\n온다면 제한이 없다\n- [ ] 근데 소켓은 포트에 할당되어야 한다. 어떻게 소켓이 한 포트에 할당되고\n      동시에 통신이 가능한거지?\n    - 비동기로 동작하는 것인가!?\n\n대신 서버의 CPU, MEMORY, 네트워크 대역폭에 제한된다\n하나의 소켓의 크기 = 3KB?\n- https://migratorydata.com/2013/06/20/12-million-concurrent-connections-with-migratorydata-websocket-server/\n\n그러면 메모리에는 소켓의 크기만큼, 네트워크에는 데이터량만큼 차지한다?\n\n단순 접속만으로도 CPU를 많이 먹는다\n실제 사용 시에는 최대 5만 접속자를 받고 (네트워크 안정)\nCPU를 적절하게 쓰는 정도로만 접속자를 받고 서버 대수를 늘려야겠다.\n\n\n## 100,000 user load test\n- 목표 : 동시에 십만 유저가 접속하는 상황에서 반응 속도 및 정상 동작 확인\n- 조건 : 동시에 십만 커넥트가 유지되어야 한다\n- PC   : i5, 4 core, 2.4Ghz (i5-3440u) cpu, 8GB ram, 우분투\n\n상황\n- 에코를 잘 반환하는지 테스트\n- 비디오 10초 정도를 잘 재생 후 정상 리턴하는지 테스트\n\n방법:\n- docker에서 띄웠을 때 고 웹서버가 얼마나 버티는지 확인\n- kubernetes에서 띄웠을 때 확인\n\nClient 테스트 코드\n```go\nconst LIMIT = 10000\n\nfunc main() {\n    ch := make(chan int, LIMIT)\n    connect()\n    <-ch\n    log.Println(\"Done\")\n}\n\nfunc connect() {\n    for i; i<LIMIT; i++ {\n        go load()\n        ch <- i\n    }(i)\n}\n\nfunc load() {\n    res, err := http.Get(\"http://localhost:8080\")\n    if err != nil {\n        log.Println(err)\n    }\n    defer res.Body.Close()\n    body, err := ioutil.ReadAll(res.Body)\n    return string(body)\n}\n```\n\nServer 테스트 코드\n```go\nfunc main() {\n    http.HandleFunc(\"/\", Handler)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n\nfunc Handler(w http.ResponseWriter, r *http.Request) {\n    w.WriteHeader(http.StatusOK)\n    io.WriteString(w, `2`)\n}\n```\n\n- 자세한 테스트 코드는 > https://github.com/shdkej/stress-test\n\n\n#### 상황1. 에코를 잘 반환하는지 테스트\n에코테스트에서 비동기로 소켓열어서 접속하는 것이 정확한 값도 반환 안하고, 시간도\n들쑥날쑥한다. 그 이유는?\n\n서버에서 소켓을 여는 시간이 오래 걸리나?\n서버를 여러 개 만들어서 접속해봐야겠다\n\n~~waitgroup 없이 해도 되지 않나?\n여러 서버를 띄워놓고 접속할 때 wg에 막히면 동시 접속이 안되잖아?\nwg을 접속한 후에 막아놓으면 되겠다~~\n\ngo http 서버 기본 스펙 체크해봐야겠다\n동시 접속 허용 기준이 있는지, 사양이 있는지\n\ndocker 안과 밖의 응답이 다를까?\n- 딱히 다르지 않다\n\n! too many open files\n- socket이 부족한 것. ulimit -n 10000 해주면 된다\n! device or resource busy\n! i/o timeout\n! cannot assign requested address\n- nginx로 로컬에서 5만 접근 시 발생\n\n! connection reset by peer\n- 서버에서 입력을 받는 커넥션을 shutdown해서 끊었다는 뜻이다\n  끊겨서 닫히려고 하는 커넥션에 다시 데이터를 보내서 생긴다.\n- TIME_WAIT 상태의 소켓이 남아있어도 문제가 되는지 확인해봐야겠다\n    - time_wait의 max값을 줄여서 소켓이 적게 남게 해봤는데 변화없음\n    - time_wait를 reuse할 수 있게 했지만 변화없음\n\n! network is unreachable\n\n유저 수 별 진행 상황\n- 5천 접속까지 cpu도 풀로 사용 안하고 끝났다. 단순 echo 서버일 경우\n- 1만 접속까지는 무난하게 받아들인다. ulimit 만 넉넉하게 풀어줬다\n- 15,000 부터는 접속이 씹힌다\n  - 여기서 추가 접속자를 허용하려면 어떻게 하면 될까. 2만 접속자는 되게 하고 싶다\n- 5000씩 4번 접속하는 것이랑 한번에 2만 접속을 여는 것이랑 비교\n  - 5천씩 하니까 2만 접속 확인은 됐다\n  - 2만 접속은 된다.\n  - 2만 접속 시에 소켓 수에 걸려서 TIME_WAIT를 기다린다고 씹히는 것 같다.\n  - 근데 그러면 3만에서도 똑같이 동작해야 되는 것 아닌가?\n    - TIME_WAIT는 같은 커넥션이 왔을 때 섞이는 것을 방지하기 위해 일정 시간 유지\n      된다.\n- `watch -n1 \"wc -l /proc/net/tcp\"` 열려있는 tcp 소켓 수 모니터링\n  - 이것보다 `watch ss -s` 가 더 확실하게 보여준다\n- `watch -n1 \"netstat -an | grep 8080 | grep TIME_WAIT | awk '{print \\$5'} | sort | uniq -c | sort -k 1,1r\"`\n- 3만에서 connection reset 에러가 발생했다\n  - 65535가 맥시멈 소켓이라 안되는 것 같다\n  - file descripter를 늘려보자 -> file descripter 늘리는게 ulimit\n  - virtual machine을 이용해서 클라이언트 포트를 늘려서 테스트해보자\n  - virtual machine으로 띄워서 3만씩 접속 시키면 포트 유지 되는지 확인\n    - vagrant 에서는 1만 접속도 삐걱거린다. 네트워크에 한단계가 더 생겨서 그런가\n    - nework is unreachable 발생\n    - client 에서는 소켓을 모두 열었는데 접근을 못한다\n  - nginx는 3만 처리를 한다\n    - /etc/nginx/nginx.conf 의 worker_connections 를 10만으로 올린다\n    - 4만 처리도 했다. 5만에서 i/o timeout 에러 발생\n    - 3만 쯤 처리하려니 cpu를 풀로 사용해서 노트북에 부하를 많이 주는 것 같다\n    - localhost로 하면 4만을 처리했고, 외부아이피로 하면 금방 에러를 뱉는다\n    - 엥? 근데 로컬에서만 테스트하면 3만이 최대여야하는데?\n- **tcp 옵션을 변경**한 후 go server에서도 4만 접속이 됐다\n    - 서버측에서는 포트를 안열고 소켓만 여니까 클라이언트 포트만 확보되면 소켓\n      수만큼 접근 가능하다. 소켓 수는 file descripter 설정값만큼 늘릴 수 있다\n    - 4만 5천에서 i/o timeout 발생. cpu 한계인 것 같은데...\n\n\nnodejs로 테스트\n- TCP port open 자체는 10만까지 되었는데, 실제 접속자가 그만큼 되었는지 알 수가\n  없다. 어떻게 확인하지? atomic increment를 해야할까, goroutine의 개수를 보는게\n  나을까\n- 처음 생각은 서버는 가볍게 놔두고 응답받은 클라이언트를 확인하는 것이었는데,\n  클라이언트에서만 확인하니까 동작중에 멈추게 되면 서버가 얼마나 받고 멈췄는지\n  확인하고 싶었다.\n\n\n쿠버네티스로 테스트\n- 8개로 레플리카 만들어놓고 테스트\n    - 일단 ingress로 접속하니까 골고루 접속된다.\n    - 근데 1000 커넥션정도 되고 멈춘걸로 봐서 ulimit을 해줘야겠다\n        - open files는 10만으로 적용되어있다. 근데 apr_socket_recv: Connection\n          refused 뜨면서 연결 끊긴다.\n            - ab 툴에서 connect reset by peer 뜨면 뜨는 에러인 것 같다.\n    - pod가 죽지는 않는데 연결은 거부된다.\n      ingress에서 차단하나? ingress는 부하를 어떻게 받나, pod에서 확인할 수\n      없는데 어떻게 확인하지?\n      ingress를 동작시키는게 뭐지?\n        - traefik이 loadbalancer로 쓰이는 것 같다. (k3s)\n        - ingress는 ingress controller로 동작하는데, k3s에서는 traefik이 하는 것\n          같다.\n    - traefik deployment를 3개로 확장하니까 확실히 트래픽을 더 잘 받는다. 근데\n      메모리 사용량이 목적지보다 더 많이 먹는다\n- [ ] hpa로 4개만 만들어 놓고 확장되는지 테스트\n\n#### 상황2. 10초 간 켜져있는 서버에서 클라이언트 접속 유지 시 테스트\n- websocket으로 5만 성공. 에러를 fatal 안시키고 그냥 return 시켜서 된 것처럼\n  보이는건지 확인 필요. 사용중인 소켓 50,000 확인\n    - 메모리 대략 3기가 정도 사용됨\n    - 49000 정도 확인된 거 보니 진짜 모두 동시접속이 되었다\n- 51,000 에서 멈춤\n- cannot assign requested address 라고 뜨는 것이 소켓이 부족해서 뜨는 것 같다\n    - http://docs.likejazz.com/time-wait/\n    - 빈 포트가 없고 부하가 많이 걸릴 때 발생할 수 있는 것 같다고 한다\n    - reuse를 하면 된다고 하는데 나는 reuse 할 게 아니라 접속자를 늘려야 한다\n- 59980을 찍고 더 이상 접속하지 않았다\n    - 1024 - 61000, ip range만큼 딱 접속됐다.\n    - cannot assign 에러가 났다\n    - 보내는 데이터의 크기를 write에서 1로 바꿔서 줄여본다\n    - 메모리가 부족하지는 않다\n        - 메모리는 원상태 회복하는데 시간이 걸린다\n\n일반 http에서 라즈베리파이랑 7만 커넥트는 됐는데 로컬에서 4만이 다 안되고 io\ntimeout 에러 남\n\n동시 접속을 위해서는 서버 사양이 받쳐주어야 한다\n그리고 소켓 수의 여유를 생각해 보통 5만 정도의 커넥션만 한 서버에서\n받아들이는게 안정적이겠다\n\n하지만 1대로 10만이 되는지는 알아보고싶다\n이론적으로 10만 접속자는 가능한데, 5만 처리를 하려고 하니 안된다. vagrant에서\n쓰는 소켓이 로컬에 영향을 주지는 않을텐데\n- virtual box도 서버와 같은 영역에서 소켓을 사용한다.. virtual nic로 할당되는데\n  왜 그렇지?\n\nip range가 한 서버가 받을 수 있는 동시 접속자 리밋이어야 하지 않을까?\n아니라면 TCP TIME_WAIT 소켓이 무한정 열릴 수 있다는건데, 그렇지는 않을 것 같다\n한 노트북에 서버를 분산해서 더 받을 수는 있겠지만, 한 서버가 받을 수 있는\n사용자는 ip range, 즉 65535에 종속적일 것 같다.\nconnection이 서버IP:PORT+클라이언트IP:PORT라고 해서 클라이언트가 분산되면 무한정\n받을 수 있지 않을까 싶었는데 그렇지 않은 것 같다\n\n이건 대체 뭔가...\n- [12 milion concurrent](https://migratorydata.com/2013/06/20/12-million-concurrent-connections-with-migratorydata-websocket-server/)\n- [a-milion-user](https://www.metabrew.com/article/a-million-user-comet-application-with-mochiweb-part-3)\n- http://http-kit.github.io/600k-concurrent-connection-http-kit.html\n    - 여기서 ifconfig eth0 up을 해서 한 서버에 여러 IP를 할당하는 방식을 썼다.\n- [1m-go-tcp-server](https://github.com/smallnest/1m-go-tcp-server)\n- [1m-go-websocket](https://github.com/eranyanay/1m-go-websockets)\n- [nodejs-600k](https://blog.jayway.com/2015/04/13/600k-concurrent-websocket-connections-on-aws-using-node-js/)\n    - websocket으로 M3.xlarge 머신으로 진행했다.\n- [nodejs-custom-library](https://blog.caustik.com/2012/04/08/scaling-node-js-to-100k-concurrent-connections/)\n    - 한 대의 머신으로 했는지 뭔지 모르겠다.\n\n로컬에서 아이피를 할당해서 로드밸런서로 나누면 될까.\n로드밸런서도 분산해야하겠다.\n- `for i in `seq 200 230`; do sudo ifconfig eth0:$i 192.168.1.$i up ; done`\n    - 아이피를 나누면 포트를 다르게 여나? - 되네...\n- cloud에서 테스트할때는 ip 할당이 안된다. 추가로 ip를 요청해서 받아야 한다.\n\nlocal port range를 줄였을 때는 최대 동시접속자 수가 변화가 없었는데, 메모리\n사이즈를 반으로 줄이니까 6만 5천이었던 것이 8만까지 오픈이 되었다.\n\n**충격적 발견**\n프로세스당 FD 한계가 ulimit 이었다.\n즉 한 컴퓨터에 두 프로세스를 띄우면 5만 X 2로 10만을 받을 수 있다는 뜻...\n- https://kenial.tistory.com/917?category=73673\n- TCP 연결당 10.5KB 웹소켓은 15.5KB 사용 했다고 한다.\n\n그럼 왜 docker로 했을 때 안됐던거지?\n- 서버는 1대고 클라이언트를 도커로 구동하는거였다.\n\n일단 포트만 두개로 해서 시도했더니 잘 됐다.\n이렇게 되면 결론은 메모리량만큼 한 PC에서 접속을 허용할 수 있다는 것이다.\n- 결국 CPU-bound냐 Memory-bound냐라는 기본적인 질문으로 돌아간다...\n- 근데 1 프로세스로 100만을 받은 사람이 있어서 이 부분은 확인이 필요하다.\n    - node에 PM2를 쓰면 프로세스를 여러개 만들 수 있어서 이를 이용한 것일까\n\n이제 최적화의 문제가 남아있다.\n\n- [ ] 쿠버네티스 HPA로 메모리 바운드 걸어놓고 얼마나 대응되는지 확인해 볼 수 있겠다.\n- [ ] 웹소켓의 실질적 성능은 따로 테스트 해봐야겠다. 벤치마크도 확인하고\n\n#### 상황3. HLS 서버로 테스트\n[[Streaming_server]]\n- 일단 스트리밍 서버에 대해서 파악 중\n\nTODO\n\n#### 성능 최적화\n3만 접속 시에도 CPU가 과부하 걸리므로 3만 이하에서 성능최적화하는 것으로\n테스트해야겠다\nTPS를 올려본다.\n- https://jojoldu.tistory.com/322\n- 여기서 TPS가 8000까지 나온다\n\n\n## 진행 중 확인한 것들\n#### 서버 성능별 벤치마크\n[자바로 aws ec2에서 open files 테스트 하는 블로그](https://woowabros.github.io/experience/2018/04/17/linux-maxuserprocess-openfiles.html)를 봤고 거기서는 최소사양으로는 1000커넥션 정도밖에 서버가 받아들이지 못했다\n이에 더해 1만 커넥션은 컴퓨터 성능이 어느정도 필요하고 10만은 얼마나 필요한지 확인해보자\n\nminikube로 로드밸런싱 켜서 서버 cpu500/ram100으로 설정 시 ha 동작 확인\n- 일단 도커에서 cpu 0.5 ram 500m 으로 줄이면 1만 접속 전에 뻗는다\n- api 서버가 뻗어버린다...\n\n라즈베리파이 동접 1000에서 에러 33%, 평균 응답 시간 30ms 정도 나왔다고 한다\n- http://egloos.zum.com/javalove/v/869037\n\nrmtp 서버 스트레스 테스트\n- https://idchowto.com/?p=46410\n- 2 core, 4GB memory로 2000 접속 정도\n\naws benchmark\n- https://detechter.com/nginx-vs-apache-on-ec2-performance-comparison/\n\n(책) aws 부하테스트 입문\nc4.large 200클라이언트 평균 응답시간 0.026, 처리량 7000\n- https://dev.classmethod.jp/cloud/apache-jmeter-master-slave-100mil-req-min\n\n\n#### 추가로 테스트 해봐야 할 것들\n동영상 서버는 UDP로 동작 하는 것이라 생각했는데 HTTP는 TCP 기반인데 UDP로 하는게\n의미가 있나? 어떻게 동작하는 거지?\n\n10만 접속자가 동시에 들어오면 차례대로 들어왔을 때보다 느려진다?\n- 서버 응답이 오래 걸릴 수록 비동기가 유리해지는 것 같다.\n\nnginx나 프록시 서버가 들어가면 어떤 효과를 낼 수 있을까\n- 서버를 늘리거나, 사양을 안늘려도 되게끔 할 수 있을까\n\nsocket select, poll, epoll\n\nwebsocket을 사용하면?\n- websocket is better than httpapi for streaming? even more grpc?\n- websocket을 쓰면 연결된 상태에서의 데이터 처리에 특화되있어서 기본 http보다는\n  좋다. grpc와는 비교가 필요하다\n\nHTTP/2로 테스트\n\nload test에 맞게 사용자 수를 늘리면서 테스트해서 몇명까지 되는지 보는게 맞겠는데\n\n- [ ] 3만 접속 응답시간을 줄이는 것도 해보자\n- [ ] 내부, 외부 네트워크 테스트 벤치마크\n- [ ] grpc streaming을 이용한 테스트\n\n#### 동시 접속\n동시 접속이 무엇인지 명확히 생각하지 않았다\n1초 내에 접속하는게 동시 접속인가?\n모두 연결된 상태를 유지하는게 동시 접속이라고 생각했다\n스트리밍 서버에서는 매 시간마다 새로운 트랜젝션을 실행하게 된다\ntps를 보는게 더 정확한 것일까\n십만 개의 요청은 금방 처리하는데 십만 개의 소켓은 연결하는데 오래 걸린다\n\n기업 성과 지표에서 하루 이용자 수는 보지만 최대 동시 접속자 수는 안보는게,\n서버 개발자에게는 중요하지만 동시접속자는 서버를 증설하면 처리가 가능해진다\n요즘 오토스케일러도 잘되있는데 한 서버에서 최대한 많은 동시접속자를 뽑아내려는게\n시대를 역행하는 것 같는 느낌이 든다\n\n#### os parameter\nparamter setting\n> [tcp_parameter](https://stackoverflow.com/questions/410616/increasing-the-maximum-number-of-tcp-ip-connections-in-linux)\n> [tcp_parameter2](https://serverfault.com/questions/962874/how-to-reach-1m-concurrent-tcp-connections)\n> [more parameter, syn](https://brunch.co.kr/@jehovah/23)\n> [time_wait](https://brunch.co.kr/@alden/3)\n> [tcp/ip](https://d2.naver.com/helloworld/47667)\n\n시간당 처리량 (rps)를 고려한 테스트 필요\nvagrant로 격리된 환경에서 접속 테스트 필요\ncpu 사용량 안정된 범위 확인 필요\n지금 하고 있는 것은 일반 PC에서 서버가 받아들일 수 있는 접속자 수 확인\n이 다음은 1초에 몇 사용자를 받을 수 있는지 확인 필요\n처리량은 늘리고 latency(응답시간)은 줄이면서 사용자를 많이 받도록 해야한다\n시스템이 처리 가능한량을 확인하면 각 함수별 처리량도 확인\n\n클라이언트에서 10초 접속하는게 의미가 있나? 서버에서 10초간 접속하도록 해야겠다\n의미가 있긴 있다. 접속을 끊지 않고 유지하는 것을 확인하려고 했기 때문에\n\n1만 접속자 테스트 시 응답시간 0.7초, cpu 30~40% 사용\nfasthttp로 했을 시 응답시간 동일, cpu 20~30% 사용\n\nab로 테스트하는데, keepalive를 켜고 접속하니 응답시간이 더 짧다\nab는 동접 2만까지밖에 테스트 안된다\n\n초기 윈도우 값 10으로 변경\n- `ip route | while read p; do ip route change $p initcwnd 10 initrwnd 10; done`\n\n유휴 상태 후 느린 시작 방지\n- `sysctl -w net.ipv4.tcp_slow_start_after_idle=0`\n\n킵 얼라이브가 연결 된 사용자 뿐 아니라, 다른 사용자를 받을 때도 효과가 있나?\n킵 얼라이브 시간 늘리기\n```\necho 600 > /proc/sys/net/ipv4/tcp_keepalive_time\necho 60 > /proc/sys/net/ipv4/tcp_keepalive_intvl\necho 20 > /proc/sys/net/ipv4/tcp_keepalive_probes\n```\n\n속도를 높이기 위해 wmem, rmem을 늘리고, 허용 수를 늘리려면 줄인다\n- `net.core.wmem, rmem max, default`\n- `net.ipv4.tcp_wmem, rmem`\n\n윈도우 크기 상한은 16bit인데, 윈도우 크기 확장 가능\n`sysctl -w net.inet.tcp.rfc1323`\n\n- [windows over 65535 korean blog](https://www.sysnet.pe.kr/2/0/12435)\n\n#### http option\n`Accept-Encoding: gzip, deflate`\n\n\n## reference\n- (책) HTTP 완벽 가이드, 인사이트\n- http://blog.naver.com/PostView.nhn?blogId=myca11&logNo=221389847130\n- https://jangpd007.tistory.com/246\n- [kernel problem](http://highscalability.com/blog/2013/5/13/the-secret-to-10-million-concurrent-connections-the-kernel-i.html)\n- [c10k 문제](http://www.kegel.com/c10k.html)\n\n"},{"headings":[{"value":"요약"},{"value":"조건"},{"value":"사이즈별 대표 모델"},{"value":"본격 사이즈 비교"},{"value":"먼저 13 vs 15"},{"value":"13 vs 17"},{"value":"고민"},{"value":"벽에 모니터를 고정하고 키보드를 자유롭게 vs 노트북을 그냥 쓰기"},{"value":"태블릿, 모니터"},{"value":"모니터 크기와 작업 능률"},{"value":"화면비율 왜 4:3에서 16:9로?"},{"value":"사람의 시야각"},{"value":"눈"}],"fields":{"slug":"/decision_monitor_size/"},"rawMarkdownBody":"## 요약\n고민에 해답이 아직 없다.\n\n- 15인치 2 in 1 노트북 + 15인치 보조 모니터 + 빔프로젝트\n    - 이 상태을 선택한다 가정하고 검증한다. (귀류법)\n\n## 조건\n\n- 물리적 제약이 없으면서 최적의 작업 환경을 가지면 좋겠다\n\t1. 가벼우면 좋겠다\n\t2. 답답하지 않으면 좋겠다\n\t3. 확장성이 있으면 좋겠다\n- 이런 것도 신경 쓴다\n\t- 집에서 이리저리 움직이면서 편하게 작업하면 좋겠다\n\t- 간단하게 셋팅할 수 있는 구성\n\n#### 사이즈별 대표 모델\n- 17인치는 그램\n- 15인치는 ?\n- 14인치는 씽크패드\n- 13인치는 가벼운 2in1\n\n*24인치 모니터를 폴더블로 만들면 좋을텐데, 14인치 폴더블 태블릿은 나왔는데 24인치 폴더블로 된 태블릿이나, 아니면 모니터라도 있으면 좋겠다.*\n\n## 본격 사이즈 비교\n#### 먼저 13 vs 15\n- 13 맥북 사용자는 15로 가고 싶어 한다\n    - 15인치는 무거워서 13인치를 쓰는 사람도 있다\n- 어차피 가방에 넣으면 13 무게와 15 무게가 큰 차이가 안느껴진다고 하기도 한다\n- 태블릿을 원활한 환경에서 사용하려면 1kg 노트북과 비슷해진다 (거치대,키보드)\n- **화면이 크면 보이는 코드 줄 수가 많다**\n\t- 80년대 가로 80자 세로 24줄\n\t- 지금 가로 150자 세로 100줄?\n\t- vim에서 폰트 14로 했을 때 15.6인치 FHD 노트북에서 40줄 보인다.\n\t- 34인치 모니터에서 60줄 보인다.\n- 내 작업환경에서는 화면 두개를 띄워놓기 보다는 모니터 두 개가 있는 것이 좋고 영상 볼 때 말고는 큰 화면보다는 많은 화면이 더 좋을 것 같다\n- 공항 캐리어에 들어가는 모니터라면 24인치인데, 영상 볼 때는 만족스러운 크기는 안 될 것 같다.\n\t- 빔 프로젝트를 쓰면 된다\n\n#### 13 vs 17\n17인치 단점\n- 너무 커서 편하게 들고다닐 수 없다\n- 너무 커서 집에만 둘 경우에는 짐이 된다\n- 너무 커서 모니터를 가린다\n- 뒤로 못뒤집는다\n- 거치해놓고 사용 시 거추장스럽다\n\n13인치 장점\n- 돌아다닐 때 편하다\n- 자세 바꾸면서 작업하기 편하다\n- 꺼내고 정리할 때 편하다\n\n#### 고민\n- 화면이 크면 모니터가 더 높아져야 한다\n- 큰 화면이 있으면 노트북을 옆에 두고 키보드를 따로 쓰는게 편하다. 아무리 노트북이 가볍다해도\n- 집에서 모니터가 있으면 노트북 크기는 작을 수록 좋다 vs 노트북 화면이 작으면 모니터가 없을 때 답답하다\n- 모니터는 한 집에 오래 머물러야 살 수 있다 vs 모니터를 작은 걸 사서 캐리어에 넣고 다닌다\n- 모니터를 안 쓰는 방향으로 한다 vs 영화나 영상을 볼 때 모니터가 커야 보는 맛이 난다\n- 모니터가 있는 최종상태를 기준으로 노트북을 구매하느냐 vs 현재 돌아다니는 상태를 기준으로 노트북을 구매하느냐\n- 키보드가 있으면 노트북만 가지고 작업할 때 안쓴다 vs 키보드가 없으면 노트북을 거치해놓고 쓸 때 불편하다(키보드가 없으면 모니터가 있을 때 멀리서 쓸 때 불편하다)\n- 13인치 살거면 10인치가 더 가볍잖아? vs 휴대폰도 5인치 6인치 차이나는데\n- 노트북 답답한 화면 쓰지 말고 그냥 모니터를 큰 걸 계속 산다\n\t- 작업 효율이 먼저다 vs 작은 화면을 최대한 끌어올려서 쓰고, 낭비를 줄인다\n- 가끔 여행을 갈 때도 쾌적하게 쓰려면 17인치 모니터가 낫지 않을까 vs 여행 다닐 때 노트북 들고 다닐 필요 있나\n- 작업환경 셋팅할 때 딱 노트북만 꺼내면 되는게 좋다 vs 목 건강을 위해서 모니터는 높아야 하고, 키보드도 분리하는 게 자세의 여유가 있다\n- 노트북은 노트북으로 17인치 그램 vs 나중에 집에만 놔두고 쓸 때 너무 커서 거추장스럽지 않을까\n\t- 앗 근데 한달씩 돌아다닐 때 들고 다니기에는 큰게 좋겠다\n- 13이나 15나 어차피 부족하다. 화면 두개는 필요하니 가벼운 13이 낫다 vs 13으로 단독작업은 문제 없나?\n- 집 이외의 장소에 1주일 머문다고 가정 시 13인치로만 작업이 가능할까\n- 15인치도 하나는 답답했는데 13인치 단독 사용은 거의 힘들겠다. 그러면 1주일 이상 머물면 모니터를 추가로 챙기기? 근데 하루만 갈때 하나만 가지고 가는게 의미가 있나?\n- 13인치가 가벼운게 영향이 적을까? 15인치가 시원한게 영향이 적을까\n\n#### 벽에 모니터를 고정하고 키보드를 자유롭게 vs 노트북을 그냥 쓰기\n집에서 노트북을 폈다 치웠다 해야 한다면\n- 벽에 고정\n- 기둥에 고정\n- 자석에 고정\n- 책상 위에 거치\n\n노트북을 들고 이리저리 움직이면서 작업하는 경우\n- 여행 시 이동\n- 편한 쇼파에서 작업하고 싶은 경우\n- 서서 작업하는 경우\n\n고정해놓는 경우\n- 숙소 도착 후 고정\n- 책상이 있는 경우\n\n#### 태블릿, 모니터\n- 태블릿 대신 외장 모니터를 쓰고, 외부에서 작업 시 휴대폰과 외장 모니터만 들고 간다?\n- 지금 태블릿을 사고 보니, 태블릿만 들고 나가서 작업을 하긴 힘들 것 같다(ipad라서)\n- 작업 효율화를 위해서는 화면이 두 개인 것이 좋겠고, 15 + 15가 좋을 것 같다\n- 외부에서 작업 시에도 15인치 하나로 급하게 하고, 집에서는 15+15로 안정되게 하면 좋겠다.\n\n1. M1 + 외장 모니터\n2. 15 + 15\n3. 서피스 + 갤럭시 탭\n4. 13 + 13\n5. M1 + 아이패드\n\n#### 모니터 크기와 작업 능률\n- 가독성이 좋다는 것은 빨리 읽을 수 있다는 것과 같은 말인가?\n- 인치별 텍스트 줄 수\n- 위치별 적정 모니터 크기 (모니터 인치 거리)\n\t- https://www.rtings.com/tv/reviews/by-size/size-to-distance-relationship\n- [[Readability]]\n- 노트북 자체는 자세에 안좋은데, 이동성은 뛰어나다.\n- 노트용 화면과 작업용 화면을 분리해도 될까? 노트는 아이패드에서 하고, 작업은 맥에서 해도 될까? 키보드를 왔다갔다하면 귀찮지 않을까? 화면 1개는 부족하다\n\n\n#### 화면비율 왜 4:3에서 16:9로?\n- 화면 해상도 영화는 21:9\n- 티비는 4:3에서 16:9\n- 컴퓨터는 제조사에 따라 다르지만 보통 16:9\n- 종이 4:3. 192x128\n- 창 여러 개 띄워두는 작업 환경에서 최적의 해상도는 무엇일까\n- 카메라가 찍는 비율, 화면에 표시하는 비율. 어느것이 시장을 주도?\n\n\n#### 사람의 시야각\n- 고개를 안돌리고 한 화면을 다 담는게 좋은가? 한눈에 보이는 것과 많은 것을 띄워놓는것\n\t- 고개를 움직이는 것 vs 눈동자를 많이 굴리는 것\n- 최소 두 개의 작업은 동시에 하고 싶은데 FHD에서는 웹을 볼 때 반만 보면 불편할 때가 있다\n- 영화 볼 때 침대에서 보면 2미터 이상 떨어지게 된다 2m + 책상 거리\n- 17인치 노트북과 모니터를 모니터 암에 달아 쓴다?\n- FHD는 24인치가 적당\n\t- 4k는 40인치는 넘어야 차이가 느껴진다고 한다\n\n#### 눈\n- 눈은 가로로 길게 되있고 16대 9가 중앙을 봤을 때 좌우가 한번에 보인다고 한다\n- 고정 된 것을 볼 때는 16대 9가 좋고 글을 볼 때는 가로로 길면 가독성이 떨어진다고 한다\n\n"},{"headings":[{"value":"목표"},{"value":"Step by Step"},{"value":"Docker를 사용해서 어떤 환경에서도 쉽고 빠르게 서버를 관리"},{"value":"docker compose 로 여러 서비스 같이 관리한다"},{"value":"수정하고 지웠다가 다시 실행해보기"},{"value":"docker-compose 확장 및 개선"},{"value":"간단한 모니터링을 위해 nagios를 이용했다"},{"value":"추가로 SSL 설정"},{"value":"아쉬운 점"}],"fields":{"slug":"/deploy_erp_server_story/"},"rawMarkdownBody":"\n## 목표\n\n회사의 내부 전산 작업화를 위해 ERP 서버를 구축해\n데이터를 한 곳에 모으고, 추적하고, 관리하기\n\ndocker-compose.yml 파일 하나로 구성\n\n- odoo -- postgresql -- nginx -- nagios 형태가 된다\n\n## Step by Step\n\n### Docker를 사용해서 어떤 환경에서도 쉽고 빠르게 서버를 관리\n\ndocker 에 대해서는 [subicura님의 블로그](https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html)에 잘 정리되어 있어서 이것을 보면 바로\n사용가능할 것 같다.\n\n우분투 기준 설치 방법\n\n```\napt install -y docker.io\nusermod -aG docker $USER\n\ncurl -L https://github.com/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` -o /usr/bin/docker-compose\nchmod 755 /usr/bin/docker-compose\nchmod +x /usr/bin/docker-compose\n```\n\n오픈소스 ERP 프레임워크를 이용해서 필요한 것에만 집중하고 빠르게 개발\npython 기반의 odoo 이용\njavascript, c++, php 기반의 다른 프레임워크도 있었지만 파이썬을 써보고 싶고,\nMVC 구조에 모듈로 잘 구성되어 있고 지원해주는 기능이 많아서 odoo 사용\n\ndocker 이미지도 제공되어 있어 바로 사용 가능\n\nDB는 mysql, mssql, postgresql을 두고 봤을 때 postgresql이 docker에서 볼륨상태를\n그대로 옮기기 좋다고 하여 사용.\n\n`docker-compose.yml` 기본 뼈대\n\n```\nversion: '3'\nservices:\n  erp:\n    image: odoo:10.0\n\n  db:\n    image: postgres:9.4\n```\n\n### docker compose 로 여러 서비스 같이 관리한다\n\n포트, 아이디, 비밀번호 설정 등 추가적인 설정을 더해줬다\n\n```\nversion: '3'\nservices:\n  erp:\n    image: odoo:10.0\n    depens_on:\n      - db # db 실행 후 erp 서버 실행하도록 설정\n    ports:\n      - \"8069:8069\"\n    environment:\n      - HOST=db\n      - USER=odoo\n      - PASSWORD=odoo\n    volumes:\n      - odoo-data:/var/lib/odoo\n      - ./addons:/addions_external\n    working_dir: /usr/lib/python2.7/dist-packages/odoo/addons\n\n  db:\n    image: postgres:9.4\n    ports:\n      - \"5432:5432\"\n    environment:\n      - POSTGRES_USER=odoo\n      - POSTGRES_PASSWORD=odoo\n    volumes:\n      - db-data:/var/lib/postgresql/data\n\nvolumes: # 세미콜론(:) 뒤에 공백으로 해두면 docker에서 임의의 위치에 폴더를 잡는다\n  odoo-data:\n  db-data:\n```\n\n`docker-compose up` 을 해주면 odoo와 postgresql을 돌릴 수 있다.\n브라우저를 띄워서 `localhost:8069` 입력하고 조금 기다리면 화면이 뜬다\n\n![erp_first_page](../img/erp_first_page.png)\n\n여기까지만 해도 프로그램 자체는 띄울 수 있다\n그런데 각 상황에 맞게 수정을 해줘야 하는데,\n각 프로그램의 관리 파일을 찾아서 볼륨을 시켜주는 작업을 해야 한다.\n\n### 수정하고 지웠다가 다시 실행해보기\n\n처음 아이디와 비밀번호는 admin으로 입력하면 로그인이 된다.\n\n`http://localhost:8069/web/database/manager` 에 접속하면 db를 새로 만들거나\n수정할 수 있다\n\n이제 odoo를 입맛대로 수정하기 위해서는 addons 폴더에 있는 내용을\naddons_external 폴더로 이동 후에 수정하던지, 새로 만들어서 사용하면 된다\n\nproject 모듈로 한 번 테스트 해보자\n바로 확인하기 위해 views 쪽을 수정해본다.\n\n![before_update](../img/before_update.png)\n\n```\n> docker exec -it --user root odoo_erp_1 /bin/bash\n\n$ apt-get update && apt-get install -y vim # 문서 편집기 설치\n$ mv project /addons_external\n$ vi /etc/odoo/odoo.conf\n  addons_path = /mnt,extra-addons,/usr/lib/python2.7/dist-packages/odoo/addons 뒤에 /addons_external 추가\n  addons_path = /mnt,extra-addons,/usr/lib/python2.7/dist-packages/odoo/addons,/addons_external\n$ exit\n\n> vi /addons_external/project/views/project_views.xml\n> docker restart odoo_erp_1\n```\n\n![after_update](../img/after_update.png)\n\nodoo 가 아니더라도 volumes를 이용해서 수정할 폴더를 따로 빼놓고 수정할 내용은\n그곳에 넣는 방식으로 하면 수정된 내용을 바로 적용하기 좋았다\n\n지운 후 재실행 했을 때 작업했던 것이 남아있는지 확인해보자\n\n```\ndocker-compose down\ndocker-compose up\n```\n\n이렇게 하면 위에서 docker exec 이후 수정했던 부분은 초기화 되므로 이 작업을\n자동화 해주어야 한다.\n그래서 docker-compose.yml 파일 하나로만 구성 하려던 계획대로 되지는 않았다\n대신 확장성이 높아졌다.\n\n### docker-compose 확장 및 개선\n\nDockerfile 을 docker-compose.yml 이 있던 위치에 저장\n\n```\nFROM odoo:10.0\nUSER root\nRUN apt-get update && apt-get update -y vim\nRUN sed -i \"/addons_path/ s/$/,\\/addons_external/\" /etc/odoo/odoo.conf\nRUN rm -rf /usr/lib/python2.7/dist-packages/odoo/addons/project\n```\n\n다시 docker-compose.yml 수정\n\n```\nservices:\n  erp:\n    image: odoo:10.0\n```\n\n->\n\n```\nservices:\n  erp:\n    build: ./\n```\n\n다시 `docker-compose up` 을 해서 확인 가능하다\n\n다른 컴퓨터로 옮기기 위해서는 볼륨했던 것을 찾아서 옮겨주면 된다\n\n```\ndocker volume ls\ndocker volume inspect <odoo-erp-data>\n```\n\n![docker volume ls](../img/docker_volume.png)\n\n```\ndocker-compose stop\nsudo cp -r /var/lib/docker/volumes/odoo_test_odoo-erp-data/_data/ ./erp-data\nsudo cp -r /var/lib/docker/volumes/odoo_test_odoo-db-data/_data/ ./db-data\n```\n\n기존 데이터를 가져오고\n\n```\ndocker-compose up -d\ndocker-compose stop\nsudo su\ncp -r ./erp-data/_data/* /var/lib/docker/volumes/odoo_test_odoo-erp-data/_data\ncp -r ./db-data/_data/* /var/lib/docker/volumes/odoo_test_odoo-db-data/_data\ndocker-compose start\n```\n\n다시 가져온 데이터를 원래 위치로 보내준다.\nDB에서 추가 설정 필요 없이 바로 데이터 적용이 된다\n\n이렇게 하면 5개의 파일 및 폴더로 ERP 서버를 구동하게 된다\n\n```\n# 폴더 트리\naddons/ # 수정할 프로젝트 파일들\ndocker-compose.yml\nDockerfile\nerp-data/ # web 내부 데이터들\ndb-data/ # db 내부 데이터들\n```\n\n### 간단한 모니터링을 위해 nagios를 이용했다\n\n- Nagios - light weight, lots of modules, well documentation\n\n위 작성된 내용에 추가\n\n```\nservices:\n...\n  nagios4:\n    build:\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock\" # docker process 모니터링\n    ports:\n      - \"8080:80\"\n```\n\n### 추가로 SSL 설정\n\n```\nservices:\n...\n  nginx:\n    build:\n    volumes:\n    ports:\n```\n\n전체 소스는 [github](https://github.com/shdkej/odoo_gvm)에서 볼 수 있다\n\n## 아쉬운 점\n\n- CI/CD\n- Test Code\n- HAproxy\n- ip setting automatic to vagrant\n- repository split\n- docker build to image\n- announcing update\n"},{"headings":[{"value":"영화와 책의 파일로서의 영속성"},{"value":"hdd"},{"value":"랜섬웨어"},{"value":"외장하드 백업"},{"value":"etc"},{"value":"회사가 망하면 책들을 어떻게 풀어줄 것인지에 대해"},{"value":"소프트웨어의 해결과제"},{"value":"이점"},{"value":"한국사람이 해외에서 합법적으로 영화를 다운 받는 방법"},{"value":"DRM"},{"value":"소장과 구독"},{"value":"쌓인 자료를 푸는 방법"},{"value":"디지털 컨텐츠 소장"}],"fields":{"slug":"/digital_content/"},"rawMarkdownBody":"\n데이터를 영구적으로 보존할 방법\n\n백업을 여러 곳에 한다\n원드라이브, 구글 클라우드, 내 디스크, 외장하드에 저장한다\n\n디스크에 쓰여진 게 어떤 현상으로 인해 모두 지워지게 될 수 있을까?\n클라우드에서 데이터 보존이 안된다면 내가 따로 저장해도 의미가 없을 수도.\n그들은 여러 지역에 분산된 데이터 센터가 있고, 한 데이터도 레이드하여 분산, 다중 처리를 하고 있다. 이보다 더 탄탄한 환경을 만들 수 있을까\n한 회사의 모든 데이터가 날아갈 일도 없지만 날아간다고 하면 다른 회사도 날아갈 수 있다\n그들이 데이터를 상실한다면 나는 어떻게 보존할 수 있는가\n\n차라리 세계멸망이 더 가능성 있을까\n\n내가 보존하고 싶은 것은 내가 쓰고 있는 노트와 나에게 뭔가를 느끼게 해준 미디어인데\n노트는 10년 정도의 주기로 물리적인 매체로 인쇄해 소장해도 되지 않을까 싶다\n미디어는 영화는 블루레이💿, 책은 종이책📚, 축구경기 영상은? DVD로 구워서 보관할까\n나의 소프트웨어는?\n-- 이동진의 파이아키아를 보고\n\n#### 영화와 책의 파일로서의 영속성\n구글 플레이, 네이버 미디어에서 구매를 하면\n각자의 플랫폼 안에서 구동되게 된다\n외부로의 반출을 막고 데이터를 보호하기 위함일텐데\n다른 플레이어로 재생도 안되고, 어떤 플랫폼에는 있는데 다른 플랫폼에는 없는 것도 있다\n\n어떻게 하면 효율적으로 소장할 수 있을까\n\n컨텐츠 제작자의 입장에서 디지털로 제작된 컨텐츠를 어떻게 지켜야하는가와 소비자의 소비 욕구가 충돌된다\n종이책은 재배포는 소유자가 다른 사람에게 전달하면 기존 소유자는 잃게 되는 총합이 유지가 되는데 전자책은 DRM을 안걸어놓으면 무한 배포가 가능해서 제작자에게 손해를 끼치게 된다\n재배포를 법으로 막고 있지만 인터넷 특성상 몰래 공유가 가능하여 마냥 소비자에게 소유권을 넘겨주기도 어렵다.\n\n음반시장에서 이러한 상황이 먼저 있었는데 음원은 DRM을 해제했다.\n게임은 소유의 개념이 없는 방향으로 되었다\n음원은 스마트폰 시대가 되면서 DRM을 무력화 하는게 쉬워져버렸고, 해외에서 DRM을 안쓰게 해서 소비자가 접근 쉽게하는 전략을 사용하여 전반적으로 정착 되었다.\n\n출판계에서도 몇몇 출판사는 DRM 대신 워터마크를 붙이는 방식으로 전환한 곳이 있다.\n전자책 업체가 DRM에서 자유로우려면 출판사가 크게 영향을 미친다.\n\n#### hdd\nIDE 방식이었다가 SATA로 데이터 전송 방식이 바뀐 것처럼 HDD 자체가 사용 못하는\n경우가 생길 수도 있겠다\n\n#### 랜섬웨어\n잠복했다가 감염시키기도 하고, USB, cloud에도 접근하며, 백업하는 것을\n확인하기까지 해서 정말 격리된 곳이 아니면 모두 옮길 수 있다고 한다\n\n#### 외장하드 백업\n외장하드를 계속 연결해놓지 말고, 여러개를 번갈아 사용하는게 좋다\n\n## etc\n날 것의 콘텐츠\n컨텐츠에 암호화\n계정에 종속, 플랫폼에 종속\n소비자 불만\n워터마크\n\n현재 상황\n\n구글\n플랫폼 종속\n네이버\nDRM free, 아닌 것도 있음\n\n영화 다운로드\n\n국내 해외\nDRM, free\nDRM은 자막 조절 여부\n화질\n컨텐츠의 다양성\n\nDRM 제거의 법적 문제\n영국, eu에서는 불법이 아니라고 한다\n\n구글북스는 epub 다운로드 가능\nadobe drm 걸려있으며 어찌저찌 변환은 가능\n리디북스\n네이버 시리즈(구 네이버 북스)\n\n## 회사가 망하면 책들을 어떻게 풀어줄 것인지에 대해\n아예 DRM을 풀어서 다운로드 가능하게 하는 것은 망한 회사가 감당할 수 있는 영역이 아니다. 원저작자의 권리가 침해 받기 때문에.\n뷰어를 제공하는 방법이 그나마 나은 방법인데\n그 뷰어 자체를 영속성 있게 구현하려면 어떻게 해야 할까\n\n단순히 지금의 뷰어로 계속 볼 수 있게 한다고 하면 제한이 걸린다\n새로운 안정적인 소프트웨어가 필요한데.\n운영체제에 종속성이 있으면 안되고\n사용자가 쉽게 이동이 가능해야 하고\n속도가 느려지면 안되고\n책이 사라지면 안되고\n그렇다고 복제가 되도록 허술하면 안된다\n\n이 조건을 만족하는 소프트웨어는 존재할 수 있을까?\n복제를 막는 것은 시간문제라서 언젠가는 뚫리게 되있다\n\n블록체인으로 오히려 공개함으로서 유지를 할 방법은?\n블록체인은 가상화폐라는 화폐의 가치를 가진 것을 누구나 서로 감시하는 방식으로 화폐의 가치를 지킬 수 있다\n화폐 대신 컨텐츠에 대한 소유 인증을 하도록 하면?\n\n전자책은 출판사의 판권이 만료되면 책을 다 내려야 하며\n중고거래도 안된다고 한다\n\nhttps://www.dmitory.com/novel/70972649\n\n## 소프트웨어의 해결과제\n자기 완결성(책) <-> 종속성 (디바이스와 전기에 종속될 수 밖에 없다) + 운영체제, 프로그래밍 언어, 개발 문화\n[ ] 최초의 소프트웨어는 현재 사용 가능한가?\n\n불법 복제\n\n#### 이점\n위치, 시간의 제약이 없다\n물리적 공간 차지 없음\n\n## 한국사람이 해외에서 합법적으로 영화를 다운 받는 방법\njustwatch를 찾는다\n\n유튜브\n아이튠즈\n구글 무비\n\n[ ] 유튜브와 구글 무비가 다르다?\n구글 무비에서 구매한 것은 유튜브에서 시청가능\n\n[ ] 유튜브에서 구매를 하면 외국영화를 한국자막을 씌울 수 있나?\n유튜브는 네이버에 비해 비싸다\n\n한국사이트에서는 받을 수가 없다!\n한국인은 한국사이트가 편한데 외국사이트에서 굳이 구매해야 한다\n\n돈을 주고도 내 맘대로 소장할 수가 없다\n불법 다운로드 사이트는 오히려 나의 소장품을 쉽게 만들어준다\n뭔가 이상하다\n\n## DRM\nin music - http://m.inews24.com/v/407508\n\n과도한 개인 사용자 영역 침해, 호환성 문제 예시 - Fasoo DRM\nhttps://namu.wiki/w/Fasoo%20DRM\n\n## 소장과 구독\n왜 소장해야 하는가\n왜 구독해야 하는가\n스포츠방송, 영화, 티비, 인터넷, 책,\n\n한 번에 결제하면 비싼 것을 조금씩 낸다. 그래서 이것 저것 써보고 마음에 안들면 바꿀 수 있다\n소유보다 경험을 원한다?\n\n음원 서비스는 예전부터 구독형이었다. 근데 노래를 각각 구매하는 것보다 전체\n서비스에서 원할 때 마음껏 들을 수 있는 메리트가 있다.\n소장을 하지 않더라도 그 서비스를 이용하면 계속 원하는 것을 들을 수 있다\n\n소유는 공간을 차지하고 관리를 해줘야 하는데 구독은 서비스에서 관리를 해준다\n\n내가 소장에 뽐뿌가 온 것이 이동진의 파이아키아를 보고 마음이 이끌렸기 때문이지\n소장이 무조건 좋아서는 아니다\n\n편리함이 있다\n\n자주 안쓰는 드릴 같은 공구, 이사할 때마다 바꾸는 가전제품 등은 구독해서 써도\n좋지 않을까?\n- 되파는 가격과 비교해봐야겠다\n\n너무 갖고 싶은, 구독이 아니라 소장하고 싶은 것이 있다.\n\n오래 사용하면 구매하는 것보다 더 큰 비용이 들게 된다\n\n서비스에 종속적이다\n\n우유 구독, 신문 구독은 요새 잘 안보인다\n신문 구독은 디지털로 옮겨지긴 했으나 뉴욕타임즈처럼 미국에서는 구독 서비스가\n있으나 한국에서는 포털에서 모두 볼 수 있다\n\n\n\n\n#### 쌓인 자료를 푸는 방법\n> 일상에서 수집한 영감은 매주 일요일 아침 7시마다 매거진 Achim의 구독 멤버분들께\n보내는 뉴스레터 <일요 영감 모음집>을 작성하며 다시 한번 정리합니다. Music,\nReading, Recipe, Exhibition 등 정해둔 카테고리에 맞춰 일주일간의 영감을 정리하는\n것만으로도 큰 도움이 되더라고요.\n>> 퍼블리에서 읽음\n\n#### 디지털 컨텐츠 소장\n> \"웹 지면에서 좋은 글을 보면 꼭 종이책으로 나왔으면 좋겠다는 생각을 한다. 그러다가 나온다는 소식을 들으면 이제 곧 그 글을 가질 수 있구나 하고 기뻐하는 것이다\"\n> > 김화진의 선택일기\nhttp://ch.yes24.com/Article/View/43747#:~:text=.%20웹%20지면에서%20좋은%20글을%20보면%20꼭%20종이책으로%20나왔으면%20좋겠다는%20생각을%20한다.%20그러다가%20나온다는%20소식을%20들으면%20이제%20곧%20그%20글을%20가질%20수%20있구나%20하고%20기뻐하는%20것이다\n\n디지털로만 존재하는 컨텐츠가 실물 컨텐츠가 되면 그것을 소장하는 기쁨\n\n"},{"headings":[{"value":"Terraform 을 이용해서 EKS 익히기"},{"value":"미리 셋팅 돼야하는 것들"},{"value":"EKS의 기본 리소스"},{"value":"클러스터 생성"},{"value":"그럼 이제 뼈대를 올려보도록 하겠습니다."},{"value":"쿠버네티스 동작 확인"},{"value":"오토스케일링을 통해 트래픽 대응 확인"},{"value":"이제 CA를 테스트해보겠습니다."},{"value":"추가로 해야 할 것들"},{"value":"정리"},{"value":"eks 선언 안했는데자동생성된거 확인"},{"value":"그 외 참고자료"}],"fields":{"slug":"/eks_with_terraform/"},"rawMarkdownBody":"\n## Terraform 을 이용해서 EKS 익히기\n\n쿠버네티스 관리를 클라우드에 맡기고 쿠버네티스의 기능만 쓰게 해주는 EKS를 알아봅시다.\n\nTerraform으로 EKS를 올리면서 구성요소는 어떤 것이 있는지 확인해보려고 해요.\n\n#### 미리 셋팅 돼야하는 것들\n\n- aws 계정과 credential (~/.aws/credentials)\n- terraform 설치\n- kubectl\n\n#### EKS의 기본 리소스\n\n- eks-cluster\n- eks-worker-nodes\n- vpc\n- iam\n\n#### 클러스터 생성\n\n모듈을 사용하는 것보다 하나씩 리소스를 선언해보는게 기본 구조를 파악하기 위해\n좋을 것 같아요.\n\n- [terraform-provider](https://github.com/hashicorp/terraform-provider-aws/tree/main/examples/eks-getting-started) 에서는 테라폼이 제공해주는 소스로, 모듈 없이 뼈대를 알아볼\n  수 있습니다.\n- [terraform-aws-modules](https://github.com/terraform-aws-modules/terraform-aws-eks/tree/master/examples/basic) 에서는 모듈로 eks를 제공해주고 있습니다.\n- [terraform 공식 가이드](https://learn.hashicorp.com/tutorials/terraform/eks)\n- [terraform eks 리소스 document](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eks_cluster)\n\n첫번째 예제(terraform-provider)를 참조해서 알아보도록 하겠습니다.\n\n```\ngit clone https://github.com/terraform-providers/terraform-provider-aws.git\ncd terraform-provider-aws/example/eks-getting-started\n```\n\n먼저 aws로 provider 설정이 돼있구요.\n\n```\n# providers.tf\nterraform {\n  required_version = \">= 0.12\"\n}\n\nprovider \"aws\" {\n  region = var.aws_region\n}\n```\n\neks cluster라는 리소스가 있습니다.\n필수 옵션으로 `name`, `role_arn`, `vpc_config` 가 있습니다.\n\n```\n# eks-cluster.tf\nresource \"aws_eks_cluster\" \"demo\" {\n  name = var.cluter-name\n  role_arn = aws_iam_role.demo-cluster.arn\n  vpc_config {\n    subnet_ids = aws_subnet.demo[*].id\n  }\n}\n```\n\n`vpc_config` 안의 항목이 예제 소스에는 `security_group`도 있지만 `subnet_ids`만 필수입니다.\n\neks cluster에서 role과 vpc의 subnet을 필수로 요구했으니 따라가보도록 하겠습니다.\n\n```\n# eks-cluster.tf\nresource \"aws_iam_role\" \"demo-cluster\" {\n  name = \"terraform-eks-demo-cluster\"\n  assume_role_policy = <<POLICY\n  ...\nPOLICY\n}\n\n# vpc.tf\nresource \"aws_vpc\" \"demo\" {\n  cidr_block = \"10.0.0.0/16\"\n\n  tags = {\n    Name = \"terraform-eks-demo-node\",\n    \"kubernetes.io/cluster/${var.cluster-name}\" = \"shared\",\n  }\n}\n\nresource \"aws_subnet\" {\n  count = 2\n\n  cidr_block = \"10.0.${count.index}.0/24\"\n  vpc_id = aws_vpc.demo.id\n\n  # optional\n  # availability_zone = data.aws_availability_zones.available.names[count.index]\n  # map_public_ip_on_launch = true\n}\n```\n\n여기에 iam role policy attachment와 az 설정, route table, gateway가 추가로\n있지만 일단 뼈대만 확인하기 위해 없이 해보도록 하겠습니다.\n\n하지만 worker node 는 왠지 있어야 할 것 같아 추가해보겠습니다\n\n- 예제 소스에서 worker node가 따로있는 것을 통해 node를 따로 선언해야한다는 것을\n  유추해 볼 수 있는데, document 만으로는 따로 만들어야 한다는 정보를 얻을 수\n  없었습니다.\n\n```\n# eks-worker-nodes.tf\nresource \"aws_eks_node_group\" \"demo\" {\n  cluster_name = aws_eks_cluster.demo.name\n  node_role_arn = aws_iam_role.demo-node.arn\n  subnet_ids = aws_subnet.demo[*].id\n  node_group_name = \"demo\" #optional\n\n  scaling_config {\n    desired_size = 1\n    max_size = 1\n    min_size = 1\n  }\n}\n```\n\n어떤 인스턴스를 쓰는지는 옵셔널이네요. 기본 인스턴스는 amazon linux로 eks용\n이미지를 aws에서 제공해주는게 있다고 합니다.\n\n마지막으로 가이드를 보다보니 kubeconfig를 output으로 빼서 로컬에서 커맨드를 날릴\n수 있게 하는게 유용한 것 같아 output을 추가하겠습니다.\n\n```\n# output.tf\nlocals {\n  kubeconfig = <<KUBECONFIG\n\napiVersion: v1\nclusters:\n- cluster:\n    server: ${aws_eks_cluster.demo.endpoint}\n    certificate-authority-data: ${aws_eks_cluster.demo.certificate_authority[0].data}\n  name: kubernetes\ncontexts:\n- context:\n    cluster: kubernetes\n    user: aws\n  name: aws\ncurrent-context: aws\nkind: Config\npreferences: {}\nusers:\n- name: aws\n  user:\n    exec:\n      apiVersion: client.authentication.k8s.io/v1alpha1\n      command: aws-iam-authenticator\n      args:\n        - \"token\"\n        - \"-i\"\n        - \"${var.cluster-name}\"\nKUBECONFIG\n}\n\noutput \"kubeconfig\" {\n  value = local.kubeconfig\n}\n```\n\n여길 보니 `aws_eks_cluster`의 `endpoint`, `certificate_authority`,\n`var.cluster-name`를 변수로 가져오는군요.\n\n#### 그럼 이제 뼈대를 올려보도록 하겠습니다.\n\n! 시간당 $0.2 정도 든다고 합니다. 1시간 안에 끝내도록 해보겠습니다.\n\n- 클러스터 관리에 시간당 $0.1, EC2를 이용하기에 인스턴스 요금이 추가로 듭니다.\n\n`terraform init, plan, apply`\n\n생성이 오래걸려서 콘솔을 한 번 확인해봤습니다.\n\n- 콘솔창에서 생성하는 구성을 보니 네트워크에서 엔드포인트를 설정하고, CNI,\n  CoreDNS, kube-proxy 버전을 고르도록 돼있는 반면, terraform에서는 이 설정을\n  안하게 되네요.\n\n클러스터에 리소스를 만드는데 시간이 많이 걸립니다.\n\n! 노드 그룹 생성 중 Ec2SubnetInvalidConfiguration 에러가 발생했습니다.\n\n```\nnode group demo does not automatically assign public IP addresses to instances\nlaunched into it. If you want your instances to be assigned a public IP address,\nthen you need to enable auto-assign public IP address for the subnet. See IP\naddressing in VPC guide:\nhttps://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html#subnet-public-ip\n```\n\n- 서브넷에서 public IP assing을 할 수 있도록 하라는 것 같습니다. 마침 아까 vpc\n  subnet에서 주석처리한 `map_public_ip_on_launch` 값이 있었습니다. 이 값을 다시\n  설정해주니 노드그룹이 생성되었습니다.\n\n이렇게 eks cluster와 vpc, subnet, iam만 설정하면 eks는 생성되는 것을 볼 수\n있었습니다.\n\n하지만 이것만으로는 아무 기능이 없고 실제 일을 하는 노드도 생성해야함을 알 수\n있었습니다. 마찬가지로 실제 사용을 위해서는 추가적인 리소스가 더 필요할 것으로\n보입니다. 그건 차차 사용하면서 필요할 때 추가해보도록 하겠습니다.\n\n#### 쿠버네티스 동작 확인\n\n다음 작업은 만들어진 클러스터를 이용해서 kubernetes에 pod를 생성해보도록\n하겠습니다.\n\n[aws 문서](https://aws.amazon.com/ko/blogs/startups/from-zero-to-eks-with-terraform-and-helm/)를\n[번역한 글](http://dveamer.github.io/backend/TerrafromAwsEks.html)을 참고해서 진행해보도록 하겠습니다.\n\n`terraform output kubeconfig > ~/.kube/config`\n\n`kubectl get node`로 확인\n\n- 실패\n- Unable to connec to the server, executable aws-iam-authenticator not found\n- [aws-iam-authenticator](https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/install-aws-iam-authenticator.html)를 설치해봅시다.\n  - 네, 설치하고 환경변수 등록했더니 됩니다.\n\n#### 오토스케일링을 통해 트래픽 대응 확인\n\n서비스를 하나 띄워두고 HPA를 만들고 트래픽을 받아서 오토스케일링을 잘\n하는지 확인해보도록 하겠습니다.\n\n오토스케일링은 쿠버네티스 HPA 또는 EKS Cluster Autoscaler를 이용할 수 있습니다.\n\n스케일링을 위해 metrics-server를 설치해야합니다.\n\n- metrics-server 설치\n  `kubectl apply -f  https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml`\n\n[간단한 hpa 테스트 방법](https://kubernetes.io/ko/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/)을 참고해서\nmetric-server를 설치한 후 테스트해봅시다.\n\n```\n# 디플로이먼트 생성\nkubectl apply -f https://k8s.io/examples/application/php-apache.yaml\n\n# 오토스케일 설정\nkubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10\n\n# 부하 주기\nkubectl run -i --tty load-generator --rm --image=busybox --restart=Never -- /bin/sh -c \"while sleep 0.01; do wget -q -O- http://php-apache; done\"\n\n```\n\n![hpa](../img/hpa.png)\n\n간단하게 확인 작업은 됐습니다.\n\n#### 이제 CA를 테스트해보겠습니다.\n\nEKS Cluster Autoscaler는 설치가 필요합니다.\n\nCluster autoscaler를 따로 설치해야하는줄 알았는데, worker-node를 설치할 때\nscaling config에 넣어준 옵션이 auto scaler를 위한 설정이었고, 자동 생성\n되었습니다.\n\n[이 예제](https://aws-eks-web-application.workshop.aws/ko/100-scaling/200-cluster-scaling.html)\n를 참고해서 테스트해보겠습니다.\n먼저 테라폼 eks-worker-node에서 max size를 늘려줍니다. 저는 10으로 했습니다.\n그리고 파드를 100개 생성하고\nkubectl create deployment autoscaler-demo --image=nginx\nkubectl scale deployment autoscaler-demo --replicas=100\n\n지켜봅니다.\n\n`k get nodes -w`\n`k get deploy autoscaler-demo -w`\n\n! 저 예제 속에 있는 autoscaler discover가 안올라옵니다.\n\n- terraform에서 수동으로 desired size를 2로 올리니 7개만 만들어진 파드가 23개로\n  올라갔습니다.\n- CA는 좀 더 확인해봐야 할 것 같습니다. (진행중)\n\n#### 추가로 해야 할 것들\n\nELB, NLB 등 로드밸런서 연결\n\n- https://learnk8s.io/terraform-eks\n\n## 정리\n\nterraform destory를 해도 그 리전에 처음 네트워크를 만들게 되면 기본 네트워크로\n설정되어 삭제가 안됩니다\n비용은 따로 나오지 않으니 다음에 삭제해도 되고, 콘솔에서 직접 삭제해도 됩니다.\n\n##### eks 선언 안했는데자동생성된거 확인\n\n- 로드 밸런스\n- 시큐리티그룹\n- 라우팅 테이블\n\n지금까지 EKS를 terraform 으로 빌드하고 EKS의 Cluster Autoscaler 기능을\n테스트해봤습니다.\n\nEKS가 어떤 리소스로 구성되어있고, CA는 어떻게 동작하는지 맛을 살짝 보았는데요.\n관리를 클라우드에 맡기는게 얼마나 메리트가 있는지 확인을 좀 해봐야겠습니다.\n\n#### 그 외 참고자료\n\n- https://engineering.vcnc.co.kr/2019/02/eks-migration/\n- https://suhwan.dev/2021/01/14/kubernetes-ops-components/\n- https://www.slideshare.net/ssuser833a99/aws-ecs-eks-principle-enterprise-evangelist\n"},{"headings":[{"value":"life Tracking"},{"value":"manage point"},{"value":"exclude"},{"value":"캘린더에 그날의"},{"value":"less manage things."},{"value":"하루 한줄 요약"},{"value":"daily tracking"},{"value":"daily tracking"},{"value":"todo with timer"},{"value":"task management in vim"},{"value":"sleep tracker"},{"value":"메시지 100% 수신하기"},{"value":"quantified self"},{"value":"류비셰프의 시간 관리법"},{"value":"rss로 안되는 업데이트 알림 받는 방법 확인"},{"value":"하루를 눈으로 보고싶다"}],"fields":{"slug":"/life_tracking/"},"rawMarkdownBody":"![energy](../img/energy.jpg)\n## life Tracking\nshortcut setting\nnews, post, e-book viewer composing\n행동을 데이터화해서 기록을 남기는 방법 알아보기\n\n#### manage point\n- [ ] file, music, source-file\n- [X] photo,\n- [ ] note,\n- [X] calendar,\n- [X] reminder,\n- [X] todo(pomodoro),\n- [ ] log(internet),\n- [ ] bookmark,\n- [ ] movie\n- [ ] book\n- [ ] coding\n- [ ] place, map - google timeline\n- [X] money,\n- [ ] health,\n- [ ] sleep\n- [ ] food\n\n- note, file, photo -> cloud\n- pomodoro -> todo -> note -> cloud\npdf를 관리하는 것은 플렉슬로 하면 될까\n저장한 웹페이지 관리 어떻게 하지 -> drive\n\n보관을 무슨 기준으로 하지?\n모두 보관해놓으면 눈에 안띄어서 까먹지 않을까?\n보관하지 않을 기준은?\n\n#### exclude\n- water\n- read article\n- watch tv\n\n#### 캘린더에 그날의\n- 식단\n- 가계부\n- 갔던 장소\n- 검색 기록\n- 일기\n- health\n- 이벤트\n- todo, reminder\n\n#### less manage things.\n- I want to reduce item that i should have manage something.\n- need manage things in computer.\n - mail\n - docker\n - system resource\n - github\n - note\n\n## 하루 한줄 요약\n컴퓨터 한 시간\n움직인 시간\n\n#### daily tracking\n누적데이터를 리스트에 적고 옆에 그 날 추가된 것을 표시하는 식으로 해야\n추세가 확인되어서 좋을 것 같다\n일별로 할까 주별로 할까\n데이터 모으는 것은 일별로 하고 주별로 보여주게 하면 좋을까\n일단 데이터를 모아야 한다\n\nsleep\n- 자고 일어나면 데이터 생성된다\n- 수면 완료를 누르면 메시지를 보낸다 (캘린더에 쓴다)\n- 메시지를 읽어서 csv에 쓴다\n- csv를 읽어서 정리한다\n\n- primenap을 이용해 월말에 csv를 내보내고 화면 캡처를 한다\n- csv를 읽어 보고서에 등록한다\n\n- [ ] 내 수면 사이클 주기는?\n\nphone\n- DriveSync, FolderSync 앱을 이용해서 구글드라이브와 연동\n\n- 장소, 컨디션, 날씨, 사진\n    - 20/12/11: 🛌 9.0 💻 6.1 📱 3.1 🥢 2600 🦶 6900 📚 160 🎞️ 1 💵 40,000 🚀 +26\n    - 20/12/10: 🛌 9.0 💻 6.1 📱 3.1 🥢 2600 🦶 6900 📚 160 🎞️ 1 💵 40,000 🚀 +26\n+ 읽은 책 이름, 영화 제목, 먹은 음식, 작업 내용\n\n캘린더에 기록되면 -> 스프레드시트에 쓰기\n\n#### daily tracking\n뭘 먹었는지 기록하기에는 사진을 찍는게 제일 간편할 것 같은데\n사진으로 하루를 요약하면 한눈에 보기 힘들지 않을까?\n\n사진은 구글킵에 넣으면 출처 입력 된다\n웹 캡쳐본은 구글킵에 넣는다\n찍은 사진은 구글포토에 들어간다\n미래에 할 것들을 모아두는 곳은 노션\n\n구글포토\n구글드라이브 - 로컬위키폴더, 로컬워킹스페이스\n            백업 - 원드라이브\n                휴대폰폴더\n구글캘린더\n구글킵\n지메일\n피들리\n깃헙\n\n사진, 파일, 문서, 북마크\n하나의 소스에서 모든 것을 관리하고 싶은데\n노션에서 구글드라이브도 되고, 사진도 되고, 텍스트도 되고, 달력도 된다\n근데 노트를 연동하거나 블로그 포스트로 바로 올리는 것은 안된다\n북마크를 크롬에서 바로 검색할 수는 없다\n\n카테고리를 줄이려니까 또 따로 뺐으면 좋겠는 카테고리가 걸린다\n정보탭으로만 구성하려고 했는데, 음식정보, 생활정보, 집정보는 따로 모아서\n보고싶어진다.\n\n> every file organize\n> - file - onedrive\n> - *image - clutter*\n> - *photo - google photo*\n> - text note - onedrive\n> - *todolist - app*\n> - *bookmark - google*\n\n> note specification\n> constant\n> planning\n> archive\n> update\n> list\n\n> make link each file\n\n#### todo with timer\n인박스에 있던 것을 진행중으로 옮기면 타이머를 돌리게 하기\n완료로 옮기면 타이머 종료\n중지/다시시작 필요\n\nINBOX.md 에 있는 파일에서 단축키 입력하면 작업 시작\n작업을 시작하면 캘린더에 올리기. 시간 현재시간 추가\n캘린더와 텍스트 동시에 생성해서 텍스트파일은 리포트로 만들어야 함\n    - 캘린더를 파싱해서 텍스트파일로 만들면 되지 않을까?\n\n작업 완료 시 어떻게 표시할까\n\n#### task management in vim\ncommand td\nquick add task to calendar\npomodoro start\n> it can be check start time. but how can track finish time?\n\ntask, doing, done\nwrite task category?\ndevelop: do something\npersonal: write something\n\nuse to verb: read something, write something, do something, develop something\n\n#### sleep tracker\nsmart alarm\nsound check\nmovement check\nreport, export\n\nalarm\n특정시간에 한번만 알려주는 알람\n수면시작을 누르면 일어나는 시간 계산해주는 알람\n아침 알람 시 천천히 일어날 수 있도록 해주는 알람\n\ntodo 등록하면 자동 리마인더\n집에 오면 리마인더\n\n#### 메시지 100% 수신하기\n이메일\n휴대폰\n메신저\n업무 시에는 메신저를 통일 시킨다\n개인적으로는 이메일을 대표적인 수단으로 설정한다.\n리마인더를 이메일로 보낸다\n\n#### quantified self\n이런게 있었다\n생각하던 데일리 트래킹을 이미 하고 있는 사람들이 있었다\n- https://quantifiedself.com/show-and-tell/\n\n#### 류비셰프의 시간 관리법\nhttps://johngrib.github.io/wiki/book-lyubishev/\n\n#### rss로 안되는 업데이트 알림 받는 방법 확인\n좋아하는 작가의 신작\n- 알라딘, 리디북스에서 신간 알림 됨\n일반 도서, IT 도서 신간 알림 봇 있음\n내가 쓰는 소프트웨어 릴리즈 소식\n\n난 사진도 많이 안찍고 sns도 많이 안해서 정보가 적고 잘 모여있는 편인데도 한 곳에\n모으기가 힘들다\n\n\n#### 하루를 눈으로 보고싶다\n"},{"headings":[{"value":"확장 가능하고 변경이 쉬운 환경 구축하기."},{"value":"kubernetes cloud host"},{"value":"digital ocean 으로 쿠버네티스 구축"},{"value":"확장 가능한 최소한의 인프라"},{"value":"개인 서버 구축"},{"value":"Tool"}],"fields":{"slug":"/my_space/"},"rawMarkdownBody":"\n## 확장 가능하고 변경이 쉬운 환경 구축하기.\n배포는 인프라에서 처리한다.\n\n## kubernetes cloud host\n월 5천원 정도만 쓰는 인스턴스 하나 구해서 페이팔 연동, 피씨에서 접속\n어떤 호스트, 어떤 인스턴스를 쓸지\n네트워크, 디스크 가격은 어떻게 되는지 확인.\n쿠버네티스 돌려서 테스트 하는 것까지 블로그 글 작성\n\n1. aws, gcp\n2. cpu, ram\n3. 네트워크 설정\n4. 쿠버네티스 구동(단독형으로 쓸까...)\n\n클라우드 페이팔 연동해서 n26 매달 빠져나가게 설정\n한달 5유로 정도면 100개월 사용 가능\n\nprice of 3 nodes\naws(RAM 1G): 0.72\ngcp(f1-micro RAM 0.6): 1 free, 2 0.36\ngcp(e2-micro RAM 1G): 0.60\n- network more. disk 1G free\n\nHow many pod can run in 1 cpu 512 ram\n- kubernetes use 1GB ram\n\nBuild Kubernetes server hybrid\n\n- Check cloud fee\n- Run Logging monitoring app\n- kubernetes test\n- 롤링 업데이트 롤백 테스트\n- 카나리 배포 테스트\n- 기본 디플로이먼트 실행 후 스트레스 테스트 - cpu 500m, ram 500m 설정 시 nginx 성능 테스트\n- auto scaling 배포 후 스트레스 테스트 - 위의 디플로이먼트를 auto scaling 할 시 중단이 없는지 테스트\n- 쿠버네티스 성능 테스트\n  - 블로그 포스트 작성\n- 페일오버, 이중화 확인\n- Mlops 서버에 배포\n  - 모델 바꾸고 푸시하면 바로 업데이트 되도록\n- 고 gRPC 서버 배포\n  - 푸시하면 배포\n\n#### digital ocean 으로 쿠버네티스 구축\n필요한 정보\n- do api token\n- 스페이스를 만들어야 한다\n- s3 endpoint, region\n\ncompute instance가 droplet 이라는 명칭으로 되어있다. aws에서 ec2 인것처럼\nblock storage는 뭐지\n\nTLqkf space access key가 안맞다고 계속 에러난다\n- Tlqfk .terraform 에 데이터가 저장되어있어서 그랬다. 삭제 후 진행하니 된다\n\n테라폼 13 버전 위부터 provider 에서 required_provider로 바꿔야하고,\n14버전에서는 source=\"digitalocean/digitalocean\" 으로 설정해줘야 한다\n\n\nkubernetes를 DIY로 하는 것은 3노드를 사용하면 15$/month\nkubernetes 서비스를 제공하는 것을 사용하면 10$/month\n자체 쿠버네티스 서비스를 사용할 때 추가요금 내는게 없는지 확인해봐야겠다\n- 한 노드당 10$였다.. ㅋㅋ\n\nprovision file 에서 ssh key 퍼미션 400으로 바꿔줘야 한다\nansible에서 로컬 네트워크로 전달이 안된다\n- python interpreter 설정 해줘야 한다\n\n- [X] argocd 깔고,\n- [X] 모니터링 깔고,\n- [X] 로드밸런서 깔고,\n1. 모니터링으로 상태 확인 해야한다.\n2. 모니터링 서버는 로드밸런서로 접속 잘되게 설정한다\n3. argocd로 배포할 때 상태를 본다.\n\n마스터 서버를 hosts에 등록해놔야겠다\n로드밸런서를 cloud에서 생성 안해도 로드밸런서가 켜질까?\n\ngrafana를 구동하는데 리소스가 많이 든다\n- grafana가 문제가 아니라 k3s를 돌리는 것만으로도 0.9G 메모리를 먹었다.\n\ntraefik이 디폴트로 깔려있다.\n- dashboard를 쓰도록 configmap을 설정한다\n- scale을 0으로 했다가 1로 해서 리스타트한다.\n- port forwarding을 해주니까 로컬에서 localhost로 접속이 된다??\n    - kubectl port forwarding 은 입력하는 호스트를 인식해서 실행되나보다\n\ngrafana 올린거에 service를 찾아서 ingress 붙여주니까 잘 된다\n\n- traefik으로 name based routing을 하니까 접속은 되는데 사진은 못받아왔다\n    - grafana도 잘되는 걸로 봐서는 ingress가 단일 주소만 받아오는건 아닌듯\n- [X] digital ocean dns 세팅해서 휴대폰으로 접속 확인\n    - cloudflare 를 terraform으로 올려서 dns를 쓰도록 해야겠다\n\n- [ ] 상태 모니터링 알림 추가\n- [ ] 배포 시 상태 추적해서 오버로드 발생하면 바로 알림 오는지 확인\n- [ ] 알림 받으면 바로 롤백하는 것도 해본다\n\n내부 시스템은 내부적으로만 traefik으로 설정해놓으면 되겠다\ngrafana.system 정도로 /etc/hosts만 다 설정해주면 로컬용으로 쓸 수 있겠다\n\n- [ ] golang으로 api 서버 만들어서 telegram 보내는 것도 등록\n    - 추상화 잘 해서 telegram을 바로 slack으로 대체 할 수 있도록\n- [ ] jenkins 설치 후 pr 테스트\n\n#### 확장 가능한 최소한의 인프라\n3노드 쿠버네티스\n로드밸런서\n로그 수집\n모니터링\napi\nfeedback\nci/cd tool\n\n+ 사용하는 서비스\nkafka, redis, mongodb, hadoop, rdbms\n\n#### 개인 서버 구축\nIaac로 되어야 한다\n원할 때 접속, 배포가 쉽게 되어야 한다\n재구축이 바로 되어야 한다\n서버를 돌리고 있는데 서버가 지저분해져서 다시 쌓아올리고 싶을 때 원하는 상태로 바로 만들 수 있어야 한다\n    - vagrant kubernetes setting need too many time\n쿠버네티스 안에서 돌리고 에러 한눈에 확인 필요\n쿠버네티스는 어디서 돌리지? 일단 베이그런트로\n카오스 몽키가 로그 서버도 멈추게 할 수 있나?\n각 앱들을 쿠버네티스 파일로 만들고 IaaC가 되도록\n로컬, 클라우드 확인\n\n\n## Tool\nk3s\n- tool\n- service\n- infra\n\ntool\n- n8n\n- tailscale\n\nservice\n- note server - redis\n- wiki - postgres\n- searching - elasticsearch\n\ninfra\n- grafana\n- prometheus\n- traefik\n- argocd\n"},{"headings":[{"value":"노트를 왜 정리해야 하는가"},{"value":"다른 사람들의 방식"},{"value":"각 노트 앱들의 해결책"},{"value":"다른 사람들이 정리하는 방식들"},{"value":"삼정님"},{"value":"nacyot님"},{"value":"서울비님"},{"value":"기술인간님"},{"value":"엘리님"},{"value":"봉준호 감독님"},{"value":"에버노트"},{"value":"제텔카스텐"},{"value":"다른 영역에서 참고할 수 있는 방식들"},{"value":"물리적인 노트"},{"value":"WWW"},{"value":"내가 노트를 정리하고 있는 방식"},{"value":"개선해야 할 것"},{"value":"다음 해결해야 할 과제"},{"value":"노트 시스템"},{"value":"노트관리프로그램 비교"},{"value":"워크플로위처럼 불릿저널"},{"value":"업무일지를 아웃라이너로 써보자"},{"value":"위키 아쉬운 점"},{"value":"웹 기반 노트의 한계"},{"value":"Ideal Note"},{"value":"컨플루언스를 쓴다고 효율적인 노트가 되는게 아니고"},{"value":"make table, picture to attach document. which tool use?"},{"value":"마무리"},{"value":"여기서 다루지 못한 것들"}],"fields":{"slug":"/note_management/"},"rawMarkdownBody":"\n## 노트를 왜 정리해야 하는가\n메모를 적다 보면 양이 많이 늘게 되고, 이전에 썼던 노트를 찾는 것도 힘들뿐더러\n이전에 뭘 썼는지도 기억이 안 나는 경우가 많았습니다.\n\n노트를 잘 정리해서 나중에 써먹기도 해야 할 것이고,\n아는 내용을 기억해뒀다가 확장할 때도 기존의 노트에 더하는 것이 효과적일 것입니다.\n- 과거에 고민했던 것을 참고해서 그 고민 위에서 새로운 것을 생각하면 좋을 것이고,\n- 생각들을 연결해서 생각을 확장할 수 있을 것이고,\n- 공부한 것들을 정리하면서 효과적으로 머릿속에 정리해둘 수 있을 것이고,\n- 나중에 다시 찾아봐야 하는 경우 (다시 컴퓨터를 살 때 이전의 기준을 확인한다)\n- 이전 상황에 대한 기록을 돌아보면서 현재 상황에 힌트를 얻을 수 있기를 기대하고\n  노트를 적습니다\n\n계속 까먹고, 파편화된 메모들로는 원했던 결과를 얻기는 쉽지 않은 것 같습니다.\n북마크를 해놓아도 까먹고, 내가 직접 정리한 글도 까먹습니다.\n\n검색이나 태그로 원할 때 찾을 수는 있는데, 있는지도 모르는 경우가 왕왕 있습니다.\n검색해서 발견할 수 있는 것은 기본이고, 검색하지 않아도, 그 상황이 되면 어떤 것을\n참조하면 된다는 것을 알 수 있으려면 어떻게 해야 할지, 다른 사람들은 어떻게 하고\n있는지 알아보았습니다.\n\n\n## 다른 사람들의 방식\n어떤 툴을 사용하는지는 상관없이 메타적으로 어떤 접근법과 기능의 특색이 있는지만\n가져와서 자신의 플랫폼에 적용하면 될 것 같습니다.\n\n#### 각 노트 앱들의 해결책\n여러 노트앱들이 있고 간단하게 특징을 뽑아봤습니다.\n- 위키 류 - 링크와 백링크\n- 에버노트 - 여러 형태의 자료들을 한곳에 모을 수 있다.\n- 아웃라이너 류 - 구조화된 규격\n- 노션 - 관계형 데이터베이스를 내장하여 자료를 연결할 수 있다.\n- 제텔카스텐 류 (obsidian, zettel, roam research) - 그래프로 연결, 인덱싱, 플래시카드\n\n#### 다른 사람들이 정리하는 방식들\n##### 삼정님\n스스로 정리한 문서도 기억이 안 나지만 특히 북마크 해둔 것은 더 기억이 안 납니다.\n[클립 무용론](https://nmain.tistory.com/163) 에는 클립 해둬도 그 클립을 기억하지\n못하므로, 그 내용을 스스로 정리해야 한다고 잘 지적해 주었습니다. 하지만 스스로\n정리한다고 해도 시간이 지나면 기억이 안 납니다...\n\n##### nacyot님\n[nacyot님의 글](https://141.nacyot.com/posts/2019/serendipity-and-devonthink/) 에서는\n데본싱크라는 툴을 이용해서 연결을 자동으로 해주는 사례를 소개해주셔서 관심이 갔는데요.\n맥에서, 유료로 이용되는 앱이라는 점이 선뜻 접근하지 못하게 했지만, 데이터베이스\n안에서 연결을 만들어낸다는 방식은 잘 써먹을 수 있는 방식인 것 같습니다.\n\n##### 서울비님\n워크플로위를 주로 쓰시는 서울비님의 블로그에도 참고할 내용이\n많았습니다. [PARA 기법](https://seoulrain.net/2020/02/03/para-method/)에 대한\n소개도 인상 깊었는데요. 이 방식도 노트의 존재를 한 눈에 파악하는 부분에 대한\n정보는 아쉽게도 없었습니다.\n\n##### 기술인간님\n[유튜버 기술인간님이 베어를 쓰는 방식](https://www.youtube.com/watch?v=iwLbRqbkT38) 을 보면 데일리노트를\n기준으로 새 문서들을 만들고 태그를 일일이 작성해주는 부지런함을 볼 수 있습니다.\n여기서는 그날 했던 활동이나, 감정, 경험에 대한 평가를 통해 연결 요소를 늘려서\n노트에 대한 접근 가능성을 늘릴 수 있게 된 것 같습니다. 이를 통해 링크를 걸 뿐만\n아니라 여러 메타데이터를 추가하면 좀 더 문서를 재확인할 가능성이 커지겠다는\n것을 생각할 수 있었습니다.\n\n##### 엘리님\n[드림코딩의 엘리님](https://www.youtube.com/watch?v=T7y6Hl0YZ14)이 원노트의 기록\n리마인드한 부분도 인상깊었는데요. 현재 노션을 쓰시지만, 예전에 원노트에 썼던 기억에 남는\n글을 떠올리시고 영상에서 소개해주셨습니다. 인상 깊었던 순간에 대한 기록은 더욱\n기억하기 좋을 것 같습니다. 저도 기록을 남겨놓고, 내가 신입 때 했던 고민들을\n남겨놓고 매니저에게 원했던 것을 적어놓고, 나중에 내가 매니저가 됐을 때 그 기록을\n찾아보면 도움이 되겠다는 생각을 할 수 있었습니다. 상황에 따라 정리해놓는 것을 잘\n해놔야겠습니다.\n\n##### 봉준호 감독님\n봉준호 감독님은 한 작품을 준비하는 폴더를 따로 모아두었다가 그 작품을 안 하게\n되어 그 폴더를 묻어두었다고 합니다. 나중에 그 폴더를 한 번씩 꺼내 보실지,\n그 폴더 중에 일부가 다시 생각나서 꺼내게 될지, 아니면 무라카미 하루키식으로\n중요한 내용이면 다시 생각날 것이라 믿고 다시 그 폴더를 안 보실지 궁금하네요.\n\n그러고 보니 무라카미 하루키는 일일이 노트를 적기보다 머릿속에서 숙성을\n해놓았다가 소설을 쓰는 시기에 떠오르도록 한다고 합니다. 중요한 것이라면 떠오를\n것이고, 떠오르지 않는 것은 중요하지 않다고 쿨한 모습을 보여주어 순간 혹하기도\n했습니다.\n\n##### 에버노트\n에버노트 관련 책들은 여러 권 나와서 실제 사례들을 많이 소개해 주는데요.\n에버노트로 책 쓸 내용 모아서 쓰시는 분처럼 노트를 기반으로 책을 만들어 그 과정을\n통해 노트를 리마인드할 수 있겠다 싶었습니다.\n\n그 외에 [노션 템플릿](https://www.notion.so/Notion-Template-Gallery-181e961aeb5c4ee6915307c0dfd5156d) 과 메인 페이지로 관리하는 방식도 참고해볼 수 있고,\n[에버노트 블로그에도 참고자료](https://evernote.com/blog/ko/4-effective-strategies-to-organize-evernote/amp/)가\n있었습니다만, 방대한 컨텐츠 속에 인상 깊은 내용을 찾기가 힘들었습니다.\n\n##### 제텔카스텐\n![zettel](../img/zettel.png)\n출처: https://twitter.com/LuhmannArchiv/status/1114201165510713344\n제텔카스텐의 실물 사진\n\n제텔카스텐 실물 사진을 보니 물리적 종이를 인덱스를 활용해 연결한 것이 대단한 것\n같습니다.\n하나의 노트는 한 프로젝트에서 활용되고 끝나는 것이 아니라 계속 사용될 수 있겠다\n싶습니다. 메모를 잘게 쪼개서 오래된 것들을 다시 보게하는 방법이 아주\n인상깊습니다.\n\n그리고 저는 아직 못 본 책들인데 이런 책들도 있어서 확인해볼 수 있습니다.\n- Building a second brain\n- How to take smart note -> (한국어판) 제텔카스텐\n\n#### 다른 영역에서 참고할 수 있는 방식들\n노트 정리뿐 아니라 파일 관리, 코드 구조(MVC), 심지어 서비스 아키텍처도 분산화되는\n마이크로서비스 방식의 등장에 따라 마찬가지의 문제가 있는 것 같습니다.\n다른 분야에서는 어떻게 대응하는지, 다른 분들은 어떻게 정리를 하는지 보고\n참고하려 하고 있는데요.\n\n##### 물리적인 노트\n물리적 노트로 쓰고 책장에 잘 정리해두면 그 노트가 잘 남아있을 수 있겠고,\n위치에 대한 기억과 물리적 노트의 특징에 따라 감각적으로 기억할 수 있겠습니다.\n감각적인 느낌도 있어서 노트에 기억도 연계 될 수 있겠습니다.\n반면 물리적 노트의 문제는 한 노트에 잘 정리가 되는 것이 힘들다는 것이긴 합니다.\n이 노트에 썼다가 저 노트에 썼다가 하게 되고, 그러면 찾기도 힘들고, 떠올리기도\n힘들어져 버립니다.\n\n##### WWW\nWWW를 만든 팀 버너스 리는 자신의 연구소의 자료와 다른 연구소의 자료를 인터넷을\n통해 쉽게 공유하기를 원했고, 하이퍼링크로 문서 간 연결은 잘 되게 되었습니다.\n팀 버너스 리가 생각한 연구자료 공유가\n각 연구실의 컴퓨터에 자료를 올려놓고 접근하는 방식인지,\n논문검색사이트 정도의 공유 포털인지 잘 모르겠지만\n전자 쪽이라면 자유롭게 정보를 찾는 게 아니라 특정 연구실을 염두에 두고 찾아야 하는\n관문이 있고, 연락을 통해 자료를 공유하면 공유의 속도에도 한계가 있습니다.\n그렇다고 포털화가 되면 양이 많아지면 원하는 자료를 찾는 게 쉽지 않고, 존재 자체를\n모르게 되는 경우가 생깁니다. 논문도 그래서 피인용 수를 참고해서 무엇을 봐야 할지\n선택한다고 들었습니다.\n\n양이 많아지면 관리가 힘들어진다는 점에서 이 문제는 보편적이고 광범위한 문제가 됩니다.\n- 방송국 자료 아카이브\n- 100회 특집\n- 음악 앱들의 큐레이션\n- 도서관 큐레이션\n\n이렇게 과거의 기록들을 특정 시기에 특정 주제로 돌아보는 시간을 가지는 것이\n생각이 나는데요. 이 방식이 노트에서도 유용할 것 같습니다.\n\n여기까지 정리해보자면\n- PARA 기법을 통해 카테고리를 잡기\n- 태그를 이용해 접근 통로를 늘리기\n- 태그를 통해 주제별로 모은 후 재사용할 수 있게 만들기\n- 그리고 인덱싱을 다시 함으로써 만들어놓은 태그에 접근하는 통로 늘리기\n- 여기에 인상적인 기억을 남겨놓음으로써 지름길을 만들어놓기\n- 특정 시기에 특정 주제로 돌아보는 시간을 가지기\n\n반복적으로 플래시카드로 떠오르게 하는 것도 한 방법이겠지만, 노트의 구조가\n자체적으로 기존의 문서를 떠오를 수 있도록 하면 정말 좋을 것 같습니다.\n\n## 내가 노트를 정리하고 있는 방식\n지금까지의 내용과는 달리 아직 저 방식들을 제 노트에 거의 적용하지 않고 있습니다.\n\n그래도 소개해보자면 오타니의 만다라트에서 그 구체성이 인상 깊었습니다.\n9구단 드래프트 1위라는 목표를 세우고 8개의 능력을 키우기 위해 해야 할 8가지\n행동들을 구체적으로 적음으로써 정확히 무엇에 집중해야 할지 파악한다는 부분이 정말\n와닿았습니다.\n\n어차피 문서가 너무 많아지면 있는지 모른다는 점을 처음에 생각해서 저 만다라트\n안에 주제만 정하고 내용을 채워 넣으면 내용이 풍성해지고 전체를 파악할 수 있을 거라\n생각했습니다.\n\n제가 쓰는 도구를 소개하자면 [johngrib님의 글](https://johngrib.github.io/wiki/my-wiki/)을 참고해 vimwiki를 이용해서 markdown으로 글을 작성하고 있으며,\n\n매달 1일마다 문서를 만들어서 그 안에 날짜별로 노트를 적고, 한 번씩 미리 정해놓은\n카테고리에 붙이는 방식으로 글을 작성하면, 그달에 내가 무엇을 했는지 확인하면서,\n한 번씩 내용을 다시 볼 수 있으리라 생각했습니다.\n\n## 개선해야 할 것\n하지만 만다라트 안에서도 전체를 파악하기 힘들더라는 경험을 했습니다.\n\n현실에서는 양이 계속 늘어가는 문제를 계속 맞닥뜨릴 수밖에 없어서 노트에서도 이\n문제를 마주 해야 하지 않을까 하는 생각을 하고 있습니다. 정해진 규격 안에 구겨 넣는\n것은 현실에서는 잘 적용하기 힘들고, 그렇다면 지금 방식도 괜찮지만, 더 모험적인\n시도를 해야 하지 않을까 하는 고민이 있습니다.\n\n또 내 노트 작성으로 끝날 게 아니라 작은 노트를 모아서 아웃풋을 만들어낼 필요가\n있겠다는 생각이 들었습니다.\n\n그래서 지금의 방식 대신 문서를 작게 마이크로화하고 링크를 만드는 제텔카스텐\n방식으로 넘어갈지 고민하고 있습니다만, 이 방식도 몇 가지 걱정이 따라 옵니다.\n- 태그 안 된 문서를 찾아서 달도록 하는 건 쉽지만 태그가 이미 돼 있지만 더 달아야 하는걸 찾는 건 쉽지 않겠다.\n- 어디에도 속하기 애매한 것들은 어떻게 할까\n\n#### 다음 해결해야 할 과제\n- 다른 사람들의 좋은 방식을 빠르게 적용해보기\n- 인덱싱을 어떻게 해야 할지 알아보기\n- 작고 수많은 문서 속 필요한 정보를 바로 확인할 방법 찾기\n\n\n#### 노트 시스템\n\n용도에 따른 정리 - 일기, 정보, 업무일지\n시간에 따른 정리\n종류에 따른 정리 - 개발, 일상, 운동\n\n\n## 노트관리프로그램 비교\n\nOnenote\n- 단점\n\t- 단축키가 부족하다 (원하는 대로 설정이 안된다)\n\t- 글자가 씹힌다\n\t- 글꼴 추가가 안된다\n\t- 안예쁘다\n\t- 문서 이력\n\t- 마크다운\n\t- 외부에서 노트를 다루기가 힘들다\n\t- 에버노트는 구글 검색결과 옆에 노트 검색결과를 보여주는 확장 프로그램이 있다\n- 장점\n\t- 그리 무겁지 않다\n\t- 연동이 충분히 된다\n\t- 단축키가 그럭저럭 있다\n\t- 윈도우에서 기본앱으로 깔려있다\n\t- 검색이 잘 된다\n\t- 동기화 잘 안됨\n\t- header change shortcut: ctrl + alt + 숫자\n\t- 동기화 잘되고 빠른 노트 작성되는 거 찾아보기 -> 구글 킵\n\nNotion\n- 무겁다\n- 예쁘다\n- 내부 링크 기능이 있다\n- 카테고리화를 하기 좋다\n- 하나의 노트를 여러 형식으로 변환할 수 있다\n\nRoam Research [(Zettelkasten Method)](https://zettelkasten.de/posts/overview/)\n\nObsidian (BackLinking)\n\nGoogle keep\n- 오늘 할일 보기 힘들다\n- 투두 항목이 개수 추적이 힘들다. 그 날 몇개의 작업을 했는지 알고싶다.\n- cron으로 inbox 파일을 텔레그램으로 보내줘도 되겠다. 개수도 세서\n\n\nsuper productivity app has thought that todo list doing with timer\n\nvimwiki is good but doesn't have a timer\n\n\n#### 워크플로위처럼 불릿저널\n같은 내용을 링크해서 쓸 수 있는지 확인\n제일 필요한 건 책처럼 긴 글 쓸 때인데, 긴 글은 따로 링크하도록 하면 되려나...\n\n#### 업무일지를 아웃라이너로 써보자\n아웃라이너의 치명적인 단점이 긴 글을 쓸 때 집중하기 힘든 것과 마크다운으로 바로\n뽑히지 않는다는 것이었는데 업무일지는 이 부분에서는 자유로울 것 같다.\n블로그 포스트로 만들 수 있나\n\n#### 위키 아쉬운 점\n사진, 파일을 바로 연결 못하는 것.\n워크플로위는 긴 글을 쓰기에 예쁘진 않지만 외부에서 쓴 글을 링크시킬 수는 있다.\n- 링크는 위키도 가능한데, 워크플로위는 내부 첨부가 되나?\n\n#### 웹 기반 노트의 한계\n노션은 처음 로딩시간 때문에 답답함이 느껴진다\n오프라인일 때 노트 접근이 안된다\n\n#### Ideal Note\n- 검색 기능\n- 스크랩\n- 메모 분류\n- 태그\n- 가벼움\n- 동기화\n- 디자인\n- 위젯\n- 마크다운\n- 빅스비 버튼 클릭시 화면 꺼진상태에서 바로 켜지는 메모앱 만들기 - 삼성노트가능\n- 일일이 클릭하기 귀찮다\n- 알람을 하나의 서비스로 관리할 수 있나\n- 노트 간 연결이 되면 좋겠다\n- 글을 바로 블로그에 올릴 수 있어야 한다\n\n#### 컨플루언스를 쓴다고 효율적인 노트가 되는게 아니고\n마크다운 문서화가 좋긴 하지만\n각 문서가 관련있는 문서를 똑똑하게 링크해서 알려줄 수 있는 기술 등\n기술적인 도움을 적극 이용해야 한다\n\n#### make table, picture to attach document. which tool use?\npages\n\n\n## 마무리\n카테고리와 태그, 인덱싱, 리마인더 이 네 가지가 노트에서 중요한 요소인 것\n같습니다.\n\n모든 것을 기억할 수는 없겠습니다. 노트에 있는 것을 100% 못 쓸 수도 있습니다.\n하지만 최대한 활용할 방법을 찾기 위해 계속 고민해봐야겠습니다.\n\n#### 여기서 다루지 못한 것들\n- 봉준호 감독님이 노트 관리를 어떻게 하시는지\n- 팀 버너스 리의 WWW가 그가 원한 완벽한 구현체가 맞는지에 대한 정보\n- 논문 검색 시 사용하는 체계적 문헌 고찰에 대한 내용\n- 과학적 접근 방식. 이론적 조망, 이론적 근거\n- 방대하게 많은 양을 관리하는 방식\n- 모르는 것을 아는 방법\n"},{"headings":[{"value":"도쿄 국립 서양 미술관"}],"fields":{"slug":"/picasso/"},"rawMarkdownBody":"\n## 도쿄 국립 서양 미술관\n\n![도쿄 국립서양미술관](../img/national_museum.png)\n\n일본 여행에서 좋았던 순간 중 하나가 도쿄의 국립서양미술관을 갔을 때였다. 이 곳은 건축물 자체도 유명하고 교과서에서 보던 서양화를 전시하고 있는걸로도 유명한 곳이었다. 유명세만으로 기대를 하고 갔었는데 주제를 알아보지 않고 갔었다. 가보니 주제가 큐비즘이라는 처음듣는 단어였다. (알고보니 한국에서는 입체주의라는 용어로 쓰이고 있었다. 입체주의하면 피카소가 떠오르는 대중적인 용어였다.)\n\n![조르주 브라크 - 만돌린을 든 소녀](../img/braque.png)\n\n큐비즘이 뭔지도 모르는 채로 전시를 보는데 오디오 가이드를 들으면서 그림을 보는데 피카소의 그림이 있었는데 별로 대수롭지 않게 봤다. 근데 해설을 들어보니 근대의 인상파(고흐 등 그래도 사람이 알아볼만한 그림을 그리던 시기) 이후 하나의 큰 변화가 일어나면서 회화에 위기가 찾아왔고, 피카소와 함께 또 다른 친구(조르주 브라크)가 큐비즘이라는 새로운 시도로 위기를 넘어서려고 하는 순간이었고, 그래서 피카소 하면 생각나는 기괴한 그림이 그곳에 있었다.\n\n![사진기의 발명](../img/first_picture.png)\n\n위에서 말한 위기는 1800년대 후반에 발명된 사진기의 등장이고, 그림보다 정확하게 묘사할 수 있는 도구가 생기면서 그림의, 그림 그리는 사람의 존재가 불필요해질 수도 있었다. 그 시기에 피카소와 조르주 브라크가 함께 회화(그림)만이 표현 가능한 것을 찾으려 했고 큐브를 여러 개 그려서 대상을 표현하는 식으로 그림을 그리기 시작했다. 입체파라는 말보다 큐비즘이라는 말이 더 와닿기 시작했다.\n\n![피카소 - 우는 여인](../img/picasso_paint.png)\n\n그렇게 큐비즘이 어떤 식으로 점점 회화만이 할 수 있는 것을 하게 되는지 피카소의 생각 과정을 볼 수 있었다. 이걸 보면서 생각난 게 현 시점에 AI가 놀라운 성능을 보여주면서 개발자의 위기가 아닌가하는 이야기가 떠올랐다. (사실 모든 직군에서 위기로 느낄만하다.) 회화만이 할 수 있는 걸 찾으려고 한 피카소처럼 인간 개발자만이 할 수 있는 걸 찾아내는 개발자계의 피카소가 회사나 근처에서도 나올 수 있다.\n\n![AI가 만든 진주목걸이를 한 소녀 패러디](../img/dalle.png)\n\nAI 시대에 개발자의 역할을 찾는 것이, 사진기 발명 이후 회화(그림)의 역할을 찾는 과정을 보고 영감을 받고 참고 할 수 있겠다 싶다. 큐비즘 이후에, 그리고 현대에 이르기까지 현대미술은 어떻게 발전했고, 어떤 것을 그리고 있는지 관심을 갖고 참고를 하고 싶어졌다. (하지만 동시대의 현상을 파악하는 것은 역사를 파악하는 것보다 힘들 수도 있다..)\n\n![침착맨 영상에 나온 ai 분석 장면](../img/chim_ai.png)\n\nDall-E가 그림을 그려주지만 디자이너들은 화가들이 그랬던 것처럼 AI가 할 수 없는 것을 가장 빨리 찾을 수 있지 않을까 싶다. 그리고 Dall-E를 가장 잘 활용할 수 있는 것도 디자이너가 아닐까 싶다. 침착맨(이말년)이 인공지능이 그린 그림과 인간이 그린 그림을 구분할 때 항상 디테일을 확인해서 손모양이 이상하거나 하면 인공지능으로 정확히 포착해냈는데, 이런 디테일을 알고 수정할 수 있는게 디자이너이지 않을까 싶다. 개발에서도 마찬가지로 챗지피티가 써주는 코드 역시 개발자가 디테일하게 수정하기는 쉬울 것 같다.\n\n이미 개발자들도 개발자들의 역할에 대해 많은 의견을 나누고 있고, AI가 지금 당장 개발자를 대체 할 수 없을거라 보이지만, 늘 해오던 대로 해서는 AI가 머지않아 대체할 수 있을 것이고 (심지어 요구사항 정의와 설계까지도), 피카소가 회화만이 할 수 있는 것을 고민한 것처럼 개발자도 인간 개발자만이 할 수 있는 것을 회화를 통해 영감을 얻고 나아갈 길을 모색하면 좋을 것 같다. 현대판 피카소는 우리 주변에서 나올 수 있겠다. 기대된다.\n\n그리고 큐비즘이 어떤 방식으로 회화만이 표현 가능한 것을 찾아나갔는지 아직 잘 몰라서 사실 아직 어떤 길로 가야 할지 모르겠다. 큐비즘은 사실을 모방하기를 그치고 현실과 다르게 그림을 그렸지만, 개발은 예술적 감각보다는 현실에 닿아있어야 할 것 같은 부분도\n\n![르코르뷔지에](../img/lecorbigue.png)\n\n비고.\n놀랍게도 그 전시의 끝 부분에는 실용주의 건축가로 유명한 르코르뷔지에라는 건축가의 그림이 있었고 (이 박물관의 건축가이기도 한데 이걸 나중에 알고 소름돋았다) 큐비즘 이후에 다시 기능성을 중시하는 회화도 등장했다는 점은 AI를 극복한 이후의 인간에게도 또 발전할 미래가 있다는 것을 보여주는 것 같다.\n\n3줄요약\n\n1. 일본여행 갔다왔다\n2. 사진 발명 이후 피카소가 회화만이 할 수 있는 걸 고민한 것을 AI 시대 개발자만이 할 수 있는 걸 고민하는데 참고하자\n3. 개발계의 피카소는 누구나 될 수 있다.\n"}]}}}