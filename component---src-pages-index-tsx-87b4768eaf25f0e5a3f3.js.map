{"version":3,"file":"component---src-pages-index-tsx-87b4768eaf25f0e5a3f3.js","mappings":"0JAyEA,UAxCkBA,IAAgC,IAA/B,KAAEC,GAAuBD,EAC1C,MAAME,EAAYD,EAAKE,KAAKC,aAAaC,MACnCC,EAAQL,EAAKM,kBAAkBC,MAErC,OACEC,EAAAA,cAACC,EAAAA,EAAM,CAACL,MAAOH,GACbO,EAAAA,cAACE,EAAAA,EAAG,CAACN,MAAM,QACXI,EAAAA,cAAA,WACCH,EAAMM,IAAIC,IAAe,IAAd,KAAEC,GAAMD,EAClB,GAA+B,KAA3BC,EAAKC,YAAYV,MACnB,OAEF,MAAMA,EAAQS,EAAKC,YAAYV,OAASS,EAAKE,OAAOC,KAC9CC,EAAOJ,EAAKC,YAAYI,SAAWL,EAAKC,YAAYG,KACpDE,EAAWX,EAAAA,cAAAA,EAAAA,SAAA,KAAGK,EAAKO,WAAW,QACpC,OACEZ,EAAAA,cAAA,WAASa,IAAKR,EAAKE,OAAOC,KAAMM,UAAU,kBACxCd,EAAAA,cAAA,cACEA,EAAAA,cAACe,EAAAA,GAAI,CAACC,MAAO,CAAEC,UAAW,QAAUC,GAAIb,EAAKE,OAAOC,MACjDZ,GAEHI,EAAAA,cAAA,SAAOgB,MAAO,CAAEG,MAAO,SACpB,IAAI,KACFR,EAAS,IAAEF,IAGlBT,EAAAA,cAAA,eACEA,EAAAA,cAAA,OACEoB,wBAAyB,CACvBC,OAAQhB,EAAKC,YAAYgB,gB,yDClD3C,MAAMC,EAAMhC,IAAyC,IAAxC,YAAEiC,EAAW,KAAEC,EAAI,KAAEC,EAAI,MAAE9B,GAAOL,EAC7C,MAAM,KAAEG,IAASiC,EAAAA,EAAAA,IAAe,cAa1BC,EAAkBJ,GAAe9B,EAAKC,aAAa6B,YAEzD,OACExB,EAAAA,cAAC6B,EAAAA,EAAM,CACLC,eAAgB,CACdL,QAEF7B,MAAOA,EACPmC,cAAe,QAAQrC,EAAKC,aAAaC,QACzC8B,KAAM,CACJ,CACEM,KAAM,cACNC,QAASL,GAEX,CACEM,SAAU,WACVD,QAASrC,GAEX,CACEsC,SAAU,iBACVD,QAASL,GAEX,CACEM,SAAU,UACVD,QAAS,YAEXE,OAAOT,MAKfH,EAAIa,aAAe,CACjBX,KAAM,KACNC,KAAM,GACNF,YAAa,IAUf,K","sources":["webpack://sh-wiki/./src/pages/index.tsx","webpack://sh-wiki/./src/components/seo.js"],"sourcesContent":["// Gatsby supports TypeScript natively!\nimport React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype Data = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        excerpt: string\n        frontmatter: {\n          title: string\n          date: string\n          updated: string\n          tags: string\n          summary: string\n        }\n        timeToRead: number\n        fields: {\n          slug: string\n        }\n      }\n    }[]\n  }\n}\n\nconst BlogIndex = ({ data }: PageProps<Data>) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout title={siteTitle}>\n      <Seo title=\"Sam\" />\n      <br />\n      {posts.map(({ node }) => {\n        if (node.frontmatter.title === \"\") {\n          return\n        }\n        const title = node.frontmatter.title || node.fields.slug\n        const date = node.frontmatter.updated || node.frontmatter.date\n        const readTime = <>{node.timeToRead} min</>\n        return (\n          <article key={node.fields.slug} className=\"blog-post-item\">\n            <header>\n              <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                {title}\n              </Link>\n              <small style={{ color: \"#888\" }}>\n                {\" \"}\n                - {readTime} {date}\n              </small>\n            </header>\n            <section>\n              <div\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.summary,\n                }}\n              />\n            </section>\n          </article>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { frontmatter: { updated: DESC } }\n      filter: { frontmatter: { parent: { glob: \"Blogging\" } } }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY, MM, DD\")\n            updated(formatString: \"YYYY, MM, DD\")\n            title\n            summary\n            tags\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `kr`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"names":["_ref","data","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","React","Layout","Seo","map","_ref2","node","frontmatter","fields","slug","date","updated","readTime","timeToRead","key","className","Link","style","boxShadow","to","color","dangerouslySetInnerHTML","__html","summary","SEO","description","lang","meta","useStaticQuery","metaDescription","Helmet","htmlAttributes","titleTemplate","name","content","property","concat","defaultProps"],"sourceRoot":""}